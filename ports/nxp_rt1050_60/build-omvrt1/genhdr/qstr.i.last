# 1 "omv/py/py_sensor.c"
# 1 "/media/sf_D/RTOS_MW/mpyrt_omv/ports/nxp_rt1050_60//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "omv/py/py_sensor.c"
# 9 "omv/py/py_sensor.c"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 1 3 4
# 40 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 3 4

# 40 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 10 "omv/py/py_sensor.c" 2
# 1 "omv/py/mp.h" 1
# 11 "omv/py/mp.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 1 3
# 29 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 1 3
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 1 3
# 14 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_newlib_version.h" 1 3
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 2 3
# 16 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 1 3



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 5 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/features.h" 1 3
# 6 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 2 3
# 17 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 2 3
# 30 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 1 3
# 43 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 1 3
# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 103 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 200 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 44 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 2 3

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 216 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 46 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 2 3
# 36 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 149 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 328 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 37 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3
# 60 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 1 3
# 13 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 1 3
# 14 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 1 3
# 24 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_types.h" 1 3
# 25 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h" 1 3
# 33 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h" 3
struct __lock;
typedef struct __lock * _LOCK_T;






extern void __retarget_lock_init(_LOCK_T *lock);

extern void __retarget_lock_init_recursive(_LOCK_T *lock);

extern void __retarget_lock_close(_LOCK_T lock);

extern void __retarget_lock_close_recursive(_LOCK_T lock);

extern void __retarget_lock_acquire(_LOCK_T lock);

extern void __retarget_lock_acquire_recursive(_LOCK_T lock);

extern int __retarget_lock_try_acquire(_LOCK_T lock);

extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);


extern void __retarget_lock_release(_LOCK_T lock);

extern void __retarget_lock_release_recursive(_LOCK_T lock);
# 26 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 129 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef unsigned int __size_t;
# 145 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef signed int _ssize_t;
# 156 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 357 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 160 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;



typedef unsigned long __clock_t;


typedef long __time_t;


typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;


typedef __builtin_va_list __va_list;
# 16 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 38 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 117 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 181 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 319 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 569 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 766 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 61 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 1 3
# 28 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef int register_t;
# 62 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 63 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h" 1 3
# 20 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h" 3
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 65 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/endian.h" 1 3





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_endian.h" 1 3
# 7 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/endian.h" 2 3
# 68 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 1 3
# 25 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_sigset.h" 1 3
# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_sigset.h" 3
typedef unsigned long __sigset_t;
# 26 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 1 3
# 35 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 3
typedef __suseconds_t suseconds_t;




typedef long time_t;
# 52 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 3
struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};
# 27 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 1 3
# 38 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timespec.h" 1 3
# 45 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 2 3
# 58 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 28 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3



typedef __sigset_t sigset_t;
# 45 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3
typedef unsigned long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 71 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3


int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, struct timeval *__timeout)
                                                   ;

int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set)

                           ;



# 69 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3




typedef __uint32_t in_addr_t;




typedef __uint16_t in_port_t;
# 87 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;







typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;
# 135 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 173 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;
# 236 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __int64_t sbintime_t;


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_pthreadtypes.h" 1 3
# 240 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/types.h" 1 3
# 241 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 62 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3




typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/stdio.h" 1 3
# 80 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3
# 181 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
char * ctermid (char *);




FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *restrict, const char *restrict, FILE *restrict);
void setbuf (FILE *restrict, char *restrict);
int setvbuf (FILE *restrict, char *restrict, int, size_t);
int fprintf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *restrict, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *restrict, int, FILE *restrict);
int fputc (int, FILE *);
int fputs (const char *restrict, FILE *restrict);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite (const void * restrict , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *restrict, fpos_t *restrict);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *restrict _name, const char *restrict _type);
int sprintf (char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 257 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int snprintf (char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vsnprintf (char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vfscanf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsscanf (const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
# 284 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
# 339 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);


int pclose (FILE *);
FILE * popen (const char *, const char *);



void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);



int getw (FILE *);
int putw (int, FILE *);


int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 374 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int dprintf (int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *restrict, size_t, const char *restrict);


FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;



int renameat (int, const char *, int, const char *);






int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *restrict, int, FILE *restrict);
char * _fgets_unlocked_r (struct _reent *, char *restrict, int, FILE *restrict);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *restrict, size_t, const char *restrict);
FILE * _fopen_r (struct _reent *, const char *restrict, const char *restrict);
FILE * _freopen_r (struct _reent *, const char *restrict, const char *restrict, FILE *restrict);
int _fprintf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *restrict, FILE *restrict);
int _fputs_unlocked_r (struct _reent *, const char *restrict, FILE *restrict);
size_t _fread_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fread_unlocked_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
int _fscanf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fwrite_unlocked_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite_unlocked (const void * restrict , size_t _size, size_t _n, FILE *);
# 574 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 598 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
# 684 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
static __inline__ int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 767 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3

# 12 "omv/py/mp.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 1 3
# 17 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 18 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/xlocale.h" 1 3
# 9 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/xlocale.h" 3
struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3




void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * restrict, const void * restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);






char *strtok_r (char *restrict, const char *restrict, char **restrict);


int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);


void explicit_bzero (void *, size_t);
int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


int ffs (int);
char *index (const char *, int);


void * memccpy (void * restrict, const void * restrict, int, size_t);
# 86 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
char *rindex (const char *, int);


char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);


int strcasecmp (const char *, const char *);






char *strdup (const char *);

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t);

char *_strndup_r (struct _reent *, const char *, size_t);
# 121 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


int strncasecmp (const char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 192 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/string.h" 1 3
# 193 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3


# 13 "omv/py/mp.h" 2
# 1 "../../py/mpconfig.h" 1
# 45 "../../py/mpconfig.h"
# 1 "./mpconfigport.h" 1
# 30 "./mpconfigport.h"
       







# 1 "mcusdk/drivers/fsl_common.h" 1
# 38 "mcusdk/drivers/fsl_common.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 39 "mcusdk/drivers/fsl_common.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdbool.h" 1 3 4
# 40 "mcusdk/drivers/fsl_common.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 1 3 4
# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint-gcc.h" 1 3 4
# 34 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint-gcc.h" 3 4
typedef signed char int8_t;


typedef short int int16_t;


typedef long int int32_t;


typedef long long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef long unsigned int uint32_t;


typedef long long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef long int int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef long unsigned int uint_least32_t;
typedef long long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long long unsigned int uint_fast64_t;




typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
# 12 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 2 3 4
# 41 "mcusdk/drivers/fsl_common.h" 2

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 1 3
# 10 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 17 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/stdlib.h" 1 3
# 21 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/alloca.h" 1 3
# 23 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3
# 33 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3


typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar)



                                ;
void * calloc (size_t __nmemb, size_t __size) ;
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) ;
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size) ;
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *restrict, const char *restrict, size_t);
int _mbtowc_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *restrict, const char *restrict, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
size_t wcstombs (char *restrict, const wchar_t *restrict, size_t);
size_t _wcstombs_r (struct _reent *, char *restrict, const wchar_t *restrict, size_t, _mbstate_t *);


char * mkdtemp (char *);






int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void * realloc (void * __r, size_t __size) ;

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)))
     __attribute__((__alloc_size__(3)));
void * reallocf (void * __r, size_t __size);


char * realpath (const char *restrict path, char *restrict resolved_path);


int rpmatch (const char *response);




void srand (unsigned __seed);
double strtod (const char *restrict __n, char **restrict __end_PTR);
double _strtod_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR);

float strtof (const char *restrict __n, char **restrict __end_PTR);







long strtol (const char *restrict __n, char **restrict __end_PTR, int __base);
long _strtol_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long strtoul (const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
# 188 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void * __arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 221 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char *restrict __n, char **restrict __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long strtoull (const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int __attribute__((__nonnull__(1))) posix_memalign (void **, size_t, size_t);


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) ;
void * _calloc_r (struct _reent *, size_t, size_t) ;
void _free_r (struct _reent *, void *) ;
void * _realloc_r (struct _reent *, void *, size_t) ;
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 308 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
void qsort_r (void * __base, size_t __nmemb, size_t __size, void * __thunk, int (*_compar)(void *, const void *, const void *))
             __asm__ ("" "__bsd_qsort_r");
# 318 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *restrict, char **restrict);

extern long double strtold (const char *restrict, char **restrict);
# 335 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3

# 43 "mcusdk/drivers/fsl_common.h" 2





# 1 "mcusdk/fsl_device_registers.h" 1
# 51 "mcusdk/fsl_device_registers.h"
# 1 "mcusdk/MIMXRT1052.h" 1
# 94 "mcusdk/MIMXRT1052.h"

# 94 "mcusdk/MIMXRT1052.h"
typedef enum IRQn {

  NotAvail_IRQn = -128,


  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,


  DMA0_DMA16_IRQn = 0,
  DMA1_DMA17_IRQn = 1,
  DMA2_DMA18_IRQn = 2,
  DMA3_DMA19_IRQn = 3,
  DMA4_DMA20_IRQn = 4,
  DMA5_DMA21_IRQn = 5,
  DMA6_DMA22_IRQn = 6,
  DMA7_DMA23_IRQn = 7,
  DMA8_DMA24_IRQn = 8,
  DMA9_DMA25_IRQn = 9,
  DMA10_DMA26_IRQn = 10,
  DMA11_DMA27_IRQn = 11,
  DMA12_DMA28_IRQn = 12,
  DMA13_DMA29_IRQn = 13,
  DMA14_DMA30_IRQn = 14,
  DMA15_DMA31_IRQn = 15,
  DMA_ERROR_IRQn = 16,
  CTI0_ERROR_IRQn = 17,
  CTI1_ERROR_IRQn = 18,
  CORE_IRQn = 19,
  LPUART1_IRQn = 20,
  LPUART2_IRQn = 21,
  LPUART3_IRQn = 22,
  LPUART4_IRQn = 23,
  LPUART5_IRQn = 24,
  LPUART6_IRQn = 25,
  LPUART7_IRQn = 26,
  LPUART8_IRQn = 27,
  LPI2C1_IRQn = 28,
  LPI2C2_IRQn = 29,
  LPI2C3_IRQn = 30,
  LPI2C4_IRQn = 31,
  LPSPI1_IRQn = 32,
  LPSPI2_IRQn = 33,
  LPSPI3_IRQn = 34,
  LPSPI4_IRQn = 35,
  CAN1_IRQn = 36,
  CAN2_IRQn = 37,
  FLEXRAM_IRQn = 38,
  KPP_IRQn = 39,
  TSC_DIG_IRQn = 40,
  GPR_IRQ_IRQn = 41,
  LCDIF_IRQn = 42,
  CSI_IRQn = 43,
  PXP_IRQn = 44,
  WDOG2_IRQn = 45,
  SNVS_HP_WRAPPER_IRQn = 46,
  SNVS_HP_WRAPPER_TZ_IRQn = 47,
  SNVS_LP_WRAPPER_IRQn = 48,
  CSU_IRQn = 49,
  DCP_IRQn = 50,
  DCP_VMI_IRQn = 51,
  Reserved68_IRQn = 52,
  TRNG_IRQn = 53,
  SJC_IRQn = 54,
  BEE_IRQn = 55,
  SAI1_IRQn = 56,
  SAI2_IRQn = 57,
  SAI3_RX_IRQn = 58,
  SAI3_TX_IRQn = 59,
  SPDIF_IRQn = 60,
  ANATOP_EVENT0_IRQn = 61,
  ANATOP_EVENT1_IRQn = 62,
  ANATOP_TAMP_LOW_HIGH_IRQn = 63,
  ANATOP_TEMP_PANIC_IRQn = 64,
  USB_PHY1_IRQn = 65,
  USB_PHY2_IRQn = 66,
  ADC1_IRQn = 67,
  ADC2_IRQn = 68,
  DCDC_IRQn = 69,
  Reserved86_IRQn = 70,
  Reserved87_IRQn = 71,
  GPIO1_INT0_IRQn = 72,
  GPIO1_INT1_IRQn = 73,
  GPIO1_INT2_IRQn = 74,
  GPIO1_INT3_IRQn = 75,
  GPIO1_INT4_IRQn = 76,
  GPIO1_INT5_IRQn = 77,
  GPIO1_INT6_IRQn = 78,
  GPIO1_INT7_IRQn = 79,
  GPIO1_Combined_0_15_IRQn = 80,
  GPIO1_Combined_16_31_IRQn = 81,
  GPIO2_Combined_0_15_IRQn = 82,
  GPIO2_Combined_16_31_IRQn = 83,
  GPIO3_Combined_0_15_IRQn = 84,
  GPIO3_Combined_16_31_IRQn = 85,
  GPIO4_Combined_0_15_IRQn = 86,
  GPIO4_Combined_16_31_IRQn = 87,
  GPIO5_Combined_0_15_IRQn = 88,
  GPIO5_Combined_16_31_IRQn = 89,
  FLEXIO1_IRQn = 90,
  FLEXIO2_IRQn = 91,
  WDOG1_IRQn = 92,
  RTWDOG_IRQn = 93,
  EWM_IRQn = 94,
  CCM_1_IRQn = 95,
  CCM_2_IRQn = 96,
  GPC_IRQn = 97,
  SRC_IRQn = 98,
  Reserved115_IRQn = 99,
  GPT1_IRQn = 100,
  GPT2_IRQn = 101,
  PWM1_0_IRQn = 102,
  PWM1_1_IRQn = 103,
  PWM1_2_IRQn = 104,
  PWM1_3_IRQn = 105,
  PWM1_FAULT_IRQn = 106,
  Reserved123_IRQn = 107,
  FLEXSPI_IRQn = 108,
  SEMC_IRQn = 109,
  USDHC1_IRQn = 110,
  USDHC2_IRQn = 111,
  USB_OTG2_IRQn = 112,
  USB_OTG1_IRQn = 113,
  ENET_IRQn = 114,
  ENET_1588_Timer_IRQn = 115,
  XBAR1_IRQ_0_1_IRQn = 116,
  XBAR1_IRQ_2_3_IRQn = 117,
  ADC_ETC_IRQ0_IRQn = 118,
  ADC_ETC_IRQ1_IRQn = 119,
  ADC_ETC_IRQ2_IRQn = 120,
  ADC_ETC_ERROR_IRQ_IRQn = 121,
  PIT_IRQn = 122,
  ACMP1_IRQn = 123,
  ACMP2_IRQn = 124,
  ACMP3_IRQn = 125,
  ACMP4_IRQn = 126,
  Reserved143_IRQn = 127,
  Reserved144_IRQn = 128,
  ENC1_IRQn = 129,
  ENC2_IRQn = 130,
  ENC3_IRQn = 131,
  ENC4_IRQn = 132,
  TMR1_IRQn = 133,
  TMR2_IRQn = 134,
  TMR3_IRQn = 135,
  TMR4_IRQn = 136,
  PWM2_0_IRQn = 137,
  PWM2_1_IRQn = 138,
  PWM2_2_IRQn = 139,
  PWM2_3_IRQn = 140,
  PWM2_FAULT_IRQn = 141,
  PWM3_0_IRQn = 142,
  PWM3_1_IRQn = 143,
  PWM3_2_IRQn = 144,
  PWM3_3_IRQn = 145,
  PWM3_FAULT_IRQn = 146,
  PWM4_0_IRQn = 147,
  PWM4_1_IRQn = 148,
  PWM4_2_IRQn = 149,
  PWM4_3_IRQn = 150,
  PWM4_FAULT_IRQn = 151,
  Reserved168_IRQn = 152,
  Reserved169_IRQn = 153,
  Reserved170_IRQn = 154,
  Reserved171_IRQn = 155,
  Reserved172_IRQn = 156,
  Reserved173_IRQn = 157,
  SJC_ARM_DEBUG_IRQn = 158,
  NMI_WAKEUP_IRQn = 159
} IRQn_Type;
# 294 "mcusdk/MIMXRT1052.h"
# 1 "../../lib/cmsis/inc/core_cm7.h" 1
# 63 "../../lib/cmsis/inc/core_cm7.h"
# 1 "../../lib/cmsis/inc/cmsis_version.h" 1
# 64 "../../lib/cmsis/inc/core_cm7.h" 2
# 162 "../../lib/cmsis/inc/core_cm7.h"
# 1 "../../lib/cmsis/inc/cmsis_compiler.h" 1
# 48 "../../lib/cmsis/inc/cmsis_compiler.h"
# 1 "../../lib/cmsis/inc/cmsis_gcc.h" 1
# 29 "../../lib/cmsis/inc/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 68 "../../lib/cmsis/inc/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 126 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 178 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 202 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 274 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 298 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 328 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 379 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}
# 409 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 436 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 488 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 513 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 554 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 704 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{






  uint32_t result;

  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  return(result);




}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{






  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");




}
# 820 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 854 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 873 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 888 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __REVSH(int32_t value)
{

  return (short)__builtin_bswap16(value);






}
# 908 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 930 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 950 "../../lib/cmsis/inc/cmsis_gcc.h"
  return(result);
}
# 973 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 995 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 1017 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 1034 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1051 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1068 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1132 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 1147 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 1169 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 1191 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 1206 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1218 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1230 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1432 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1752 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 1965 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 49 "../../lib/cmsis/inc/cmsis_compiler.h" 2
# 163 "../../lib/cmsis/inc/core_cm7.h" 2
# 274 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 313 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 331 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 386 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 421 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RSERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 455 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHPR[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t ID_PFR[2U];
  volatile const uint32_t ID_DFR;
  volatile const uint32_t ID_AFR;
  volatile const uint32_t ID_MFR[4U];
  volatile const uint32_t ID_ISAR[5U];
        uint32_t RESERVED0[1U];
  volatile const uint32_t CLIDR;
  volatile const uint32_t CTR;
  volatile const uint32_t CCSIDR;
  volatile uint32_t CSSELR;
  volatile uint32_t CPACR;
        uint32_t RESERVED3[93U];
  volatile uint32_t STIR;
        uint32_t RESERVED4[15U];
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
        uint32_t RESERVED5[1U];
  volatile uint32_t ICIALLU;
        uint32_t RESERVED6[1U];
  volatile uint32_t ICIMVAU;
  volatile uint32_t DCIMVAC;
  volatile uint32_t DCISW;
  volatile uint32_t DCCMVAU;
  volatile uint32_t DCCMVAC;
  volatile uint32_t DCCSW;
  volatile uint32_t DCCIMVAC;
  volatile uint32_t DCCISW;
        uint32_t RESERVED7[6U];
  volatile uint32_t ITCMCR;
  volatile uint32_t DTCMCR;
  volatile uint32_t AHBPCR;
  volatile uint32_t CACR;
  volatile uint32_t AHBSCR;
        uint32_t RESERVED8[1U];
  volatile uint32_t ABFSR;
} SCB_Type;
# 921 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 961 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 1013 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[29U];
  volatile uint32_t IWR;
  volatile const uint32_t IRR;
  volatile uint32_t IMCR;
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 1116 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
        uint32_t RESERVED3[981U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
} DWT_Type;
# 1266 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1425 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1521 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1630 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1854 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1885 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1902 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1921 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1940 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1959 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1974 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1991 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 2013 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
}
# 2035 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 4)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 4)));
  }
}
# 2060 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 2087 "../../lib/cmsis/inc/core_cm7.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 2110 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;
}
# 2125 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return vectors[(int32_t)IRQn + 16];
}






static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}







# 1 "../../lib/cmsis/inc/mpu_armv7.h" 1
# 107 "../../lib/cmsis/inc/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  __DSB();
  __ISB();
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

}



static inline void ARM_MPU_Disable(void)
{
  __DSB();
  __ISB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void orderedCpy(volatile uint32_t* dst, const uint32_t* 
# 173 "../../lib/cmsis/inc/mpu_armv7.h" 3
                                                                       restrict 
# 173 "../../lib/cmsis/inc/mpu_armv7.h"
                                                                                  src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    orderedCpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  orderedCpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 2158 "../../lib/cmsis/inc/core_cm7.h" 2
# 2177 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x220U)
  {
    return 2U;
  }
  else if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2218 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_EnableICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR |= (uint32_t)(1UL << 17U);
    __DSB();
    __ISB();

}






static inline void SCB_DisableICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR &= ~(uint32_t)(1UL << 17U);
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();

}






static inline void SCB_InvalidateICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();

}






static inline void SCB_EnableDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);
    __DSB();

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR |= (uint32_t)(1UL << 16U);

    __DSB();
    __ISB();

}






static inline void SCB_DisableDCache (void)
{

    register uint32_t ccsidr;
    register uint32_t sets;
    register uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR &= ~(uint32_t)(1UL << 16U);
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                       ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_InvalidateDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_CleanDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
   __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCSW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_CleanInvalidateDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                       ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}
# 2453 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCIMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2480 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2507 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCIMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2553 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 4) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2583 "../../lib/cmsis/inc/core_cm7.h"
extern volatile int32_t ITM_RxBuffer;
# 2595 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2616 "../../lib/cmsis/inc/core_cm7.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2636 "../../lib/cmsis/inc/core_cm7.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 295 "mcusdk/MIMXRT1052.h" 2
# 1 "mcusdk/system_MIMXRT1052.h" 1
# 106 "mcusdk/system_MIMXRT1052.h"
extern uint32_t SystemCoreClock;
# 115 "mcusdk/system_MIMXRT1052.h"
void SystemInit (void);
# 124 "mcusdk/system_MIMXRT1052.h"
void SystemCoreClockUpdate (void);
# 296 "mcusdk/MIMXRT1052.h" 2
# 325 "mcusdk/MIMXRT1052.h"
typedef enum _dma_request_source
{
    kDmaRequestMuxFlexIO1Request0Request1 = 0|0x100U,
    kDmaRequestMuxFlexIO2Request0Request1 = 1|0x100U,
    kDmaRequestMuxLPUART1Tx = 2|0x100U,
    kDmaRequestMuxLPUART1Rx = 3|0x100U,
    kDmaRequestMuxLPUART3Tx = 4|0x100U,
    kDmaRequestMuxLPUART3Rx = 5|0x100U,
    kDmaRequestMuxLPUART5Tx = 6|0x100U,
    kDmaRequestMuxLPUART5Rx = 7|0x100U,
    kDmaRequestMuxLPUART7Tx = 8|0x100U,
    kDmaRequestMuxLPUART7Rx = 9|0x100U,
    kDmaRequestMuxCSI = 12|0x100U,
    kDmaRequestMuxLPSPI1Rx = 13|0x100U,
    kDmaRequestMuxLPSPI1Tx = 14|0x100U,
    kDmaRequestMuxLPSPI3Rx = 15|0x100U,
    kDmaRequestMuxLPSPI3Tx = 16|0x100U,
    kDmaRequestMuxLPI2C1 = 17|0x100U,
    kDmaRequestMuxLPI2C3 = 18|0x100U,
    kDmaRequestMuxSai1Rx = 19|0x100U,
    kDmaRequestMuxSai1Tx = 20|0x100U,
    kDmaRequestMuxSai2Rx = 21|0x100U,
    kDmaRequestMuxSai2Tx = 22|0x100U,
    kDmaRequestMuxADC_ETC = 23|0x100U,
    kDmaRequestMuxADC1 = 24|0x100U,
    kDmaRequestMuxACMP1 = 25|0x100U,
    kDmaRequestMuxACMP2 = 26|0x100U,
    kDmaRequestMuxFlexSPIRx = 28|0x100U,
    kDmaRequestMuxFlexSPITx = 29|0x100U,
    kDmaRequestMuxXBAR1Request0 = 30|0x100U,
    kDmaRequestMuxXBAR1Request1 = 31|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub0 = 32|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub1 = 33|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub2 = 34|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub3 = 35|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub0 = 36|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub1 = 37|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub2 = 38|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub3 = 39|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub0 = 40|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub1 = 41|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub2 = 42|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub3 = 43|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub0 = 44|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub1 = 45|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub2 = 46|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub3 = 47|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer0 = 48|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer1 = 49|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer2 = 50|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer3 = 51|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer0Cmpld2Timer1 = 52|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer1Cmpld2Timer0 = 53|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer2Cmpld2Timer3 = 54|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer3Cmpld2Timer2 = 55|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer0Cmpld1Timer0Cmpld2Timer1 = 56|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer1Cmpld1Timer0Cmpld2Timer1 = 57|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer2Cmpld1Timer0Cmpld2Timer1 = 58|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer3Cmpld1Timer0Cmpld2Timer1 = 59|0x100U,
    kDmaRequestMuxFlexIO1Request2Request3 = 64|0x100U,
    kDmaRequestMuxFlexIO2Request2Request3 = 65|0x100U,
    kDmaRequestMuxLPUART2Tx = 66|0x100U,
    kDmaRequestMuxLPUART2Rx = 67|0x100U,
    kDmaRequestMuxLPUART4Tx = 68|0x100U,
    kDmaRequestMuxLPUART4Rx = 69|0x100U,
    kDmaRequestMuxLPUART6Tx = 70|0x100U,
    kDmaRequestMuxLPUART6Rx = 71|0x100U,
    kDmaRequestMuxLPUART8Tx = 72|0x100U,
    kDmaRequestMuxLPUART8Rx = 73|0x100U,
    kDmaRequestMuxPxp = 75|0x100U,
    kDmaRequestMuxLCDIF = 76|0x100U,
    kDmaRequestMuxLPSPI2Rx = 77|0x100U,
    kDmaRequestMuxLPSPI2Tx = 78|0x100U,
    kDmaRequestMuxLPSPI4Rx = 79|0x100U,
    kDmaRequestMuxLPSPI4Tx = 80|0x100U,
    kDmaRequestMuxLPI2C2 = 81|0x100U,
    kDmaRequestMuxLPI2C4 = 82|0x100U,
    kDmaRequestMuxSai3Rx = 83|0x100U,
    kDmaRequestMuxSai3Tx = 84|0x100U,
    kDmaRequestMuxSpdifRx = 85|0x100U,
    kDmaRequestMuxSpdifTx = 86|0x100U,
    kDmaRequestMuxADC2 = 88|0x100U,
    kDmaRequestMuxACMP3 = 89|0x100U,
    kDmaRequestMuxACMP4 = 90|0x100U,
    kDmaRequestMuxEnetTimer0 = 92|0x100U,
    kDmaRequestMuxEnetTimer1 = 93|0x100U,
    kDmaRequestMuxXBAR1Request2 = 94|0x100U,
    kDmaRequestMuxXBAR1Request3 = 95|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub0 = 96|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub1 = 97|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub2 = 98|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub3 = 99|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub0 = 100|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub1 = 101|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub2 = 102|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub3 = 103|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub0 = 104|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub1 = 105|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub2 = 106|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub3 = 107|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub0 = 108|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub1 = 109|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub2 = 110|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub3 = 111|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer0 = 112|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer1 = 113|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer2 = 114|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer3 = 115|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer0Cmpld2Timer1 = 116|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer1Cmpld2Timer0 = 117|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer2Cmpld2Timer3 = 118|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer3Cmpld2Timer2 = 119|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer0Cmpld1Timer0Cmpld2Timer1 = 120|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer1Cmpld1Timer0Cmpld2Timer1 = 121|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer2Cmpld1Timer0Cmpld2Timer1 = 122|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer3Cmpld1Timer0Cmpld2Timer1 = 123|0x100U,
} dma_request_source_t;
# 456 "mcusdk/MIMXRT1052.h"
typedef enum _iomuxc_sw_mux_ctl_pad
{
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00 = 0U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01 = 1U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02 = 2U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03 = 3U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04 = 4U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05 = 5U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06 = 6U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07 = 7U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08 = 8U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09 = 9U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10 = 10U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11 = 11U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12 = 12U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13 = 13U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14 = 14U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15 = 15U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16 = 16U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17 = 17U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18 = 18U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19 = 19U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20 = 20U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21 = 21U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 22U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 23U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 24U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 25U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 26U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 27U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 28U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 29U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30 = 30U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31 = 31U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32 = 32U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33 = 33U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34 = 34U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35 = 35U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36 = 36U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37 = 37U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38 = 38U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39 = 39U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 40U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41 = 41U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00 = 42U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01 = 43U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 44U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03 = 45U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04 = 46U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05 = 47U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06 = 48U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07 = 49U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08 = 50U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09 = 51U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10 = 52U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11 = 53U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12 = 54U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13 = 55U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14 = 56U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15 = 57U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00 = 58U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01 = 59U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02 = 60U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03 = 61U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04 = 62U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05 = 63U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06 = 64U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07 = 65U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08 = 66U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09 = 67U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10 = 68U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11 = 69U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12 = 70U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13 = 71U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14 = 72U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15 = 73U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_00 = 74U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 75U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 76U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 77U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_04 = 78U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_05 = 79U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_06 = 80U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_07 = 81U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_08 = 82U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_09 = 83U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_10 = 84U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_11 = 85U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_12 = 86U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_13 = 87U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_14 = 88U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_15 = 89U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_00 = 90U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_01 = 91U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_02 = 92U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_03 = 93U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_04 = 94U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_05 = 95U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_06 = 96U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_07 = 97U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_08 = 98U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_09 = 99U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_10 = 100U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_11 = 101U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_12 = 102U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_13 = 103U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_14 = 104U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_15 = 105U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 106U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 107U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 108U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 109U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 110U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 111U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00 = 112U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01 = 113U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02 = 114U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03 = 115U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04 = 116U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05 = 117U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06 = 118U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07 = 119U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08 = 120U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09 = 121U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10 = 122U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11 = 123U,
} iomuxc_sw_mux_ctl_pad_t;
# 597 "mcusdk/MIMXRT1052.h"
typedef enum _iomuxc_sw_pad_ctl_pad
{
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00 = 0U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01 = 1U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02 = 2U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03 = 3U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04 = 4U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05 = 5U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06 = 6U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07 = 7U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08 = 8U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09 = 9U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10 = 10U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11 = 11U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12 = 12U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13 = 13U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14 = 14U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15 = 15U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16 = 16U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17 = 17U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18 = 18U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19 = 19U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20 = 20U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21 = 21U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 22U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 23U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 24U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 25U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 26U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 27U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 28U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 29U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30 = 30U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31 = 31U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32 = 32U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33 = 33U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34 = 34U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35 = 35U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36 = 36U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37 = 37U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38 = 38U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39 = 39U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 40U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41 = 41U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00 = 42U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01 = 43U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02 = 44U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03 = 45U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04 = 46U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05 = 47U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06 = 48U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07 = 49U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08 = 50U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09 = 51U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10 = 52U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11 = 53U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12 = 54U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13 = 55U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14 = 56U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15 = 57U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00 = 58U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01 = 59U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02 = 60U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03 = 61U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04 = 62U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05 = 63U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06 = 64U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07 = 65U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08 = 66U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09 = 67U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10 = 68U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11 = 69U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12 = 70U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13 = 71U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14 = 72U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15 = 73U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_00 = 74U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = 75U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = 76U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = 77U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_04 = 78U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_05 = 79U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_06 = 80U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_07 = 81U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_08 = 82U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_09 = 83U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_10 = 84U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_11 = 85U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_12 = 86U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_13 = 87U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_14 = 88U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_15 = 89U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_00 = 90U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_01 = 91U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_02 = 92U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_03 = 93U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_04 = 94U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_05 = 95U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_06 = 96U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_07 = 97U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_08 = 98U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_09 = 99U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_10 = 100U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_11 = 101U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_12 = 102U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_13 = 103U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_14 = 104U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_15 = 105U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = 106U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = 107U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = 108U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = 109U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = 110U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = 111U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00 = 112U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01 = 113U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02 = 114U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03 = 115U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04 = 116U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05 = 117U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06 = 118U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07 = 119U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08 = 120U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09 = 121U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10 = 122U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11 = 123U,
} iomuxc_sw_pad_ctl_pad_t;






typedef enum _iomuxc_select_input
{
    kIOMUXC_ANATOP_USB_OTG1_ID_SELECT_INPUT = 0U,
    kIOMUXC_ANATOP_USB_OTG2_ID_SELECT_INPUT = 1U,
    kIOMUXC_CCM_PMIC_READY_SELECT_INPUT = 2U,
    kIOMUXC_CSI_DATA02_SELECT_INPUT = 3U,
    kIOMUXC_CSI_DATA03_SELECT_INPUT = 4U,
    kIOMUXC_CSI_DATA04_SELECT_INPUT = 5U,
    kIOMUXC_CSI_DATA05_SELECT_INPUT = 6U,
    kIOMUXC_CSI_DATA06_SELECT_INPUT = 7U,
    kIOMUXC_CSI_DATA07_SELECT_INPUT = 8U,
    kIOMUXC_CSI_DATA08_SELECT_INPUT = 9U,
    kIOMUXC_CSI_DATA09_SELECT_INPUT = 10U,
    kIOMUXC_CSI_HSYNC_SELECT_INPUT = 11U,
    kIOMUXC_CSI_PIXCLK_SELECT_INPUT = 12U,
    kIOMUXC_CSI_VSYNC_SELECT_INPUT = 13U,
    kIOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT = 14U,
    kIOMUXC_ENET_MDIO_SELECT_INPUT = 15U,
    kIOMUXC_ENET0_RXDATA_SELECT_INPUT = 16U,
    kIOMUXC_ENET1_RXDATA_SELECT_INPUT = 17U,
    kIOMUXC_ENET_RXEN_SELECT_INPUT = 18U,
    kIOMUXC_ENET_RXERR_SELECT_INPUT = 19U,
    kIOMUXC_ENET0_TIMER_SELECT_INPUT = 20U,
    kIOMUXC_ENET_TXCLK_SELECT_INPUT = 21U,
    kIOMUXC_FLEXCAN1_RX_SELECT_INPUT = 22U,
    kIOMUXC_FLEXCAN2_RX_SELECT_INPUT = 23U,
    kIOMUXC_FLEXPWM1_PWMA3_SELECT_INPUT = 24U,
    kIOMUXC_FLEXPWM1_PWMA0_SELECT_INPUT = 25U,
    kIOMUXC_FLEXPWM1_PWMA1_SELECT_INPUT = 26U,
    kIOMUXC_FLEXPWM1_PWMA2_SELECT_INPUT = 27U,
    kIOMUXC_FLEXPWM1_PWMB3_SELECT_INPUT = 28U,
    kIOMUXC_FLEXPWM1_PWMB0_SELECT_INPUT = 29U,
    kIOMUXC_FLEXPWM1_PWMB1_SELECT_INPUT = 30U,
    kIOMUXC_FLEXPWM1_PWMB2_SELECT_INPUT = 31U,
    kIOMUXC_FLEXPWM2_PWMA3_SELECT_INPUT = 32U,
    kIOMUXC_FLEXPWM2_PWMA0_SELECT_INPUT = 33U,
    kIOMUXC_FLEXPWM2_PWMA1_SELECT_INPUT = 34U,
    kIOMUXC_FLEXPWM2_PWMA2_SELECT_INPUT = 35U,
    kIOMUXC_FLEXPWM2_PWMB3_SELECT_INPUT = 36U,
    kIOMUXC_FLEXPWM2_PWMB0_SELECT_INPUT = 37U,
    kIOMUXC_FLEXPWM2_PWMB1_SELECT_INPUT = 38U,
    kIOMUXC_FLEXPWM2_PWMB2_SELECT_INPUT = 39U,
    kIOMUXC_FLEXPWM4_PWMA0_SELECT_INPUT = 40U,
    kIOMUXC_FLEXPWM4_PWMA1_SELECT_INPUT = 41U,
    kIOMUXC_FLEXPWM4_PWMA2_SELECT_INPUT = 42U,
    kIOMUXC_FLEXPWM4_PWMA3_SELECT_INPUT = 43U,
    kIOMUXC_FLEXSPIA_DQS_SELECT_INPUT = 44U,
    kIOMUXC_FLEXSPIA_DATA0_SELECT_INPUT = 45U,
    kIOMUXC_FLEXSPIA_DATA1_SELECT_INPUT = 46U,
    kIOMUXC_FLEXSPIA_DATA2_SELECT_INPUT = 47U,
    kIOMUXC_FLEXSPIA_DATA3_SELECT_INPUT = 48U,
    kIOMUXC_FLEXSPIB_DATA0_SELECT_INPUT = 49U,
    kIOMUXC_FLEXSPIB_DATA1_SELECT_INPUT = 50U,
    kIOMUXC_FLEXSPIB_DATA2_SELECT_INPUT = 51U,
    kIOMUXC_FLEXSPIB_DATA3_SELECT_INPUT = 52U,
    kIOMUXC_FLEXSPIA_SCK_SELECT_INPUT = 53U,
    kIOMUXC_LPI2C1_SCL_SELECT_INPUT = 54U,
    kIOMUXC_LPI2C1_SDA_SELECT_INPUT = 55U,
    kIOMUXC_LPI2C2_SCL_SELECT_INPUT = 56U,
    kIOMUXC_LPI2C2_SDA_SELECT_INPUT = 57U,
    kIOMUXC_LPI2C3_SCL_SELECT_INPUT = 58U,
    kIOMUXC_LPI2C3_SDA_SELECT_INPUT = 59U,
    kIOMUXC_LPI2C4_SCL_SELECT_INPUT = 60U,
    kIOMUXC_LPI2C4_SDA_SELECT_INPUT = 61U,
    kIOMUXC_LPSPI1_PCS0_SELECT_INPUT = 62U,
    kIOMUXC_LPSPI1_SCK_SELECT_INPUT = 63U,
    kIOMUXC_LPSPI1_SDI_SELECT_INPUT = 64U,
    kIOMUXC_LPSPI1_SDO_SELECT_INPUT = 65U,
    kIOMUXC_LPSPI2_PCS0_SELECT_INPUT = 66U,
    kIOMUXC_LPSPI2_SCK_SELECT_INPUT = 67U,
    kIOMUXC_LPSPI2_SDI_SELECT_INPUT = 68U,
    kIOMUXC_LPSPI2_SDO_SELECT_INPUT = 69U,
    kIOMUXC_LPSPI3_PCS0_SELECT_INPUT = 70U,
    kIOMUXC_LPSPI3_SCK_SELECT_INPUT = 71U,
    kIOMUXC_LPSPI3_SDI_SELECT_INPUT = 72U,
    kIOMUXC_LPSPI3_SDO_SELECT_INPUT = 73U,
    kIOMUXC_LPSPI4_PCS0_SELECT_INPUT = 74U,
    kIOMUXC_LPSPI4_SCK_SELECT_INPUT = 75U,
    kIOMUXC_LPSPI4_SDI_SELECT_INPUT = 76U,
    kIOMUXC_LPSPI4_SDO_SELECT_INPUT = 77U,
    kIOMUXC_LPUART2_RX_SELECT_INPUT = 78U,
    kIOMUXC_LPUART2_TX_SELECT_INPUT = 79U,
    kIOMUXC_LPUART3_CTS_B_SELECT_INPUT = 80U,
    kIOMUXC_LPUART3_RX_SELECT_INPUT = 81U,
    kIOMUXC_LPUART3_TX_SELECT_INPUT = 82U,
    kIOMUXC_LPUART4_RX_SELECT_INPUT = 83U,
    kIOMUXC_LPUART4_TX_SELECT_INPUT = 84U,
    kIOMUXC_LPUART5_RX_SELECT_INPUT = 85U,
    kIOMUXC_LPUART5_TX_SELECT_INPUT = 86U,
    kIOMUXC_LPUART6_RX_SELECT_INPUT = 87U,
    kIOMUXC_LPUART6_TX_SELECT_INPUT = 88U,
    kIOMUXC_LPUART7_RX_SELECT_INPUT = 89U,
    kIOMUXC_LPUART7_TX_SELECT_INPUT = 90U,
    kIOMUXC_LPUART8_RX_SELECT_INPUT = 91U,
    kIOMUXC_LPUART8_TX_SELECT_INPUT = 92U,
    kIOMUXC_NMI_SELECT_INPUT = 93U,
    kIOMUXC_QTIMER2_TIMER0_SELECT_INPUT = 94U,
    kIOMUXC_QTIMER2_TIMER1_SELECT_INPUT = 95U,
    kIOMUXC_QTIMER2_TIMER2_SELECT_INPUT = 96U,
    kIOMUXC_QTIMER2_TIMER3_SELECT_INPUT = 97U,
    kIOMUXC_QTIMER3_TIMER0_SELECT_INPUT = 98U,
    kIOMUXC_QTIMER3_TIMER1_SELECT_INPUT = 99U,
    kIOMUXC_QTIMER3_TIMER2_SELECT_INPUT = 100U,
    kIOMUXC_QTIMER3_TIMER3_SELECT_INPUT = 101U,
    kIOMUXC_SAI1_MCLK2_SELECT_INPUT = 102U,
    kIOMUXC_SAI1_RX_BCLK_SELECT_INPUT = 103U,
    kIOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 104U,
    kIOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 105U,
    kIOMUXC_SAI1_RX_DATA2_SELECT_INPUT = 106U,
    kIOMUXC_SAI1_RX_DATA3_SELECT_INPUT = 107U,
    kIOMUXC_SAI1_RX_SYNC_SELECT_INPUT = 108U,
    kIOMUXC_SAI1_TX_BCLK_SELECT_INPUT = 109U,
    kIOMUXC_SAI1_TX_SYNC_SELECT_INPUT = 110U,
    kIOMUXC_SAI2_MCLK2_SELECT_INPUT = 111U,
    kIOMUXC_SAI2_RX_BCLK_SELECT_INPUT = 112U,
    kIOMUXC_SAI2_RX_DATA0_SELECT_INPUT = 113U,
    kIOMUXC_SAI2_RX_SYNC_SELECT_INPUT = 114U,
    kIOMUXC_SAI2_TX_BCLK_SELECT_INPUT = 115U,
    kIOMUXC_SAI2_TX_SYNC_SELECT_INPUT = 116U,
    kIOMUXC_SPDIF_IN_SELECT_INPUT = 117U,
    kIOMUXC_USB_OTG2_OC_SELECT_INPUT = 118U,
    kIOMUXC_USB_OTG1_OC_SELECT_INPUT = 119U,
    kIOMUXC_USDHC1_CD_B_SELECT_INPUT = 120U,
    kIOMUXC_USDHC1_WP_SELECT_INPUT = 121U,
    kIOMUXC_USDHC2_CLK_SELECT_INPUT = 122U,
    kIOMUXC_USDHC2_CD_B_SELECT_INPUT = 123U,
    kIOMUXC_USDHC2_CMD_SELECT_INPUT = 124U,
    kIOMUXC_USDHC2_DATA0_SELECT_INPUT = 125U,
    kIOMUXC_USDHC2_DATA1_SELECT_INPUT = 126U,
    kIOMUXC_USDHC2_DATA2_SELECT_INPUT = 127U,
    kIOMUXC_USDHC2_DATA3_SELECT_INPUT = 128U,
    kIOMUXC_USDHC2_DATA4_SELECT_INPUT = 129U,
    kIOMUXC_USDHC2_DATA5_SELECT_INPUT = 130U,
    kIOMUXC_USDHC2_DATA6_SELECT_INPUT = 131U,
    kIOMUXC_USDHC2_DATA7_SELECT_INPUT = 132U,
    kIOMUXC_USDHC2_WP_SELECT_INPUT = 133U,
    kIOMUXC_XBAR1_IN02_SELECT_INPUT = 134U,
    kIOMUXC_XBAR1_IN03_SELECT_INPUT = 135U,
    kIOMUXC_XBAR1_IN04_SELECT_INPUT = 136U,
    kIOMUXC_XBAR1_IN05_SELECT_INPUT = 137U,
    kIOMUXC_XBAR1_IN06_SELECT_INPUT = 138U,
    kIOMUXC_XBAR1_IN07_SELECT_INPUT = 139U,
    kIOMUXC_XBAR1_IN08_SELECT_INPUT = 140U,
    kIOMUXC_XBAR1_IN09_SELECT_INPUT = 141U,
    kIOMUXC_XBAR1_IN17_SELECT_INPUT = 142U,
    kIOMUXC_XBAR1_IN18_SELECT_INPUT = 143U,
    kIOMUXC_XBAR1_IN20_SELECT_INPUT = 144U,
    kIOMUXC_XBAR1_IN22_SELECT_INPUT = 145U,
    kIOMUXC_XBAR1_IN23_SELECT_INPUT = 146U,
    kIOMUXC_XBAR1_IN24_SELECT_INPUT = 147U,
    kIOMUXC_XBAR1_IN14_SELECT_INPUT = 148U,
    kIOMUXC_XBAR1_IN15_SELECT_INPUT = 149U,
    kIOMUXC_XBAR1_IN16_SELECT_INPUT = 150U,
    kIOMUXC_XBAR1_IN25_SELECT_INPUT = 151U,
    kIOMUXC_XBAR1_IN19_SELECT_INPUT = 152U,
    kIOMUXC_XBAR1_IN21_SELECT_INPUT = 153U,
} iomuxc_select_input_t;



typedef enum _xbar_input_signal
{
    kXBARA1_InputLogicLow = 0|0x100U,
    kXBARA1_InputLogicHigh = 1|0x100U,
    kXBARA1_InputIomuxXbarIn02 = 2|0x100U,
    kXBARA1_InputIomuxXbarIn03 = 3|0x100U,
    kXBARA1_InputIomuxXbarInout04 = 4|0x100U,
    kXBARA1_InputIomuxXbarInout05 = 5|0x100U,
    kXBARA1_InputIomuxXbarInout06 = 6|0x100U,
    kXBARA1_InputIomuxXbarInout07 = 7|0x100U,
    kXBARA1_InputIomuxXbarInout08 = 8|0x100U,
    kXBARA1_InputIomuxXbarInout09 = 9|0x100U,
    kXBARA1_InputIomuxXbarInout10 = 10|0x100U,
    kXBARA1_InputIomuxXbarInout11 = 11|0x100U,
    kXBARA1_InputIomuxXbarInout12 = 12|0x100U,
    kXBARA1_InputIomuxXbarInout13 = 13|0x100U,
    kXBARA1_InputIomuxXbarInout14 = 14|0x100U,
    kXBARA1_InputIomuxXbarInout15 = 15|0x100U,
    kXBARA1_InputIomuxXbarInout16 = 16|0x100U,
    kXBARA1_InputIomuxXbarInout17 = 17|0x100U,
    kXBARA1_InputIomuxXbarInout18 = 18|0x100U,
    kXBARA1_InputIomuxXbarInout19 = 19|0x100U,
    kXBARA1_InputIomuxXbarIn20 = 20|0x100U,
    kXBARA1_InputIomuxXbarIn21 = 21|0x100U,
    kXBARA1_InputIomuxXbarIn22 = 22|0x100U,
    kXBARA1_InputIomuxXbarIn23 = 23|0x100U,
    kXBARA1_InputIomuxXbarIn24 = 24|0x100U,
    kXBARA1_InputIomuxXbarIn25 = 25|0x100U,
    kXBARA1_InputAcmp1Out = 26|0x100U,
    kXBARA1_InputAcmp2Out = 27|0x100U,
    kXBARA1_InputAcmp3Out = 28|0x100U,
    kXBARA1_InputAcmp4Out = 29|0x100U,
    kXBARA1_InputRESERVED30 = 30|0x100U,
    kXBARA1_InputRESERVED31 = 31|0x100U,
    kXBARA1_InputQtimer3Tmr0Output = 32|0x100U,
    kXBARA1_InputQtimer3Tmr1Output = 33|0x100U,
    kXBARA1_InputQtimer3Tmr2Output = 34|0x100U,
    kXBARA1_InputQtimer3Tmr3Output = 35|0x100U,
    kXBARA1_InputQtimer4Tmr0Output = 36|0x100U,
    kXBARA1_InputQtimer4Tmr1Output = 37|0x100U,
    kXBARA1_InputQtimer4Tmr2Output = 38|0x100U,
    kXBARA1_InputQtimer4Tmr3Output = 39|0x100U,
    kXBARA1_InputFlexpwm1Pwm1OutTrig01 = 40|0x100U,
    kXBARA1_InputFlexpwm1Pwm2OutTrig01 = 41|0x100U,
    kXBARA1_InputFlexpwm1Pwm3OutTrig01 = 42|0x100U,
    kXBARA1_InputFlexpwm1Pwm4OutTrig01 = 43|0x100U,
    kXBARA1_InputFlexpwm2Pwm1OutTrig01 = 44|0x100U,
    kXBARA1_InputFlexpwm2Pwm2OutTrig01 = 45|0x100U,
    kXBARA1_InputFlexpwm2Pwm3OutTrig01 = 46|0x100U,
    kXBARA1_InputFlexpwm2Pwm4OutTrig01 = 47|0x100U,
    kXBARA1_InputFlexpwm3Pwm1OutTrig01 = 48|0x100U,
    kXBARA1_InputFlexpwm3Pwm2OutTrig01 = 49|0x100U,
    kXBARA1_InputFlexpwm3Pwm3OutTrig01 = 50|0x100U,
    kXBARA1_InputFlexpwm3Pwm4OutTrig01 = 51|0x100U,
    kXBARA1_InputFlexpwm4Pwm1OutTrig01 = 52|0x100U,
    kXBARA1_InputFlexpwm4Pwm2OutTrig01 = 53|0x100U,
    kXBARA1_InputFlexpwm4Pwm3OutTrig01 = 54|0x100U,
    kXBARA1_InputFlexpwm4Pwm4OutTrig01 = 55|0x100U,
    kXBARA1_InputPitTrigger0 = 56|0x100U,
    kXBARA1_InputPitTrigger1 = 57|0x100U,
    kXBARA1_InputPitTrigger2 = 58|0x100U,
    kXBARA1_InputPitTrigger3 = 59|0x100U,
    kXBARA1_InputEnc1PosMatch = 60|0x100U,
    kXBARA1_InputEnc2PosMatch = 61|0x100U,
    kXBARA1_InputEnc3PosMatch = 62|0x100U,
    kXBARA1_InputEnc4PosMatch = 63|0x100U,
    kXBARA1_InputDmaDone0 = 64|0x100U,
    kXBARA1_InputDmaDone1 = 65|0x100U,
    kXBARA1_InputDmaDone2 = 66|0x100U,
    kXBARA1_InputDmaDone3 = 67|0x100U,
    kXBARA1_InputDmaDone4 = 68|0x100U,
    kXBARA1_InputDmaDone5 = 69|0x100U,
    kXBARA1_InputDmaDone6 = 70|0x100U,
    kXBARA1_InputDmaDone7 = 71|0x100U,
    kXBARA1_InputAoi1Out0 = 72|0x100U,
    kXBARA1_InputAoi1Out1 = 73|0x100U,
    kXBARA1_InputAoi1Out2 = 74|0x100U,
    kXBARA1_InputAoi1Out3 = 75|0x100U,
    kXBARA1_InputAoi2Out0 = 76|0x100U,
    kXBARA1_InputAoi2Out1 = 77|0x100U,
    kXBARA1_InputAoi2Out2 = 78|0x100U,
    kXBARA1_InputAoi2Out3 = 79|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco0 = 80|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco1 = 81|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco2 = 82|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco3 = 83|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco0 = 84|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco1 = 85|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco2 = 86|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco3 = 87|0x100U,
    kXBARB2_InputLogicLow = 0|0x200U,
    kXBARB2_InputLogicHigh = 1|0x200U,
    kXBARB2_InputRESERVED2 = 2|0x200U,
    kXBARB2_InputRESERVED3 = 3|0x200U,
    kXBARB2_InputRESERVED4 = 4|0x200U,
    kXBARB2_InputRESERVED5 = 5|0x200U,
    kXBARB2_InputAcmp1Out = 6|0x200U,
    kXBARB2_InputAcmp2Out = 7|0x200U,
    kXBARB2_InputAcmp3Out = 8|0x200U,
    kXBARB2_InputAcmp4Out = 9|0x200U,
    kXBARB2_InputRESERVED10 = 10|0x200U,
    kXBARB2_InputRESERVED11 = 11|0x200U,
    kXBARB2_InputQtimer3Tmr0Output = 12|0x200U,
    kXBARB2_InputQtimer3Tmr1Output = 13|0x200U,
    kXBARB2_InputQtimer3Tmr2Output = 14|0x200U,
    kXBARB2_InputQtimer3Tmr3Output = 15|0x200U,
    kXBARB2_InputQtimer4Tmr0Output = 16|0x200U,
    kXBARB2_InputQtimer4Tmr1Output = 17|0x200U,
    kXBARB2_InputQtimer4Tmr2Output = 18|0x200U,
    kXBARB2_InputQtimer4Tmr3Output = 19|0x200U,
    kXBARB2_InputFlexpwm1Pwm1OutTrig01 = 20|0x200U,
    kXBARB2_InputFlexpwm1Pwm2OutTrig01 = 21|0x200U,
    kXBARB2_InputFlexpwm1Pwm3OutTrig01 = 22|0x200U,
    kXBARB2_InputFlexpwm1Pwm4OutTrig01 = 23|0x200U,
    kXBARB2_InputFlexpwm2Pwm1OutTrig01 = 24|0x200U,
    kXBARB2_InputFlexpwm2Pwm2OutTrig01 = 25|0x200U,
    kXBARB2_InputFlexpwm2Pwm3OutTrig01 = 26|0x200U,
    kXBARB2_InputFlexpwm2Pwm4OutTrig01 = 27|0x200U,
    kXBARB2_InputFlexpwm3Pwm1OutTrig01 = 28|0x200U,
    kXBARB2_InputFlexpwm3Pwm2OutTrig01 = 29|0x200U,
    kXBARB2_InputFlexpwm3Pwm3OutTrig01 = 30|0x200U,
    kXBARB2_InputFlexpwm3Pwm4OutTrig01 = 31|0x200U,
    kXBARB2_InputFlexpwm4Pwm1OutTrig01 = 32|0x200U,
    kXBARB2_InputFlexpwm4Pwm2OutTrig01 = 33|0x200U,
    kXBARB2_InputFlexpwm4Pwm3OutTrig01 = 34|0x200U,
    kXBARB2_InputFlexpwm4Pwm4OutTrig01 = 35|0x200U,
    kXBARB2_InputPitTrigger0 = 36|0x200U,
    kXBARB2_InputPitTrigger1 = 37|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco0 = 38|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco1 = 39|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco2 = 40|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco3 = 41|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco0 = 42|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco1 = 43|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco2 = 44|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco3 = 45|0x200U,
    kXBARB2_InputEnc1PosMatch = 46|0x200U,
    kXBARB2_InputEnc2PosMatch = 47|0x200U,
    kXBARB2_InputEnc3PosMatch = 48|0x200U,
    kXBARB2_InputEnc4PosMatch = 49|0x200U,
    kXBARB2_InputDmaDone0 = 50|0x200U,
    kXBARB2_InputDmaDone1 = 51|0x200U,
    kXBARB2_InputDmaDone2 = 52|0x200U,
    kXBARB2_InputDmaDone3 = 53|0x200U,
    kXBARB2_InputDmaDone4 = 54|0x200U,
    kXBARB2_InputDmaDone5 = 55|0x200U,
    kXBARB2_InputDmaDone6 = 56|0x200U,
    kXBARB2_InputDmaDone7 = 57|0x200U,
    kXBARB3_InputLogicLow = 0|0x300U,
    kXBARB3_InputLogicHigh = 1|0x300U,
    kXBARB3_InputRESERVED2 = 2|0x300U,
    kXBARB3_InputRESERVED3 = 3|0x300U,
    kXBARB3_InputRESERVED4 = 4|0x300U,
    kXBARB3_InputRESERVED5 = 5|0x300U,
    kXBARB3_InputAcmp1Out = 6|0x300U,
    kXBARB3_InputAcmp2Out = 7|0x300U,
    kXBARB3_InputAcmp3Out = 8|0x300U,
    kXBARB3_InputAcmp4Out = 9|0x300U,
    kXBARB3_InputRESERVED10 = 10|0x300U,
    kXBARB3_InputRESERVED11 = 11|0x300U,
    kXBARB3_InputQtimer3Tmr0Output = 12|0x300U,
    kXBARB3_InputQtimer3Tmr1Output = 13|0x300U,
    kXBARB3_InputQtimer3Tmr2Output = 14|0x300U,
    kXBARB3_InputQtimer3Tmr3Output = 15|0x300U,
    kXBARB3_InputQtimer4Tmr0Output = 16|0x300U,
    kXBARB3_InputQtimer4Tmr1Output = 17|0x300U,
    kXBARB3_InputQtimer4Tmr2Output = 18|0x300U,
    kXBARB3_InputQtimer4Tmr3Output = 19|0x300U,
    kXBARB3_InputFlexpwm1Pwm1OutTrig01 = 20|0x300U,
    kXBARB3_InputFlexpwm1Pwm2OutTrig01 = 21|0x300U,
    kXBARB3_InputFlexpwm1Pwm3OutTrig01 = 22|0x300U,
    kXBARB3_InputFlexpwm1Pwm4OutTrig01 = 23|0x300U,
    kXBARB3_InputFlexpwm2Pwm1OutTrig01 = 24|0x300U,
    kXBARB3_InputFlexpwm2Pwm2OutTrig01 = 25|0x300U,
    kXBARB3_InputFlexpwm2Pwm3OutTrig01 = 26|0x300U,
    kXBARB3_InputFlexpwm2Pwm4OutTrig01 = 27|0x300U,
    kXBARB3_InputFlexpwm3Pwm1OutTrig01 = 28|0x300U,
    kXBARB3_InputFlexpwm3Pwm2OutTrig01 = 29|0x300U,
    kXBARB3_InputFlexpwm3Pwm3OutTrig01 = 30|0x300U,
    kXBARB3_InputFlexpwm3Pwm4OutTrig01 = 31|0x300U,
    kXBARB3_InputFlexpwm4Pwm1OutTrig01 = 32|0x300U,
    kXBARB3_InputFlexpwm4Pwm2OutTrig01 = 33|0x300U,
    kXBARB3_InputFlexpwm4Pwm3OutTrig01 = 34|0x300U,
    kXBARB3_InputFlexpwm4Pwm4OutTrig01 = 35|0x300U,
    kXBARB3_InputPitTrigger0 = 36|0x300U,
    kXBARB3_InputPitTrigger1 = 37|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco0 = 38|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco1 = 39|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco2 = 40|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco3 = 41|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco0 = 42|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco1 = 43|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco2 = 44|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco3 = 45|0x300U,
    kXBARB3_InputEnc1PosMatch = 46|0x300U,
    kXBARB3_InputEnc2PosMatch = 47|0x300U,
    kXBARB3_InputEnc3PosMatch = 48|0x300U,
    kXBARB3_InputEnc4PosMatch = 49|0x300U,
    kXBARB3_InputDmaDone0 = 50|0x300U,
    kXBARB3_InputDmaDone1 = 51|0x300U,
    kXBARB3_InputDmaDone2 = 52|0x300U,
    kXBARB3_InputDmaDone3 = 53|0x300U,
    kXBARB3_InputDmaDone4 = 54|0x300U,
    kXBARB3_InputDmaDone5 = 55|0x300U,
    kXBARB3_InputDmaDone6 = 56|0x300U,
    kXBARB3_InputDmaDone7 = 57|0x300U,
} xbar_input_signal_t;

typedef enum _xbar_output_signal
{
    kXBARA1_OutputDmaChMuxReq30 = 0|0x100U,
    kXBARA1_OutputDmaChMuxReq31 = 1|0x100U,
    kXBARA1_OutputDmaChMuxReq94 = 2|0x100U,
    kXBARA1_OutputDmaChMuxReq95 = 3|0x100U,
    kXBARA1_OutputIomuxXbarInout04 = 4|0x100U,
    kXBARA1_OutputIomuxXbarInout05 = 5|0x100U,
    kXBARA1_OutputIomuxXbarInout06 = 6|0x100U,
    kXBARA1_OutputIomuxXbarInout07 = 7|0x100U,
    kXBARA1_OutputIomuxXbarInout08 = 8|0x100U,
    kXBARA1_OutputIomuxXbarInout09 = 9|0x100U,
    kXBARA1_OutputIomuxXbarInout10 = 10|0x100U,
    kXBARA1_OutputIomuxXbarInout11 = 11|0x100U,
    kXBARA1_OutputIomuxXbarInout12 = 12|0x100U,
    kXBARA1_OutputIomuxXbarInout13 = 13|0x100U,
    kXBARA1_OutputIomuxXbarInout14 = 14|0x100U,
    kXBARA1_OutputIomuxXbarInout15 = 15|0x100U,
    kXBARA1_OutputIomuxXbarInout16 = 16|0x100U,
    kXBARA1_OutputIomuxXbarInout17 = 17|0x100U,
    kXBARA1_OutputIomuxXbarInout18 = 18|0x100U,
    kXBARA1_OutputIomuxXbarInout19 = 19|0x100U,
    kXBARA1_OutputAcmp1Sample = 20|0x100U,
    kXBARA1_OutputAcmp2Sample = 21|0x100U,
    kXBARA1_OutputAcmp3Sample = 22|0x100U,
    kXBARA1_OutputAcmp4Sample = 23|0x100U,
    kXBARA1_OutputRESERVED24 = 24|0x100U,
    kXBARA1_OutputRESERVED25 = 25|0x100U,
    kXBARA1_OutputFlexpwm1Exta0 = 26|0x100U,
    kXBARA1_OutputFlexpwm1Exta1 = 27|0x100U,
    kXBARA1_OutputFlexpwm1Exta2 = 28|0x100U,
    kXBARA1_OutputFlexpwm1Exta3 = 29|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync0 = 30|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync1 = 31|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync2 = 32|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync3 = 33|0x100U,
    kXBARA1_OutputFlexpwm1ExtClk = 34|0x100U,
    kXBARA1_OutputFlexpwm1Fault0 = 35|0x100U,
    kXBARA1_OutputFlexpwm1Fault1 = 36|0x100U,
    kXBARA1_OutputFlexpwm1234Fault2 = 37|0x100U,
    kXBARA1_OutputFlexpwm1234Fault3 = 38|0x100U,
    kXBARA1_OutputFlexpwm1ExtForce = 39|0x100U,
    kXBARA1_OutputFlexpwm234Exta0 = 40|0x100U,
    kXBARA1_OutputFlexpwm234Exta1 = 41|0x100U,
    kXBARA1_OutputFlexpwm234Exta2 = 42|0x100U,
    kXBARA1_OutputFlexpwm234Exta3 = 43|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync0 = 44|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync1 = 45|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync2 = 46|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync3 = 47|0x100U,
    kXBARA1_OutputFlexpwm234ExtClk = 48|0x100U,
    kXBARA1_OutputFlexpwm2Fault0 = 49|0x100U,
    kXBARA1_OutputFlexpwm2Fault1 = 50|0x100U,
    kXBARA1_OutputFlexpwm2ExtForce = 51|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync0 = 52|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync1 = 53|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync2 = 54|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync3 = 55|0x100U,
    kXBARA1_OutputFlexpwm3Fault0 = 56|0x100U,
    kXBARA1_OutputFlexpwm3Fault1 = 57|0x100U,
    kXBARA1_OutputFlexpwm3ExtForce = 58|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync0 = 59|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync1 = 60|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync2 = 61|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync3 = 62|0x100U,
    kXBARA1_OutputFlexpwm4Fault0 = 63|0x100U,
    kXBARA1_OutputFlexpwm4Fault1 = 64|0x100U,
    kXBARA1_OutputFlexpwm4ExtForce = 65|0x100U,
    kXBARA1_OutputEnc1PhaseAInput = 66|0x100U,
    kXBARA1_OutputEnc1PhaseBInput = 67|0x100U,
    kXBARA1_OutputEnc1Index = 68|0x100U,
    kXBARA1_OutputEnc1Home = 69|0x100U,
    kXBARA1_OutputEnc1Trigger = 70|0x100U,
    kXBARA1_OutputEnc2PhaseAInput = 71|0x100U,
    kXBARA1_OutputEnc2PhaseBInput = 72|0x100U,
    kXBARA1_OutputEnc2Index = 73|0x100U,
    kXBARA1_OutputEnc2Home = 74|0x100U,
    kXBARA1_OutputEnc2Trigger = 75|0x100U,
    kXBARA1_OutputEnc3PhaseAInput = 76|0x100U,
    kXBARA1_OutputEnc3PhaseBInput = 77|0x100U,
    kXBARA1_OutputEnc3Index = 78|0x100U,
    kXBARA1_OutputEnc3Home = 79|0x100U,
    kXBARA1_OutputEnc3Trigger = 80|0x100U,
    kXBARA1_OutputEnc4PhaseAInput = 81|0x100U,
    kXBARA1_OutputEnc4PhaseBInput = 82|0x100U,
    kXBARA1_OutputEnc4Index = 83|0x100U,
    kXBARA1_OutputEnc4Home = 84|0x100U,
    kXBARA1_OutputEnc4Trigger = 85|0x100U,
    kXBARA1_OutputQtimer1Tmr0Input = 86|0x100U,
    kXBARA1_OutputQtimer1Tmr1Input = 87|0x100U,
    kXBARA1_OutputQtimer1Tmr2Input = 88|0x100U,
    kXBARA1_OutputQtimer1Tmr3Input = 89|0x100U,
    kXBARA1_OutputQtimer2Tmr0Input = 90|0x100U,
    kXBARA1_OutputQtimer2Tmr1Input = 91|0x100U,
    kXBARA1_OutputQtimer2Tmr2Input = 92|0x100U,
    kXBARA1_OutputQtimer2Tmr3Input = 93|0x100U,
    kXBARA1_OutputQtimer3Tmr0Input = 94|0x100U,
    kXBARA1_OutputQtimer3Tmr1Input = 95|0x100U,
    kXBARA1_OutputQtimer3Tmr2Input = 96|0x100U,
    kXBARA1_OutputQtimer3Tmr3Input = 97|0x100U,
    kXBARA1_OutputQtimer4Tmr0Input = 98|0x100U,
    kXBARA1_OutputQtimer4Tmr1Input = 99|0x100U,
    kXBARA1_OutputQtimer4Tmr2Input = 100|0x100U,
    kXBARA1_OutputQtimer4Tmr3Input = 101|0x100U,
    kXBARA1_OutputEwmEwmIn = 102|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig0 = 103|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig1 = 104|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig2 = 105|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig3 = 106|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig0 = 107|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig1 = 108|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig2 = 109|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig3 = 110|0x100U,
    kXBARA1_OutputLpi2c1TrgInput = 111|0x100U,
    kXBARA1_OutputLpi2c2TrgInput = 112|0x100U,
    kXBARA1_OutputLpi2c3TrgInput = 113|0x100U,
    kXBARA1_OutputLpi2c4TrgInput = 114|0x100U,
    kXBARA1_OutputLpspi1TrgInput = 115|0x100U,
    kXBARA1_OutputLpspi2TrgInput = 116|0x100U,
    kXBARA1_OutputLpspi3TrgInput = 117|0x100U,
    kXBARA1_OutputLpspi4TrgInput = 118|0x100U,
    kXBARA1_OutputLpuart1TrgInput = 119|0x100U,
    kXBARA1_OutputLpuart2TrgInput = 120|0x100U,
    kXBARA1_OutputLpuart3TrgInput = 121|0x100U,
    kXBARA1_OutputLpuart4TrgInput = 122|0x100U,
    kXBARA1_OutputLpuart5TrgInput = 123|0x100U,
    kXBARA1_OutputLpuart6TrgInput = 124|0x100U,
    kXBARA1_OutputLpuart7TrgInput = 125|0x100U,
    kXBARA1_OutputLpuart8TrgInput = 126|0x100U,
    kXBARA1_OutputFlexio1TriggerIn0 = 127|0x100U,
    kXBARA1_OutputFlexio1TriggerIn1 = 128|0x100U,
    kXBARA1_OutputFlexio2TriggerIn0 = 129|0x100U,
    kXBARA1_OutputFlexio2TriggerIn1 = 130|0x100U,
    kXBARB2_OutputAoi1In00 = 0|0x200U,
    kXBARB2_OutputAoi1In01 = 1|0x200U,
    kXBARB2_OutputAoi1In02 = 2|0x200U,
    kXBARB2_OutputAoi1In03 = 3|0x200U,
    kXBARB2_OutputAoi1In04 = 4|0x200U,
    kXBARB2_OutputAoi1In05 = 5|0x200U,
    kXBARB2_OutputAoi1In06 = 6|0x200U,
    kXBARB2_OutputAoi1In07 = 7|0x200U,
    kXBARB2_OutputAoi1In08 = 8|0x200U,
    kXBARB2_OutputAoi1In09 = 9|0x200U,
    kXBARB2_OutputAoi1In10 = 10|0x200U,
    kXBARB2_OutputAoi1In11 = 11|0x200U,
    kXBARB2_OutputAoi1In12 = 12|0x200U,
    kXBARB2_OutputAoi1In13 = 13|0x200U,
    kXBARB2_OutputAoi1In14 = 14|0x200U,
    kXBARB2_OutputAoi1In15 = 15|0x200U,
    kXBARB3_OutputAoi2In00 = 0|0x300U,
    kXBARB3_OutputAoi2In01 = 1|0x300U,
    kXBARB3_OutputAoi2In02 = 2|0x300U,
    kXBARB3_OutputAoi2In03 = 3|0x300U,
    kXBARB3_OutputAoi2In04 = 4|0x300U,
    kXBARB3_OutputAoi2In05 = 5|0x300U,
    kXBARB3_OutputAoi2In06 = 6|0x300U,
    kXBARB3_OutputAoi2In07 = 7|0x300U,
    kXBARB3_OutputAoi2In08 = 8|0x300U,
    kXBARB3_OutputAoi2In09 = 9|0x300U,
    kXBARB3_OutputAoi2In10 = 10|0x300U,
    kXBARB3_OutputAoi2In11 = 11|0x300U,
    kXBARB3_OutputAoi2In12 = 12|0x300U,
    kXBARB3_OutputAoi2In13 = 13|0x300U,
    kXBARB3_OutputAoi2In14 = 14|0x300U,
    kXBARB3_OutputAoi2In15 = 15|0x300U,
} xbar_output_signal_t;
# 1313 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t HC[8];
  volatile const uint32_t HS;
  volatile const uint32_t R[8];
  volatile uint32_t CFG;
  volatile uint32_t GC;
  volatile uint32_t GS;
  volatile uint32_t CV;
  volatile uint32_t OFS;
  volatile uint32_t CAL;
} ADC_Type;
# 1488 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t DONE0_1_IRQ;
  volatile uint32_t DONE2_ERR_IRQ;
  volatile uint32_t DMA_CTRL;
  struct {
    volatile uint32_t TRIGn_CTRL;
    volatile uint32_t TRIGn_COUNTER;
    volatile uint32_t TRIGn_CHAIN_1_0;
    volatile uint32_t TRIGn_CHAIN_3_2;
    volatile uint32_t TRIGn_CHAIN_5_4;
    volatile uint32_t TRIGn_CHAIN_7_6;
    volatile const uint32_t TRIGn_RESULT_1_0;
    volatile const uint32_t TRIGn_RESULT_3_2;
    volatile const uint32_t TRIGn_RESULT_5_4;
    volatile const uint32_t TRIGn_RESULT_7_6;
  } TRIG[8];
} ADC_ETC_Type;
# 1920 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MPR;
       uint8_t RESERVED_0[60];
  volatile uint32_t OPACR;
  volatile uint32_t OPACR1;
  volatile uint32_t OPACR2;
  volatile uint32_t OPACR3;
  volatile uint32_t OPACR4;
} AIPSTZ_Type;
# 2111 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile uint16_t BFCRT01;
    volatile uint16_t BFCRT23;
  } BFCRT[4];
} AOI_Type;
# 2220 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t ADDR_OFFSET0;
  volatile uint32_t ADDR_OFFSET1;
  volatile uint32_t AES_KEY0_W0;
  volatile uint32_t AES_KEY0_W1;
  volatile uint32_t AES_KEY0_W2;
  volatile uint32_t AES_KEY0_W3;
  volatile uint32_t STATUS;
  volatile uint32_t CTR_NONCE0_W0;
  volatile uint32_t CTR_NONCE0_W1;
  volatile uint32_t CTR_NONCE0_W2;
  volatile uint32_t CTR_NONCE0_W3;
  volatile uint32_t CTR_NONCE1_W0;
  volatile uint32_t CTR_NONCE1_W1;
  volatile uint32_t CTR_NONCE1_W2;
  volatile uint32_t CTR_NONCE1_W3;
  volatile uint32_t REGION1_TOP;
  volatile uint32_t REGION1_BOT;
} BEE_Type;
# 2452 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
  volatile uint32_t CTRL1;
  volatile uint32_t TIMER;
       uint8_t RESERVED_0[4];
  volatile uint32_t RXMGMASK;
  volatile uint32_t RX14MASK;
  volatile uint32_t RX15MASK;
  volatile uint32_t ECR;
  volatile uint32_t ESR1;
  volatile uint32_t IMASK2;
  volatile uint32_t IMASK1;
  volatile uint32_t IFLAG2;
  volatile uint32_t IFLAG1;
  volatile uint32_t CTRL2;
  volatile const uint32_t ESR2;
       uint8_t RESERVED_1[8];
  volatile const uint32_t CRCR;
  volatile uint32_t RXFGMASK;
  volatile const uint32_t RXFIR;
       uint8_t RESERVED_2[48];
  struct {
    volatile uint32_t CS;
    volatile uint32_t ID;
    volatile uint32_t WORD0;
    volatile uint32_t WORD1;
  } MB[64];
       uint8_t RESERVED_3[1024];
  volatile uint32_t RXIMR[64];
       uint8_t RESERVED_4[96];
  volatile uint32_t GFWR;
} CAN_Type;
# 2899 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CCR;
       uint8_t RESERVED_0[4];
  volatile const uint32_t CSR;
  volatile uint32_t CCSR;
  volatile uint32_t CACRR;
  volatile uint32_t CBCDR;
  volatile uint32_t CBCMR;
  volatile uint32_t CSCMR1;
  volatile uint32_t CSCMR2;
  volatile uint32_t CSCDR1;
  volatile uint32_t CS1CDR;
  volatile uint32_t CS2CDR;
  volatile uint32_t CDCDR;
       uint8_t RESERVED_1[4];
  volatile uint32_t CSCDR2;
  volatile uint32_t CSCDR3;
       uint8_t RESERVED_2[8];
  volatile const uint32_t CDHIPR;
       uint8_t RESERVED_3[8];
  volatile uint32_t CLPCR;
  volatile uint32_t CISR;
  volatile uint32_t CIMR;
  volatile uint32_t CCOSR;
  volatile uint32_t CGPR;
  volatile uint32_t CCGR0;
  volatile uint32_t CCGR1;
  volatile uint32_t CCGR2;
  volatile uint32_t CCGR3;
  volatile uint32_t CCGR4;
  volatile uint32_t CCGR5;
  volatile uint32_t CCGR6;
       uint8_t RESERVED_4[4];
  volatile uint32_t CMEOR;
} CCM_Type;
# 3696 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t PLL_ARM;
  volatile uint32_t PLL_ARM_SET;
  volatile uint32_t PLL_ARM_CLR;
  volatile uint32_t PLL_ARM_TOG;
  volatile uint32_t PLL_USB1;
  volatile uint32_t PLL_USB1_SET;
  volatile uint32_t PLL_USB1_CLR;
  volatile uint32_t PLL_USB1_TOG;
  volatile uint32_t PLL_USB2;
  volatile uint32_t PLL_USB2_SET;
  volatile uint32_t PLL_USB2_CLR;
  volatile uint32_t PLL_USB2_TOG;
  volatile uint32_t PLL_SYS;
  volatile uint32_t PLL_SYS_SET;
  volatile uint32_t PLL_SYS_CLR;
  volatile uint32_t PLL_SYS_TOG;
  volatile uint32_t PLL_SYS_SS;
       uint8_t RESERVED_0[12];
  volatile uint32_t PLL_SYS_NUM;
       uint8_t RESERVED_1[12];
  volatile uint32_t PLL_SYS_DENOM;
       uint8_t RESERVED_2[12];
  volatile uint32_t PLL_AUDIO;
  volatile uint32_t PLL_AUDIO_SET;
  volatile uint32_t PLL_AUDIO_CLR;
  volatile uint32_t PLL_AUDIO_TOG;
  volatile uint32_t PLL_AUDIO_NUM;
       uint8_t RESERVED_3[12];
  volatile uint32_t PLL_AUDIO_DENOM;
       uint8_t RESERVED_4[12];
  volatile uint32_t PLL_VIDEO;
  volatile uint32_t PLL_VIDEO_SET;
  volatile uint32_t PLL_VIDEO_CLR;
  volatile uint32_t PLL_VIDEO_TOG;
  volatile uint32_t PLL_VIDEO_NUM;
       uint8_t RESERVED_5[12];
  volatile uint32_t PLL_VIDEO_DENOM;
       uint8_t RESERVED_6[28];
  volatile uint32_t PLL_ENET;
  volatile uint32_t PLL_ENET_SET;
  volatile uint32_t PLL_ENET_CLR;
  volatile uint32_t PLL_ENET_TOG;
  volatile uint32_t PFD_480;
  volatile uint32_t PFD_480_SET;
  volatile uint32_t PFD_480_CLR;
  volatile uint32_t PFD_480_TOG;
  volatile uint32_t PFD_528;
  volatile uint32_t PFD_528_SET;
  volatile uint32_t PFD_528_CLR;
  volatile uint32_t PFD_528_TOG;
       uint8_t RESERVED_7[64];
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
  volatile uint32_t MISC1;
  volatile uint32_t MISC1_SET;
  volatile uint32_t MISC1_CLR;
  volatile uint32_t MISC1_TOG;
  volatile uint32_t MISC2;
  volatile uint32_t MISC2_SET;
  volatile uint32_t MISC2_CLR;
  volatile uint32_t MISC2_TOG;
} CCM_ANALOG_Type;
# 5391 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint8_t CR0;
  volatile uint8_t CR1;
  volatile uint8_t FPR;
  volatile uint8_t SCR;
  volatile uint8_t DACCR;
  volatile uint8_t MUXCR;
} CMP_Type;
# 5529 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CSICR1;
  volatile uint32_t CSICR2;
  volatile uint32_t CSICR3;
  volatile const uint32_t CSISTATFIFO;
  volatile const uint32_t CSIRFIFO;
  volatile uint32_t CSIRXCNT;
  volatile uint32_t CSISR;
       uint8_t RESERVED_0[4];
  volatile uint32_t CSIDMASA_STATFIFO;
  volatile uint32_t CSIDMATS_STATFIFO;
  volatile uint32_t CSIDMASA_FB1;
  volatile uint32_t CSIDMASA_FB2;
  volatile uint32_t CSIFBUF_PARA;
  volatile uint32_t CSIIMAG_PARA;
       uint8_t RESERVED_1[16];
  volatile uint32_t CSICR18;
  volatile uint32_t CSICR19;
} CSI_Type;
# 5891 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CSL[32];
       uint8_t RESERVED_0[384];
  volatile uint32_t HP0;
       uint8_t RESERVED_1[20];
  volatile uint32_t SA;
       uint8_t RESERVED_2[316];
  volatile uint32_t HPCONTROL0;
} CSU_Type;
# 6186 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t REG0;
  volatile uint32_t REG1;
  volatile uint32_t REG2;
  volatile uint32_t REG3;
} DCDC_Type;
# 6363 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
       uint8_t RESERVED_0[12];
  volatile uint32_t STAT;
       uint8_t RESERVED_1[12];
  volatile uint32_t CHANNELCTRL;
       uint8_t RESERVED_2[12];
  volatile uint32_t CAPABILITY0;
       uint8_t RESERVED_3[12];
  volatile const uint32_t CAPABILITY1;
       uint8_t RESERVED_4[12];
  volatile uint32_t CONTEXT;
       uint8_t RESERVED_5[12];
  volatile uint32_t KEY;
       uint8_t RESERVED_6[12];
  volatile uint32_t KEYDATA;
       uint8_t RESERVED_7[12];
  volatile const uint32_t PACKET0;
       uint8_t RESERVED_8[12];
  volatile const uint32_t PACKET1;
       uint8_t RESERVED_9[12];
  volatile const uint32_t PACKET2;
       uint8_t RESERVED_10[12];
  volatile const uint32_t PACKET3;
       uint8_t RESERVED_11[12];
  volatile const uint32_t PACKET4;
       uint8_t RESERVED_12[12];
  volatile const uint32_t PACKET5;
       uint8_t RESERVED_13[12];
  volatile const uint32_t PACKET6;
       uint8_t RESERVED_14[28];
  volatile uint32_t CH0CMDPTR;
       uint8_t RESERVED_15[12];
  volatile uint32_t CH0SEMA;
       uint8_t RESERVED_16[12];
  volatile uint32_t CH0STAT;
       uint8_t RESERVED_17[12];
  volatile uint32_t CH0OPTS;
       uint8_t RESERVED_18[12];
  volatile uint32_t CH1CMDPTR;
       uint8_t RESERVED_19[12];
  volatile uint32_t CH1SEMA;
       uint8_t RESERVED_20[12];
  volatile uint32_t CH1STAT;
       uint8_t RESERVED_21[12];
  volatile uint32_t CH1OPTS;
       uint8_t RESERVED_22[12];
  volatile uint32_t CH2CMDPTR;
       uint8_t RESERVED_23[12];
  volatile uint32_t CH2SEMA;
       uint8_t RESERVED_24[12];
  volatile uint32_t CH2STAT;
       uint8_t RESERVED_25[12];
  volatile uint32_t CH2OPTS;
       uint8_t RESERVED_26[12];
  volatile uint32_t CH3CMDPTR;
       uint8_t RESERVED_27[12];
  volatile uint32_t CH3SEMA;
       uint8_t RESERVED_28[12];
  volatile uint32_t CH3STAT;
       uint8_t RESERVED_29[12];
  volatile uint32_t CH3OPTS;
       uint8_t RESERVED_30[524];
  volatile uint32_t DBGSELECT;
       uint8_t RESERVED_31[12];
  volatile const uint32_t DBGDATA;
       uint8_t RESERVED_32[12];
  volatile uint32_t PAGETABLE;
       uint8_t RESERVED_33[12];
  volatile const uint32_t VERSION;
} DCP_Type;
# 6947 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CR;
  volatile const uint32_t ES;
       uint8_t RESERVED_0[4];
  volatile uint32_t ERQ;
       uint8_t RESERVED_1[4];
  volatile uint32_t EEI;
  volatile uint8_t CEEI;
  volatile uint8_t SEEI;
  volatile uint8_t CERQ;
  volatile uint8_t SERQ;
  volatile uint8_t CDNE;
  volatile uint8_t SSRT;
  volatile uint8_t CERR;
  volatile uint8_t CINT;
       uint8_t RESERVED_2[4];
  volatile uint32_t INT;
       uint8_t RESERVED_3[4];
  volatile uint32_t ERR;
       uint8_t RESERVED_4[4];
  volatile const uint32_t HRS;
       uint8_t RESERVED_5[12];
  volatile uint32_t EARS;
       uint8_t RESERVED_6[184];
  volatile uint8_t DCHPRI3;
  volatile uint8_t DCHPRI2;
  volatile uint8_t DCHPRI1;
  volatile uint8_t DCHPRI0;
  volatile uint8_t DCHPRI7;
  volatile uint8_t DCHPRI6;
  volatile uint8_t DCHPRI5;
  volatile uint8_t DCHPRI4;
  volatile uint8_t DCHPRI11;
  volatile uint8_t DCHPRI10;
  volatile uint8_t DCHPRI9;
  volatile uint8_t DCHPRI8;
  volatile uint8_t DCHPRI15;
  volatile uint8_t DCHPRI14;
  volatile uint8_t DCHPRI13;
  volatile uint8_t DCHPRI12;
  volatile uint8_t DCHPRI19;
  volatile uint8_t DCHPRI18;
  volatile uint8_t DCHPRI17;
  volatile uint8_t DCHPRI16;
  volatile uint8_t DCHPRI23;
  volatile uint8_t DCHPRI22;
  volatile uint8_t DCHPRI21;
  volatile uint8_t DCHPRI20;
  volatile uint8_t DCHPRI27;
  volatile uint8_t DCHPRI26;
  volatile uint8_t DCHPRI25;
  volatile uint8_t DCHPRI24;
  volatile uint8_t DCHPRI31;
  volatile uint8_t DCHPRI30;
  volatile uint8_t DCHPRI29;
  volatile uint8_t DCHPRI28;
       uint8_t RESERVED_7[3808];
  struct {
    volatile uint32_t SADDR;
    volatile uint16_t SOFF;
    volatile uint16_t ATTR;
    union {
      volatile uint32_t NBYTES_MLNO;
      volatile uint32_t NBYTES_MLOFFNO;
      volatile uint32_t NBYTES_MLOFFYES;
    };
    volatile uint32_t SLAST;
    volatile uint32_t DADDR;
    volatile uint16_t DOFF;
    union {
      volatile uint16_t CITER_ELINKNO;
      volatile uint16_t CITER_ELINKYES;
    };
    volatile uint32_t DLAST_SGA;
    volatile uint16_t CSR;
    union {
      volatile uint16_t BITER_ELINKNO;
      volatile uint16_t BITER_ELINKYES;
    };
  } TCD[32];
} DMA_Type;
# 8464 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CHCFG[32];
} DMAMUX_Type;
# 8525 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t CTRL;
  volatile uint16_t FILT;
  volatile uint16_t WTR;
  volatile uint16_t POSD;
  volatile const uint16_t POSDH;
  volatile uint16_t REV;
  volatile const uint16_t REVH;
  volatile uint16_t UPOS;
  volatile uint16_t LPOS;
  volatile const uint16_t UPOSH;
  volatile const uint16_t LPOSH;
  volatile uint16_t UINIT;
  volatile uint16_t LINIT;
  volatile const uint16_t IMR;
  volatile uint16_t TST;
  volatile uint16_t CTRL2;
  volatile uint16_t UMOD;
  volatile uint16_t LMOD;
  volatile uint16_t UCOMP;
  volatile uint16_t LCOMP;
} ENC_Type;
# 8820 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[4];
  volatile uint32_t EIR;
  volatile uint32_t EIMR;
       uint8_t RESERVED_1[4];
  volatile uint32_t RDAR;
  volatile uint32_t TDAR;
       uint8_t RESERVED_2[12];
  volatile uint32_t ECR;
       uint8_t RESERVED_3[24];
  volatile uint32_t MMFR;
  volatile uint32_t MSCR;
       uint8_t RESERVED_4[28];
  volatile uint32_t MIBC;
       uint8_t RESERVED_5[28];
  volatile uint32_t RCR;
       uint8_t RESERVED_6[60];
  volatile uint32_t TCR;
       uint8_t RESERVED_7[28];
  volatile uint32_t PALR;
  volatile uint32_t PAUR;
  volatile uint32_t OPD;
  volatile uint32_t TXIC;
       uint8_t RESERVED_8[12];
  volatile uint32_t RXIC;
       uint8_t RESERVED_9[20];
  volatile uint32_t IAUR;
  volatile uint32_t IALR;
  volatile uint32_t GAUR;
  volatile uint32_t GALR;
       uint8_t RESERVED_10[28];
  volatile uint32_t TFWR;
       uint8_t RESERVED_11[56];
  volatile uint32_t RDSR;
  volatile uint32_t TDSR;
  volatile uint32_t MRBR;
       uint8_t RESERVED_12[4];
  volatile uint32_t RSFL;
  volatile uint32_t RSEM;
  volatile uint32_t RAEM;
  volatile uint32_t RAFL;
  volatile uint32_t TSEM;
  volatile uint32_t TAEM;
  volatile uint32_t TAFL;
  volatile uint32_t TIPG;
  volatile uint32_t FTRL;
       uint8_t RESERVED_13[12];
  volatile uint32_t TACC;
  volatile uint32_t RACC;
       uint8_t RESERVED_14[56];
       uint32_t RMON_T_DROP;
  volatile const uint32_t RMON_T_PACKETS;
  volatile const uint32_t RMON_T_BC_PKT;
  volatile const uint32_t RMON_T_MC_PKT;
  volatile const uint32_t RMON_T_CRC_ALIGN;
  volatile const uint32_t RMON_T_UNDERSIZE;
  volatile const uint32_t RMON_T_OVERSIZE;
  volatile const uint32_t RMON_T_FRAG;
  volatile const uint32_t RMON_T_JAB;
  volatile const uint32_t RMON_T_COL;
  volatile const uint32_t RMON_T_P64;
  volatile const uint32_t RMON_T_P65TO127;
  volatile const uint32_t RMON_T_P128TO255;
  volatile const uint32_t RMON_T_P256TO511;
  volatile const uint32_t RMON_T_P512TO1023;
  volatile const uint32_t RMON_T_P1024TO2047;
  volatile const uint32_t RMON_T_P_GTE2048;
  volatile const uint32_t RMON_T_OCTETS;
       uint32_t IEEE_T_DROP;
  volatile const uint32_t IEEE_T_FRAME_OK;
  volatile const uint32_t IEEE_T_1COL;
  volatile const uint32_t IEEE_T_MCOL;
  volatile const uint32_t IEEE_T_DEF;
  volatile const uint32_t IEEE_T_LCOL;
  volatile const uint32_t IEEE_T_EXCOL;
  volatile const uint32_t IEEE_T_MACERR;
  volatile const uint32_t IEEE_T_CSERR;
  volatile const uint32_t IEEE_T_SQE;
  volatile const uint32_t IEEE_T_FDXFC;
  volatile const uint32_t IEEE_T_OCTETS_OK;
       uint8_t RESERVED_15[12];
  volatile const uint32_t RMON_R_PACKETS;
  volatile const uint32_t RMON_R_BC_PKT;
  volatile const uint32_t RMON_R_MC_PKT;
  volatile const uint32_t RMON_R_CRC_ALIGN;
  volatile const uint32_t RMON_R_UNDERSIZE;
  volatile const uint32_t RMON_R_OVERSIZE;
  volatile const uint32_t RMON_R_FRAG;
  volatile const uint32_t RMON_R_JAB;
       uint32_t RMON_R_RESVD_0;
  volatile const uint32_t RMON_R_P64;
  volatile const uint32_t RMON_R_P65TO127;
  volatile const uint32_t RMON_R_P128TO255;
  volatile const uint32_t RMON_R_P256TO511;
  volatile const uint32_t RMON_R_P512TO1023;
  volatile const uint32_t RMON_R_P1024TO2047;
  volatile const uint32_t RMON_R_P_GTE2048;
  volatile const uint32_t RMON_R_OCTETS;
  volatile const uint32_t IEEE_R_DROP;
  volatile const uint32_t IEEE_R_FRAME_OK;
  volatile const uint32_t IEEE_R_CRC;
  volatile const uint32_t IEEE_R_ALIGN;
  volatile const uint32_t IEEE_R_MACERR;
  volatile const uint32_t IEEE_R_FDXFC;
  volatile const uint32_t IEEE_R_OCTETS_OK;
       uint8_t RESERVED_16[284];
  volatile uint32_t ATCR;
  volatile uint32_t ATVR;
  volatile uint32_t ATOFF;
  volatile uint32_t ATPER;
  volatile uint32_t ATCOR;
  volatile uint32_t ATINC;
  volatile const uint32_t ATSTMP;
       uint8_t RESERVED_17[488];
  volatile uint32_t TGSR;
  struct {
    volatile uint32_t TCSR;
    volatile uint32_t TCCR;
  } CHANNEL[4];
} ENET_Type;
# 9758 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint8_t CTRL;
  volatile uint8_t SERV;
  volatile uint8_t CMPL;
  volatile uint8_t CMPH;
  volatile uint8_t CLKCTRL;
  volatile uint8_t CLKPRESCALER;
} EWM_Type;
# 9848 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t CTRL;
  volatile const uint32_t PIN;
  volatile uint32_t SHIFTSTAT;
  volatile uint32_t SHIFTERR;
  volatile uint32_t TIMSTAT;
       uint8_t RESERVED_0[4];
  volatile uint32_t SHIFTSIEN;
  volatile uint32_t SHIFTEIEN;
  volatile uint32_t TIMIEN;
       uint8_t RESERVED_1[4];
  volatile uint32_t SHIFTSDEN;
       uint8_t RESERVED_2[12];
  volatile uint32_t SHIFTSTATE;
       uint8_t RESERVED_3[60];
  volatile uint32_t SHIFTCTL[4];
       uint8_t RESERVED_4[112];
  volatile uint32_t SHIFTCFG[4];
       uint8_t RESERVED_5[240];
  volatile uint32_t SHIFTBUF[4];
       uint8_t RESERVED_6[112];
  volatile uint32_t SHIFTBUFBIS[4];
       uint8_t RESERVED_7[112];
  volatile uint32_t SHIFTBUFBYS[4];
       uint8_t RESERVED_8[112];
  volatile uint32_t SHIFTBUFBBS[4];
       uint8_t RESERVED_9[112];
  volatile uint32_t TIMCTL[4];
       uint8_t RESERVED_10[112];
  volatile uint32_t TIMCFG[4];
       uint8_t RESERVED_11[112];
  volatile uint32_t TIMCMP[4];
       uint8_t RESERVED_12[368];
  volatile uint32_t SHIFTBUFNBS[4];
       uint8_t RESERVED_13[112];
  volatile uint32_t SHIFTBUFHWS[4];
       uint8_t RESERVED_14[112];
  volatile uint32_t SHIFTBUFNIS[4];
} FLEXIO_Type;
# 10179 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t TCM_CTRL;
  volatile uint32_t OCRAM_MAGIC_ADDR;
  volatile uint32_t DTCM_MAGIC_ADDR;
  volatile uint32_t ITCM_MAGIC_ADDR;
  volatile uint32_t INT_STATUS;
  volatile uint32_t INT_STAT_EN;
  volatile uint32_t INT_SIG_EN;
} FLEXRAM_Type;
# 10347 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR0;
  volatile uint32_t MCR1;
  volatile uint32_t MCR2;
  volatile uint32_t AHBCR;
  volatile uint32_t INTEN;
  volatile uint32_t INTR;
  volatile uint32_t LUTKEY;
  volatile uint32_t LUTCR;
  volatile uint32_t AHBRXBUFCR0[4];
       uint8_t RESERVED_0[48];
  volatile uint32_t FLSHCR0[4];
  volatile uint32_t FLSHCR1[4];
  volatile uint32_t FLSHCR2[4];
       uint8_t RESERVED_1[4];
  volatile uint32_t FLSHCR4;
       uint8_t RESERVED_2[8];
  volatile uint32_t IPCR0;
  volatile uint32_t IPCR1;
       uint8_t RESERVED_3[8];
  volatile uint32_t IPCMD;
       uint8_t RESERVED_4[4];
  volatile uint32_t IPRXFCR;
  volatile uint32_t IPTXFCR;
  volatile uint32_t DLLCR[2];
       uint8_t RESERVED_5[24];
  volatile const uint32_t STS0;
  volatile const uint32_t STS1;
  volatile const uint32_t STS2;
  volatile const uint32_t AHBSPNDSTS;
  volatile const uint32_t IPRXFSTS;
  volatile const uint32_t IPTXFSTS;
       uint8_t RESERVED_6[8];
  volatile const uint32_t RFDR[32];
  volatile uint32_t TFDR[32];
  volatile uint32_t LUT[64];
} FLEXSPI_Type;
# 10861 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CNTR;
       uint8_t RESERVED_0[4];
  volatile uint32_t IMR[4];
  volatile const uint32_t ISR[4];
       uint8_t RESERVED_1[12];
  volatile uint32_t IMR5;
  volatile const uint32_t ISR5;
} GPC_Type;
# 10968 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t DR;
  volatile uint32_t GDIR;
  volatile const uint32_t PSR;
  volatile uint32_t ICR1;
  volatile uint32_t ICR2;
  volatile uint32_t IMR;
  volatile uint32_t ISR;
  volatile uint32_t EDGE_SEL;
} GPIO_Type;
# 11168 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CR;
  volatile uint32_t PR;
  volatile uint32_t SR;
  volatile uint32_t IR;
  volatile uint32_t OCR[3];
  volatile const uint32_t ICR[2];
  volatile const uint32_t CNT;
} GPT_Type;
# 11349 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t TCSR;
  volatile uint32_t TCR1;
  volatile uint32_t TCR2;
  volatile uint32_t TCR3;
  volatile uint32_t TCR4;
  volatile uint32_t TCR5;
  volatile uint32_t TDR[4];
       uint8_t RESERVED_0[16];
  volatile const uint32_t TFR[4];
       uint8_t RESERVED_1[16];
  volatile uint32_t TMR;
       uint8_t RESERVED_2[36];
  volatile uint32_t RCSR;
  volatile uint32_t RCR1;
  volatile uint32_t RCR2;
  volatile uint32_t RCR3;
  volatile uint32_t RCR4;
  volatile uint32_t RCR5;
  volatile const uint32_t RDR[4];
       uint8_t RESERVED_3[16];
  volatile const uint32_t RFR[4];
       uint8_t RESERVED_4[16];
  volatile uint32_t RMR;
} I2S_Type;
# 11783 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[20];
  volatile uint32_t SW_MUX_CTL_PAD[124];
  volatile uint32_t SW_PAD_CTL_PAD[124];
  volatile uint32_t SELECT_INPUT[154];
} IOMUXC_Type;
# 11878 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint32_t GPR0;
  volatile uint32_t GPR1;
  volatile uint32_t GPR2;
  volatile uint32_t GPR3;
  volatile uint32_t GPR4;
  volatile uint32_t GPR5;
  volatile uint32_t GPR6;
  volatile uint32_t GPR7;
  volatile uint32_t GPR8;
       uint32_t GPR9;
  volatile uint32_t GPR10;
  volatile uint32_t GPR11;
  volatile uint32_t GPR12;
  volatile uint32_t GPR13;
  volatile uint32_t GPR14;
       uint32_t GPR15;
  volatile uint32_t GPR16;
  volatile uint32_t GPR17;
  volatile uint32_t GPR18;
  volatile uint32_t GPR19;
  volatile uint32_t GPR20;
  volatile uint32_t GPR21;
  volatile uint32_t GPR22;
  volatile uint32_t GPR23;
  volatile uint32_t GPR24;
  volatile uint32_t GPR25;
} IOMUXC_GPR_Type;
# 12632 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SW_MUX_CTL_PAD_WAKEUP;
  volatile uint32_t SW_MUX_CTL_PAD_PMIC_ON_REQ;
  volatile uint32_t SW_MUX_CTL_PAD_PMIC_STBY_REQ;
  volatile uint32_t SW_PAD_CTL_PAD_TEST_MODE;
  volatile uint32_t SW_PAD_CTL_PAD_POR_B;
  volatile uint32_t SW_PAD_CTL_PAD_ONOFF;
  volatile uint32_t SW_PAD_CTL_PAD_WAKEUP;
  volatile uint32_t SW_PAD_CTL_PAD_PMIC_ON_REQ;
  volatile uint32_t SW_PAD_CTL_PAD_PMIC_STBY_REQ;
} IOMUXC_SNVS_Type;
# 12864 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint32_t GPR0;
       uint32_t GPR1;
       uint32_t GPR2;
  volatile uint32_t GPR3;
} IOMUXC_SNVS_GPR_Type;
# 12934 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t KPCR;
  volatile uint16_t KPSR;
  volatile uint16_t KDDR;
  volatile uint16_t KPDR;
} KPP_Type;
# 13027 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t CTRL1;
  volatile uint32_t CTRL1_SET;
  volatile uint32_t CTRL1_CLR;
  volatile uint32_t CTRL1_TOG;
  volatile uint32_t CTRL2;
  volatile uint32_t CTRL2_SET;
  volatile uint32_t CTRL2_CLR;
  volatile uint32_t CTRL2_TOG;
  volatile uint32_t TRANSFER_COUNT;
       uint8_t RESERVED_0[12];
  volatile uint32_t CUR_BUF;
       uint8_t RESERVED_1[12];
  volatile uint32_t NEXT_BUF;
       uint8_t RESERVED_2[28];
  volatile uint32_t VDCTRL0;
  volatile uint32_t VDCTRL0_SET;
  volatile uint32_t VDCTRL0_CLR;
  volatile uint32_t VDCTRL0_TOG;
  volatile uint32_t VDCTRL1;
       uint8_t RESERVED_3[12];
  volatile uint32_t VDCTRL2;
       uint8_t RESERVED_4[12];
  volatile uint32_t VDCTRL3;
       uint8_t RESERVED_5[12];
  volatile uint32_t VDCTRL4;
       uint8_t RESERVED_6[220];
  volatile uint32_t BM_ERROR_STAT;
       uint8_t RESERVED_7[12];
  volatile uint32_t CRC_STAT;
       uint8_t RESERVED_8[12];
  volatile const uint32_t STAT;
       uint8_t RESERVED_9[76];
  volatile uint32_t THRES;
       uint8_t RESERVED_10[380];
  volatile uint32_t PIGEONCTRL0;
  volatile uint32_t PIGEONCTRL0_SET;
  volatile uint32_t PIGEONCTRL0_CLR;
  volatile uint32_t PIGEONCTRL0_TOG;
  volatile uint32_t PIGEONCTRL1;
  volatile uint32_t PIGEONCTRL1_SET;
  volatile uint32_t PIGEONCTRL1_CLR;
  volatile uint32_t PIGEONCTRL1_TOG;
  volatile uint32_t PIGEONCTRL2;
  volatile uint32_t PIGEONCTRL2_SET;
  volatile uint32_t PIGEONCTRL2_CLR;
  volatile uint32_t PIGEONCTRL2_TOG;
       uint8_t RESERVED_11[1104];
  struct {
    volatile uint32_t PIGEON_0;
         uint8_t RESERVED_0[12];
    volatile uint32_t PIGEON_1;
         uint8_t RESERVED_1[12];
    volatile uint32_t PIGEON_2;
         uint8_t RESERVED_2[28];
  } PIGEON[12];
  volatile uint32_t LUT_CTRL;
       uint8_t RESERVED_12[12];
  volatile uint32_t LUT0_ADDR;
       uint8_t RESERVED_13[12];
  volatile uint32_t LUT0_DATA;
       uint8_t RESERVED_14[12];
  volatile uint32_t LUT1_ADDR;
       uint8_t RESERVED_15[12];
  volatile uint32_t LUT1_DATA;
} LCDIF_Type;
# 14128 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
       uint8_t RESERVED_0[8];
  volatile uint32_t MCR;
  volatile uint32_t MSR;
  volatile uint32_t MIER;
  volatile uint32_t MDER;
  volatile uint32_t MCFGR0;
  volatile uint32_t MCFGR1;
  volatile uint32_t MCFGR2;
  volatile uint32_t MCFGR3;
       uint8_t RESERVED_1[16];
  volatile uint32_t MDMR;
       uint8_t RESERVED_2[4];
  volatile uint32_t MCCR0;
       uint8_t RESERVED_3[4];
  volatile uint32_t MCCR1;
       uint8_t RESERVED_4[4];
  volatile uint32_t MFCR;
  volatile const uint32_t MFSR;
  volatile uint32_t MTDR;
       uint8_t RESERVED_5[12];
  volatile const uint32_t MRDR;
       uint8_t RESERVED_6[156];
  volatile uint32_t SCR;
  volatile uint32_t SSR;
  volatile uint32_t SIER;
  volatile uint32_t SDER;
       uint8_t RESERVED_7[4];
  volatile uint32_t SCFGR1;
  volatile uint32_t SCFGR2;
       uint8_t RESERVED_8[20];
  volatile uint32_t SAMR;
       uint8_t RESERVED_9[12];
  volatile const uint32_t SASR;
  volatile uint32_t STAR;
       uint8_t RESERVED_10[8];
  volatile uint32_t STDR;
       uint8_t RESERVED_11[12];
  volatile const uint32_t SRDR;
} LPI2C_Type;
# 14656 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
       uint8_t RESERVED_0[8];
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t IER;
  volatile uint32_t DER;
  volatile uint32_t CFGR0;
  volatile uint32_t CFGR1;
       uint8_t RESERVED_1[8];
  volatile uint32_t DMR0;
  volatile uint32_t DMR1;
       uint8_t RESERVED_2[8];
  volatile uint32_t CCR;
       uint8_t RESERVED_3[20];
  volatile uint32_t FCR;
  volatile const uint32_t FSR;
  volatile uint32_t TCR;
  volatile uint32_t TDR;
       uint8_t RESERVED_4[8];
  volatile const uint32_t RSR;
  volatile const uint32_t RDR;
} LPSPI_Type;
# 14982 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t GLOBAL;
  volatile uint32_t PINCFG;
  volatile uint32_t BAUD;
  volatile uint32_t STAT;
  volatile uint32_t CTRL;
  volatile uint32_t DATA;
  volatile uint32_t MATCH;
  volatile uint32_t MODIR;
  volatile uint32_t FIFO;
  volatile uint32_t WATER;
} LPUART_Type;
# 15418 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t TIMING;
       uint8_t RESERVED_0[12];
  volatile uint32_t DATA;
       uint8_t RESERVED_1[12];
  volatile uint32_t READ_CTRL;
       uint8_t RESERVED_2[12];
  volatile uint32_t READ_FUSE_DATA;
       uint8_t RESERVED_3[12];
  volatile uint32_t SW_STICKY;
       uint8_t RESERVED_4[12];
  volatile uint32_t SCS;
  volatile uint32_t SCS_SET;
  volatile uint32_t SCS_CLR;
  volatile uint32_t SCS_TOG;
       uint8_t RESERVED_5[32];
  volatile const uint32_t VERSION;
       uint8_t RESERVED_6[108];
  volatile uint32_t TIMING2;
       uint8_t RESERVED_7[764];
  volatile uint32_t LOCK;
       uint8_t RESERVED_8[12];
  volatile uint32_t CFG0;
       uint8_t RESERVED_9[12];
  volatile uint32_t CFG1;
       uint8_t RESERVED_10[12];
  volatile uint32_t CFG2;
       uint8_t RESERVED_11[12];
  volatile uint32_t CFG3;
       uint8_t RESERVED_12[12];
  volatile uint32_t CFG4;
       uint8_t RESERVED_13[12];
  volatile uint32_t CFG5;
       uint8_t RESERVED_14[12];
  volatile uint32_t CFG6;
       uint8_t RESERVED_15[12];
  volatile uint32_t MEM0;
       uint8_t RESERVED_16[12];
  volatile uint32_t MEM1;
       uint8_t RESERVED_17[12];
  volatile uint32_t MEM2;
       uint8_t RESERVED_18[12];
  volatile uint32_t MEM3;
       uint8_t RESERVED_19[12];
  volatile uint32_t MEM4;
       uint8_t RESERVED_20[12];
  volatile uint32_t ANA0;
       uint8_t RESERVED_21[12];
  volatile uint32_t ANA1;
       uint8_t RESERVED_22[12];
  volatile uint32_t ANA2;
       uint8_t RESERVED_23[140];
  volatile uint32_t SRK0;
       uint8_t RESERVED_24[12];
  volatile uint32_t SRK1;
       uint8_t RESERVED_25[12];
  volatile uint32_t SRK2;
       uint8_t RESERVED_26[12];
  volatile uint32_t SRK3;
       uint8_t RESERVED_27[12];
  volatile uint32_t SRK4;
       uint8_t RESERVED_28[12];
  volatile uint32_t SRK5;
       uint8_t RESERVED_29[12];
  volatile uint32_t SRK6;
       uint8_t RESERVED_30[12];
  volatile uint32_t SRK7;
       uint8_t RESERVED_31[12];
  volatile uint32_t SJC_RESP0;
       uint8_t RESERVED_32[12];
  volatile uint32_t SJC_RESP1;
       uint8_t RESERVED_33[12];
  volatile uint32_t MAC0;
       uint8_t RESERVED_34[12];
  volatile uint32_t MAC1;
       uint8_t RESERVED_35[12];
  volatile uint32_t GP3;
       uint8_t RESERVED_36[28];
  volatile uint32_t GP1;
       uint8_t RESERVED_37[12];
  volatile uint32_t GP2;
       uint8_t RESERVED_38[12];
  volatile uint32_t SW_GP1;
       uint8_t RESERVED_39[12];
  volatile uint32_t SW_GP20;
       uint8_t RESERVED_40[12];
  volatile uint32_t SW_GP21;
       uint8_t RESERVED_41[12];
  volatile uint32_t SW_GP22;
       uint8_t RESERVED_42[12];
  volatile uint32_t SW_GP23;
       uint8_t RESERVED_43[12];
  volatile uint32_t MISC_CONF0;
       uint8_t RESERVED_44[12];
  volatile uint32_t MISC_CONF1;
       uint8_t RESERVED_45[12];
  volatile uint32_t SRK_REVOKE;
} OCOTP_Type;
# 15987 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[544];
  volatile uint32_t MEGA_CTRL;
  volatile uint32_t MEGA_PUPSCR;
  volatile uint32_t MEGA_PDNSCR;
  volatile uint32_t MEGA_SR;
       uint8_t RESERVED_1[112];
  volatile uint32_t CPU_CTRL;
  volatile uint32_t CPU_PUPSCR;
  volatile uint32_t CPU_PDNSCR;
  volatile uint32_t CPU_SR;
} PGC_Type;
# 16092 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
       uint8_t RESERVED_0[220];
  volatile const uint32_t LTMR64H;
  volatile const uint32_t LTMR64L;
       uint8_t RESERVED_1[24];
  struct {
    volatile uint32_t LDVAL;
    volatile const uint32_t CVAL;
    volatile uint32_t TCTRL;
    volatile uint32_t TFLG;
  } CHANNEL[4];
} PIT_Type;
# 16204 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[272];
  volatile uint32_t REG_1P1;
  volatile uint32_t REG_1P1_SET;
  volatile uint32_t REG_1P1_CLR;
  volatile uint32_t REG_1P1_TOG;
  volatile uint32_t REG_3P0;
  volatile uint32_t REG_3P0_SET;
  volatile uint32_t REG_3P0_CLR;
  volatile uint32_t REG_3P0_TOG;
  volatile uint32_t REG_2P5;
  volatile uint32_t REG_2P5_SET;
  volatile uint32_t REG_2P5_CLR;
  volatile uint32_t REG_2P5_TOG;
  volatile uint32_t REG_CORE;
  volatile uint32_t REG_CORE_SET;
  volatile uint32_t REG_CORE_CLR;
  volatile uint32_t REG_CORE_TOG;
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
  volatile uint32_t MISC1;
  volatile uint32_t MISC1_SET;
  volatile uint32_t MISC1_CLR;
  volatile uint32_t MISC1_TOG;
  volatile uint32_t MISC2;
  volatile uint32_t MISC2_SET;
  volatile uint32_t MISC2_CLR;
  volatile uint32_t MISC2_TOG;
} PMU_Type;
# 17148 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile const uint16_t CNT;
    volatile uint16_t INIT;
    volatile uint16_t CTRL2;
    volatile uint16_t CTRL;
         uint8_t RESERVED_0[2];
    volatile uint16_t VAL0;
    volatile uint16_t FRACVAL1;
    volatile uint16_t VAL1;
    volatile uint16_t FRACVAL2;
    volatile uint16_t VAL2;
    volatile uint16_t FRACVAL3;
    volatile uint16_t VAL3;
    volatile uint16_t FRACVAL4;
    volatile uint16_t VAL4;
    volatile uint16_t FRACVAL5;
    volatile uint16_t VAL5;
    volatile uint16_t FRCTRL;
    volatile uint16_t OCTRL;
    volatile uint16_t STS;
    volatile uint16_t INTEN;
    volatile uint16_t DMAEN;
    volatile uint16_t TCTRL;
    volatile uint16_t DISMAP[2];
    volatile uint16_t DTCNT0;
    volatile uint16_t DTCNT1;
    volatile uint16_t CAPTCTRLA;
    volatile uint16_t CAPTCOMPA;
    volatile uint16_t CAPTCTRLB;
    volatile uint16_t CAPTCOMPB;
    volatile uint16_t CAPTCTRLX;
    volatile uint16_t CAPTCOMPX;
    volatile const uint16_t CVAL0;
    volatile const uint16_t CVAL0CYC;
    volatile const uint16_t CVAL1;
    volatile const uint16_t CVAL1CYC;
    volatile const uint16_t CVAL2;
    volatile const uint16_t CVAL2CYC;
    volatile const uint16_t CVAL3;
    volatile const uint16_t CVAL3CYC;
    volatile const uint16_t CVAL4;
    volatile const uint16_t CVAL4CYC;
    volatile const uint16_t CVAL5;
    volatile const uint16_t CVAL5CYC;
         uint8_t RESERVED_1[8];
  } SM[4];
  volatile uint16_t OUTEN;
  volatile uint16_t MASK;
  volatile uint16_t SWCOUT;
  volatile uint16_t DTSRCSEL;
  volatile uint16_t MCTRL;
  volatile uint16_t MCTRL2;
  volatile uint16_t FCTRL;
  volatile uint16_t FSTS;
  volatile uint16_t FFILT;
  volatile uint16_t FTST;
  volatile uint16_t FCTRL2;
} PWM_Type;
# 18026 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t STAT;
  volatile uint32_t STAT_SET;
  volatile uint32_t STAT_CLR;
  volatile uint32_t STAT_TOG;
  volatile uint32_t OUT_CTRL;
  volatile uint32_t OUT_CTRL_SET;
  volatile uint32_t OUT_CTRL_CLR;
  volatile uint32_t OUT_CTRL_TOG;
  volatile uint32_t OUT_BUF;
       uint8_t RESERVED_0[12];
  volatile uint32_t OUT_BUF2;
       uint8_t RESERVED_1[12];
  volatile uint32_t OUT_PITCH;
       uint8_t RESERVED_2[12];
  volatile uint32_t OUT_LRC;
       uint8_t RESERVED_3[12];
  volatile uint32_t OUT_PS_ULC;
       uint8_t RESERVED_4[12];
  volatile uint32_t OUT_PS_LRC;
       uint8_t RESERVED_5[12];
  volatile uint32_t OUT_AS_ULC;
       uint8_t RESERVED_6[12];
  volatile uint32_t OUT_AS_LRC;
       uint8_t RESERVED_7[12];
  volatile uint32_t PS_CTRL;
  volatile uint32_t PS_CTRL_SET;
  volatile uint32_t PS_CTRL_CLR;
  volatile uint32_t PS_CTRL_TOG;
  volatile uint32_t PS_BUF;
       uint8_t RESERVED_8[12];
  volatile uint32_t PS_UBUF;
       uint8_t RESERVED_9[12];
  volatile uint32_t PS_VBUF;
       uint8_t RESERVED_10[12];
  volatile uint32_t PS_PITCH;
       uint8_t RESERVED_11[12];
  volatile uint32_t PS_BACKGROUND;
       uint8_t RESERVED_12[12];
  volatile uint32_t PS_SCALE;
       uint8_t RESERVED_13[12];
  volatile uint32_t PS_OFFSET;
       uint8_t RESERVED_14[12];
  volatile uint32_t PS_CLRKEYLOW;
       uint8_t RESERVED_15[12];
  volatile uint32_t PS_CLRKEYHIGH;
       uint8_t RESERVED_16[12];
  volatile uint32_t AS_CTRL;
       uint8_t RESERVED_17[12];
  volatile uint32_t AS_BUF;
       uint8_t RESERVED_18[12];
  volatile uint32_t AS_PITCH;
       uint8_t RESERVED_19[12];
  volatile uint32_t AS_CLRKEYLOW;
       uint8_t RESERVED_20[12];
  volatile uint32_t AS_CLRKEYHIGH;
       uint8_t RESERVED_21[12];
  volatile uint32_t CSC1_COEF0;
       uint8_t RESERVED_22[12];
  volatile uint32_t CSC1_COEF1;
       uint8_t RESERVED_23[12];
  volatile uint32_t CSC1_COEF2;
       uint8_t RESERVED_24[348];
  volatile uint32_t POWER;
       uint8_t RESERVED_25[220];
  volatile uint32_t NEXT;
       uint8_t RESERVED_26[60];
  volatile uint32_t PORTER_DUFF_CTRL;
} PXP_Type;
# 18938 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[212];
  volatile uint32_t ROMPATCHD[8];
  volatile uint32_t ROMPATCHCNTL;
       uint32_t ROMPATCHENH;
  volatile uint32_t ROMPATCHENL;
  volatile uint32_t ROMPATCHA[16];
       uint8_t RESERVED_1[200];
  volatile uint32_t ROMPATCHSR;
} ROMC_Type;
# 19029 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CS;
  volatile uint32_t CNT;
  volatile uint32_t TOVAL;
  volatile uint32_t WIN;
} RTWDOG_Type;
# 19150 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
  volatile uint32_t IOCR;
  volatile uint32_t BMCR0;
  volatile uint32_t BMCR1;
  volatile uint32_t BR[9];
       uint8_t RESERVED_0[4];
  volatile uint32_t INTEN;
  volatile uint32_t INTR;
  volatile uint32_t SDRAMCR0;
  volatile uint32_t SDRAMCR1;
  volatile uint32_t SDRAMCR2;
  volatile uint32_t SDRAMCR3;
  volatile uint32_t NANDCR0;
  volatile uint32_t NANDCR1;
  volatile uint32_t NANDCR2;
  volatile uint32_t NANDCR3;
  volatile uint32_t NORCR0;
  volatile uint32_t NORCR1;
  volatile uint32_t NORCR2;
       uint32_t NORCR3;
  volatile uint32_t SRAMCR0;
  volatile uint32_t SRAMCR1;
  volatile uint32_t SRAMCR2;
       uint32_t SRAMCR3;
  volatile uint32_t DBICR0;
  volatile uint32_t DBICR1;
       uint8_t RESERVED_1[8];
  volatile uint32_t IPCR0;
  volatile uint32_t IPCR1;
  volatile uint32_t IPCR2;
  volatile uint32_t IPCMD;
  volatile uint32_t IPTXDAT;
       uint8_t RESERVED_2[12];
  volatile const uint32_t IPRXDAT;
       uint8_t RESERVED_3[12];
  volatile const uint32_t STS0;
       uint32_t STS1;
  volatile const uint32_t STS2;
       uint32_t STS3;
       uint32_t STS4;
       uint32_t STS5;
       uint32_t STS6;
       uint32_t STS7;
       uint32_t STS8;
       uint32_t STS9;
       uint32_t STS10;
       uint32_t STS11;
  volatile const uint32_t STS12;
       uint32_t STS13;
       uint32_t STS14;
       uint32_t STS15;
} SEMC_Type;
# 19739 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t HPLR;
  volatile uint32_t HPCOMR;
  volatile uint32_t HPCR;
  volatile uint32_t HPSICR;
  volatile uint32_t HPSVCR;
  volatile uint32_t HPSR;
  volatile uint32_t HPSVSR;
  volatile uint32_t HPHACIVR;
  volatile const uint32_t HPHACR;
  volatile uint32_t HPRTCMR;
  volatile uint32_t HPRTCLR;
  volatile uint32_t HPTAMR;
  volatile uint32_t HPTALR;
  volatile uint32_t LPLR;
  volatile uint32_t LPCR;
  volatile uint32_t LPMKCR;
  volatile uint32_t LPSVCR;
       uint8_t RESERVED_0[4];
  volatile uint32_t LPTDCR;
  volatile uint32_t LPSR;
  volatile uint32_t LPSRTCMR;
  volatile uint32_t LPSRTCLR;
  volatile uint32_t LPTAR;
  volatile const uint32_t LPSMCMR;
  volatile const uint32_t LPSMCLR;
  volatile uint32_t LPPGDR;
  volatile uint32_t LPGPR0_LEGACY_ALIAS;
  volatile uint32_t LPZMKR[8];
       uint8_t RESERVED_1[4];
  volatile uint32_t LPGPR_ALIAS[4];
       uint8_t RESERVED_2[96];
  volatile uint32_t LPGPR[8];
       uint8_t RESERVED_3[2776];
  volatile const uint32_t HPVIDR1;
  volatile const uint32_t HPVIDR2;
} SNVS_Type;
# 20345 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SCR;
  volatile uint32_t SRCD;
  volatile uint32_t SRPC;
  volatile uint32_t SIE;
  union {
    volatile uint32_t SIC;
    volatile const uint32_t SIS;
  };
  volatile const uint32_t SRL;
  volatile const uint32_t SRR;
  volatile const uint32_t SRCSH;
  volatile const uint32_t SRCSL;
  volatile const uint32_t SRU;
  volatile const uint32_t SRQ;
  volatile uint32_t STL;
  volatile uint32_t STR;
  volatile uint32_t STCSCH;
  volatile uint32_t STCSCL;
       uint8_t RESERVED_0[8];
  volatile const uint32_t SRFM;
       uint8_t RESERVED_1[8];
  volatile uint32_t STC;
} SPDIF_Type;
# 20700 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SCR;
  volatile const uint32_t SBMR1;
  volatile uint32_t SRSR;
       uint8_t RESERVED_0[16];
  volatile const uint32_t SBMR2;
  volatile uint32_t GPR[10];
} SRC_Type;
# 20865 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[384];
  volatile uint32_t TEMPSENSE0;
  volatile uint32_t TEMPSENSE0_SET;
  volatile uint32_t TEMPSENSE0_CLR;
  volatile uint32_t TEMPSENSE0_TOG;
  volatile uint32_t TEMPSENSE1;
  volatile uint32_t TEMPSENSE1_SET;
  volatile uint32_t TEMPSENSE1_CLR;
  volatile uint32_t TEMPSENSE1_TOG;
       uint8_t RESERVED_1[240];
  volatile uint32_t TEMPSENSE2;
  volatile uint32_t TEMPSENSE2_SET;
  volatile uint32_t TEMPSENSE2_CLR;
  volatile uint32_t TEMPSENSE2_TOG;
} TEMPMON_Type;
# 21042 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile uint16_t COMP1;
    volatile uint16_t COMP2;
    volatile uint16_t CAPT;
    volatile uint16_t LOAD;
    volatile uint16_t HOLD;
    volatile uint16_t CNTR;
    volatile uint16_t CTRL;
    volatile uint16_t SCTRL;
    volatile uint16_t CMPLD1;
    volatile uint16_t CMPLD2;
    volatile uint16_t CSCTRL;
    volatile uint16_t FILT;
    volatile uint16_t DMA;
         uint8_t RESERVED_0[4];
    volatile uint16_t ENBL;
  } CHANNEL[4];
} TMR_Type;
# 21333 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCTL;
  volatile uint32_t SCMISC;
  volatile uint32_t PKRRNG;
  union {
    volatile uint32_t PKRMAX;
    volatile const uint32_t PKRSQ;
  };
  volatile uint32_t SDCTL;
  union {
    volatile uint32_t SBLIM;
    volatile const uint32_t TOTSAM;
  };
  volatile uint32_t FRQMIN;
  union {
    volatile const uint32_t FRQCNT;
    volatile uint32_t FRQMAX;
  };
  union {
    volatile const uint32_t SCMC;
    volatile uint32_t SCML;
  };
  union {
    volatile const uint32_t SCR1C;
    volatile uint32_t SCR1L;
  };
  union {
    volatile const uint32_t SCR2C;
    volatile uint32_t SCR2L;
  };
  union {
    volatile const uint32_t SCR3C;
    volatile uint32_t SCR3L;
  };
  union {
    volatile const uint32_t SCR4C;
    volatile uint32_t SCR4L;
  };
  union {
    volatile const uint32_t SCR5C;
    volatile uint32_t SCR5L;
  };
  union {
    volatile const uint32_t SCR6PC;
    volatile uint32_t SCR6PL;
  };
  volatile const uint32_t STATUS;
  volatile const uint32_t ENT[16];
  volatile const uint32_t PKRCNT10;
  volatile const uint32_t PKRCNT32;
  volatile const uint32_t PKRCNT54;
  volatile const uint32_t PKRCNT76;
  volatile const uint32_t PKRCNT98;
  volatile const uint32_t PKRCNTBA;
  volatile const uint32_t PKRCNTDC;
  volatile const uint32_t PKRCNTFE;
  volatile uint32_t SEC_CFG;
  volatile uint32_t INT_CTRL;
  volatile uint32_t INT_MASK;
  volatile const uint32_t INT_STATUS;
       uint8_t RESERVED_0[64];
  volatile const uint32_t VID1;
  volatile const uint32_t VID2;
} TRNG_Type;
# 21846 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t BASIC_SETTING;
       uint8_t RESERVED_0[12];
  volatile uint32_t PRE_CHARGE_TIME;
       uint8_t RESERVED_1[12];
  volatile uint32_t FLOW_CONTROL;
       uint8_t RESERVED_2[12];
  volatile const uint32_t MEASEURE_VALUE;
       uint8_t RESERVED_3[12];
  volatile uint32_t INT_EN;
       uint8_t RESERVED_4[12];
  volatile uint32_t INT_SIG_EN;
       uint8_t RESERVED_5[12];
  volatile uint32_t INT_STATUS;
       uint8_t RESERVED_6[12];
  volatile uint32_t DEBUG_MODE;
       uint8_t RESERVED_7[12];
  volatile uint32_t DEBUG_MODE2;
} TSC_Type;
# 22084 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t ID;
  volatile const uint32_t HWGENERAL;
  volatile const uint32_t HWHOST;
  volatile const uint32_t HWDEVICE;
  volatile const uint32_t HWTXBUF;
  volatile const uint32_t HWRXBUF;
       uint8_t RESERVED_0[104];
  volatile uint32_t GPTIMER0LD;
  volatile uint32_t GPTIMER0CTRL;
  volatile uint32_t GPTIMER1LD;
  volatile uint32_t GPTIMER1CTRL;
  volatile uint32_t SBUSCFG;
       uint8_t RESERVED_1[108];
  volatile const uint8_t CAPLENGTH;
       uint8_t RESERVED_2[1];
  volatile const uint16_t HCIVERSION;
  volatile const uint32_t HCSPARAMS;
  volatile const uint32_t HCCPARAMS;
       uint8_t RESERVED_3[20];
  volatile const uint16_t DCIVERSION;
       uint8_t RESERVED_4[2];
  volatile const uint32_t DCCPARAMS;
       uint8_t RESERVED_5[24];
  volatile uint32_t USBCMD;
  volatile uint32_t USBSTS;
  volatile uint32_t USBINTR;
  volatile uint32_t FRINDEX;
       uint8_t RESERVED_6[4];
  union {
    volatile uint32_t DEVICEADDR;
    volatile uint32_t PERIODICLISTBASE;
  };
  union {
    volatile uint32_t ASYNCLISTADDR;
    volatile uint32_t ENDPTLISTADDR;
  };
       uint8_t RESERVED_7[4];
  volatile uint32_t BURSTSIZE;
  volatile uint32_t TXFILLTUNING;
       uint8_t RESERVED_8[16];
  volatile uint32_t ENDPTNAK;
  volatile uint32_t ENDPTNAKEN;
  volatile const uint32_t CONFIGFLAG;
  volatile uint32_t PORTSC1;
       uint8_t RESERVED_9[28];
  volatile uint32_t OTGSC;
  volatile uint32_t USBMODE;
  volatile uint32_t ENDPTSETUPSTAT;
  volatile uint32_t ENDPTPRIME;
  volatile uint32_t ENDPTFLUSH;
  volatile const uint32_t ENDPTSTAT;
  volatile uint32_t ENDPTCOMPLETE;
  volatile uint32_t ENDPTCTRL0;
  volatile uint32_t ENDPTCTRL[7];
} USB_Type;
# 23396 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[2048];
  volatile uint32_t USB_OTGn_CTRL;
       uint8_t RESERVED_1[20];
  volatile uint32_t USB_OTGn_PHY_CTRL_0;
} USBNC_Type;
# 23484 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t PWD;
  volatile uint32_t PWD_SET;
  volatile uint32_t PWD_CLR;
  volatile uint32_t PWD_TOG;
  volatile uint32_t TX;
  volatile uint32_t TX_SET;
  volatile uint32_t TX_CLR;
  volatile uint32_t TX_TOG;
  volatile uint32_t RX;
  volatile uint32_t RX_SET;
  volatile uint32_t RX_CLR;
  volatile uint32_t RX_TOG;
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t STATUS;
       uint8_t RESERVED_0[12];
  volatile uint32_t DEBUGr;
  volatile uint32_t DEBUG_SET;
  volatile uint32_t DEBUG_CLR;
  volatile uint32_t DEBUG_TOG;
  volatile const uint32_t DEBUG0_STATUS;
       uint8_t RESERVED_1[12];
  volatile uint32_t DEBUG1;
  volatile uint32_t DEBUG1_SET;
  volatile uint32_t DEBUG1_CLR;
  volatile uint32_t DEBUG1_TOG;
  volatile const uint32_t VERSION;
} USBPHY_Type;
# 24545 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[416];
  struct {
    volatile uint32_t VBUS_DETECT;
    volatile uint32_t VBUS_DETECT_SET;
    volatile uint32_t VBUS_DETECT_CLR;
    volatile uint32_t VBUS_DETECT_TOG;
    volatile uint32_t CHRG_DETECT;
    volatile uint32_t CHRG_DETECT_SET;
    volatile uint32_t CHRG_DETECT_CLR;
    volatile uint32_t CHRG_DETECT_TOG;
    volatile const uint32_t VBUS_DETECT_STAT;
         uint8_t RESERVED_0[12];
    volatile const uint32_t CHRG_DETECT_STAT;
         uint8_t RESERVED_1[28];
    volatile uint32_t MISC;
    volatile uint32_t MISC_SET;
    volatile uint32_t MISC_CLR;
    volatile uint32_t MISC_TOG;
  } INSTANCE[2];
  volatile const uint32_t DIGPROG;
} USB_ANALOG_Type;
# 24833 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t DS_ADDR;
  volatile uint32_t BLK_ATT;
  volatile uint32_t CMD_ARG;
  volatile uint32_t CMD_XFR_TYP;
  volatile const uint32_t CMD_RSP0;
  volatile const uint32_t CMD_RSP1;
  volatile const uint32_t CMD_RSP2;
  volatile const uint32_t CMD_RSP3;
  volatile uint32_t DATA_BUFF_ACC_PORT;
  volatile const uint32_t PRES_STATE;
  volatile uint32_t PROT_CTRL;
  volatile uint32_t SYS_CTRL;
  volatile uint32_t INT_STATUS;
  volatile uint32_t INT_STATUS_EN;
  volatile uint32_t INT_SIGNAL_EN;
  volatile uint32_t AUTOCMD12_ERR_STATUS;
  volatile uint32_t HOST_CTRL_CAP;
  volatile uint32_t WTMK_LVL;
  volatile uint32_t MIX_CTRL;
       uint8_t RESERVED_0[4];
  volatile uint32_t FORCE_EVENT;
  volatile const uint32_t ADMA_ERR_STATUS;
  volatile uint32_t ADMA_SYS_ADDR;
       uint8_t RESERVED_1[4];
  volatile uint32_t DLL_CTRL;
  volatile const uint32_t DLL_STATUS;
  volatile uint32_t CLK_TUNE_CTRL_STATUS;
       uint8_t RESERVED_2[84];
  volatile uint32_t VEND_SPEC;
  volatile uint32_t MMC_BOOT;
  volatile uint32_t VEND_SPEC2;
  volatile uint32_t TUNING_CTRL;
} USDHC_Type;
# 25659 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t WCR;
  volatile uint16_t WSR;
  volatile const uint16_t WRSR;
  volatile uint16_t WICR;
  volatile uint16_t WMCR;
} WDOG_Type;
# 25774 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t SEL0;
  volatile uint16_t SEL1;
  volatile uint16_t SEL2;
  volatile uint16_t SEL3;
  volatile uint16_t SEL4;
  volatile uint16_t SEL5;
  volatile uint16_t SEL6;
  volatile uint16_t SEL7;
  volatile uint16_t SEL8;
  volatile uint16_t SEL9;
  volatile uint16_t SEL10;
  volatile uint16_t SEL11;
  volatile uint16_t SEL12;
  volatile uint16_t SEL13;
  volatile uint16_t SEL14;
  volatile uint16_t SEL15;
  volatile uint16_t SEL16;
  volatile uint16_t SEL17;
  volatile uint16_t SEL18;
  volatile uint16_t SEL19;
  volatile uint16_t SEL20;
  volatile uint16_t SEL21;
  volatile uint16_t SEL22;
  volatile uint16_t SEL23;
  volatile uint16_t SEL24;
  volatile uint16_t SEL25;
  volatile uint16_t SEL26;
  volatile uint16_t SEL27;
  volatile uint16_t SEL28;
  volatile uint16_t SEL29;
  volatile uint16_t SEL30;
  volatile uint16_t SEL31;
  volatile uint16_t SEL32;
  volatile uint16_t SEL33;
  volatile uint16_t SEL34;
  volatile uint16_t SEL35;
  volatile uint16_t SEL36;
  volatile uint16_t SEL37;
  volatile uint16_t SEL38;
  volatile uint16_t SEL39;
  volatile uint16_t SEL40;
  volatile uint16_t SEL41;
  volatile uint16_t SEL42;
  volatile uint16_t SEL43;
  volatile uint16_t SEL44;
  volatile uint16_t SEL45;
  volatile uint16_t SEL46;
  volatile uint16_t SEL47;
  volatile uint16_t SEL48;
  volatile uint16_t SEL49;
  volatile uint16_t SEL50;
  volatile uint16_t SEL51;
  volatile uint16_t SEL52;
  volatile uint16_t SEL53;
  volatile uint16_t SEL54;
  volatile uint16_t SEL55;
  volatile uint16_t SEL56;
  volatile uint16_t SEL57;
  volatile uint16_t SEL58;
  volatile uint16_t SEL59;
  volatile uint16_t SEL60;
  volatile uint16_t SEL61;
  volatile uint16_t SEL62;
  volatile uint16_t SEL63;
  volatile uint16_t SEL64;
  volatile uint16_t SEL65;
  volatile uint16_t CTRL0;
  volatile uint16_t CTRL1;
} XBARA_Type;
# 26465 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t SEL0;
  volatile uint16_t SEL1;
  volatile uint16_t SEL2;
  volatile uint16_t SEL3;
  volatile uint16_t SEL4;
  volatile uint16_t SEL5;
  volatile uint16_t SEL6;
  volatile uint16_t SEL7;
} XBARB_Type;
# 26584 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[336];
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
       uint8_t RESERVED_1[272];
  volatile uint32_t LOWPWR_CTRL;
  volatile uint32_t LOWPWR_CTRL_SET;
  volatile uint32_t LOWPWR_CTRL_CLR;
  volatile uint32_t LOWPWR_CTRL_TOG;
       uint8_t RESERVED_2[32];
  volatile uint32_t OSC_CONFIG0;
  volatile uint32_t OSC_CONFIG0_SET;
  volatile uint32_t OSC_CONFIG0_CLR;
  volatile uint32_t OSC_CONFIG0_TOG;
  volatile uint32_t OSC_CONFIG1;
  volatile uint32_t OSC_CONFIG1_SET;
  volatile uint32_t OSC_CONFIG1_CLR;
  volatile uint32_t OSC_CONFIG1_TOG;
  volatile uint32_t OSC_CONFIG2;
  volatile uint32_t OSC_CONFIG2_SET;
  volatile uint32_t OSC_CONFIG2_CLR;
  volatile uint32_t OSC_CONFIG2_TOG;
} XTALOSC24M_Type;
# 52 "mcusdk/fsl_device_registers.h" 2

# 1 "mcusdk/MIMXRT1052_features.h" 1
# 54 "mcusdk/fsl_device_registers.h" 2
# 49 "mcusdk/drivers/fsl_common.h" 2
# 82 "mcusdk/drivers/fsl_common.h"
enum _status_groups
{
    kStatusGroup_Generic = 0,
    kStatusGroup_FLASH = 1,
    kStatusGroup_LPSPI = 4,
    kStatusGroup_FLEXIO_SPI = 5,
    kStatusGroup_DSPI = 6,
    kStatusGroup_FLEXIO_UART = 7,
    kStatusGroup_FLEXIO_I2C = 8,
    kStatusGroup_LPI2C = 9,
    kStatusGroup_UART = 10,
    kStatusGroup_I2C = 11,
    kStatusGroup_LPSCI = 12,
    kStatusGroup_LPUART = 13,
    kStatusGroup_SPI = 14,
    kStatusGroup_XRDC = 15,
    kStatusGroup_SEMA42 = 16,
    kStatusGroup_SDHC = 17,
    kStatusGroup_SDMMC = 18,
    kStatusGroup_SAI = 19,
    kStatusGroup_MCG = 20,
    kStatusGroup_SCG = 21,
    kStatusGroup_SDSPI = 22,
    kStatusGroup_FLEXIO_I2S = 23,
    kStatusGroup_FLEXIO_MCULCD = 24,
    kStatusGroup_FLASHIAP = 25,
    kStatusGroup_FLEXCOMM_I2C = 26,
    kStatusGroup_I2S = 27,
    kStatusGroup_IUART = 28,
    kStatusGroup_CSI = 29,
    kStatusGroup_MIPI_DSI = 30,
    kStatusGroup_SDRAMC = 35,
    kStatusGroup_POWER = 39,
    kStatusGroup_ENET = 40,
    kStatusGroup_PHY = 41,
    kStatusGroup_TRGMUX = 42,
    kStatusGroup_SMARTCARD = 43,
    kStatusGroup_LMEM = 44,
    kStatusGroup_QSPI = 45,
    kStatusGroup_DMA = 50,
    kStatusGroup_EDMA = 51,
    kStatusGroup_DMAMGR = 52,
    kStatusGroup_FLEXCAN = 53,
    kStatusGroup_LTC = 54,
    kStatusGroup_FLEXIO_CAMERA = 55,
    kStatusGroup_LPC_SPI = 56,
    kStatusGroup_LPC_USART = 57,
    kStatusGroup_DMIC = 58,
    kStatusGroup_SDIF = 59,
    kStatusGroup_SPIFI = 60,
    kStatusGroup_OTP = 61,
    kStatusGroup_MCAN = 62,
    kStatusGroup_CAAM = 63,
    kStatusGroup_ECSPI = 64,
    kStatusGroup_USDHC = 65,
    kStatusGroup_LPC_I2C = 66,
    kStatusGroup_DCP = 67,
    kStatusGroup_MSCAN = 68,
    kStatusGroup_ESAI = 69,
    kStatusGroup_FLEXSPI = 70,
    kStatusGroup_MMDC = 71,
    kStatusGroup_MICFIL = 72,
    kStatusGroup_SDMA = 73,
    kStatusGroup_ICS = 74,
    kStatusGroup_SPDIF = 75,
    kStatusGroup_NOTIFIER = 98,
    kStatusGroup_DebugConsole = 99,
    kStatusGroup_SEMC = 100,
    kStatusGroup_ApplicationRangeStart = 101,
};


enum _generic_status
{
    kStatus_Success = ((((kStatusGroup_Generic)*100) + (0))),
    kStatus_Fail = ((((kStatusGroup_Generic)*100) + (1))),
    kStatus_ReadOnly = ((((kStatusGroup_Generic)*100) + (2))),
    kStatus_OutOfRange = ((((kStatusGroup_Generic)*100) + (3))),
    kStatus_InvalidArgument = ((((kStatusGroup_Generic)*100) + (4))),
    kStatus_Timeout = ((((kStatusGroup_Generic)*100) + (5))),
    kStatus_NoTransferInProgress = ((((kStatusGroup_Generic)*100) + (6))),
};


typedef int32_t status_t;





# 1 "mcusdk/drivers/fsl_clock.h" 1
# 40 "mcusdk/drivers/fsl_clock.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3

# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 41 "mcusdk/drivers/fsl_clock.h" 2
# 102 "mcusdk/drivers/fsl_clock.h"

# 102 "mcusdk/drivers/fsl_clock.h"
extern uint32_t g_xtalFreq;






extern uint32_t g_rtcXtalFreq;
# 381 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_name
{
    kCLOCK_CpuClk = 0x0U,
    kCLOCK_AhbClk = 0x1U,
    kCLOCK_SemcClk = 0x2U,
    kCLOCK_IpgClk = 0x3U,

    kCLOCK_OscClk = 0x4U,
    kCLOCK_RtcClk = 0x5U,

    kCLOCK_ArmPllClk = 0x6U,

    kCLOCK_Usb1PllClk = 0x7U,
    kCLOCK_Usb1PllPfd0Clk = 0x8U,
    kCLOCK_Usb1PllPfd1Clk = 0x9U,
    kCLOCK_Usb1PllPfd2Clk = 0xAU,
    kCLOCK_Usb1PllPfd3Clk = 0xBU,

    kCLOCK_Usb2PllClk = 0xCU,

    kCLOCK_SysPllClk = 0xDU,
    kCLOCK_SysPllPfd0Clk = 0xEU,
    kCLOCK_SysPllPfd1Clk = 0xFU,
    kCLOCK_SysPllPfd2Clk = 0x10U,
    kCLOCK_SysPllPfd3Clk = 0x11U,

    kCLOCK_EnetPll0Clk = 0x12U,
    kCLOCK_EnetPll1Clk = 0x13U,
    kCLOCK_EnetPll2Clk = 0x14U,

    kCLOCK_AudioPllClk = 0x15U,
    kCLOCK_VideoPllClk = 0x16U,
} clock_name_t;







typedef enum _clock_ip_name
{
    kCLOCK_IpInvalid = -1,


    kCLOCK_Aips_tz1 = (0U << 8U) | (0U),
    kCLOCK_Aips_tz2 = (0U << 8U) | (2U),



    kCLOCK_Dcp = (0U << 8U) | (10U),
    kCLOCK_Lpuart3 = (0U << 8U) | (12U),
    kCLOCK_Can1 = (0U << 8U) | (14U),
    kCLOCK_Can1S = (0U << 8U) | (16U),
    kCLOCK_Can2 = (0U << 8U) | (18U),
    kCLOCK_Can2S = (0U << 8U) | (20U),
    kCLOCK_Trace = (0U << 8U) | (22U),
    kCLOCK_Gpt2 = (0U << 8U) | (24U),
    kCLOCK_Gpt2S = (0U << 8U) | (26U),
    kCLOCK_Lpuart2 = (0U << 8U) | (28U),
    kCLOCK_Gpio2 = (0U << 8U) | (30U),


    kCLOCK_Lpspi1 = (1U << 8U) | (0U),
    kCLOCK_Lpspi2 = (1U << 8U) | (2U),
    kCLOCK_Lpspi3 = (1U << 8U) | (4U),
    kCLOCK_Lpspi4 = (1U << 8U) | (6U),
    kCLOCK_Adc2 = (1U << 8U) | (8U),
    kCLOCK_Enet = (1U << 8U) | (10U),
    kCLOCK_Pit = (1U << 8U) | (12U),
    kCLOCK_Aoi2 = (1U << 8U) | (14U),
    kCLOCK_Adc1 = (1U << 8U) | (16U),

    kCLOCK_Gpt1 = (1U << 8U) | (20U),
    kCLOCK_Gpt1S = (1U << 8U) | (22U),
    kCLOCK_Lpuart4 = (1U << 8U) | (24U),
    kCLOCK_Gpio1 = (1U << 8U) | (26U),
    kCLOCK_Csu = (1U << 8U) | (28U),
    kCLOCK_Gpio5 = (1U << 8U) | (30U),



    kCLOCK_Csi = (2U << 8U) | (2U),
    kCLOCK_IomuxcSnvs = (2U << 8U) | (4U),
    kCLOCK_Lpi2c1 = (2U << 8U) | (6U),
    kCLOCK_Lpi2c2 = (2U << 8U) | (8U),
    kCLOCK_Lpi2c3 = (2U << 8U) | (10U),
    kCLOCK_Ocotp = (2U << 8U) | (12U),
    kCLOCK_Xbar3 = (2U << 8U) | (14U),
    kCLOCK_Ipmux1 = (2U << 8U) | (16U),
    kCLOCK_Ipmux2 = (2U << 8U) | (18U),
    kCLOCK_Ipmux3 = (2U << 8U) | (20U),
    kCLOCK_Xbar1 = (2U << 8U) | (22U),
    kCLOCK_Xbar2 = (2U << 8U) | (24U),
    kCLOCK_Gpio3 = (2U << 8U) | (26U),
    kCLOCK_Lcd = (2U << 8U) | (28U),
    kCLOCK_Pxp = (2U << 8U) | (30U),


    kCLOCK_Flexio2 = (3U << 8U) | (0U),
    kCLOCK_Lpuart5 = (3U << 8U) | (2U),
    kCLOCK_Semc = (3U << 8U) | (4U),
    kCLOCK_Lpuart6 = (3U << 8U) | (6U),
    kCLOCK_Aoi1 = (3U << 8U) | (8U),
    kCLOCK_LcdPixel = (3U << 8U) | (10U),
    kCLOCK_Gpio4 = (3U << 8U) | (12U),
    kCLOCK_Ewm0 = (3U << 8U) | (14U),
    kCLOCK_Wdog1 = (3U << 8U) | (16U),
    kCLOCK_FlexRam = (3U << 8U) | (18U),
    kCLOCK_Acmp1 = (3U << 8U) | (20U),
    kCLOCK_Acmp2 = (3U << 8U) | (22U),
    kCLOCK_Acmp3 = (3U << 8U) | (24U),
    kCLOCK_Acmp4 = (3U << 8U) | (26U),
    kCLOCK_Ocram = (3U << 8U) | (28U),
    kCLOCK_IomuxcSnvsGpr = (3U << 8U) | (30U),


    kCLOCK_Iomuxc = (4U << 8U) | (2U),
    kCLOCK_IomuxcGpr = (4U << 8U) | (4U),
    kCLOCK_Bee = (4U << 8U) | (6U),
    kCLOCK_SimM7 = (4U << 8U) | (8U),
    kCLOCK_Tsc = (4U << 8U) | (10U),
    kCLOCK_SimM = (4U << 8U) | (12U),
    kCLOCK_SimEms = (4U << 8U) | (14U),
    kCLOCK_Pwm1 = (4U << 8U) | (16U),
    kCLOCK_Pwm2 = (4U << 8U) | (18U),
    kCLOCK_Pwm3 = (4U << 8U) | (20U),
    kCLOCK_Pwm4 = (4U << 8U) | (22U),
    kCLOCK_Enc1 = (4U << 8U) | (24U),
    kCLOCK_Enc2 = (4U << 8U) | (26U),
    kCLOCK_Enc3 = (4U << 8U) | (28U),
    kCLOCK_Enc4 = (4U << 8U) | (30U),


    kCLOCK_Rom = (5U << 8U) | (0U),
    kCLOCK_Flexio1 = (5U << 8U) | (2U),
    kCLOCK_Wdog3 = (5U << 8U) | (4U),
    kCLOCK_Dma = (5U << 8U) | (6U),
    kCLOCK_Kpp = (5U << 8U) | (8U),
    kCLOCK_Wdog2 = (5U << 8U) | (10U),
    kCLOCK_Aips_tz4 = (5U << 8U) | (12U),
    kCLOCK_Spdif = (5U << 8U) | (14U),
    kCLOCK_SimMain = (5U << 8U) | (16U),
    kCLOCK_Sai1 = (5U << 8U) | (18U),
    kCLOCK_Sai2 = (5U << 8U) | (20U),
    kCLOCK_Sai3 = (5U << 8U) | (22U),
    kCLOCK_Lpuart1 = (5U << 8U) | (24U),
    kCLOCK_Lpuart7 = (5U << 8U) | (26U),
    kCLOCK_SnvsHp = (5U << 8U) | (28U),
    kCLOCK_SnvsLp = (5U << 8U) | (30U),


    kCLOCK_UsbOh3 = (6U << 8U) | (0U),
    kCLOCK_Usdhc1 = (6U << 8U) | (2U),
    kCLOCK_Usdhc2 = (6U << 8U) | (4U),
    kCLOCK_Dcdc = (6U << 8U) | (6U),
    kCLOCK_Ipmux4 = (6U << 8U) | (8U),
    kCLOCK_FlexSpi = (6U << 8U) | (10U),
    kCLOCK_Trng = (6U << 8U) | (12U),
    kCLOCK_Lpuart8 = (6U << 8U) | (14U),
    kCLOCK_Timer4 = (6U << 8U) | (16U),
    kCLOCK_Aips_tz3 = (6U << 8U) | (18U),
    kCLOCK_SimPer = (6U << 8U) | (20U),
    kCLOCK_Anadig = (6U << 8U) | (22U),
    kCLOCK_Lpi2c4 = (6U << 8U) | (24U),
    kCLOCK_Timer1 = (6U << 8U) | (26U),
    kCLOCK_Timer2 = (6U << 8U) | (28U),
    kCLOCK_Timer3 = (6U << 8U) | (30U),

} clock_ip_name_t;


typedef enum _clock_osc
{
    kCLOCK_RcOsc = 0U,
    kCLOCK_XtalOsc = 1U,
} clock_osc_t;


typedef enum _clock_gate_value
{
    kCLOCK_ClockNotNeeded = 0U,
    kCLOCK_ClockNeededRun = 1U,
    kCLOCK_ClockNeededRunWait = 3U,
} clock_gate_value_t;


typedef enum _clock_mode_t
{
    kCLOCK_ModeRun = 0U,
    kCLOCK_ModeWait = 1U,
    kCLOCK_ModeStop = 2U,
} clock_mode_t;
# 584 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_mux
{
    kCLOCK_Pll3SwMux = ((((uint32_t)(&((CCM_Type *)0U)->CCSR)) & 0xFFU) | (((0U)) << 8U) | (((((0x1U)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_PeriphMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((25U)) << 8U) | (((((0x2000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((5U)) << 26U)),
    kCLOCK_SemcAltMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((7U)) << 8U) | (((((0x80U)) >> ((7U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_SemcMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_PrePeriphMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((18U)) << 8U) | (((((0xC0000U)) >> ((18U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_TraceMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((14U)) << 8U) | (((((0xC000U)) >> ((14U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PeriphClk2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((12U)) << 8U) | (((((0x3000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_LpspiMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((4U)) << 8U) | (((((0x30U)) >> ((4U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_FlexspiMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((29U)) << 8U) | (((((0x60000000U)) >> ((29U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((17U)) << 8U) | (((((0x20000U)) >> ((17U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((16U)) << 8U) | (((((0x10000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((14U)) << 8U) | (((((0xC000U)) >> ((14U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((12U)) << 8U) | (((((0x3000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((10U)) << 8U) | (((((0xC00U)) >> ((10U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PerclkMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Flexio2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((19U)) << 8U) | (((((0x180000U)) >> ((19U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_CanMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((8U)) << 8U) | (((((0x300U)) >> ((8U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_UartMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_SpdifMux = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((20U)) << 8U) | (((((0x300000U)) >> ((20U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((7U)) << 8U) | (((((0x180U)) >> ((7U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Lpi2cMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((18U)) << 8U) | (((((0x40000U)) >> ((18U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1PreMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((15U)) << 8U) | (((((0x38000U)) >> ((15U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CsiMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR3)) & 0xFFU) | (((9U)) << 8U) | (((((0x600U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
} clock_mux_t;
# 629 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_div
{
    kCLOCK_ArmDiv = ((((uint32_t)(&((CCM_Type *)0U)->CACRR)) & 0xFFU) | (((0U)) << 8U) | (((((0x7U)) >> ((0U))) & 0x1FFFU) << 13U) | (((16U)) << 26U)),

    kCLOCK_PeriphClk2Div = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((27U)) << 8U) | (((((0x38000000U)) >> ((27U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_SemcDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((16U)) << 8U) | (((((0x70000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0U)) << 26U)),
    kCLOCK_AhbDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((10U)) << 8U) | (((((0x1C00U)) >> ((10U))) & 0x1FFFU) << 13U) | (((1U)) << 26U)),
    kCLOCK_IpgDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((8U)) << 8U) | (((((0x300U)) >> ((8U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_LpspiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((26U)) << 8U) | (((((0x1C000000U)) >> ((26U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1Div = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((23U)) << 8U) | (((((0x3800000U)) >> ((23U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_FlexspiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((23U)) << 8U) | (((((0x3800000U)) >> ((23U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PerclkDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CanDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((2U)) << 8U) | (((((0xFCU)) >> ((2U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_TraceDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((25U)) << 8U) | (((((0x6000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc2Div = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((16U)) << 8U) | (((((0x70000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc1Div = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((11U)) << 8U) | (((((0x3800U)) >> ((11U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_UartDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Flexio2Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((25U)) << 8U) | (((((0xE000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((22U)) << 8U) | (((((0x1C00000U)) >> ((22U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((16U)) << 8U) | (((((0x3F0000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio2PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x1C0U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Sai2PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS2CDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x1C0U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai2Div = ((((uint32_t)(&((CCM_Type *)0U)->CS2CDR)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Spdif0PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((25U)) << 8U) | (((((0xE000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Spdif0Div = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((22U)) << 8U) | (((((0x1C00000U)) >> ((22U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((12U)) << 8U) | (((((0x7000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1Div = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Lpi2cDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((19U)) << 8U) | (((((0x1F80000U)) >> ((19U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((12U)) << 8U) | (((((0x7000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CsiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR3)) & 0xFFU) | (((11U)) << 8U) | (((((0x3800U)) >> ((11U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
} clock_div_t;


enum _clock_pll_bypass_clk_src
{
    kCLOCK_PllBypassClkSrc24M = 0U,
    kCLOCK_PllBypassClkSrcClkPN = 1U,
};


typedef struct _clock_arm_pll_config
{
    uint32_t loopDivider;
} clock_arm_pll_config_t;


typedef struct _clock_usb_pll_config
{
    uint8_t loopDivider;


} clock_usb_pll_config_t;



typedef struct _clock_sys_pll_config
{
    uint8_t loopDivider;


    uint32_t numerator;
    uint32_t denominator;
} clock_sys_pll_config_t;


typedef struct _clock_audio_pll_config
{
    uint8_t loopDivider;
    uint8_t postDivider;
    uint32_t numerator;
    uint32_t denominator;
} clock_audio_pll_config_t;


typedef struct _clock_video_pll_config
{
    uint8_t loopDivider;
    uint8_t postDivider;
    uint32_t numerator;
    uint32_t denominator;
} clock_video_pll_config_t;


typedef struct _clock_enet_pll_config
{
    
# 725 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 725 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput0;
    
# 726 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 726 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput1;
    
# 727 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 727 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput2;
    uint8_t loopDivider0;




    uint8_t loopDivider1;




} clock_enet_pll_config_t;


typedef enum _clock_pll
{
    kCLOCK_PllArm = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ARM) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllSys = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_SYS) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllUsb1 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_USB1) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllAudio = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_AUDIO) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllVideo = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_VIDEO) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllEnet0 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllEnet1 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((20U))),
    kCLOCK_PllEnet2 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((21U))),
    kCLOCK_PllUsb2 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_USB2) & 0xFFFU) << 16U) | ((13U))),
} clock_pll_t;


typedef enum _clock_pfd
{
    kCLOCK_Pfd0 = 0U,
    kCLOCK_Pfd1 = 1U,
    kCLOCK_Pfd2 = 2U,
    kCLOCK_Pfd3 = 3U,
} clock_pfd_t;


typedef enum _clock_usb_src
{
    kCLOCK_Usb480M = 0,
    kCLOCK_UsbSrcUnused = 0xFFFFFFFFU,

} clock_usb_src_t;


typedef enum _clock_usb_phy_src
{
    kCLOCK_Usbphy480M = 0,
} clock_usb_phy_src_t;
# 791 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetMux(clock_mux_t mux, uint32_t value)
{
    uint32_t busyShift;

    busyShift = (((mux) >> 26U) & 0x3FU);
    (*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) = ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) & (~((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU)))))) |
                              (((uint32_t)((value) << (((mux) >> 8U) & 0x1FU))) & ((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU)))));

    
# 799 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 799 "mcusdk/drivers/fsl_clock.h"
                                        ;


    if ((0x20U) != busyShift)
    {

        while (((CCM_Type *)(0x400FC000u))->CDHIPR & (1U << busyShift))
        {
        }
    }
}







static inline uint32_t CLOCK_GetMux(clock_mux_t mux)
{
    return ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) & ((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU))))) >> (((mux) >> 8U) & 0x1FU);
}







static inline void CLOCK_SetDiv(clock_div_t divider, uint32_t value)
{
    uint32_t busyShift;

    busyShift = (((divider) >> 26U) & 0x3FU);
    (*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) = ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) & (~((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU)))))) |
                              (((uint32_t)((value) << (((divider) >> 8U) & 0x1FU))) & ((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU)))));

    
# 836 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 836 "mcusdk/drivers/fsl_clock.h"
                                        ;


    if ((0x20U) != busyShift)
    {

        while (((CCM_Type *)(0x400FC000u))->CDHIPR & (1U << busyShift))
        {
        }
    }
}






static inline uint32_t CLOCK_GetDiv(clock_div_t divider)
{
    return (((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) & ((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU))))) >> (((divider) >> 8U) & 0x1FU));
}







static inline void CLOCK_ControlGate(clock_ip_name_t name, clock_gate_value_t value)
{
    uint32_t index = ((uint32_t)name) >> 8U;
    uint32_t shift = ((uint32_t)name) & 0x1FU;
    volatile uint32_t *reg;

    
# 870 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 870 "mcusdk/drivers/fsl_clock.h"
                      ;

    reg = ((volatile uint32_t *)&((CCM_Type *)(0x400FC000u))->CCGR0) + index;
    *reg = ((*reg) & ~(3U << shift)) | (((uint32_t)value) << shift);
}






static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
}






static inline void CLOCK_DisableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNotNeeded);
}






static inline void CLOCK_SetMode(clock_mode_t mode)
{
    ((CCM_Type *)(0x400FC000u))->CLPCR = (((CCM_Type *)(0x400FC000u))->CLPCR & ~(0x3U)) | (((uint32_t)(((uint32_t)((uint32_t)mode)) << (0U))) & (0x3U));
}
# 915 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetPllBypass(CCM_ANALOG_Type * base, clock_pll_t pll, 
# 915 "mcusdk/drivers/fsl_clock.h" 3 4
                                                                              _Bool 
# 915 "mcusdk/drivers/fsl_clock.h"
                                                                                   bypass)
{
    if (bypass)
    {
        (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 4U))) |= 1U << (16U);
    }
    else
    {
        (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 8U))) |= 1U << (16U);
    }
}
# 936 "mcusdk/drivers/fsl_clock.h"
static inline 
# 936 "mcusdk/drivers/fsl_clock.h" 3 4
             _Bool 
# 936 "mcusdk/drivers/fsl_clock.h"
                  CLOCK_IsPllBypassed(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return (
# 938 "mcusdk/drivers/fsl_clock.h" 3 4
           _Bool
# 938 "mcusdk/drivers/fsl_clock.h"
               )((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (1U << (16U)));
}
# 950 "mcusdk/drivers/fsl_clock.h"
static inline 
# 950 "mcusdk/drivers/fsl_clock.h" 3 4
             _Bool 
# 950 "mcusdk/drivers/fsl_clock.h"
                  CLOCK_IsPllEnabled(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return (
# 952 "mcusdk/drivers/fsl_clock.h" 3 4
           _Bool
# 952 "mcusdk/drivers/fsl_clock.h"
               )((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (1U << (((uint32_t)pll) & 0x1FU)));
}
# 963 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetPllBypassRefClkSrc(CCM_ANALOG_Type * base, clock_pll_t pll, uint32_t src)
{
    (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) |= ((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (~(0xC000U))) | src;
}
# 978 "mcusdk/drivers/fsl_clock.h"
static inline uint32_t CLOCK_GetOscFreq(void)
{
    return (((XTALOSC24M_Type *)(0x400D8000u))->LOWPWR_CTRL & (0x10U)) ? 24000000UL : g_xtalFreq;
}
# 990 "mcusdk/drivers/fsl_clock.h"
static inline uint32_t CLOCK_GetPllBypassRefClk(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return ((((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (0xC000U)) >> (14U)) == kCLOCK_PllBypassClkSrc24M) ?
    CLOCK_GetOscFreq() : 0U;
}
# 1005 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetFreq(clock_name_t name);






static inline uint32_t CLOCK_GetCpuClkFreq(void)
{
    return CLOCK_GetFreq(kCLOCK_CpuClk);
}
# 1036 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitExternalClk(
# 1036 "mcusdk/drivers/fsl_clock.h" 3 4
                          _Bool 
# 1036 "mcusdk/drivers/fsl_clock.h"
                               bypassXtalOsc);
# 1046 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitExternalClk(void);
# 1055 "mcusdk/drivers/fsl_clock.h"
void CLOCK_SwitchOsc(clock_osc_t osc);






static inline uint32_t CLOCK_GetRtcFreq(void)
{
    return 32768U;
}






static inline void CLOCK_SetXtalFreq(uint32_t freq)
{
    g_xtalFreq = freq;
}






static inline void CLOCK_SetRtcXtalFreq(uint32_t freq)
{
    g_rtcXtalFreq = freq;
}





void CLOCK_InitRcOsc24M(void);




void CLOCK_DeinitRcOsc24M(void);
# 1111 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitArmPll(const clock_arm_pll_config_t *config);




void CLOCK_DeinitArmPll(void);
# 1125 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitSysPll(const clock_sys_pll_config_t *config);




void CLOCK_DeinitSysPll(void);
# 1139 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb1Pll(const clock_usb_pll_config_t *config);




void CLOCK_DeinitUsb1Pll(void);
# 1153 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb2Pll(const clock_usb_pll_config_t *config);




void CLOCK_DeinitUsb2Pll(void);
# 1167 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitAudioPll(const clock_audio_pll_config_t *config);




void CLOCK_DeinitAudioPll(void);
# 1181 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitVideoPll(const clock_video_pll_config_t *config);




void CLOCK_DeinitVideoPll(void);
# 1195 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitEnetPll(const clock_enet_pll_config_t *config);






void CLOCK_DeinitEnetPll(void);
# 1212 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetPllFreq(clock_pll_t pll);
# 1224 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitSysPfd(clock_pfd_t pfd, uint8_t pfdFrac);
# 1233 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitSysPfd(clock_pfd_t pfd);
# 1245 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb1Pfd(clock_pfd_t pfd, uint8_t pfdFrac);
# 1254 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitUsb1Pfd(clock_pfd_t pfd);
# 1264 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetSysPfdFreq(clock_pfd_t pfd);
# 1274 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetUsb1PfdFreq(clock_pfd_t pfd);
# 1287 "mcusdk/drivers/fsl_clock.h"

# 1287 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1287 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs0Clock(clock_usb_src_t src, uint32_t freq);
# 1299 "mcusdk/drivers/fsl_clock.h"

# 1299 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1299 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs0PhyPllClock(clock_usb_phy_src_t src, uint32_t freq);





void CLOCK_DisableUsbhs0PhyPllClock(void);
# 1318 "mcusdk/drivers/fsl_clock.h"

# 1318 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1318 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs1Clock(clock_usb_src_t src, uint32_t freq);
# 1330 "mcusdk/drivers/fsl_clock.h"

# 1330 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1330 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs1PhyPllClock(clock_usb_phy_src_t src, uint32_t freq);





void CLOCK_DisableUsbhs1PhyPllClock(void);
# 173 "mcusdk/drivers/fsl_common.h" 2
# 364 "mcusdk/drivers/fsl_common.h"
    static inline status_t EnableIRQ(IRQn_Type interrupt)
    {
        if (NotAvail_IRQn == interrupt)
        {
            return kStatus_Fail;
        }
# 381 "mcusdk/drivers/fsl_common.h"
        __NVIC_EnableIRQ(interrupt);

        return kStatus_Success;
    }
# 402 "mcusdk/drivers/fsl_common.h"
    static inline status_t DisableIRQ(IRQn_Type interrupt)
    {
        if (NotAvail_IRQn == interrupt)
        {
            return kStatus_Fail;
        }
# 419 "mcusdk/drivers/fsl_common.h"
    __NVIC_DisableIRQ(interrupt);

        return kStatus_Success;
    }
# 432 "mcusdk/drivers/fsl_common.h"
    static inline uint32_t DisableGlobalIRQ(void)
    {







    uint32_t regPrimask = __get_PRIMASK();

    __disable_irq();

    return regPrimask;

    }
# 459 "mcusdk/drivers/fsl_common.h"
    static inline void EnableGlobalIRQ(uint32_t primask)
    {



    __set_PRIMASK(primask);

    }
# 520 "mcusdk/drivers/fsl_common.h"
    void *SDK_Malloc(size_t size, size_t alignbytes);






    void SDK_Free(void *ptr);
# 39 "./mpconfigport.h" 2
# 179 "./mpconfigport.h"
extern const struct _mp_obj_module_t machine_module;
extern const struct _mp_obj_module_t pyb_module;
extern const struct _mp_obj_module_t mcu_module;
extern const struct _mp_obj_module_t mp_module_ubinascii;
extern const struct _mp_obj_module_t mp_module_ure;
extern const struct _mp_obj_module_t mp_module_uzlib;
extern const struct _mp_obj_module_t mp_module_ujson;
extern const struct _mp_obj_module_t mp_module_uheapq;
extern const struct _mp_obj_module_t mp_module_uhashlib;
extern const struct _mp_obj_module_t mp_module_uos;
extern const struct _mp_obj_module_t mp_module_utime;
extern const struct _mp_obj_module_t mp_module_usocket;
extern const struct _mp_obj_module_t mp_module_network;
extern const struct _mp_obj_module_t time_module;
extern const struct _mp_obj_module_t lcd_module;

extern const struct _mp_obj_module_t sensor_module;
extern const struct _mp_obj_module_t image_module;
extern const struct _mp_obj_module_t mjpeg_module;
extern const struct _mp_obj_module_t nn_module;
extern const struct _mp_obj_module_t gif_module;
# 330 "./mpconfigport.h"
typedef int mp_int_t;
typedef unsigned int mp_uint_t;
typedef long mp_off_t;
# 345 "./mpconfigport.h"
static inline void enable_irq(mp_uint_t state) {
    __set_PRIMASK(state);
}

static inline mp_uint_t disable_irq(void) {
    mp_uint_t state = __get_PRIMASK();
    __disable_irq();
    return state;
}
# 372 "./mpconfigport.h"
extern void HAL_WFI(void);
# 46 "../../py/mpconfig.h" 2
# 554 "../../py/mpconfig.h"
typedef float mp_float_t;
# 14 "omv/py/mp.h" 2
# 1 "../../py/misc.h" 1
# 35 "../../py/misc.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 36 "../../py/misc.h" 2

typedef unsigned char byte;
typedef unsigned int uint;
# 82 "../../py/misc.h"
void *m_malloc(size_t num_bytes);
void *m_malloc_maybe(size_t num_bytes);
void *m_malloc_with_finaliser(size_t num_bytes);
void *m_malloc0(size_t num_bytes);





void *m_realloc(void *ptr, size_t new_num_bytes);
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, 
# 92 "../../py/misc.h" 3 4
                                                      _Bool 
# 92 "../../py/misc.h"
                                                           allow_move);
void m_free(void *ptr);




__attribute__((noreturn)) void m_malloc_fail(size_t num_bytes);
# 119 "../../py/misc.h"
typedef uint32_t unichar;






unichar utf8_get_char(const byte *s);
const byte *utf8_next_char(const byte *s);


# 129 "../../py/misc.h" 3 4
_Bool 
# 129 "../../py/misc.h"
    unichar_isspace(unichar c);

# 130 "../../py/misc.h" 3 4
_Bool 
# 130 "../../py/misc.h"
    unichar_isalpha(unichar c);

# 131 "../../py/misc.h" 3 4
_Bool 
# 131 "../../py/misc.h"
    unichar_isprint(unichar c);

# 132 "../../py/misc.h" 3 4
_Bool 
# 132 "../../py/misc.h"
    unichar_isdigit(unichar c);

# 133 "../../py/misc.h" 3 4
_Bool 
# 133 "../../py/misc.h"
    unichar_isxdigit(unichar c);

# 134 "../../py/misc.h" 3 4
_Bool 
# 134 "../../py/misc.h"
    unichar_isident(unichar c);

# 135 "../../py/misc.h" 3 4
_Bool 
# 135 "../../py/misc.h"
    unichar_isupper(unichar c);

# 136 "../../py/misc.h" 3 4
_Bool 
# 136 "../../py/misc.h"
    unichar_islower(unichar c);
unichar unichar_tolower(unichar c);
unichar unichar_toupper(unichar c);
mp_uint_t unichar_xdigit_value(unichar c);
mp_uint_t unichar_charlen(const char *str, mp_uint_t len);





typedef struct _vstr_t {
    size_t alloc;
    size_t len;
    char *buf;
    
# 150 "../../py/misc.h" 3 4
   _Bool 
# 150 "../../py/misc.h"
        fixed_buf : 1;
} vstr_t;




void vstr_init(vstr_t *vstr, size_t alloc);
void vstr_init_len(vstr_t *vstr, size_t len);
void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf);
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
void vstr_hint_size(vstr_t *vstr, size_t size);
char *vstr_extend(vstr_t *vstr, size_t size);
char *vstr_add_len(vstr_t *vstr, size_t len);
char *vstr_null_terminated_str(vstr_t *vstr);
void vstr_add_byte(vstr_t *vstr, byte v);
void vstr_add_char(vstr_t *vstr, unichar chr);
void vstr_add_str(vstr_t *vstr, const char *str);
void vstr_add_strn(vstr_t *vstr, const char *str, size_t len);
void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b);
void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr);
void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_tail_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut);
void vstr_printf(vstr_t *vstr, const char *fmt, ...);
# 195 "../../py/misc.h"
void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap);



int DEBUG_printf(const char *fmt, ...);

extern mp_uint_t mp_verbose_flag;






static inline mp_uint_t count_lead_ones(byte val) {
    mp_uint_t c = 0;
    for (byte mask = 0x80; val & mask; mask >>= 1) {
        c++;
    }
    return c;
}
# 15 "omv/py/mp.h" 2
# 1 "./systick.h" 1
# 27 "./systick.h"
void sys_tick_wait_at_least(uint32_t stc, uint32_t delay_ms);

# 28 "./systick.h" 3 4
_Bool 
# 28 "./systick.h"
    sys_tick_has_passed(uint32_t stc, uint32_t delay_ms);
void systick_sleep(volatile uint32_t ms);
uint32_t systick_current_millis(void);
# 16 "omv/py/mp.h" 2
# 1 "./pendsv.h" 1
# 27 "./pendsv.h"
void pendsv_init(void);
void pendsv_kbd_intr(void);






void pendsv_isr_handler(void) __attribute__((naked));


void pendsv_nlr_jump(void *o);
void pendsv_nlr_jump_hard(void *o);
# 17 "omv/py/mp.h" 2
# 1 "../../py/qstr.h" 1
# 29 "../../py/qstr.h"
# 1 "../../py/mpconfig.h" 1
# 30 "../../py/qstr.h" 2
# 1 "../../py/misc.h" 1
# 31 "../../py/qstr.h" 2
# 39 "../../py/qstr.h"
enum {





    MP_QSTRnumber_of,
};

typedef size_t qstr;

typedef struct _qstr_pool_t {
    struct _qstr_pool_t *prev;
    size_t total_prev_len;
    size_t alloc;
    size_t len;
    const byte *qstrs[];
} qstr_pool_t;



void qstr_init(void);

mp_uint_t qstr_compute_hash(const byte *data, size_t len);
qstr qstr_find_strn(const char *str, size_t str_len);

qstr qstr_from_str(const char *str);
qstr qstr_from_strn(const char *str, size_t len);

byte *qstr_build_start(size_t len, byte **q_ptr);
qstr qstr_build_end(byte *q_ptr);

mp_uint_t qstr_hash(qstr q);
const char *qstr_str(qstr q);
size_t qstr_len(qstr q);
const byte *qstr_data(qstr q, size_t *len);

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes);
void qstr_dump_data(void);
# 18 "omv/py/mp.h" 2

# 1 "../../py/nlr.h" 1
# 32 "../../py/nlr.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 34 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/syslimits.h" 1 3 4






# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 168 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/limits.h" 1 3 4
# 169 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 2 3 4
# 8 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/syslimits.h" 2 3 4
# 35 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 2 3 4
# 33 "../../py/nlr.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 1 3
# 10 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 1 3


# 365 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 3

# 365 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 3
typedef int jmp_buf[23];




# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 2 3




void longjmp (jmp_buf __jmpb, int __retval)
   __attribute__ ((__noreturn__));



int setjmp (jmp_buf __jmpb);


# 34 "../../py/nlr.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 35 "../../py/nlr.h" 2




# 38 "../../py/nlr.h"
typedef struct _nlr_buf_t nlr_buf_t;
struct _nlr_buf_t {

    nlr_buf_t *prev;
    void *ret_val;
# 53 "../../py/nlr.h"
    void *regs[10];
# 65 "../../py/nlr.h"
};
# 77 "../../py/nlr.h"
unsigned int nlr_push(nlr_buf_t *);
void nlr_pop(void);
__attribute__((noreturn)) void nlr_jump(void *val);





__attribute__((noreturn)) void nlr_jump_fail(void *val);






extern void fb_alloc_free_till_mark();
# 20 "omv/py/mp.h" 2
# 1 "../../py/lexer.h" 1
# 32 "../../py/lexer.h"
# 1 "../../py/qstr.h" 1
# 33 "../../py/lexer.h" 2
# 1 "../../py/reader.h" 1
# 29 "../../py/reader.h"
# 1 "../../py/obj.h" 1
# 32 "../../py/obj.h"
# 1 "../../py/mpprint.h" 1
# 48 "../../py/mpprint.h"
typedef void (*mp_print_strn_t)(void *data, const char *str, size_t len);

typedef struct _mp_print_t {
    void *data;
    mp_print_strn_t print_strn;
} mp_print_t;



extern const mp_print_t mp_plat_print;


extern const mp_print_t mp_sys_stdout_print;


int mp_print_str(const mp_print_t *print, const char *str);
int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width);

int mp_print_float(const mp_print_t *print, mp_float_t f, char fmt, int flags, char fill, int width, int prec);


int mp_printf(const mp_print_t *print, const char *fmt, ...);

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args);
# 33 "../../py/obj.h" 2
# 1 "../../py/runtime0.h" 1
# 45 "../../py/runtime0.h"
typedef enum {


    MP_UNARY_OP_POSITIVE,
    MP_UNARY_OP_NEGATIVE,
    MP_UNARY_OP_INVERT,
    MP_UNARY_OP_NOT,


    MP_UNARY_OP_NUM_BYTECODE,

    MP_UNARY_OP_BOOL = MP_UNARY_OP_NUM_BYTECODE,
    MP_UNARY_OP_LEN,
    MP_UNARY_OP_HASH,
    MP_UNARY_OP_ABS,
    MP_UNARY_OP_SIZEOF,

    MP_UNARY_OP_NUM_RUNTIME,
} mp_unary_op_t;



typedef enum {

    MP_BINARY_OP_LESS,
    MP_BINARY_OP_MORE,
    MP_BINARY_OP_EQUAL,
    MP_BINARY_OP_LESS_EQUAL,
    MP_BINARY_OP_MORE_EQUAL,
    MP_BINARY_OP_NOT_EQUAL,
    MP_BINARY_OP_IN,
    MP_BINARY_OP_IS,
    MP_BINARY_OP_EXCEPTION_MATCH,


    MP_BINARY_OP_INPLACE_OR,
    MP_BINARY_OP_INPLACE_XOR,
    MP_BINARY_OP_INPLACE_AND,
    MP_BINARY_OP_INPLACE_LSHIFT,
    MP_BINARY_OP_INPLACE_RSHIFT,
    MP_BINARY_OP_INPLACE_ADD,
    MP_BINARY_OP_INPLACE_SUBTRACT,
    MP_BINARY_OP_INPLACE_MULTIPLY,
    MP_BINARY_OP_INPLACE_FLOOR_DIVIDE,
    MP_BINARY_OP_INPLACE_TRUE_DIVIDE,
    MP_BINARY_OP_INPLACE_MODULO,
    MP_BINARY_OP_INPLACE_POWER,


    MP_BINARY_OP_OR,
    MP_BINARY_OP_XOR,
    MP_BINARY_OP_AND,
    MP_BINARY_OP_LSHIFT,
    MP_BINARY_OP_RSHIFT,
    MP_BINARY_OP_ADD,
    MP_BINARY_OP_SUBTRACT,
    MP_BINARY_OP_MULTIPLY,
    MP_BINARY_OP_FLOOR_DIVIDE,
    MP_BINARY_OP_TRUE_DIVIDE,
    MP_BINARY_OP_MODULO,
    MP_BINARY_OP_POWER,



    MP_BINARY_OP_NUM_BYTECODE,
# 128 "../../py/runtime0.h"
    MP_BINARY_OP_DIVMOD

        = MP_BINARY_OP_NUM_BYTECODE

    ,

    MP_BINARY_OP_NUM_RUNTIME,


    MP_BINARY_OP_NOT_IN,
    MP_BINARY_OP_IS_NOT,
} mp_binary_op_t;

typedef enum {
    MP_F_CONVERT_OBJ_TO_NATIVE = 0,
    MP_F_CONVERT_NATIVE_TO_OBJ,
    MP_F_LOAD_NAME,
    MP_F_LOAD_GLOBAL,
    MP_F_LOAD_BUILD_CLASS,
    MP_F_LOAD_ATTR,
    MP_F_LOAD_METHOD,
    MP_F_LOAD_SUPER_METHOD,
    MP_F_STORE_NAME,
    MP_F_STORE_GLOBAL,
    MP_F_STORE_ATTR,
    MP_F_OBJ_SUBSCR,
    MP_F_OBJ_IS_TRUE,
    MP_F_UNARY_OP,
    MP_F_BINARY_OP,
    MP_F_BUILD_TUPLE,
    MP_F_BUILD_LIST,
    MP_F_LIST_APPEND,
    MP_F_BUILD_MAP,
    MP_F_STORE_MAP,

    MP_F_BUILD_SET,
    MP_F_STORE_SET,

    MP_F_MAKE_FUNCTION_FROM_RAW_CODE,
    MP_F_NATIVE_CALL_FUNCTION_N_KW,
    MP_F_CALL_METHOD_N_KW,
    MP_F_CALL_METHOD_N_KW_VAR,
    MP_F_NATIVE_GETITER,
    MP_F_NATIVE_ITERNEXT,
    MP_F_NLR_PUSH,
    MP_F_NLR_POP,
    MP_F_NATIVE_RAISE,
    MP_F_IMPORT_NAME,
    MP_F_IMPORT_FROM,
    MP_F_IMPORT_ALL,

    MP_F_NEW_SLICE,

    MP_F_UNPACK_SEQUENCE,
    MP_F_UNPACK_EX,
    MP_F_DELETE_NAME,
    MP_F_DELETE_GLOBAL,
    MP_F_NEW_CELL,
    MP_F_MAKE_CLOSURE_FROM_RAW_CODE,
    MP_F_SETUP_CODE_STATE,
    MP_F_SMALL_INT_FLOOR_DIVIDE,
    MP_F_SMALL_INT_MODULO,
    MP_F_NUMBER_OF,
} mp_fun_kind_t;

extern void *const mp_fun_table[MP_F_NUMBER_OF];
# 34 "../../py/obj.h" 2
# 42 "../../py/obj.h"
typedef void *mp_obj_t;
typedef const void *mp_const_obj_t;




typedef struct _mp_obj_type_t mp_obj_type_t;



struct _mp_obj_base_t {
    const mp_obj_type_t *type __attribute__((aligned(4)));
};
typedef struct _mp_obj_base_t mp_obj_base_t;
# 84 "../../py/obj.h"
 static inline 
# 84 "../../py/obj.h" 3 4
              _Bool 
# 84 "../../py/obj.h"
                   MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 1) != 0); }



 static inline 
# 89 "../../py/obj.h" 3 4
              _Bool 
# 89 "../../py/obj.h"
                   MP_OBJ_IS_QSTR(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 3) == 2); }






 extern const struct _mp_obj_float_t mp_const_float_e_obj;
 extern const struct _mp_obj_float_t mp_const_float_pi_obj;


 mp_float_t mp_obj_float_get(mp_obj_t self_in);
 mp_obj_t mp_obj_new_float(mp_float_t value);


 static inline 
# 105 "../../py/obj.h" 3 4
              _Bool 
# 105 "../../py/obj.h"
                   MP_OBJ_IS_OBJ(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 3) == 0); }
# 239 "../../py/obj.h"
typedef mp_const_obj_t mp_rom_obj_t;
# 265 "../../py/obj.h"
extern const mp_obj_type_t mp_type_int;
extern const mp_obj_type_t mp_type_bool;
static inline 
# 267 "../../py/obj.h" 3 4
             _Bool 
# 267 "../../py/obj.h"
                  mp_obj_is_integer(mp_const_obj_t o) {
 return (MP_OBJ_IS_SMALL_INT(o) || (MP_OBJ_IS_OBJ(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_int)))) || (MP_OBJ_IS_OBJ(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_bool)));
}
# 343 "../../py/obj.h"
typedef struct _mp_map_elem_t {
    mp_obj_t key;
    mp_obj_t value;
} mp_map_elem_t;

typedef struct _mp_rom_map_elem_t {
    mp_rom_obj_t key;
    mp_rom_obj_t value;
} mp_rom_map_elem_t;






typedef struct _mp_map_t {
    size_t all_keys_are_qstrs : 1;
    size_t is_fixed : 1;
    size_t is_ordered : 1;
    size_t used : (8 * sizeof(size_t) - 3);
    size_t alloc;
    mp_map_elem_t *table;
} mp_map_t;


typedef enum _mp_map_lookup_kind_t {
    MP_MAP_LOOKUP = 0,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND = 1,
    MP_MAP_LOOKUP_REMOVE_IF_FOUND = 2,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3,
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline 
# 377 "../../py/obj.h" 3 4
             _Bool 
# 377 "../../py/obj.h"
                  MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != (((mp_obj_t)(void*)0)) && (map)->table[pos].key != (((mp_obj_t)(void*)4))); }

void mp_map_init(mp_map_t *map, size_t n);
void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table);
mp_map_t *mp_map_new(size_t n);
void mp_map_deinit(mp_map_t *map);
void mp_map_free(mp_map_t *map);
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
void mp_map_clear(mp_map_t *map);
void mp_map_dump(mp_map_t *map);



typedef struct _mp_set_t {
    size_t alloc;
    size_t used;
    mp_obj_t *table;
} mp_set_t;

static inline 
# 396 "../../py/obj.h" 3 4
             _Bool 
# 396 "../../py/obj.h"
                  MP_SET_SLOT_IS_FILLED(const mp_set_t *set, size_t pos) { return ((set)->table[pos] != (((mp_obj_t)(void*)0)) && (set)->table[pos] != (((mp_obj_t)(void*)4))); }

void mp_set_init(mp_set_t *set, size_t n);
mp_obj_t mp_set_lookup(mp_set_t *set, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
mp_obj_t mp_set_remove_first(mp_set_t *set);
void mp_set_clear(mp_set_t *set);



typedef mp_obj_t (*mp_fun_0_t)(void);
typedef mp_obj_t (*mp_fun_1_t)(mp_obj_t);
typedef mp_obj_t (*mp_fun_2_t)(mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_3_t)(mp_obj_t, mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_var_t)(size_t n, const mp_obj_t *);


typedef mp_obj_t (*mp_fun_kw_t)(size_t n, const mp_obj_t *, mp_map_t *);

typedef enum {
    PRINT_STR = 0,
    PRINT_REPR = 1,
    PRINT_EXC = 2,
    PRINT_JSON = 3,
    PRINT_RAW = 4,
    PRINT_EXC_SUBCLASS = 0x80,
} mp_print_kind_t;

typedef struct _mp_obj_iter_buf_t {
    mp_obj_base_t base;
    mp_obj_t buf[3];
} mp_obj_iter_buf_t;





typedef void (*mp_print_fun_t)(const mp_print_t *print, mp_obj_t o, mp_print_kind_t kind);
typedef mp_obj_t (*mp_make_new_fun_t)(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_call_fun_t)(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_unary_op_fun_t)(mp_unary_op_t op, mp_obj_t);
typedef mp_obj_t (*mp_binary_op_fun_t)(mp_binary_op_t op, mp_obj_t, mp_obj_t);
typedef void (*mp_attr_fun_t)(mp_obj_t self_in, qstr attr, mp_obj_t *dest);
typedef mp_obj_t (*mp_subscr_fun_t)(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
typedef mp_obj_t (*mp_getiter_fun_t)(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_buffer_info_t {





    void *buf;
    size_t len;
    int typecode;




} mp_buffer_info_t;



typedef struct _mp_buffer_p_t {
    mp_int_t (*get_buffer)(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
} mp_buffer_p_t;

# 462 "../../py/obj.h" 3 4
_Bool 
# 462 "../../py/obj.h"
    mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);


typedef struct _mp_stream_p_t {


    mp_uint_t (*read)(mp_obj_t obj, void *buf, mp_uint_t size, int *errcode);
    mp_uint_t (*write)(mp_obj_t obj, const void *buf, mp_uint_t size, int *errcode);
    mp_uint_t (*ioctl)(mp_obj_t obj, mp_uint_t request, uintptr_t arg, int *errcode);
    mp_uint_t is_text : 1;
} mp_stream_p_t;

struct _mp_obj_type_t {

    mp_obj_base_t base;


    qstr name;


    mp_print_fun_t print;


    mp_make_new_fun_t make_new;


    mp_call_fun_t call;



    mp_unary_op_fun_t unary_op;
    mp_binary_op_fun_t binary_op;
# 507 "../../py/obj.h"
    mp_attr_fun_t attr;






    mp_subscr_fun_t subscr;




    mp_getiter_fun_t getiter;



    mp_fun_1_t iternext;


    mp_buffer_p_t buffer_p;


    const void *protocol;





    const void *parent;


    struct _mp_obj_dict_t *locals_dict;
};


extern const mp_obj_type_t mp_type_type;
extern const mp_obj_type_t mp_type_object;
extern const mp_obj_type_t mp_type_NoneType;
extern const mp_obj_type_t mp_type_bool;
extern const mp_obj_type_t mp_type_int;
extern const mp_obj_type_t mp_type_str;
extern const mp_obj_type_t mp_type_bytes;
extern const mp_obj_type_t mp_type_bytearray;
extern const mp_obj_type_t mp_type_memoryview;
extern const mp_obj_type_t mp_type_float;
extern const mp_obj_type_t mp_type_complex;
extern const mp_obj_type_t mp_type_tuple;
extern const mp_obj_type_t mp_type_list;
extern const mp_obj_type_t mp_type_map;
extern const mp_obj_type_t mp_type_enumerate;
extern const mp_obj_type_t mp_type_filter;
extern const mp_obj_type_t mp_type_dict;
extern const mp_obj_type_t mp_type_ordereddict;
extern const mp_obj_type_t mp_type_range;
extern const mp_obj_type_t mp_type_set;
extern const mp_obj_type_t mp_type_frozenset;
extern const mp_obj_type_t mp_type_slice;
extern const mp_obj_type_t mp_type_zip;
extern const mp_obj_type_t mp_type_array;
extern const mp_obj_type_t mp_type_super;
extern const mp_obj_type_t mp_type_gen_instance;
extern const mp_obj_type_t mp_type_fun_builtin_0;
extern const mp_obj_type_t mp_type_fun_builtin_1;
extern const mp_obj_type_t mp_type_fun_builtin_2;
extern const mp_obj_type_t mp_type_fun_builtin_3;
extern const mp_obj_type_t mp_type_fun_builtin_var;
extern const mp_obj_type_t mp_type_fun_bc;
extern const mp_obj_type_t mp_type_module;
extern const mp_obj_type_t mp_type_staticmethod;
extern const mp_obj_type_t mp_type_classmethod;
extern const mp_obj_type_t mp_type_property;
extern const mp_obj_type_t mp_type_stringio;
extern const mp_obj_type_t mp_type_bytesio;
extern const mp_obj_type_t mp_type_reversed;
extern const mp_obj_type_t mp_type_polymorph_iter;


extern const mp_obj_type_t mp_type_BaseException;
extern const mp_obj_type_t mp_type_ArithmeticError;
extern const mp_obj_type_t mp_type_AssertionError;
extern const mp_obj_type_t mp_type_AttributeError;
extern const mp_obj_type_t mp_type_EOFError;
extern const mp_obj_type_t mp_type_Exception;
extern const mp_obj_type_t mp_type_GeneratorExit;
extern const mp_obj_type_t mp_type_ImportError;
extern const mp_obj_type_t mp_type_IndentationError;
extern const mp_obj_type_t mp_type_IndexError;
extern const mp_obj_type_t mp_type_KeyboardInterrupt;
extern const mp_obj_type_t mp_type_KeyError;
extern const mp_obj_type_t mp_type_LookupError;
extern const mp_obj_type_t mp_type_MemoryError;
extern const mp_obj_type_t mp_type_NameError;
extern const mp_obj_type_t mp_type_NotImplementedError;
extern const mp_obj_type_t mp_type_OSError;
extern const mp_obj_type_t mp_type_TimeoutError;
extern const mp_obj_type_t mp_type_OverflowError;
extern const mp_obj_type_t mp_type_RuntimeError;
extern const mp_obj_type_t mp_type_StopAsyncIteration;
extern const mp_obj_type_t mp_type_StopIteration;
extern const mp_obj_type_t mp_type_SyntaxError;
extern const mp_obj_type_t mp_type_SystemExit;
extern const mp_obj_type_t mp_type_TypeError;
extern const mp_obj_type_t mp_type_UnicodeError;
extern const mp_obj_type_t mp_type_ValueError;
extern const mp_obj_type_t mp_type_ViperTypeError;
extern const mp_obj_type_t mp_type_ZeroDivisionError;
# 622 "../../py/obj.h"
extern const struct _mp_obj_none_t mp_const_none_obj;
extern const struct _mp_obj_bool_t mp_const_false_obj;
extern const struct _mp_obj_bool_t mp_const_true_obj;
extern const struct _mp_obj_str_t mp_const_empty_bytes_obj;
extern const struct _mp_obj_tuple_t mp_const_empty_tuple_obj;
extern const struct _mp_obj_singleton_t mp_const_ellipsis_obj;
extern const struct _mp_obj_singleton_t mp_const_notimplemented_obj;
extern const struct _mp_obj_exception_t mp_const_MemoryError_obj;
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;



mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? (((mp_obj_t)&mp_const_true_obj)) : (((mp_obj_t)&mp_const_false_obj)); }
mp_obj_t mp_obj_new_cell(mp_obj_t obj);
mp_obj_t mp_obj_new_int(mp_int_t value);
mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value);
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, 
# 639 "../../py/obj.h" 3 4
                                                                  _Bool 
# 639 "../../py/obj.h"
                                                                       neg, unsigned int base);
mp_obj_t mp_obj_new_int_from_ll(long long val);
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val);
mp_obj_t mp_obj_new_str(const char* data, size_t len, 
# 642 "../../py/obj.h" 3 4
                                                     _Bool 
# 642 "../../py/obj.h"
                                                          make_qstr_if_not_already);
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr);
mp_obj_t mp_obj_new_bytes(const byte* data, size_t len);
mp_obj_t mp_obj_new_bytearray(size_t n, void *items);
mp_obj_t mp_obj_new_bytearray_by_ref(size_t n, void *items);

mp_obj_t mp_obj_new_int_from_float(mp_float_t val);
mp_obj_t mp_obj_new_complex(mp_float_t real, mp_float_t imag);

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type);
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg);
mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg);
mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...);
mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_native(mp_obj_t def_args_in, mp_obj_t def_kw_args, const void *fun_data, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_viper(size_t n_args, void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_fun_asm(size_t n_args, void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun);
mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed, const mp_obj_t *closed);
mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items);
mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items);
mp_obj_t mp_obj_new_dict(size_t n_args);
mp_obj_t mp_obj_new_set(size_t n_args, mp_obj_t *items);
mp_obj_t mp_obj_new_slice(mp_obj_t start, mp_obj_t stop, mp_obj_t step);
mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self);
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_obj_new_module(qstr module_name);
mp_obj_t mp_obj_new_memoryview(byte typecode, size_t nitems, void *items);

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in);
const char *mp_obj_get_type_str(mp_const_obj_t o_in);

# 674 "../../py/obj.h" 3 4
_Bool 
# 674 "../../py/obj.h"
    mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo);
mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type);

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
void mp_obj_print(mp_obj_t o, mp_print_kind_t kind);
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc);


# 681 "../../py/obj.h" 3 4
_Bool 
# 681 "../../py/obj.h"
    mp_obj_is_true(mp_obj_t arg);

# 682 "../../py/obj.h" 3 4
_Bool 
# 682 "../../py/obj.h"
    mp_obj_is_callable(mp_obj_t o_in);

# 683 "../../py/obj.h" 3 4
_Bool 
# 683 "../../py/obj.h"
    mp_obj_equal(mp_obj_t o1, mp_obj_t o2);

mp_int_t mp_obj_get_int(mp_const_obj_t arg);
mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg);

# 687 "../../py/obj.h" 3 4
_Bool 
# 687 "../../py/obj.h"
    mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value);

mp_float_t mp_obj_get_float(mp_obj_t self_in);

# 690 "../../py/obj.h" 3 4
_Bool 
# 690 "../../py/obj.h"
    mp_obj_get_float_maybe(mp_obj_t arg, mp_float_t *value);
void mp_obj_get_complex(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);


void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items);
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items);
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, 
# 696 "../../py/obj.h" 3 4
                                                                          _Bool 
# 696 "../../py/obj.h"
                                                                               is_slice);
mp_obj_t mp_obj_id(mp_obj_t o_in);
mp_obj_t mp_obj_len(mp_obj_t o_in);
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in);
mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t val);
mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in);


mp_obj_t mp_obj_cell_get(mp_obj_t self_in);
void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj);



mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in);

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in);




# 715 "../../py/obj.h" 3 4
_Bool 
# 715 "../../py/obj.h"
    mp_obj_is_exception_type(mp_obj_t self_in);

# 716 "../../py/obj.h" 3 4
_Bool 
# 716 "../../py/obj.h"
    mp_obj_is_exception_instance(mp_obj_t self_in);

# 717 "../../py/obj.h" 3 4
_Bool 
# 717 "../../py/obj.h"
    mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type);
void mp_obj_exception_clear_traceback(mp_obj_t self_in);
void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block);
void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values);
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in);
mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_alloc_emergency_exception_buf(mp_obj_t size_in);
void mp_init_emergency_exception_buf(void);



# 727 "../../py/obj.h" 3 4
_Bool 
# 727 "../../py/obj.h"
    mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2);
qstr mp_obj_str_get_qstr(mp_obj_t self_in);
const char *mp_obj_str_get_str(mp_obj_t self_in);
const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len);
mp_obj_t mp_obj_str_intern(mp_obj_t str);
void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, 
# 732 "../../py/obj.h" 3 4
                                                                                       _Bool 
# 732 "../../py/obj.h"
                                                                                            is_bytes);






static inline mp_int_t mp_float_hash(mp_float_t val) { return (mp_int_t)val; }

mp_obj_t mp_obj_float_binary_op(mp_binary_op_t op, mp_float_t lhs_val, mp_obj_t rhs);


void mp_obj_complex_get(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);
mp_obj_t mp_obj_complex_binary_op(mp_binary_op_t op, mp_float_t lhs_real, mp_float_t lhs_imag, mp_obj_t rhs_in);





void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_tuple_del(mp_obj_t self_in);
mp_int_t mp_obj_tuple_hash(mp_obj_t self_in);


struct _mp_obj_list_t;
void mp_obj_list_init(struct _mp_obj_list_t *o, size_t n);
mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg);
mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value);
void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_list_set_len(mp_obj_t self_in, size_t len);
void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);


typedef struct _mp_obj_dict_t {
    mp_obj_base_t base;
    mp_map_t map;
} mp_obj_dict_t;
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
mp_map_t *mp_obj_dict_get_map(mp_obj_t self_in);


void mp_obj_set_store(mp_obj_t self_in, mp_obj_t item);


void mp_obj_slice_get(mp_obj_t self_in, mp_obj_t *start, mp_obj_t *stop, mp_obj_t *step);



typedef struct _mp_obj_fun_builtin_fixed_t {
    mp_obj_base_t base;
    union {
        mp_fun_0_t _0;
        mp_fun_1_t _1;
        mp_fun_2_t _2;
        mp_fun_3_t _3;
    } fun;
} mp_obj_fun_builtin_fixed_t;


typedef struct _mp_obj_fun_builtin_var_t {
    mp_obj_base_t base;
    
# 798 "../../py/obj.h" 3 4
   _Bool 
# 798 "../../py/obj.h"
        is_kw : 1;
    mp_uint_t n_args_min : 15;
    mp_uint_t n_args_max : 16;
    union {
        mp_fun_var_t var;
        mp_fun_kw_t kw;
    } fun;
} mp_obj_fun_builtin_var_t;

qstr mp_obj_fun_get_name(mp_const_obj_t fun);
qstr mp_obj_code_get_name(const byte *code_info);

mp_obj_t mp_identity(mp_obj_t self);
extern const mp_obj_fun_builtin_fixed_t mp_identity_obj;
mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t self_in);


# 821 "../../py/obj.h" 3 4
_Bool 
# 821 "../../py/obj.h"
    mp_obj_is_package(mp_obj_t module);



typedef struct _mp_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_obj_t fun;
} mp_obj_static_class_method_t;
typedef struct _mp_rom_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_rom_obj_t fun;
} mp_rom_obj_static_class_method_t;


const mp_obj_t *mp_obj_property_get(mp_obj_t self_in);




typedef struct {
    mp_uint_t start;
    mp_uint_t stop;
    mp_int_t step;
} mp_bound_slice_t;

void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest);


# 848 "../../py/obj.h" 3 4
_Bool 
# 848 "../../py/obj.h"
    mp_seq_get_fast_slice_indexes(mp_uint_t len, mp_obj_t slice, mp_bound_slice_t *indexes);




# 852 "../../py/obj.h" 3 4
_Bool 
# 852 "../../py/obj.h"
    mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2);

# 853 "../../py/obj.h" 3 4
_Bool 
# 853 "../../py/obj.h"
    mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2);
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value);
mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes);
# 30 "../../py/reader.h" 2






typedef struct _mp_reader_t {
    void *data;
    mp_uint_t (*readbyte)(void *data);
    void (*close)(void *data);
} mp_reader_t;

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len);
void mp_reader_new_file(mp_reader_t *reader, const char *filename);
void mp_reader_new_file_from_fd(mp_reader_t *reader, int fd, 
# 44 "../../py/reader.h" 3 4
                                                            _Bool 
# 44 "../../py/reader.h"
                                                                 close_fd);
# 34 "../../py/lexer.h" 2







typedef enum _mp_token_kind_t {
    MP_TOKEN_END,

    MP_TOKEN_INVALID,
    MP_TOKEN_DEDENT_MISMATCH,
    MP_TOKEN_LONELY_STRING_OPEN,

    MP_TOKEN_NEWLINE,
    MP_TOKEN_INDENT,
    MP_TOKEN_DEDENT,

    MP_TOKEN_NAME,
    MP_TOKEN_INTEGER,
    MP_TOKEN_FLOAT_OR_IMAG,
    MP_TOKEN_STRING,
    MP_TOKEN_BYTES,

    MP_TOKEN_ELLIPSIS,

    MP_TOKEN_KW_FALSE,
    MP_TOKEN_KW_NONE,
    MP_TOKEN_KW_TRUE,
    MP_TOKEN_KW___DEBUG__,
    MP_TOKEN_KW_AND,
    MP_TOKEN_KW_AS,
    MP_TOKEN_KW_ASSERT,

    MP_TOKEN_KW_ASYNC,
    MP_TOKEN_KW_AWAIT,

    MP_TOKEN_KW_BREAK,
    MP_TOKEN_KW_CLASS,
    MP_TOKEN_KW_CONTINUE,
    MP_TOKEN_KW_DEF,
    MP_TOKEN_KW_DEL,
    MP_TOKEN_KW_ELIF,
    MP_TOKEN_KW_ELSE,
    MP_TOKEN_KW_EXCEPT,
    MP_TOKEN_KW_FINALLY,
    MP_TOKEN_KW_FOR,
    MP_TOKEN_KW_FROM,
    MP_TOKEN_KW_GLOBAL,
    MP_TOKEN_KW_IF,
    MP_TOKEN_KW_IMPORT,
    MP_TOKEN_KW_IN,
    MP_TOKEN_KW_IS,
    MP_TOKEN_KW_LAMBDA,
    MP_TOKEN_KW_NONLOCAL,
    MP_TOKEN_KW_NOT,
    MP_TOKEN_KW_OR,
    MP_TOKEN_KW_PASS,
    MP_TOKEN_KW_RAISE,
    MP_TOKEN_KW_RETURN,
    MP_TOKEN_KW_TRY,
    MP_TOKEN_KW_WHILE,
    MP_TOKEN_KW_WITH,
    MP_TOKEN_KW_YIELD,

    MP_TOKEN_OP_PLUS,
    MP_TOKEN_OP_MINUS,
    MP_TOKEN_OP_STAR,
    MP_TOKEN_OP_DBL_STAR,
    MP_TOKEN_OP_SLASH,
    MP_TOKEN_OP_DBL_SLASH,
    MP_TOKEN_OP_PERCENT,
    MP_TOKEN_OP_LESS,
    MP_TOKEN_OP_DBL_LESS,
    MP_TOKEN_OP_MORE,
    MP_TOKEN_OP_DBL_MORE,
    MP_TOKEN_OP_AMPERSAND,
    MP_TOKEN_OP_PIPE,
    MP_TOKEN_OP_CARET,
    MP_TOKEN_OP_TILDE,
    MP_TOKEN_OP_LESS_EQUAL,
    MP_TOKEN_OP_MORE_EQUAL,
    MP_TOKEN_OP_DBL_EQUAL,
    MP_TOKEN_OP_NOT_EQUAL,

    MP_TOKEN_DEL_PAREN_OPEN,
    MP_TOKEN_DEL_PAREN_CLOSE,
    MP_TOKEN_DEL_BRACKET_OPEN,
    MP_TOKEN_DEL_BRACKET_CLOSE,
    MP_TOKEN_DEL_BRACE_OPEN,
    MP_TOKEN_DEL_BRACE_CLOSE,
    MP_TOKEN_DEL_COMMA,
    MP_TOKEN_DEL_COLON,
    MP_TOKEN_DEL_PERIOD,
    MP_TOKEN_DEL_SEMICOLON,
    MP_TOKEN_DEL_AT,
    MP_TOKEN_DEL_EQUAL,
    MP_TOKEN_DEL_PLUS_EQUAL,
    MP_TOKEN_DEL_MINUS_EQUAL,
    MP_TOKEN_DEL_STAR_EQUAL,
    MP_TOKEN_DEL_SLASH_EQUAL,
    MP_TOKEN_DEL_DBL_SLASH_EQUAL,
    MP_TOKEN_DEL_PERCENT_EQUAL,
    MP_TOKEN_DEL_AMPERSAND_EQUAL,
    MP_TOKEN_DEL_PIPE_EQUAL,
    MP_TOKEN_DEL_CARET_EQUAL,
    MP_TOKEN_DEL_DBL_MORE_EQUAL,
    MP_TOKEN_DEL_DBL_LESS_EQUAL,
    MP_TOKEN_DEL_DBL_STAR_EQUAL,
    MP_TOKEN_DEL_MINUS_MORE,
} mp_token_kind_t;



typedef struct _mp_lexer_t {
    qstr source_name;
    mp_reader_t reader;

    unichar chr0, chr1, chr2;

    size_t line;
    size_t column;

    mp_int_t emit_dent;
    mp_int_t nested_bracket_level;

    size_t alloc_indent_level;
    size_t num_indent_level;
    uint16_t *indent_level;

    size_t tok_line;
    size_t tok_column;
    mp_token_kind_t tok_kind;
    vstr_t vstr;
} mp_lexer_t;

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader);
mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len);

void mp_lexer_free(mp_lexer_t *lex);
void mp_lexer_to_next(mp_lexer_t *lex);







typedef enum {
    MP_IMPORT_STAT_NO_EXIST,
    MP_IMPORT_STAT_DIR,
    MP_IMPORT_STAT_FILE,
} mp_import_stat_t;

mp_import_stat_t mp_vfs_import_stat(const char *path);
mp_lexer_t *mp_lexer_new_from_file(const char *filename);
# 21 "omv/py/mp.h" 2
# 1 "../../py/parse.h" 1
# 29 "../../py/parse.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 30 "../../py/parse.h" 2




struct _mp_lexer_t;
# 52 "../../py/parse.h"
typedef uintptr_t mp_parse_node_t;

typedef struct _mp_parse_node_struct_t {
    uint32_t source_line;
    uint32_t kind_num_nodes;
    mp_parse_node_t nodes[];
} mp_parse_node_struct_t;
# 79 "../../py/parse.h"
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    return (mp_parse_node_t)((0x1) | ((mp_uint_t)val << 1));
}
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
}

# 85 "../../py/parse.h" 3 4
_Bool 
# 85 "../../py/parse.h"
    mp_parse_node_is_const_false(mp_parse_node_t pn);

# 86 "../../py/parse.h" 3 4
_Bool 
# 86 "../../py/parse.h"
    mp_parse_node_is_const_true(mp_parse_node_t pn);

# 87 "../../py/parse.h" 3 4
_Bool 
# 87 "../../py/parse.h"
    mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o);
int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes);
void mp_parse_node_print(mp_parse_node_t pn, size_t indent);

typedef enum {
    MP_PARSE_SINGLE_INPUT,
    MP_PARSE_FILE_INPUT,
    MP_PARSE_EVAL_INPUT,
} mp_parse_input_kind_t;

typedef struct _mp_parse_t {
    mp_parse_node_t root;
    struct _mp_parse_chunk_t *chunk;
} mp_parse_tree_t;



mp_parse_tree_t mp_parse(struct _mp_lexer_t *lex, mp_parse_input_kind_t input_kind);
void mp_parse_tree_clear(mp_parse_tree_t *tree);
# 22 "omv/py/mp.h" 2
# 1 "../../py/obj.h" 1
# 23 "omv/py/mp.h" 2
# 1 "../../py/objtuple.h" 1
# 31 "../../py/objtuple.h"
typedef struct _mp_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_obj_t items[];
} mp_obj_tuple_t;

typedef struct _mp_rom_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_rom_obj_t items[];
} mp_rom_obj_tuple_t;

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in);
mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);
mp_obj_t mp_obj_tuple_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf);

extern const mp_obj_type_t mp_type_attrtuple;
# 59 "../../py/objtuple.h"
void mp_obj_attrtuple_print_helper(const mp_print_t *print, const qstr *fields, mp_obj_tuple_t *o);


mp_obj_t mp_obj_new_attrtuple(const qstr *fields, size_t n, const mp_obj_t *items);
# 24 "omv/py/mp.h" 2
# 1 "../../py/runtime.h" 1
# 29 "../../py/runtime.h"
# 1 "../../py/mpstate.h" 1
# 32 "../../py/mpstate.h"
# 1 "../../py/mpthread.h" 1
# 33 "../../py/mpstate.h" 2

# 1 "../../py/nlr.h" 1
# 35 "../../py/mpstate.h" 2

# 1 "../../py/objlist.h" 1
# 31 "../../py/objlist.h"
typedef struct _mp_obj_list_t {
    mp_obj_base_t base;
    size_t alloc;
    size_t len;
    mp_obj_t *items;
} mp_obj_list_t;
# 37 "../../py/mpstate.h" 2
# 1 "../../py/objexcept.h" 1
# 30 "../../py/objexcept.h"
# 1 "../../py/objtuple.h" 1
# 31 "../../py/objexcept.h" 2

typedef struct _mp_obj_exception_t {
    mp_obj_base_t base;
    size_t traceback_alloc : (8 * sizeof(size_t) / 2);
    size_t traceback_len : (8 * sizeof(size_t) / 2);
    size_t *traceback_data;
    mp_obj_tuple_t *args;
} mp_obj_exception_t;
# 38 "../../py/mpstate.h" 2
# 58 "../../py/mpstate.h"
typedef struct _mp_sched_item_t {
    mp_obj_t func;
    mp_obj_t arg;
} mp_sched_item_t;


typedef struct _mp_state_mem_t {






    byte *gc_alloc_table_start;
    size_t gc_alloc_table_byte_len;

    byte *gc_finaliser_table_start;

    byte *gc_pool_start;
    byte *gc_pool_end;

    int gc_stack_overflow;
    size_t gc_stack[(64)];
    size_t *gc_sp;
    uint16_t gc_lock_depth;




    uint16_t gc_auto_collect_enabled;


    size_t gc_alloc_amount;
    size_t gc_alloc_threshold;


    size_t gc_last_free_atb_index;
# 104 "../../py/mpstate.h"
} mp_state_mem_t;



typedef struct _mp_state_vm_t {






    qstr_pool_t *last_pool;


    mp_obj_exception_t mp_emergency_exception_obj;
# 127 "../../py/mpstate.h"
    byte *mp_emergency_exception_buf;





    mp_obj_exception_t mp_kbd_exception;



    mp_obj_dict_t mp_loaded_modules_dict;


    volatile mp_obj_t mp_pending_exception;
# 154 "../../py/mpstate.h"
    mp_obj_dict_t dict_main;


    mp_obj_list_t mp_sys_path_obj;
    mp_obj_list_t mp_sys_argv_obj;



    mp_obj_dict_t *mp_module_builtins_override_dict;



    const char *readline_hist[8]; mp_obj_t pyb_hid_report_desc; mp_obj_t pyb_config_main; mp_obj_t omv_ide_irq; mp_obj_t pyb_switch_callback; mp_obj_t pin_class_mapper; mp_obj_t pin_class_map_dict; mp_obj_t pyb_extint_callback[8]; struct _pyb_timer_obj_t *pyb_timer_obj_all[14]; struct _pyb_uart_obj_t *pyb_stdio_uart; struct _pyb_uart_obj_t *pyb_uart_obj_all[(10)]; struct _pyb_can_obj_t *pyb_can_obj_all[2]; mp_obj_list_t mod_network_nic_list; void* pvPortRoots[16];
# 180 "../../py/mpstate.h"
    struct _mp_vfs_mount_t *vfs_cur;
    struct _mp_vfs_mount_t *vfs_mount_table;
# 190 "../../py/mpstate.h"
    byte *qstr_last_chunk;
    size_t qstr_last_alloc;
    size_t qstr_last_used;






    mp_uint_t mp_optimise_value;



    mp_int_t mp_emergency_exception_buf_size;






} mp_state_vm_t;



typedef struct _mp_state_thread_t {
    mp_obj_dict_t *dict_locals;
    mp_obj_dict_t *dict_globals;


    nlr_buf_t *nlr_top;


    char *stack_top;


    size_t stack_limit;

} mp_state_thread_t;





typedef struct _mp_state_ctx_t {
    mp_state_thread_t thread;
    mp_state_vm_t vm;
    mp_state_mem_t mem;
} mp_state_ctx_t;

extern mp_state_ctx_t mp_state_ctx;
# 30 "../../py/runtime.h" 2

typedef enum {
    MP_VM_RETURN_NORMAL,
    MP_VM_RETURN_YIELD,
    MP_VM_RETURN_EXCEPTION,
} mp_vm_return_kind_t;

typedef enum {
    MP_ARG_BOOL = 0x001,
    MP_ARG_INT = 0x002,
    MP_ARG_OBJ = 0x003,
    MP_ARG_KIND_MASK = 0x0ff,
    MP_ARG_REQUIRED = 0x100,
    MP_ARG_KW_ONLY = 0x200,
} mp_arg_flag_t;

typedef union _mp_arg_val_t {
    
# 47 "../../py/runtime.h" 3 4
   _Bool 
# 47 "../../py/runtime.h"
        u_bool;
    mp_int_t u_int;
    mp_obj_t u_obj;
    mp_rom_obj_t u_rom_obj;
} mp_arg_val_t;

typedef struct _mp_arg_t {
    uint16_t qst;
    uint16_t flags;
    mp_arg_val_t defval;
} mp_arg_t;


extern const byte mp_unary_op_method_name[];
extern const byte mp_binary_op_method_name[];

void mp_init(void);
void mp_deinit(void);

void mp_handle_pending(void);
void mp_handle_pending_tail(mp_uint_t atomic_state);
# 77 "../../py/runtime.h"
int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec);

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, 
# 79 "../../py/runtime.h" 3 4
                                                                                       _Bool 
# 79 "../../py/runtime.h"
                                                                                            takes_kw);
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
__attribute__((noreturn)) void mp_arg_error_terse_mismatch(void);
__attribute__((noreturn)) void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return (mp_state_ctx.thread.dict_locals); }
static inline void mp_locals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_locals) = d; }
static inline mp_obj_dict_t *mp_globals_get(void) { return (mp_state_ctx.thread.dict_globals); }
static inline void mp_globals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_globals) = d; }

mp_obj_t mp_load_name(qstr qst);
mp_obj_t mp_load_global(qstr qst);
mp_obj_t mp_load_build_class(void);
void mp_store_name(qstr qst, mp_obj_t obj);
void mp_store_global(qstr qst, mp_obj_t obj);
void mp_delete_name(qstr qst);
void mp_delete_global(qstr qst);

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg);
mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);

mp_obj_t mp_call_function_0(mp_obj_t fun);
mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg);
mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);
mp_obj_t mp_call_function_n_kw(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw_var(
# 106 "../../py/runtime.h" 3 4
                                _Bool 
# 106 "../../py/runtime.h"
                                     have_self, size_t n_args_n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args);

void mp_call_function_1_protected(mp_obj_t fun, mp_obj_t arg);
void mp_call_function_2_protected(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);

typedef struct _mp_call_args_t {
    mp_obj_t fun;
    size_t n_args, n_kw, n_alloc;
    mp_obj_t *args;
} mp_call_args_t;
# 126 "../../py/runtime.h"
void mp_unpack_sequence(mp_obj_t seq, size_t num, mp_obj_t *items);
void mp_unpack_ex(mp_obj_t seq, size_t num, mp_obj_t *items);
mp_obj_t mp_store_map(mp_obj_t map, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_load_attr(mp_obj_t base, qstr attr);
void mp_convert_member_lookup(mp_obj_t obj, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest);
void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_method_maybe(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_super_method(qstr attr, mp_obj_t *dest);
void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t val);

mp_obj_t mp_getiter(mp_obj_t o, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_iternext_allow_raise(mp_obj_t o);
mp_obj_t mp_iternext(mp_obj_t o);
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val);

mp_obj_t mp_make_raise_obj(mp_obj_t o);

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level);
mp_obj_t mp_import_from(mp_obj_t module, qstr name);
void mp_import_all(mp_obj_t module);

__attribute__((noreturn)) void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg);

__attribute__((noreturn)) void mp_raise_ValueError(const char *msg);
__attribute__((noreturn)) void mp_raise_TypeError(const char *msg);
__attribute__((noreturn)) void mp_raise_NotImplementedError(const char *msg);
__attribute__((noreturn)) void mp_raise_OSError(int errno_);
__attribute__((noreturn)) void mp_exc_recursion_depth(void);
# 166 "../../py/runtime.h"
mp_uint_t mp_convert_obj_to_native(mp_obj_t obj, mp_uint_t type);
mp_obj_t mp_convert_native_to_obj(mp_uint_t val, mp_uint_t type);
mp_obj_t mp_native_call_function_n_kw(mp_obj_t fun_in, size_t n_args_kw, const mp_obj_t *args);
void mp_native_raise(mp_obj_t o);
# 25 "omv/py/mp.h" 2
# 1 "../../py/stream.h" 1
# 30 "../../py/stream.h"
# 1 "../../py/mperrno.h" 1
# 146 "../../py/mperrno.h"
qstr mp_errno_to_str(mp_obj_t errno_val);
# 31 "../../py/stream.h" 2
# 52 "../../py/stream.h"
struct mp_stream_seek_t {



    mp_off_t offset;
    int whence;
};






extern const mp_obj_fun_builtin_var_t mp_stream_read_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_read1_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_readinto_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_unbuffered_readline_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_unbuffered_readlines_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_write_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_write1_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_seek_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_tell_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_flush_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_ioctl_obj;






const mp_stream_p_t *mp_get_stream_raise(mp_obj_t self_in, int flags);
mp_obj_t mp_stream_close(mp_obj_t stream);


mp_obj_t mp_stream_unbuffered_iter(mp_obj_t self);

mp_obj_t mp_stream_write(mp_obj_t self_in, const void *buf, size_t len, byte flags);





mp_uint_t mp_stream_rw(mp_obj_t stream, void *buf, mp_uint_t size, int *errcode, byte flags);



void mp_stream_write_adaptor(void *self, const char *buf, size_t len);
# 26 "omv/py/mp.h" 2
# 1 "../../py/gc.h" 1
# 34 "../../py/gc.h"
void gc_init(void *start, void *end);



void gc_lock(void);
void gc_unlock(void);

# 40 "../../py/gc.h" 3 4
_Bool 
# 40 "../../py/gc.h"
    gc_is_locked(void);


void gc_collect(void);
void gc_collect_start(void);
void gc_collect_root(void **ptrs, size_t len);
void gc_collect_end(void);

void *gc_alloc(size_t n_bytes, 
# 48 "../../py/gc.h" 3 4
                              _Bool 
# 48 "../../py/gc.h"
                                   has_finaliser);
void gc_free(void *ptr);
size_t gc_nbytes(const void *ptr);
void *gc_realloc(void *ptr, size_t n_bytes, 
# 51 "../../py/gc.h" 3 4
                                           _Bool 
# 51 "../../py/gc.h"
                                                allow_move);

typedef struct _gc_info_t {
    size_t total;
    size_t used;
    size_t free;
    size_t max_free;
    size_t num_1block;
    size_t num_2block;
    size_t max_block;
} gc_info_t;

void gc_info(gc_info_t *info);
void gc_dump_info(void);
void gc_dump_alloc_table(void);
# 27 "omv/py/mp.h" 2
# 1 "./gccollect.h" 1
# 29 "./gccollect.h"
extern uint32_t _etext;
extern uint32_t _sidata;
extern uint32_t _ram_start;
extern uint32_t _sdata;
extern uint32_t _edata;
extern uint32_t _sbss;
extern uint32_t _ebss;
extern uint32_t _heap_start;
extern uint32_t _heap_end;
extern uint32_t _estack;
extern uint32_t _ram_end;
# 28 "omv/py/mp.h" 2
# 1 "../../lib/mp-readline/readline.h" 1
# 40 "../../lib/mp-readline/readline.h"
void readline_init0(void);
int readline(vstr_t *line, const char *prompt);
void readline_push_history(const char *line);

void readline_init(vstr_t *line, const char *prompt);
void readline_note_newline(const char *prompt);
int readline_process_char(int c);
# 29 "omv/py/mp.h" 2
# 1 "./pin.h" 1
# 33 "./pin.h"
# 1 "mcusdk/drivers/fsl_iomuxc.h" 1
# 38 "mcusdk/drivers/fsl_iomuxc.h"
# 1 "mcusdk/drivers/fsl_common.h" 1
# 39 "mcusdk/drivers/fsl_iomuxc.h" 2
# 1059 "mcusdk/drivers/fsl_iomuxc.h"
typedef enum _iomuxc_gpr_mode
{
    kIOMUXC_GPR_GlobalInterruptRequest = (0x1000U),
    kIOMUXC_GPR_ENET1RefClkMode = (0x2000U),
    kIOMUXC_GPR_USBExposureMode = (0x8000U),
    kIOMUXC_GPR_ENET1TxClkOutputDir = (0x20000U),
    kIOMUXC_GPR_SAI1MClkOutputDir = (0x80000U),
    kIOMUXC_GPR_SAI2MClkOutputDir = (0x100000U),
    kIOMUXC_GPR_SAI3MClkOutputDir = (0x200000U),
    kIOMUXC_GPR_ExcMonitorSlavErrResponse = (0x400000U),
    kIOMUXC_GPR_ENETIpgClkOn = (0x800000U),
    kIOMUXC_GPR_AHBClockEnable = (0x80000000U),
} iomuxc_gpr_mode_t;

typedef enum _iomuxc_gpr_saimclk
{
    kIOMUXC_GPR_SAI1MClk1Sel = (0U),
    kIOMUXC_GPR_SAI1MClk2Sel = (3U),
    kIOMUXC_GPR_SAI1MClk3Sel = (6U),
    kIOMUXC_GPR_SAI2MClk3Sel = (8U),
    kIOMUXC_GPR_SAI3MClk3Sel = (10U),
} iomuxc_gpr_saimclk_t;

typedef enum _iomuxc_mqs_pwm_oversample_rate
{
    kIOMUXC_MqsPwmOverSampleRate32 = 0,
    kIOMUXC_MqsPwmOverSampleRate64 = 1
} iomuxc_mqs_pwm_oversample_rate_t;
# 1118 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetPinMux(uint32_t muxRegister,
                                    uint32_t muxMode,
                                    uint32_t inputRegister,
                                    uint32_t inputDaisy,
                                    uint32_t configRegister,
                                    uint32_t inputOnfield)
{
    *((volatile uint32_t *)muxRegister) =
        (((uint32_t)(((uint32_t)(muxMode)) << (0U))) & (0x7U)) | (((uint32_t)(((uint32_t)(inputOnfield)) << (4U))) & (0x10U));

    if (inputRegister)
    {
        *((volatile uint32_t *)inputRegister) = inputDaisy;
    }
}
# 1150 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetPinConfig(uint32_t muxRegister,
                                       uint32_t muxMode,
                                       uint32_t inputRegister,
                                       uint32_t inputDaisy,
                                       uint32_t configRegister,
                                       uint32_t configValue)
{
    if (configRegister)
    {
        *((volatile uint32_t *)configRegister) = configValue;
    }
}
# 1170 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_EnableMode(IOMUXC_GPR_Type *base, uint32_t mode, 
# 1170 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                                          _Bool 
# 1170 "mcusdk/drivers/fsl_iomuxc.h"
                                                                               enable)
{
    uint32_t gpr = base->GPR1 & 0xFFF;

    if (enable)
    {
        base->GPR1 = mode | gpr;
    }
    else
    {
        base->GPR1 &= ~mode;
    }
}
# 1191 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetSaiMClkClockSource(IOMUXC_GPR_Type *base, iomuxc_gpr_saimclk_t mclk, uint8_t clkSrc)
{
    uint32_t gpr;

    if (mclk > kIOMUXC_GPR_SAI1MClk2Sel)
    {
        gpr = base->GPR1 & ~((0x3U) << mclk);
        base->GPR1 = ((clkSrc & (0x3U)) << mclk) | gpr;
    }
    else
    {
        gpr = base->GPR1 & ~((0x7U) << mclk);
        base->GPR1 = ((clkSrc & (0x7U)) << mclk) | gpr;
    }
}







static inline void IOMUXC_MQSEnterSoftwareReset(IOMUXC_GPR_Type *base, 
# 1213 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                                      _Bool 
# 1213 "mcusdk/drivers/fsl_iomuxc.h"
                                                                           enable)
{
    if (enable)
    {
        base->GPR2 |= (0x1000000U);
    }
    else
    {
        base->GPR2 &= ~(0x1000000U);
    }
}
# 1232 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_MQSEnable(IOMUXC_GPR_Type *base, 
# 1232 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                          _Bool 
# 1232 "mcusdk/drivers/fsl_iomuxc.h"
                                                               enable)
{
    if (enable)
    {
        base->GPR2 |= (0x2000000U);
    }
    else
    {
        base->GPR2 &= ~(0x2000000U);
    }
}
# 1252 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_MQSConfig(IOMUXC_GPR_Type *base, iomuxc_mqs_pwm_oversample_rate_t rate, uint8_t divider)
{
    uint32_t gpr = base->GPR2 & ~((0x4000000U) | (0xFF0000U));

    base->GPR2 = gpr | (((uint32_t)(((uint32_t)(rate)) << (26U))) & (0x4000000U)) | (((uint32_t)(((uint32_t)(divider)) << (16U))) & (0xFF0000U));
}
# 34 "./pin.h" 2
# 1 "mcusdk/drivers/fsl_gpio.h" 1
# 56 "mcusdk/drivers/fsl_gpio.h"
typedef enum _gpio_pin_direction
{
    kGPIO_DigitalInput = 0U,
    kGPIO_DigitalOutput = 1U,
} gpio_pin_direction_t;


typedef enum _gpio_interrupt_mode
{
    kGPIO_NoIntmode = 0U,
    kGPIO_IntLowLevel = 1U,
    kGPIO_IntHighLevel = 2U,
    kGPIO_IntRisingEdge = 3U,
    kGPIO_IntFallingEdge = 4U,
    kGPIO_IntRisingOrFallingEdge = 5U,
} gpio_interrupt_mode_t;


typedef struct _gpio_pin_config
{
    gpio_pin_direction_t direction;
    uint8_t outputLogic;
    gpio_interrupt_mode_t interruptMode;
} gpio_pin_config_t;
# 103 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config);
# 120 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinWrite(GPIO_Type* base, uint32_t pin, uint8_t output);





static inline void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
    GPIO_PinWrite(base, pin, output);
}







static inline void GPIO_PortSet(GPIO_Type* base, uint32_t mask)
{
    base->DR |= mask;
}





static inline void GPIO_SetPinsOutput(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortSet(base, mask);
}







static inline void GPIO_PortClear(GPIO_Type* base, uint32_t mask)
{
    base->DR &= ~mask;
}





static inline void GPIO_ClearPinsOutput(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortClear(base, mask);
}
# 178 "mcusdk/drivers/fsl_gpio.h"
static inline uint32_t GPIO_PinRead(GPIO_Type* base, uint32_t pin)
{
    
# 180 "mcusdk/drivers/fsl_gpio.h" 3
   ((void)0)
# 180 "mcusdk/drivers/fsl_gpio.h"
                   ;

    return (((base->DR) >> pin) & 0x1U);
}





static inline uint32_t GPIO_ReadPinInput(GPIO_Type* base, uint32_t pin)
{
    return GPIO_PinRead(base, pin);
}
# 207 "mcusdk/drivers/fsl_gpio.h"
static inline uint8_t GPIO_PinReadPadStatus(GPIO_Type* base, uint32_t pin)
{
    
# 209 "mcusdk/drivers/fsl_gpio.h" 3
   ((void)0)
# 209 "mcusdk/drivers/fsl_gpio.h"
                   ;

    return (uint8_t)(((base->PSR) >> pin) & 0x1U);
}





static inline uint8_t GPIO_ReadPadStatus(GPIO_Type* base, uint32_t pin)
{
    return GPIO_PinReadPadStatus(base, pin);
}
# 237 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinSetInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode);





static inline void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
    GPIO_PinSetInterruptConfig(base, pin, pinInterruptMode);
}







static inline void GPIO_PortEnableInterrupts(GPIO_Type* base, uint32_t mask)
{
    base->IMR |= mask;
}







static inline void GPIO_EnableInterrupts(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortEnableInterrupts(base, mask);
}







static inline void GPIO_PortDisableInterrupts(GPIO_Type* base, uint32_t mask)
{
    base->IMR &= ~mask;
}





static inline void GPIO_DisableInterrupts(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortDisableInterrupts(base, mask);
}







static inline uint32_t GPIO_PortGetInterruptFlags(GPIO_Type* base)
{
    return base->ISR;
}







static inline uint32_t GPIO_GetPinsInterruptFlags(GPIO_Type* base)
{
    return GPIO_PortGetInterruptFlags(base);
}
# 319 "mcusdk/drivers/fsl_gpio.h"
static inline void GPIO_PortClearInterruptFlags(GPIO_Type* base, uint32_t mask)
{
    base->ISR = mask;
}
# 331 "mcusdk/drivers/fsl_gpio.h"
static inline void GPIO_ClearPinsInterruptFlags(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortClearInterruptFlags(base, mask);
}
# 35 "./pin.h" 2


# 1 "./pin_defs_mcu.h" 1
# 30 "./pin_defs_mcu.h"
enum {
  PORT_0 = 0,
  PORT_1,
  PORT_2,
  PORT_3,
  PORT_4,
  PORT_5,
  PORT_6,
  PORT_7,
  PORT_8,
  PORT_9,
};





enum {
  AF_FN_GPIO,
  AF_FN_LPUART,
  AF_FN_LPI2C,
  AF_FN_LPSPI,
  AF_FN_SAI,
  AF_FN_I2S = AF_FN_SAI,
  AF_FN_GPT,
  AF_FN_TMR,
  AF_FN_PWM,
  AF_FN_SDMMC,
};

enum {
  AF_PIN_TYPE_GPIO_PIN0,
  AF_PIN_TYPE_GPIO_PIN1,
  AF_PIN_TYPE_GPIO_PIN2,
  AF_PIN_TYPE_GPIO_PIN3,
  AF_PIN_TYPE_GPIO_PIN4,
  AF_PIN_TYPE_GPIO_PIN5,
  AF_PIN_TYPE_GPIO_PIN6,
  AF_PIN_TYPE_GPIO_PIN7,
  AF_PIN_TYPE_GPIO_PIN8,
  AF_PIN_TYPE_GPIO_PIN9,
  AF_PIN_TYPE_GPIO_PIN10,
  AF_PIN_TYPE_GPIO_PIN11,
  AF_PIN_TYPE_GPIO_PIN12,
  AF_PIN_TYPE_GPIO_PIN13,
  AF_PIN_TYPE_GPIO_PIN14,
  AF_PIN_TYPE_GPIO_PIN15,
  AF_PIN_TYPE_GPIO_PIN16,
  AF_PIN_TYPE_GPIO_PIN17,
  AF_PIN_TYPE_GPIO_PIN18,
  AF_PIN_TYPE_GPIO_PIN19,
  AF_PIN_TYPE_GPIO_PIN20,
  AF_PIN_TYPE_GPIO_PIN21,
  AF_PIN_TYPE_GPIO_PIN22,
  AF_PIN_TYPE_GPIO_PIN23,
  AF_PIN_TYPE_GPIO_PIN24,
  AF_PIN_TYPE_GPIO_PIN25,
  AF_PIN_TYPE_GPIO_PIN26,
  AF_PIN_TYPE_GPIO_PIN27,
  AF_PIN_TYPE_GPIO_PIN28,
  AF_PIN_TYPE_GPIO_PIN29,
  AF_PIN_TYPE_GPIO_PIN30,
  AF_PIN_TYPE_GPIO_PIN31,

 AF_PIN_TYPE_TMR_TIMER0 = 0,
 AF_PIN_TYPE_TMR_TIMER1,
 AF_PIN_TYPE_TMR_TIMER2,
 AF_PIN_TYPE_TMR_TIMER3,

   AF_PIN_TYPE_GPT_CLK,
   AF_PIN_TYPE_GPT_CAPTURE1,
   AF_PIN_TYPE_GPT_CAPTURE2,
   AF_PIN_TYPE_GPT_COMPARE1,
   AF_PIN_TYPE_GPT_COMPARE2,
   AF_PIN_TYPE_GPT_COMPARE3,

  AF_PIN_TYPE_LPI2C_SDA = 0,
  AF_PIN_TYPE_LPI2C_SCL,

  AF_PIN_TYPE_LPUART_TX = 0,
  AF_PIN_TYPE_LPUART_RX,
  AF_PIN_TYPE_LPUART_CTS_B,
  AF_PIN_TYPE_LPUART_RTS_B,
  AF_PIN_TYPE_LPUART_CK,

  AF_PIN_TYPE_LPSPI_SDI = 0,
  AF_PIN_TYPE_LPSPI_SDO,
  AF_PIN_TYPE_LPSPI_SCK,
  AF_PIN_TYPE_LPSPI_PCS0,

  AF_PIN_TYPE_PWM_PWMA0 = 0,
  AF_PIN_TYPE_PWM_PWMB0,
  AF_PIN_TYPE_PWM_PWMX0,
  AF_PIN_TYPE_PWM_PWMA1,
  AF_PIN_TYPE_PWM_PWMB1,
  AF_PIN_TYPE_PWM_PWMx1,
  AF_PIN_TYPE_PWM_PWMA2,
  AF_PIN_TYPE_PWM_PWMB2,
  AF_PIN_TYPE_PWM_PWMx2,
  AF_PIN_TYPE_PWM_PWMA3,
  AF_PIN_TYPE_PWM_PWMB3,
  AF_PIN_TYPE_PWM_PWMX3,


  AF_PIN_TYPE_SAI_MCLK = 0,
  AF_PIN_TYPE_SAI_TX_BCLK,
  AF_PIN_TYPE_SAI_TX_SYNC,
  AF_PIN_TYPE_SAI_TX_DATA,
  AF_PIN_TYPE_SAI_TX_DATA0 = AF_PIN_TYPE_SAI_TX_DATA,
  AF_PIN_TYPE_SAI_TX_DATA1,
  AF_PIN_TYPE_SAI_TX_DATA2,
  AF_PIN_TYPE_SAI_TX_DATA3,
  AF_PIN_TYPE_SAI_RX_BCLK,
  AF_PIN_TYPE_SAI_RX_SYNC,
  AF_PIN_TYPE_SAI_RX_DATA,
  AF_PIN_TYPE_SAI_RX_DATA0 = AF_PIN_TYPE_SAI_RX_DATA,
};

enum {
  PIN_ADC1 = (1 << 1),
  PIN_ADC2 = (1 << 2),
  PIN_ADC3 = (1 << 3),
};


typedef union _McuPinCfgReg_t
{
 struct {
 uint32_t b00_1_SRE_isFastSlew:1;
 uint32_t b01_2_res1:2;
 uint32_t b03_3_DSE_driveStrength:3;
 uint32_t b06_2_Speed:2;
 uint32_t b08_3_res2:3;
 uint32_t b11_1_OD_isOD:1;
 uint32_t b12_1_PKE_digiInEn:1;
 uint32_t b13_1_PUE_keepOrPull:1;
 uint32_t b14_2_PUS_PullSel:2;
 uint32_t b16_1_HYS:1;
 uint32_t b17_15_res3:15;
 };
 uint32_t v32;
}McuPinCfgReg_t;

typedef union _McuPinMuxReg_t
{
 struct {
 uint32_t b00_3_muxMode:3;
 uint32_t b03_1_res:1;
 uint32_t b04_1_inForceOn:1;
 uint32_t b05_27_res:27;
 };
 uint32_t v32;
}McuPinMuxReg_t;
# 38 "./pin.h" 2



typedef struct {
  mp_obj_base_t base;
  qstr name;
  uint8_t idx;
  uint8_t fn;
  uint8_t unit;
  uint8_t type;

  uint32_t inSelReg;
  uint32_t inSelVal;


  union {
    void *reg;
 TMR_Type *pQTmr;
 LPI2C_Type *pI2C;
 LPUART_Type *pUART;
 LPSPI_Type *pSPI;
  };
} pin_af_obj_t;

typedef struct {
  mp_obj_base_t base;
  qstr name;
  uint32_t port : 4;
  uint32_t pin : 5;
  uint32_t num_af : 4;
  uint32_t adc_channel : 5;
  uint32_t adc_num : 3;
  uint32_t pin_mask;
  GPIO_Type *gpio;

  uint32_t afReg;
  uint32_t cfgReg;

  const pin_af_obj_t *af;
} pin_obj_t;

extern const mp_obj_type_t pin_type;
extern const mp_obj_type_t pin_af_type;

typedef struct {
  const char *name;
  const pin_obj_t *pin;
} pin_named_pin_t;

extern const pin_named_pin_t pin_board_pins[];
extern const pin_named_pin_t pin_cpu_pins[];



typedef struct {
    mp_obj_base_t base;
    qstr name;
    const pin_named_pin_t *named_pins;
} pin_named_pins_obj_t;

extern const mp_obj_type_t pin_board_pins_obj_type;
extern const mp_obj_type_t pin_cpu_pins_obj_type;

extern const mp_obj_dict_t pin_cpu_pins_locals_dict;
extern const mp_obj_dict_t pin_board_pins_locals_dict;

extern const mp_obj_fun_builtin_var_t pin_init_obj;

void pin_init0(void);
uint32_t pin_get_mode(const pin_obj_t *pin);
uint32_t pin_get_pull(const pin_obj_t *pin);
uint32_t pin_get_af(const pin_obj_t *pin);
const pin_obj_t *pin_find(mp_obj_t user_obj);
const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name);
const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn);
const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx);
const pin_af_obj_t *pin_find_af_by_name(const pin_obj_t *pin, const char *name);
# 30 "omv/py/mp.h" 2
# 1 "./extint.h" 1
# 42 "./extint.h"
void extint_init0(void);

uint extint_register(mp_obj_t pin_obj, uint32_t mode, uint32_t pull, mp_obj_t callback_obj, 
# 44 "./extint.h" 3 4
                                                                                           _Bool 
# 44 "./extint.h"
                                                                                                override_callback_obj);

void extint_enable(uint line);
void extint_disable(uint line);
void extint_swint(uint line);

void Handle_EXTI_Irq(uint32_t line);

extern const mp_obj_type_t extint_type;
# 31 "omv/py/mp.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb.h" 1
# 41 "mcusdk/middleware/sdkusb/include/usb.h"
# 1 "mcusdk/middleware/sdkusb/osa/usb_osa.h" 1
# 56 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
typedef void *usb_osa_event_handle;


typedef void *usb_osa_sem_handle;


typedef void *usb_osa_mutex_handle;


typedef void *usb_osa_msgq_handle;


typedef enum _usb_osa_status
{
    kStatus_USB_OSA_Success = 0x00U,
    kStatus_USB_OSA_Error,
    kStatus_USB_OSA_TimeOut,
} usb_osa_status_t;


typedef enum _usb_osa_event_mode
{
    kUSB_OsaEventManualClear = 0U,
    kUSB_OsaEventAutoClear = 1U,
} usb_osa_event_mode_t;




# 1 "mcusdk/middleware/sdkusb/osa/usb_osa_bm.h" 1
# 54 "mcusdk/middleware/sdkusb/osa/usb_osa_bm.h"
extern void USB_OsaEnterCritical(uint32_t *sr);
extern void USB_OsaExitCritical(uint32_t sr);
# 86 "mcusdk/middleware/sdkusb/osa/usb_osa.h" 2
# 148 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
void *USB_OsaMemoryAllocate(uint32_t length);
# 158 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern void USB_OsaMemoryFree(void *p);
# 188 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventCreate(usb_osa_event_handle *handle, uint32_t flag);
# 205 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventDestroy(usb_osa_event_handle handle);
# 225 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventSet(usb_osa_event_handle handle, uint32_t bitMask);
# 254 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventWait(
    usb_osa_event_handle handle, uint32_t bitMask, uint32_t flag, uint32_t timeout, uint32_t *bitSet);
# 277 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventCheck(usb_osa_event_handle handle, uint32_t bitMask, uint32_t *bitSet);
# 296 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventClear(usb_osa_event_handle handle, uint32_t bitMask);
# 322 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemCreate(usb_osa_sem_handle *handle, uint32_t count);
# 342 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemDestroy(usb_osa_sem_handle handle);
# 363 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemPost(usb_osa_sem_handle handle);
# 388 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemWait(usb_osa_sem_handle handle, uint32_t timeout);
# 413 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexCreate(usb_osa_mutex_handle *handle);
# 433 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexDestroy(usb_osa_mutex_handle handle);
# 455 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexLock(usb_osa_mutex_handle handle);
# 475 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexUnlock(usb_osa_mutex_handle handle);
# 502 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqCreate(usb_osa_msgq_handle *handle, uint32_t count, uint32_t size);
# 522 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqDestroy(usb_osa_msgq_handle handle);
# 544 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqSend(usb_osa_msgq_handle handle, void *msg);
# 570 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqRecv(usb_osa_msgq_handle handle, void *msg, uint32_t timeout);
# 592 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqCheck(usb_osa_msgq_handle handle, void *msg);
# 42 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb_misc.h" 1
# 53 "mcusdk/middleware/sdkusb/include/usb_misc.h"
extern int DbgConsole_Printf(const char *fmt_s, ...);
# 67 "mcusdk/middleware/sdkusb/include/usb_misc.h"
# 1 "../../py/runtime.h" 1
# 68 "mcusdk/middleware/sdkusb/include/usb_misc.h" 2
# 1 "../../py/mphal.h" 1
# 34 "../../py/mphal.h"
# 1 "./mphalport.h" 1


# 1 "./pin.h" 1
# 4 "./mphalport.h" 2
# 1 "./hal_wrapper.h" 1





typedef enum
{
  HAL_OK = 0x00U,
  HAL_ERROR = 0x01U,
  HAL_BUSY = 0x02U,
  HAL_TIMEOUT = 0x03U
} HAL_StatusTypeDef;
# 153 "./hal_wrapper.h"
static inline void HAL_MPU_Disable(void)
{

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);


  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}
# 173 "./hal_wrapper.h"
static inline void HAL_MPU_Enable(uint32_t MPU_Control)
{

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );


  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);
}
# 190 "./hal_wrapper.h"
HAL_StatusTypeDef HAL_Init(void);
HAL_StatusTypeDef HAL_DeInit(void);
void HAL_MspInit(void);
void HAL_MspDeInit(void);
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);
void HAL_WFI(void);
void HAL_IncTick(void);
void HAL_Delay(volatile uint32_t Delay);
uint32_t HAL_GetTick(void);
void HAL_SuspendTick(void);
void HAL_ResumeTick(void);
uint32_t HAL_GetHalVersion(void);
uint32_t HAL_GetREVID(void);
uint32_t HAL_GetDEVID(void);
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);




static inline void HAL_GPIO_DeInit(GPIO_Type *pPort, uint32_t pin) {
 gpio_pin_config_t cfg;
 cfg.direction = kGPIO_DigitalInput;
 GPIO_PinInit(pPort, pin, &cfg);
}
# 5 "./mphalport.h" 2

extern const unsigned char mp_hal_status_to_errno_table[4];

__attribute__((noreturn)) void mp_hal_raise(HAL_StatusTypeDef status);
void mp_hal_set_interrupt_char(int c);





extern 
# 15 "./mphalport.h" 3 4
      _Bool 
# 15 "./mphalport.h"
           mp_hal_ticks_cpu_enabled;
void mp_hal_ticks_cpu_enable(void);
static inline mp_uint_t mp_hal_ticks_cpu(void) {
    if (!mp_hal_ticks_cpu_enabled) {
        mp_hal_ticks_cpu_enable();
    }
    return ((DWT_Type *) (0xE0001000UL) )->CYCCNT;
}
# 48 "./mphalport.h"
static inline GPIO_Type * _find_gpio(const pin_obj_t *p){
 GPIO_Type *gps[] = {0, ((GPIO_Type *)(0x401B8000u)), ((GPIO_Type *)(0x401BC000u)), ((GPIO_Type *)(0x401C0000u)), ((GPIO_Type *)(0x401C4000u)), ((GPIO_Type *)(0x400C0000u)),};
 if (p->port > 5)
  while(1);
 return gps[p->port];
}

static inline void mp_hal_pin_write(GPIO_Type *pPort, uint32_t pin, uint32_t bitLevel) {
 GPIO_PinWrite(pPort, pin, bitLevel);
}

static inline void mp_hal_pin_high(const pin_obj_t *pPin) {
 GPIO_PinWrite(pPin->gpio, pPin->pin, 1);

}

static inline void mp_hal_pin_low(const pin_obj_t *pPin) {
 GPIO_PinWrite(pPin->gpio, pPin->pin, 0);
}

static inline void mp_hal_pin_toggle(const pin_obj_t *pPin)
{
 uint32_t a, pinNdx = pPin->pin;
 a = (0 == GPIO_PinRead(pPin->gpio, pinNdx) );
 GPIO_PinWrite(pPin->gpio, pinNdx, a);

}
# 90 "./mphalport.h"
void mp_hal_gpio_clock_enable(uint32_t portNum);
void mp_hal_pin_config(const pin_obj_t *p, const pin_af_obj_t *af, uint32_t alt, uint32_t padCfgVal );

# 92 "./mphalport.h" 3 4
_Bool 
# 92 "./mphalport.h"
    mp_hal_pin_config_alt(const pin_obj_t* pin, uint32_t padCfg, uint8_t fn);

void mp_hal_ConfigGPIO(const pin_obj_t *p, uint32_t gpioModeAndPadCfg, uint32_t isInitialHighForOutput);
# 35 "../../py/mphal.h" 2



int mp_hal_stdin_rx_chr(void);



void mp_hal_stdout_tx_str(const char *str);



void mp_hal_stdout_tx_strn(const char *str, size_t len);



void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len);



void mp_hal_delay_ms(mp_uint_t ms);



void mp_hal_delay_us(mp_uint_t us);



mp_uint_t mp_hal_ticks_ms(void);



mp_uint_t mp_hal_ticks_us(void);



mp_uint_t mp_hal_ticks_cpu(void);
# 69 "mcusdk/middleware/sdkusb/include/usb_misc.h" 2
# 43 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb_spec.h" 1
# 48 "mcusdk/middleware/sdkusb/include/usb_spec.h"
typedef struct _usb_setup_struct
{
    uint8_t bmRequestType;
    uint8_t bRequest;
    uint16_t wValue;
    uint16_t wIndex;
    uint16_t wLength;
} usb_setup_struct_t;
# 200 "mcusdk/middleware/sdkusb/include/usb_spec.h"
typedef struct _usb_language
{
    uint8_t **string;
    uint32_t *length;
    uint16_t languageId;
} usb_language_t;

typedef struct _usb_language_list
{
    uint8_t *languageString;
    uint32_t stringLength;
    usb_language_t *languageList;
    uint8_t count;
} usb_language_list_t;

typedef struct _usb_descriptor_common
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bData[1];
} usb_descriptor_common_t;

typedef struct _usb_descriptor_device
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bcdUSB[2];
    uint8_t bDeviceClass;
    uint8_t bDeviceSubClass;
    uint8_t bDeviceProtocol;
    uint8_t bMaxPacketSize0;
    uint8_t idVendor[2];
    uint8_t idProduct[2];
    uint8_t bcdDevice[2];
    uint8_t iManufacturer;
    uint8_t iProduct;
    uint8_t iSerialNumber;
    uint8_t bNumConfigurations;
} usb_descriptor_device_t;

typedef struct _usb_descriptor_configuration
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t wTotalLength[2];
    uint8_t bNumInterfaces;
    uint8_t bConfigurationValue;
    uint8_t iConfiguration;
    uint8_t bmAttributes;
    uint8_t bMaxPower;
} usb_descriptor_configuration_t;

typedef struct _usb_descriptor_interface
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bInterfaceNumber;
    uint8_t bAlternateSetting;
    uint8_t bNumEndpoints;
    uint8_t bInterfaceClass;
    uint8_t bInterfaceSubClass;
    uint8_t bInterfaceProtocol;
    uint8_t iInterface;
} usb_descriptor_interface_t;

typedef struct _usb_descriptor_endpoint
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bEndpointAddress;
    uint8_t bmAttributes;
    uint8_t wMaxPacketSize[2];
    uint8_t bInterval;
} usb_descriptor_endpoint_t;

typedef struct _usb_descriptor_binary_device_object_store
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t wTotalLength[2];
    uint8_t bNumDeviceCaps;
} usb_descriptor_bos_t;

typedef struct _usb_descriptor_usb20_extension
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bDevCapabilityType;
    uint8_t bmAttributes[4];
} usb_descriptor_usb20_extension_t;

typedef union _usb_descriptor_union
{
    usb_descriptor_common_t common;
    usb_descriptor_device_t device;
    usb_descriptor_configuration_t configuration;
    usb_descriptor_interface_t interface;
    usb_descriptor_endpoint_t endpoint;
} usb_descriptor_union_t;
# 44 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 64 "mcusdk/middleware/sdkusb/include/usb.h"
typedef enum _usb_status
{
    kStatus_USB_Success = 0x00U,
    kStatus_USB_Error,

    kStatus_USB_Busy,
    kStatus_USB_InvalidHandle,
    kStatus_USB_InvalidParameter,
    kStatus_USB_InvalidRequest,
    kStatus_USB_ControllerNotFound,
    kStatus_USB_InvalidControllerInterface,

    kStatus_USB_NotSupported,
    kStatus_USB_Retry,
    kStatus_USB_TransferStall,
    kStatus_USB_TransferFailed,
    kStatus_USB_AllocFail,
    kStatus_USB_LackSwapBuffer,
    kStatus_USB_TransferCancel,
    kStatus_USB_BandwidthFail,
    kStatus_USB_MSDStatusFail,
    kStatus_USB_EHCIAttached,
    kStatus_USB_EHCIDetached,
} usb_status_t;


typedef void *usb_host_handle;



typedef void *usb_device_handle;


typedef void *usb_otg_handle;


typedef enum _usb_controller_index
{
    kUSB_ControllerKhci0 = 0U,
    kUSB_ControllerKhci1 = 1U,

    kUSB_ControllerEhci0 = 2U,
    kUSB_ControllerEhci1 = 3U,


    kUSB_ControllerLpcIp3511Fs0 = 4U,
    kUSB_ControllerLpcIp3511Fs1 =
        5U,


    kUSB_ControllerLpcIp3511Hs0 = 6U,
    kUSB_ControllerLpcIp3511Hs1 =
        7U,


    kUSB_ControllerOhci0 = 8U,
    kUSB_ControllerOhci1 = 9U,


    kUSB_ControllerIp3516Hs0 = 10U,
    kUSB_ControllerIp3516Hs1 =
        11U,

} usb_controller_index_t;




typedef struct _usb_version
{
    uint8_t major;
    uint8_t minor;
    uint8_t bugfix;
} usb_version_t;
# 32 "omv/py/mp.h" 2
# 1 "../../extmod/vfs.h" 1
# 29 "../../extmod/vfs.h"
# 1 "../../py/lexer.h" 1
# 30 "../../extmod/vfs.h" 2
# 48 "../../extmod/vfs.h"
typedef struct _mp_vfs_mount_t {
    const char *str;
    size_t len;
    mp_obj_t obj;
    struct _mp_vfs_mount_t *next;
} mp_vfs_mount_t;

mp_vfs_mount_t *mp_vfs_lookup_path(const char *path, const char **path_out);
mp_import_stat_t mp_vfs_import_stat(const char *path);
mp_obj_t mp_vfs_mount(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args);
mp_obj_t mp_vfs_umount(mp_obj_t mnt_in);
mp_obj_t mp_vfs_open(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args);
mp_obj_t mp_vfs_chdir(mp_obj_t path_in);
mp_obj_t mp_vfs_getcwd(void);
mp_obj_t mp_vfs_ilistdir(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_vfs_listdir(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_vfs_mkdir(mp_obj_t path_in);
mp_obj_t mp_vfs_remove(mp_obj_t path_in);
mp_obj_t mp_vfs_rename(mp_obj_t old_path_in, mp_obj_t new_path_in);
mp_obj_t mp_vfs_rmdir(mp_obj_t path_in);
mp_obj_t mp_vfs_stat(mp_obj_t path_in);
mp_obj_t mp_vfs_statvfs(mp_obj_t path_in);

extern const mp_obj_fun_builtin_var_t mp_vfs_mount_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_umount_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_open_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_chdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_getcwd_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_ilistdir_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_listdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_mkdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_remove_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_rename_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_rmdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_stat_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_statvfs_obj;
# 33 "omv/py/mp.h" 2
# 1 "../../extmod/vfs_fat.h" 1
# 31 "../../extmod/vfs_fat.h"
# 1 "../../lib/oofatfs/ff.h" 1
# 35 "../../lib/oofatfs/ff.h"
typedef uint8_t BYTE;


typedef int16_t SHORT;
typedef uint16_t WORD;
typedef uint16_t WCHAR;


typedef int INT;
typedef unsigned int UINT;


typedef int32_t LONG;
typedef uint32_t DWORD;


typedef uint64_t QWORD;

# 1 "../../lib/oofatfs/ffconf.h" 1
# 54 "../../lib/oofatfs/ff.h" 2
# 84 "../../lib/oofatfs/ff.h"
typedef char TCHAR;
# 100 "../../lib/oofatfs/ff.h"
typedef DWORD FSIZE_t;






typedef struct {
    void *drv;

    BYTE part;

    BYTE fs_type;
    BYTE n_fats;
    BYTE wflag;
    BYTE fsi_flag;
    WORD id;
    WORD n_rootdir;
    WORD csize;




    WCHAR* lfnbuf;
# 132 "../../lib/oofatfs/ff.h"
    DWORD last_clst;
    DWORD free_clst;


    DWORD cdir;






    DWORD n_fatent;
    DWORD fsize;
    DWORD volbase;
    DWORD fatbase;
    DWORD dirbase;
    DWORD database;
    DWORD winsect;
    BYTE win[512];
} FATFS;





typedef struct {
    FATFS* fs;
    WORD id;
    BYTE attr;
    BYTE stat;
    DWORD sclust;
    FSIZE_t objsize;
# 173 "../../lib/oofatfs/ff.h"
} _FDID;





typedef struct {
    _FDID obj;
    BYTE flag;
    BYTE err;
    FSIZE_t fptr;
    DWORD clust;
    DWORD sect;

    DWORD dir_sect;
    BYTE* dir_ptr;







} FIL;





typedef struct {
    _FDID obj;
    DWORD dptr;
    DWORD clust;
    DWORD sect;
    BYTE* dir;
    BYTE fn[12];

    DWORD blk_ofs;




} FF_DIR;





typedef struct {
    FSIZE_t fsize;
    WORD fdate;
    WORD ftime;
    BYTE fattrib;

    TCHAR altname[13];
    TCHAR fname[255 + 1];



} FILINFO;





typedef enum {
    FR_OK = 0,
    FR_DISK_ERR,
    FR_INT_ERR,
    FR_NOT_READY,
    FR_NO_FILE,
    FR_NO_PATH,
    FR_INVALID_NAME,
    FR_DENIED,
    FR_EXIST,
    FR_INVALID_OBJECT,
    FR_WRITE_PROTECTED,
    FR_INVALID_DRIVE,
    FR_NOT_ENABLED,
    FR_NO_FILESYSTEM,
    FR_MKFS_ABORTED,
    FR_TIMEOUT,
    FR_LOCKED,
    FR_NOT_ENOUGH_CORE,
    FR_TOO_MANY_OPEN_FILES,
    FR_INVALID_PARAMETER
} FRESULT;






FRESULT f_open (FATFS *fs, FIL* fp, const TCHAR* path, BYTE mode);
FRESULT f_close (FIL* fp);
FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
FRESULT f_lseek (FIL* fp, FSIZE_t ofs);
FRESULT f_truncate (FIL* fp);
FRESULT f_sync (FIL* fp);
FRESULT f_opendir (FATFS *fs, FF_DIR* dp, const TCHAR* path);
FRESULT f_closedir (FF_DIR* dp);
FRESULT f_readdir (FF_DIR* dp, FILINFO* fno);
FRESULT f_findfirst (FF_DIR* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
FRESULT f_findnext (FF_DIR* dp, FILINFO* fno);
FRESULT f_mkdir (FATFS *fs, const TCHAR* path);
FRESULT f_unlink (FATFS *fs, const TCHAR* path);
FRESULT f_rename (FATFS *fs, const TCHAR* path_old, const TCHAR* path_new);
FRESULT f_stat (FATFS *fs, const TCHAR* path, FILINFO* fno);
FRESULT f_chmod (FATFS *fs, const TCHAR* path, BYTE attr, BYTE mask);
FRESULT f_utime (FATFS *fs, const TCHAR* path, const FILINFO* fno);
FRESULT f_chdir (FATFS *fs, const TCHAR* path);
FRESULT f_getcwd (FATFS *fs, TCHAR* buff, UINT len);
FRESULT f_getfree (FATFS *fs, DWORD* nclst);
FRESULT f_getlabel (FATFS *fs, TCHAR* label, DWORD* vsn);
FRESULT f_setlabel (FATFS *fs, const TCHAR* label);
FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
FRESULT f_expand (FIL* fp, FSIZE_t szf, BYTE opt);
FRESULT f_mount (FATFS* fs);
FRESULT f_umount (FATFS* fs);
FRESULT f_mkfs (FATFS *fs, BYTE opt, DWORD au, void* work, UINT len);
FRESULT f_fdisk (void *pdrv, const DWORD* szt, void* work);
# 315 "../../lib/oofatfs/ff.h"
DWORD get_fattime (void);




WCHAR ff_convert (WCHAR chr, UINT dir);
WCHAR ff_wtoupper (WCHAR chr);
# 32 "../../extmod/vfs_fat.h" 2







typedef struct _fs_user_mount_t {
    mp_obj_base_t base;
    uint16_t flags;
    mp_obj_t readblocks[4];
    mp_obj_t writeblocks[4];

    union {
        mp_obj_t ioctl[4];
        struct {
            mp_obj_t sync[2];
            mp_obj_t count[2];
        } old;
    } u;
    FATFS fatfs;
} fs_user_mount_t;

extern const byte fresult_to_errno_table[20];
extern const mp_obj_type_t mp_fat_vfs_type;

mp_import_stat_t fat_vfs_import_stat(struct _fs_user_mount_t *vfs, const char *path);
mp_obj_t fatfs_builtin_open_self(mp_obj_t self_in, mp_obj_t path, mp_obj_t mode);
extern const mp_obj_fun_builtin_var_t mp_vfs_open_obj;

mp_obj_t fat_vfs_ilistdir2(struct _fs_user_mount_t *vfs, const char *path, 
# 62 "../../extmod/vfs_fat.h" 3 4
                                                                          _Bool 
# 62 "../../extmod/vfs_fat.h"
                                                                               is_str_type);
# 34 "omv/py/mp.h" 2
# 11 "omv/py/py_sensor.c" 2

# 1 "./omv/sensor.h" 1
# 13 "./omv/sensor.h"
# 1 "./omv/img/imlib.h" 1
# 11 "./omv/img/imlib.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 12 "./omv/img/imlib.h" 2



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 16 "./omv/img/imlib.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/float.h" 1 3 4
# 17 "./omv/img/imlib.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 1 3






# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 8 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 2 3



# 86 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3

# 86 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);




extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);





extern int isinf (double);




extern int isnan (double);
# 150 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
    typedef float float_t;
    typedef double double_t;
# 194 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 290 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
# 422 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 503 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double drem (double, double);
extern float dremf (float, float);



extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);



extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);
# 565 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern int *__signgam (void);
# 578 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
struct exception

{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};




extern int matherr (struct exception *e);
# 642 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern enum __fdlibm_version __fdlib_version;
# 662 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3

# 18 "./omv/img/imlib.h" 2
# 1 "../../lib/cmsis/inc/arm_math.h" 1
# 298 "../../lib/cmsis/inc/arm_math.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"





# 1 "../../lib/cmsis/inc/core_cm7.h" 1
# 308 "../../lib/cmsis/inc/arm_math.h" 2
# 387 "../../lib/cmsis/inc/arm_math.h"
  
# 387 "../../lib/cmsis/inc/arm_math.h"
 typedef enum
  {
    ARM_MATH_SUCCESS = 0,
    ARM_MATH_ARGUMENT_ERROR = -1,
    ARM_MATH_LENGTH_ERROR = -2,
    ARM_MATH_SIZE_MISMATCH = -3,
    ARM_MATH_NANINF = -4,
    ARM_MATH_SINGULAR = -5,
    ARM_MATH_TEST_FAILURE = -6
  } arm_status;




  typedef int8_t q7_t;




  typedef int16_t q15_t;




  typedef int32_t q31_t;




  typedef int64_t q63_t;




  typedef float float32_t;




  typedef double float64_t;
# 510 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
  }




  __attribute__((always_inline)) static inline q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
  }




  __attribute__((always_inline)) static inline q7_t clip_q31_to_q7(
  q31_t x)
  {
    return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
      ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
  }




  __attribute__((always_inline)) static inline q15_t clip_q31_to_q15(
  q31_t x)
  {
    return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
      ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
  }





  __attribute__((always_inline)) static inline q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
            (((q63_t) (x >> 32) * y)));
  }
# 589 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline uint32_t arm_recip_q31(
  q31_t in,
  q31_t * dst,
  q31_t * pRecipTable)
  {
    q31_t out;
    uint32_t tempVal;
    uint32_t index, i;
    uint32_t signBits;

    if (in > 0)
    {
      signBits = ((uint32_t) (__builtin_clz( in) - 1));
    }
    else
    {
      signBits = ((uint32_t) (__builtin_clz(-in) - 1));
    }


    in = (in << signBits);


    index = (uint32_t)(in >> 24);
    index = (index & 0x0000003F);


    out = pRecipTable[index];



    for (i = 0u; i < 2u; i++)
    {
      tempVal = (uint32_t) (((q63_t) in * out) >> 31);
      tempVal = 0x7FFFFFFFu - tempVal;


      out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
    }


    *dst = out;


    return (signBits + 1u);
  }





  __attribute__((always_inline)) static inline uint32_t arm_recip_q15(
  q15_t in,
  q15_t * dst,
  q15_t * pRecipTable)
  {
    q15_t out = 0;
    uint32_t tempVal = 0;
    uint32_t index = 0, i = 0;
    uint32_t signBits = 0;

    if (in > 0)
    {
      signBits = ((uint32_t)(__builtin_clz( in) - 17));
    }
    else
    {
      signBits = ((uint32_t)(__builtin_clz(-in) - 17));
    }


    in = (in << signBits);


    index = (uint32_t)(in >> 8);
    index = (index & 0x0000003F);


    out = pRecipTable[index];



    for (i = 0u; i < 2u; i++)
    {
      tempVal = (uint32_t) (((q31_t) in * out) >> 15);
      tempVal = 0x7FFFu - tempVal;

      out = (q15_t) (((q31_t) out * tempVal) >> 14);

    }


    *dst = out;


    return (signBits + 1);
  }
# 1094 "../../lib/cmsis/inc/arm_math.h"
  typedef struct
  {
    uint16_t numTaps;
    q7_t *pState;
    q7_t *pCoeffs;
  } arm_fir_instance_q7;




  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
  } arm_fir_instance_q15;




  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
  } arm_fir_instance_q31;




  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_fir_instance_f32;
# 1139 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q7(
  const arm_fir_instance_q7 * S,
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 1154 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_q7(
  arm_fir_instance_q7 * S,
  uint16_t numTaps,
  q7_t * pCoeffs,
  q7_t * pState,
  uint32_t blockSize);
# 1169 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1183 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_fast_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1200 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_init_q15(
  arm_fir_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 1215 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q31(
  const arm_fir_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1229 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_fast_q31(
  const arm_fir_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1244 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_q31(
  arm_fir_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 1259 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 1274 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_f32(
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    int8_t numStages;
    q15_t *pState;
    q15_t *pCoeffs;
    int8_t postShift;
  } arm_biquad_casd_df1_inst_q15;




  typedef struct
  {
    uint32_t numStages;
    q31_t *pState;
    q31_t *pCoeffs;
    uint8_t postShift;
  } arm_biquad_casd_df1_inst_q31;




  typedef struct
  {
    uint32_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_casd_df1_inst_f32;
# 1322 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1337 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_q15(
  arm_biquad_casd_df1_inst_q15 * S,
  uint8_t numStages,
  q15_t * pCoeffs,
  q15_t * pState,
  int8_t postShift);
# 1352 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_fast_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1366 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1380 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_fast_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1395 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_q31(
  arm_biquad_casd_df1_inst_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q31_t * pState,
  int8_t postShift);
# 1410 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 1424 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_f32(
  arm_biquad_casd_df1_inst_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);





  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float32_t *pData;
  } arm_matrix_instance_f32;





  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float64_t *pData;
  } arm_matrix_instance_f64;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q15_t *pData;
  } arm_matrix_instance_q15;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q31_t *pData;
  } arm_matrix_instance_q31;
# 1481 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1495 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst);
# 1509 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1523 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1537 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pScratch);
# 1552 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1565 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst);
# 1577 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_q15(
  const arm_matrix_instance_q15 * pSrc,
  arm_matrix_instance_q15 * pDst);
# 1589 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_q31(
  const arm_matrix_instance_q31 * pSrc,
  arm_matrix_instance_q31 * pDst);
# 1602 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1617 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pState);
# 1633 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_fast_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pState);
# 1648 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1662 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_fast_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1676 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1690 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst);
# 1704 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1718 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
  float32_t scale,
  arm_matrix_instance_f32 * pDst);
# 1733 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_q15(
  const arm_matrix_instance_q15 * pSrc,
  q15_t scaleFract,
  int32_t shift,
  arm_matrix_instance_q15 * pDst);
# 1749 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_q31(
  const arm_matrix_instance_q31 * pSrc,
  q31_t scaleFract,
  int32_t shift,
  arm_matrix_instance_q31 * pDst);
# 1763 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_q31(
  arm_matrix_instance_q31 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q31_t * pData);
# 1777 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_q15(
  arm_matrix_instance_q15 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q15_t * pData);
# 1791 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData);






  typedef struct
  {
    q15_t A0;




    q31_t A1;

    q15_t state[3];
    q15_t Kp;
    q15_t Ki;
    q15_t Kd;
  } arm_pid_instance_q15;




  typedef struct
  {
    q31_t A0;
    q31_t A1;
    q31_t A2;
    q31_t state[3];
    q31_t Kp;
    q31_t Ki;
    q31_t Kd;
  } arm_pid_instance_q31;




  typedef struct
  {
    float32_t A0;
    float32_t A1;
    float32_t A2;
    float32_t state[3];
    float32_t Kp;
    float32_t Ki;
    float32_t Kd;
  } arm_pid_instance_f32;
# 1852 "../../lib/cmsis/inc/arm_math.h"
  void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag);






  void arm_pid_reset_f32(
  arm_pid_instance_f32 * S);







  void arm_pid_init_q31(
  arm_pid_instance_q31 * S,
  int32_t resetStateFlag);







  void arm_pid_reset_q31(
  arm_pid_instance_q31 * S);







  void arm_pid_init_q15(
  arm_pid_instance_q15 * S,
  int32_t resetStateFlag);






  void arm_pid_reset_q15(
  arm_pid_instance_q15 * S);





  typedef struct
  {
    uint32_t nValues;
    float32_t x1;
    float32_t xSpacing;
    float32_t *pYData;
  } arm_linear_interp_instance_f32;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float32_t *pData;
  } arm_bilinear_interp_instance_f32;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q31_t *pData;
  } arm_bilinear_interp_instance_q31;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q15_t *pData;
  } arm_bilinear_interp_instance_q15;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q7_t *pData;
  } arm_bilinear_interp_instance_q7;
# 1961 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 1975 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 1989 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2003 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q15_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix2_instance_q15;


  arm_status arm_cfft_radix2_init_q15(
  arm_cfft_radix2_instance_q15 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_q15(
  const arm_cfft_radix2_instance_q15 * S,
  q15_t * pSrc);





  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q15_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix4_instance_q15;


  arm_status arm_cfft_radix4_init_q15(
  arm_cfft_radix4_instance_q15 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix4_q15(
  const arm_cfft_radix4_instance_q15 * S,
  q15_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q31_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix2_instance_q31;


  arm_status arm_cfft_radix2_init_q31(
  arm_cfft_radix2_instance_q31 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_q31(
  const arm_cfft_radix2_instance_q31 * S,
  q31_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q31_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix4_instance_q31;


  void arm_cfft_radix4_q31(
  const arm_cfft_radix4_instance_q31 * S,
  q31_t * pSrc);


  arm_status arm_cfft_radix4_init_q31(
  arm_cfft_radix4_instance_q31 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    float32_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
    float32_t onebyfftLen;
  } arm_cfft_radix2_instance_f32;


  arm_status arm_cfft_radix2_init_f32(
  arm_cfft_radix2_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_f32(
  const arm_cfft_radix2_instance_f32 * S,
  float32_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    float32_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
    float32_t onebyfftLen;
  } arm_cfft_radix4_instance_f32;


  arm_status arm_cfft_radix4_init_f32(
  arm_cfft_radix4_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix4_f32(
  const arm_cfft_radix4_instance_f32 * S,
  float32_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    const q15_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_q15;

void arm_cfft_q15(
    const arm_cfft_instance_q15 * S,
    q15_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    const q31_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_q31;

void arm_cfft_q31(
    const arm_cfft_instance_q31 * S,
    q31_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    const float32_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_f32;

  void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
  float32_t * p1,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);




  typedef struct
  {
    uint32_t fftLenReal;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    q15_t *pTwiddleAReal;
    q15_t *pTwiddleBReal;
    const arm_cfft_instance_q15 *pCfft;
  } arm_rfft_instance_q15;

  arm_status arm_rfft_init_q15(
  arm_rfft_instance_q15 * S,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst);




  typedef struct
  {
    uint32_t fftLenReal;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    q31_t *pTwiddleAReal;
    q31_t *pTwiddleBReal;
    const arm_cfft_instance_q31 *pCfft;
  } arm_rfft_instance_q31;

  arm_status arm_rfft_init_q31(
  arm_rfft_instance_q31 * S,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_q31(
  const arm_rfft_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst);




  typedef struct
  {
    uint32_t fftLenReal;
    uint16_t fftLenBy2;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    float32_t *pTwiddleAReal;
    float32_t *pTwiddleBReal;
    arm_cfft_radix4_instance_f32 *pCfft;
  } arm_rfft_instance_f32;

  arm_status arm_rfft_init_f32(
  arm_rfft_instance_f32 * S,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_f32(
  const arm_rfft_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst);




typedef struct
  {
    arm_cfft_instance_f32 Sint;
    uint16_t fftLenRFFT;
    float32_t * pTwiddleRFFT;
  } arm_rfft_fast_instance_f32 ;

arm_status arm_rfft_fast_init_f32 (
   arm_rfft_fast_instance_f32 * S,
   uint16_t fftLen);

void arm_rfft_fast_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut,
  uint8_t ifftFlag);




  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    float32_t normalize;
    float32_t *pTwiddle;
    float32_t *pCosFactor;
    arm_rfft_instance_f32 *pRfft;
    arm_cfft_radix4_instance_f32 *pCfft;
  } arm_dct4_instance_f32;
# 2341 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_f32(
  arm_dct4_instance_f32 * S,
  arm_rfft_instance_f32 * S_RFFT,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  float32_t normalize);
# 2356 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_f32(
  const arm_dct4_instance_f32 * S,
  float32_t * pState,
  float32_t * pInlineBuffer);





  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    q31_t normalize;
    q31_t *pTwiddle;
    q31_t *pCosFactor;
    arm_rfft_instance_q31 *pRfft;
    arm_cfft_radix4_instance_q31 *pCfft;
  } arm_dct4_instance_q31;
# 2387 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_q31(
  arm_dct4_instance_q31 * S,
  arm_rfft_instance_q31 * S_RFFT,
  arm_cfft_radix4_instance_q31 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  q31_t normalize);
# 2402 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_q31(
  const arm_dct4_instance_q31 * S,
  q31_t * pState,
  q31_t * pInlineBuffer);





  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    q15_t normalize;
    q15_t *pTwiddle;
    q15_t *pCosFactor;
    arm_rfft_instance_q15 *pRfft;
    arm_cfft_radix4_instance_q15 *pCfft;
  } arm_dct4_instance_q15;
# 2433 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_q15(
  arm_dct4_instance_q15 * S,
  arm_rfft_instance_q15 * S_RFFT,
  arm_cfft_radix4_instance_q15 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  q15_t normalize);
# 2448 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_q15(
  const arm_dct4_instance_q15 * S,
  q15_t * pState,
  q15_t * pInlineBuffer);
# 2461 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);
# 2475 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 2489 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 2503 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2517 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);
# 2531 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 2545 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 2559 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2573 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_f32(
  float32_t * pSrc,
  float32_t scale,
  float32_t * pDst,
  uint32_t blockSize);
# 2588 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q7(
  q7_t * pSrc,
  q7_t scaleFract,
  int8_t shift,
  q7_t * pDst,
  uint32_t blockSize);
# 2604 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q15(
  q15_t * pSrc,
  q15_t scaleFract,
  int8_t shift,
  q15_t * pDst,
  uint32_t blockSize);
# 2620 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q31(
  q31_t * pSrc,
  q31_t scaleFract,
  int8_t shift,
  q31_t * pDst,
  uint32_t blockSize);
# 2634 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2646 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2658 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2670 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2683 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result);
# 2697 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  uint32_t blockSize,
  q31_t * result);
# 2711 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  uint32_t blockSize,
  q63_t * result);
# 2725 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  uint32_t blockSize,
  q63_t * result);
# 2739 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q7(
  q7_t * pSrc,
  int8_t shiftBits,
  q7_t * pDst,
  uint32_t blockSize);
# 2753 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q15(
  q15_t * pSrc,
  int8_t shiftBits,
  q15_t * pDst,
  uint32_t blockSize);
# 2767 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q31(
  q31_t * pSrc,
  int8_t shiftBits,
  q31_t * pDst,
  uint32_t blockSize);
# 2781 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_f32(
  float32_t * pSrc,
  float32_t offset,
  float32_t * pDst,
  uint32_t blockSize);
# 2795 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q7(
  q7_t * pSrc,
  q7_t offset,
  q7_t * pDst,
  uint32_t blockSize);
# 2809 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q15(
  q15_t * pSrc,
  q15_t offset,
  q15_t * pDst,
  uint32_t blockSize);
# 2823 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q31(
  q31_t * pSrc,
  q31_t offset,
  q31_t * pDst,
  uint32_t blockSize);
# 2836 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2848 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2860 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2872 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2884 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2896 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2908 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2920 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2932 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_f32(
  float32_t value,
  float32_t * pDst,
  uint32_t blockSize);
# 2944 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q7(
  q7_t value,
  q7_t * pDst,
  uint32_t blockSize);
# 2956 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q15(
  q15_t value,
  q15_t * pDst,
  uint32_t blockSize);
# 2968 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q31(
  q31_t value,
  q31_t * pDst,
  uint32_t blockSize);
# 2982 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst);
# 3000 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3018 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 3034 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_q15(
          q15_t * pSrcA,
          uint32_t srcALen,
          q15_t * pSrcB,
          uint32_t srcBLen,
          q15_t * pDst);
# 3052 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3070 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 3086 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 3104 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3122 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst);
# 3141 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3164 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3187 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3208 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3231 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3254 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3275 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3298 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3321 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);





  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    q15_t *pCoeffs;
    q15_t *pState;
  } arm_fir_decimate_instance_q15;




  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    q31_t *pCoeffs;
    q31_t *pState;
  } arm_fir_decimate_instance_q31;




  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    float32_t *pCoeffs;
    float32_t *pState;
  } arm_fir_decimate_instance_f32;
# 3372 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3390 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_f32(
  arm_fir_decimate_instance_f32 * S,
  uint16_t numTaps,
  uint8_t M,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);
# 3406 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3420 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_fast_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3438 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_q15(
  arm_fir_decimate_instance_q15 * S,
  uint16_t numTaps,
  uint8_t M,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 3454 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_q31(
  const arm_fir_decimate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3467 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_fast_q31(
  arm_fir_decimate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3485 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_q31(
  arm_fir_decimate_instance_q31 * S,
  uint16_t numTaps,
  uint8_t M,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    q15_t *pCoeffs;
    q15_t *pState;
  } arm_fir_interpolate_instance_q15;




  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    q31_t *pCoeffs;
    q31_t *pState;
  } arm_fir_interpolate_instance_q31;




  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    float32_t *pCoeffs;
    float32_t *pState;
  } arm_fir_interpolate_instance_f32;
# 3535 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_q15(
  const arm_fir_interpolate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3553 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_q15(
  arm_fir_interpolate_instance_q15 * S,
  uint8_t L,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 3569 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_q31(
  const arm_fir_interpolate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3587 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_q31(
  arm_fir_interpolate_instance_q31 * S,
  uint8_t L,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 3603 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3621 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_f32(
  arm_fir_interpolate_instance_f32 * S,
  uint8_t L,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint8_t numStages;
    q63_t *pState;
    q31_t *pCoeffs;
    uint8_t postShift;
  } arm_biquad_cas_df1_32x64_ins_q31;
# 3648 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cas_df1_32x64_q31(
  const arm_biquad_cas_df1_32x64_ins_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3662 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cas_df1_32x64_init_q31(
  arm_biquad_cas_df1_32x64_ins_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q63_t * pState,
  uint8_t postShift);





  typedef struct
  {
    uint8_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_cascade_df2T_instance_f32;




  typedef struct
  {
    uint8_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_cascade_stereo_df2T_instance_f32;




  typedef struct
  {
    uint8_t numStages;
    float64_t *pState;
    float64_t *pCoeffs;
  } arm_biquad_cascade_df2T_instance_f64;
# 3708 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3722 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_stereo_df2T_f32(
  const arm_biquad_cascade_stereo_df2T_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3736 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_f64(
  const arm_biquad_cascade_df2T_instance_f64 * S,
  float64_t * pSrc,
  float64_t * pDst,
  uint32_t blockSize);
# 3750 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_init_f32(
  arm_biquad_cascade_df2T_instance_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3764 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_stereo_df2T_init_f32(
  arm_biquad_cascade_stereo_df2T_instance_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3778 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_init_f64(
  arm_biquad_cascade_df2T_instance_f64 * S,
  uint8_t numStages,
  float64_t * pCoeffs,
  float64_t * pState);





  typedef struct
  {
    uint16_t numStages;
    q15_t *pState;
    q15_t *pCoeffs;
  } arm_fir_lattice_instance_q15;




  typedef struct
  {
    uint16_t numStages;
    q31_t *pState;
    q31_t *pCoeffs;
  } arm_fir_lattice_instance_q31;




  typedef struct
  {
    uint16_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_fir_lattice_instance_f32;
# 3823 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_q15(
  arm_fir_lattice_instance_q15 * S,
  uint16_t numStages,
  q15_t * pCoeffs,
  q15_t * pState);
# 3837 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_q15(
  const arm_fir_lattice_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3851 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_q31(
  arm_fir_lattice_instance_q31 * S,
  uint16_t numStages,
  q31_t * pCoeffs,
  q31_t * pState);
# 3865 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_q31(
  const arm_fir_lattice_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3879 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_f32(
  arm_fir_lattice_instance_f32 * S,
  uint16_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3893 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_f32(
  const arm_fir_lattice_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numStages;
    q15_t *pState;
    q15_t *pkCoeffs;
    q15_t *pvCoeffs;
  } arm_iir_lattice_instance_q15;




  typedef struct
  {
    uint16_t numStages;
    q31_t *pState;
    q31_t *pkCoeffs;
    q31_t *pvCoeffs;
  } arm_iir_lattice_instance_q31;




  typedef struct
  {
    uint16_t numStages;
    float32_t *pState;
    float32_t *pkCoeffs;
    float32_t *pvCoeffs;
  } arm_iir_lattice_instance_f32;
# 3941 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_f32(
  const arm_iir_lattice_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3957 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_f32(
  arm_iir_lattice_instance_f32 * S,
  uint16_t numStages,
  float32_t * pkCoeffs,
  float32_t * pvCoeffs,
  float32_t * pState,
  uint32_t blockSize);
# 3973 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_q31(
  const arm_iir_lattice_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3989 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_q31(
  arm_iir_lattice_instance_q31 * S,
  uint16_t numStages,
  q31_t * pkCoeffs,
  q31_t * pvCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 4005 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_q15(
  const arm_iir_lattice_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 4021 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_q15(
  arm_iir_lattice_instance_q15 * S,
  uint16_t numStages,
  q15_t * pkCoeffs,
  q15_t * pvCoeffs,
  q15_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
    float32_t mu;
  } arm_lms_instance_f32;
# 4051 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_f32(
  const arm_lms_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pRef,
  float32_t * pOut,
  float32_t * pErr,
  uint32_t blockSize);
# 4069 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_f32(
  arm_lms_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  float32_t mu,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
    q15_t mu;
    uint32_t postShift;
  } arm_lms_instance_q15;
# 4101 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_q15(
  arm_lms_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  q15_t mu,
  uint32_t blockSize,
  uint32_t postShift);
# 4120 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_q15(
  const arm_lms_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pRef,
  q15_t * pOut,
  q15_t * pErr,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
    q31_t mu;
    uint32_t postShift;
  } arm_lms_instance_q31;
# 4151 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_q31(
  const arm_lms_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pRef,
  q31_t * pOut,
  q31_t * pErr,
  uint32_t blockSize);
# 4170 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_q31(
  arm_lms_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  q31_t mu,
  uint32_t blockSize,
  uint32_t postShift);





  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
    float32_t mu;
    float32_t energy;
    float32_t x0;
  } arm_lms_norm_instance_f32;
# 4203 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_f32(
  arm_lms_norm_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pRef,
  float32_t * pOut,
  float32_t * pErr,
  uint32_t blockSize);
# 4221 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_f32(
  arm_lms_norm_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  float32_t mu,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
    q31_t mu;
    uint8_t postShift;
    q31_t *recipTable;
    q31_t energy;
    q31_t x0;
  } arm_lms_norm_instance_q31;
# 4255 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_q31(
  arm_lms_norm_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pRef,
  q31_t * pOut,
  q31_t * pErr,
  uint32_t blockSize);
# 4274 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_q31(
  arm_lms_norm_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  q31_t mu,
  uint32_t blockSize,
  uint8_t postShift);





  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
    q15_t mu;
    uint8_t postShift;
    q15_t *recipTable;
    q15_t energy;
    q15_t x0;
  } arm_lms_norm_instance_q15;
# 4309 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_q15(
  arm_lms_norm_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pRef,
  q15_t * pOut,
  q15_t * pErr,
  uint32_t blockSize);
# 4328 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_q15(
  arm_lms_norm_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  q15_t mu,
  uint32_t blockSize,
  uint8_t postShift);
# 4346 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst);
# 4363 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch);
# 4381 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 4398 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 4415 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch);
# 4432 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 4448 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 4466 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 4484 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst);





  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    float32_t *pState;
    float32_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_f32;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q31_t *pState;
    q31_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q31;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q15_t *pState;
    q15_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q15;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q7_t *pState;
    q7_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q7;
# 4553 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_f32(
  arm_fir_sparse_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  float32_t * pScratchIn,
  uint32_t blockSize);
# 4571 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_f32(
  arm_fir_sparse_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4589 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q31(
  arm_fir_sparse_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  q31_t * pScratchIn,
  uint32_t blockSize);
# 4607 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q31(
  arm_fir_sparse_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4626 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q15(
  arm_fir_sparse_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  q15_t * pScratchIn,
  q31_t * pScratchOut,
  uint32_t blockSize);
# 4645 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q15(
  arm_fir_sparse_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4664 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q7(
  arm_fir_sparse_instance_q7 * S,
  q7_t * pSrc,
  q7_t * pDst,
  q7_t * pScratchIn,
  q31_t * pScratchOut,
  uint32_t blockSize);
# 4683 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q7(
  arm_fir_sparse_instance_q7 * S,
  uint16_t numTaps,
  q7_t * pCoeffs,
  q7_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4699 "../../lib/cmsis/inc/arm_math.h"
  void arm_sin_cos_f32(
  float32_t theta,
  float32_t * pSinVal,
  float32_t * pCosVal);
# 4711 "../../lib/cmsis/inc/arm_math.h"
  void arm_sin_cos_q31(
  q31_t theta,
  q31_t * pSinVal,
  q31_t * pCosVal);
# 4723 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_conj_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);







  void arm_cmplx_conj_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 4746 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_conj_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 4758 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);
# 4770 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 4782 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 4860 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
    float32_t out;


    out = (S->A0 * in) +
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);

  }
# 4894 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_pid_q31(
  arm_pid_instance_q31 * S,
  q31_t in)
  {
    q63_t acc;
    q31_t out;


    acc = (q63_t) S->A0 * in;


    acc += (q63_t) S->A1 * S->state[0];


    acc += (q63_t) S->A2 * S->state[1];


    out = (q31_t) (acc >> 31u);


    out += S->state[2];


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);
  }
# 4941 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_pid_q15(
  arm_pid_instance_q15 * S,
  q15_t in)
  {
    q63_t acc;
    q15_t out;


    int32_t *vstate;




    acc = (q31_t) __SMUAD((uint32_t)S->A0, (uint32_t)in);


    vstate = ((int32_t *)(S->state));
    acc = (q63_t)__SMLALD((uint32_t)S->A1, (uint32_t)*vstate, (uint64_t)acc);
# 4969 "../../lib/cmsis/inc/arm_math.h"
    acc += (q31_t) S->state[2] << 15;


    out = (q15_t) (({ int32_t __RES, __ARG1 = ((acc >> 15)); __asm ("ssat %0, %1, %2" : "=r" (__RES) : "I" (16), "r" (__ARG1) ); __RES; }));


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);
  }
# 4995 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * src,
  arm_matrix_instance_f32 * dst);
# 5007 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_inverse_f64(
  const arm_matrix_instance_f64 * src,
  arm_matrix_instance_f64 * dst);
# 5052 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_clarke_f32(
  float32_t Ia,
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {

    *pIalpha = Ia;


    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
  }
# 5079 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_clarke_q31(
  q31_t Ia,
  q31_t Ib,
  q31_t * pIalpha,
  q31_t * pIbeta)
  {
    q31_t product1, product2;


    *pIalpha = Ia;


    product1 = (q31_t) (((q63_t) Ia * 0x24F34E8B) >> 30);


    product2 = (q31_t) (((q63_t) Ib * 0x49E69D16) >> 30);


    *pIbeta = __QADD(product1, product2);
  }
# 5110 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_q31(
  q7_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 5149 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_clarke_f32(
  float32_t Ialpha,
  float32_t Ibeta,
  float32_t * pIa,
  float32_t * pIb)
  {

    *pIa = Ialpha;


    *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
  }
# 5176 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_clarke_q31(
  q31_t Ialpha,
  q31_t Ibeta,
  q31_t * pIa,
  q31_t * pIb)
  {
    q31_t product1, product2;


    *pIa = Ialpha;


    product1 = (q31_t) (((q63_t) (Ialpha) * (0x40000000)) >> 31);


    product2 = (q31_t) (((q63_t) (Ibeta) * (0x6ED9EBA1)) >> 31);


    *pIb = __QSUB(product2, product1);
  }
# 5207 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_q15(
  q7_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 5259 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_park_f32(
  float32_t Ialpha,
  float32_t Ibeta,
  float32_t * pId,
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {

    *pId = Ialpha * cosVal + Ibeta * sinVal;


    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
  }
# 5290 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_park_q31(
  q31_t Ialpha,
  q31_t Ibeta,
  q31_t * pId,
  q31_t * pIq,
  q31_t sinVal,
  q31_t cosVal)
  {
    q31_t product1, product2;
    q31_t product3, product4;


    product1 = (q31_t) (((q63_t) (Ialpha) * (cosVal)) >> 31);


    product2 = (q31_t) (((q63_t) (Ibeta) * (sinVal)) >> 31);



    product3 = (q31_t) (((q63_t) (Ialpha) * (sinVal)) >> 31);


    product4 = (q31_t) (((q63_t) (Ibeta) * (cosVal)) >> 31);


    *pId = __QADD(product1, product2);


    *pIq = __QSUB(product4, product3);
  }
# 5331 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_float(
  q7_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 5372 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_park_f32(
  float32_t Id,
  float32_t Iq,
  float32_t * pIalpha,
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {

    *pIalpha = Id * cosVal - Iq * sinVal;


    *pIbeta = Id * sinVal + Iq * cosVal;
  }
# 5403 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_park_q31(
  q31_t Id,
  q31_t Iq,
  q31_t * pIalpha,
  q31_t * pIbeta,
  q31_t sinVal,
  q31_t cosVal)
  {
    q31_t product1, product2;
    q31_t product3, product4;


    product1 = (q31_t) (((q63_t) (Id) * (cosVal)) >> 31);


    product2 = (q31_t) (((q63_t) (Iq) * (sinVal)) >> 31);



    product3 = (q31_t) (((q63_t) (Id) * (sinVal)) >> 31);


    product4 = (q31_t) (((q63_t) (Iq) * (cosVal)) >> 31);


    *pIalpha = __QSUB(product1, product2);


    *pIbeta = __QADD(product4, product3);
  }
# 5445 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_float(
  q31_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 5498 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_linear_interp_f32(
  arm_linear_interp_instance_f32 * S,
  float32_t x)
  {
    float32_t y;
    float32_t x0, x1;
    float32_t y0, y1;
    float32_t xSpacing = S->xSpacing;
    int32_t i;
    float32_t *pYData = S->pYData;


    i = (int32_t) ((x - S->x1) / xSpacing);

    if (i < 0)
    {

      y = pYData[0];
    }
    else if ((uint32_t)i >= S->nValues)
    {

      y = pYData[S->nValues - 1];
    }
    else
    {

      x0 = S->x1 + i * xSpacing;
      x1 = S->x1 + (i + 1) * xSpacing;


      y0 = pYData[i];
      y1 = pYData[i + 1];


      y = y0 + (x - x0) * ((y1 - y0) / (x1 - x0));

    }


    return (y);
  }
# 5555 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_linear_interp_q31(
  q31_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q31_t y;
    q31_t y0, y1;
    q31_t fract;
    int32_t index;




    index = ((x & (q31_t)0xFFF00000) >> 20);

    if (index >= (int32_t)(nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else if (index < 0)
    {
      return (pYData[0]);
    }
    else
    {


      fract = (x & 0x000FFFFF) << 11;


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((q31_t) ((q63_t) y0 * (0x7FFFFFFF - fract) >> 32));


      y += ((q31_t) (((q63_t) y1 * fract) >> 32));


      return (y << 1u);
    }
  }
# 5613 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_linear_interp_q15(
  q15_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q63_t y;
    q15_t y0, y1;
    q31_t fract;
    int32_t index;




    index = ((x & (int32_t)0xFFF00000) >> 20);

    if (index >= (int32_t)(nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else if (index < 0)
    {
      return (pYData[0]);
    }
    else
    {


      fract = (x & 0x000FFFFF);


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((q63_t) y0 * (0xFFFFF - fract));


      y += ((q63_t) y1 * (fract));


      return (q15_t) (y >> 20);
    }
  }
# 5670 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q7_t arm_linear_interp_q7(
  q7_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q31_t y;
    q7_t y0, y1;
    q31_t fract;
    uint32_t index;




    if (x < 0)
    {
      return (pYData[0]);
    }
    index = (x >> 20) & 0xfff;

    if (index >= (nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else
    {


      fract = (x & 0x000FFFFF);


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((y0 * (0xFFFFF - fract)));


      y += (y1 * fract);


      return (q7_t) (y >> 20);
     }
  }
# 5723 "../../lib/cmsis/inc/arm_math.h"
  float32_t arm_sin_f32(
  float32_t x);







  q31_t arm_sin_q31(
  q31_t x);







  q15_t arm_sin_q15(
  q15_t x);







  float32_t arm_cos_f32(
  float32_t x);







  q31_t arm_cos_q31(
  q31_t x);







  q15_t arm_cos_q15(
  q15_t x);
# 5810 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
    {






      *pOut = __builtin_sqrtf(in);






      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
      return (ARM_MATH_ARGUMENT_ERROR);
    }
  }
# 5846 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut);
# 5858 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_sqrt_q15(
  q15_t in,
  q15_t * pOut);
# 5870 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_circularWrite_f32(
  int32_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const int32_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }






  __attribute__((always_inline)) static inline void arm_circularRead_f32(
  int32_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  int32_t * dst,
  int32_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;
    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (int32_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularWrite_q15(
  q15_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const q15_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularRead_q15(
  q15_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  q15_t * dst,
  q15_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;

    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (q15_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularWrite_q7(
  q7_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const q7_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularRead_q7(
  q7_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  q7_t * dst,
  q7_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;

    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (q7_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }
# 6173 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult);
# 6185 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6197 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult);
# 6209 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6221 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * pResult);
# 6233 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6245 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6257 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6269 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6281 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6293 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6305 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6317 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6329 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6341 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6353 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6365 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6377 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);
# 6389 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 6401 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 6415 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  uint32_t numSamples,
  q31_t * realResult,
  q31_t * imagResult);
# 6431 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  uint32_t numSamples,
  q63_t * realResult,
  q63_t * imagResult);
# 6447 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t numSamples,
  float32_t * realResult,
  float32_t * imagResult);
# 6462 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_q15(
  q15_t * pSrcCmplx,
  q15_t * pSrcReal,
  q15_t * pCmplxDst,
  uint32_t numSamples);
# 6476 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_q31(
  q31_t * pSrcCmplx,
  q31_t * pSrcReal,
  q31_t * pCmplxDst,
  uint32_t numSamples);
# 6490 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_f32(
  float32_t * pSrcCmplx,
  float32_t * pSrcReal,
  float32_t * pCmplxDst,
  uint32_t numSamples);
# 6504 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * result,
  uint32_t * index);
# 6518 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex);
# 6532 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult,
  uint32_t * pIndex);
# 6546 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex);
# 6560 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * pResult,
  uint32_t * pIndex);
# 6574 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex);
# 6588 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult,
  uint32_t * pIndex);
# 6602 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex);
# 6616 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t numSamples);
# 6630 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t numSamples);
# 6644 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples);
# 6657 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q31(
  float32_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 6669 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q15(
  float32_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 6681 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q7(
  float32_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6693 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_q15(
  q31_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 6705 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_q7(
  q31_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6717 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_float(
  q15_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 6729 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_q31(
  q15_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 6741 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_q7(
  q15_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6817 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_bilinear_interp_f32(
  const arm_bilinear_interp_instance_f32 * S,
  float32_t X,
  float32_t Y)
  {
    float32_t out;
    float32_t f00, f01, f10, f11;
    float32_t *pData = S->pData;
    int32_t xIndex, yIndex, index;
    float32_t xdiff, ydiff;
    float32_t b1, b2, b3, b4;

    xIndex = (int32_t) X;
    yIndex = (int32_t) Y;



    if (xIndex < 0 || xIndex > (S->numRows - 1) || yIndex < 0 || yIndex > (S->numCols - 1))
    {
      return (0);
    }


    index = (xIndex - 1) + (yIndex - 1) * S->numCols;



    f00 = pData[index];
    f01 = pData[index + 1];


    index = (xIndex - 1) + (yIndex) * S->numCols;



    f10 = pData[index];
    f11 = pData[index + 1];


    b1 = f00;
    b2 = f01 - f00;
    b3 = f10 - f00;
    b4 = f00 - f01 - f10 + f11;


    xdiff = X - xIndex;


    ydiff = Y - yIndex;


    out = b1 + b2 * xdiff + b3 * ydiff + b4 * xdiff * ydiff;


    return (out);
  }
# 6883 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_bilinear_interp_q31(
  arm_bilinear_interp_instance_q31 * S,
  q31_t X,
  q31_t Y)
  {
    q31_t out;
    q31_t acc = 0;
    q31_t xfract, yfract;
    q31_t x1, x2, y1, y2;
    int32_t rI, cI;
    q31_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & 0x000FFFFF) << 11u;


    x1 = pYData[(rI) + (int32_t)nCols * (cI) ];
    x2 = pYData[(rI) + (int32_t)nCols * (cI) + 1];



    yfract = (Y & 0x000FFFFF) << 11u;


    y1 = pYData[(rI) + (int32_t)nCols * (cI + 1) ];
    y2 = pYData[(rI) + (int32_t)nCols * (cI + 1) + 1];


    out = ((q31_t) (((q63_t) x1 * (0x7FFFFFFF - xfract)) >> 32));
    acc = ((q31_t) (((q63_t) out * (0x7FFFFFFF - yfract)) >> 32));


    out = ((q31_t) ((q63_t) x2 * (0x7FFFFFFF - yfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (xfract) >> 32));


    out = ((q31_t) ((q63_t) y1 * (0x7FFFFFFF - xfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));


    out = ((q31_t) ((q63_t) y2 * (xfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));


    return ((q31_t)(acc << 2));
  }
# 6957 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_bilinear_interp_q15(
  arm_bilinear_interp_instance_q15 * S,
  q31_t X,
  q31_t Y)
  {
    q63_t acc = 0;
    q31_t out;
    q15_t x1, x2, y1, y2;
    q31_t xfract, yfract;
    int32_t rI, cI;
    q15_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & 0x000FFFFF);


    x1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) ];
    x2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) + 1];



    yfract = (Y & 0x000FFFFF);


    y1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) ];
    y2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) + 1];





    out = (q31_t) (((q63_t) x1 * (0xFFFFF - xfract)) >> 4u);
    acc = ((q63_t) out * (0xFFFFF - yfract));


    out = (q31_t) (((q63_t) x2 * (0xFFFFF - yfract)) >> 4u);
    acc += ((q63_t) out * (xfract));


    out = (q31_t) (((q63_t) y1 * (0xFFFFF - xfract)) >> 4u);
    acc += ((q63_t) out * (yfract));


    out = (q31_t) (((q63_t) y2 * (xfract)) >> 4u);
    acc += ((q63_t) out * (yfract));



    return ((q15_t)(acc >> 36));
  }
# 7035 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q7_t arm_bilinear_interp_q7(
  arm_bilinear_interp_instance_q7 * S,
  q31_t X,
  q31_t Y)
  {
    q63_t acc = 0;
    q31_t out;
    q31_t xfract, yfract;
    q7_t x1, x2, y1, y2;
    int32_t rI, cI;
    q7_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & (q31_t)0x000FFFFF);


    x1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) ];
    x2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) + 1];



    yfract = (Y & (q31_t)0x000FFFFF);


    y1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) ];
    y2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) + 1];


    out = ((x1 * (0xFFFFF - xfract)));
    acc = (((q63_t) out * (0xFFFFF - yfract)));


    out = ((x2 * (0xFFFFF - yfract)));
    acc += (((q63_t) out * (xfract)));


    out = ((y1 * (0xFFFFF - xfract)));
    acc += (((q63_t) out * (yfract)));


    out = ((y2 * (yfract)));
    acc += (((q63_t) out * (xfract)));


    return ((q7_t)(acc >> 40));
  }
# 7218 "../../lib/cmsis/inc/arm_math.h"
#pragma GCC diagnostic pop
# 19 "./omv/img/imlib.h" 2
# 1 "../../lib/oofatfs/ff.h" 1
# 20 "./omv/img/imlib.h" 2
# 1 "./omv/fb_alloc.h" 1
# 12 "./omv/fb_alloc.h"
void fb_alloc_fail();
void fb_alloc_init0();
uint32_t fb_avail();
void fb_alloc_mark();
void fb_alloc_free_till_mark();
void *fb_alloc(uint32_t size);
void *fb_alloc0(uint32_t size);
void *fb_alloc_all(uint32_t *size);
void *fb_alloc0_all(uint32_t *size);
void fb_free();
void fb_free_all();
# 21 "./omv/img/imlib.h" 2
# 1 "./omv/umm_malloc.h" 1
# 10 "./omv/umm_malloc.h"
void umm_alloc_fail();
# 48 "./omv/umm_malloc.h"
void umm_init_x( size_t size );
void *umm_malloc( size_t size );
void *umm_calloc( size_t num, size_t size );
void *umm_realloc( void *ptr, size_t size );
void umm_free( void *ptr );
# 22 "./omv/img/imlib.h" 2
# 1 "./omv/xalloc.h" 1
# 12 "./omv/xalloc.h"
void *xalloc(uint32_t size);
void *xalloc_try_alloc(uint32_t size);
void *xalloc0(uint32_t size);
void xfree(void *mem);
void *xrealloc(void *mem, uint32_t size);
# 23 "./omv/img/imlib.h" 2
# 1 "./omv/array.h" 1
# 11 "./omv/array.h"
typedef void (*array_dtor_t)(void*);
typedef int (*array_comp_t)(const void*, const void*);



typedef struct {
    int index;
    int length;
    void **data;
    array_dtor_t dtor;
} array_t;
void array_alloc(array_t **a, array_dtor_t dtor);
void array_alloc_init(array_t **a, array_dtor_t dtor, int size);
void array_clear(array_t *array);
void array_free(array_t *array);
int array_length(array_t *array);
void *array_at(array_t *array, int idx);
void array_push_back(array_t *array, void *element);
void *array_pop_back(array_t *array);
void *array_take(array_t *array, int idx);
void array_erase(array_t *array, int idx);
void array_resize(array_t *array, int num);
void array_sort(array_t *array, array_comp_t comp);
void array_isort(array_t *array, array_comp_t comp);
# 24 "./omv/img/imlib.h" 2
# 1 "./omv/img/fmath.h" 1
# 12 "./omv/img/fmath.h"
# 1 "./omv/common.h" 1
# 13 "./omv/img/fmath.h" 2
# 101 "./omv/img/fmath.h"
float fast_sqrtf(float x);
int fast_floorf(float x);
int fast_ceilf(float x);


int fast_roundf(float x);


float fast_atanf(float x);
float fast_atan2f(float y, float x);
float fast_expf(float x);
float fast_cbrtf(float d);
float fast_fabsf(float d);
float fast_log(float x);
float fast_log2(float x);
float fast_powf(float a, float b);
extern const float cos_table[360];
extern const float sin_table[360];
# 25 "./omv/img/imlib.h" 2
# 1 "./omv/img/collections.h" 1
# 9 "./omv/img/collections.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 10 "./omv/img/collections.h" 2





typedef struct bitmap
{
    size_t size;
    char *data;
}
bitmap_t;

void bitmap_alloc(bitmap_t *ptr, size_t size);
void bitmap_free(bitmap_t *ptr);
void bitmap_clear(bitmap_t *ptr);
void bitmap_bit_set(bitmap_t *ptr, size_t index);

# 26 "./omv/img/collections.h" 3 4
_Bool 
# 26 "./omv/img/collections.h"
    bitmap_bit_get(bitmap_t *ptr, size_t index);







typedef struct lifo
{
    size_t len, size, data_len;
    char *data;
}
lifo_t;

void lifo_alloc(lifo_t *ptr, size_t size, size_t data_len);
void lifo_alloc_all(lifo_t *ptr, size_t *size, size_t data_len);
void lifo_free(lifo_t *ptr);
void lifo_clear(lifo_t *ptr);
size_t lifo_size(lifo_t *ptr);

# 46 "./omv/img/collections.h" 3 4
_Bool 
# 46 "./omv/img/collections.h"
    lifo_is_not_empty(lifo_t *ptr);

# 47 "./omv/img/collections.h" 3 4
_Bool 
# 47 "./omv/img/collections.h"
    lifo_is_not_full(lifo_t *ptr);
void lifo_enqueue(lifo_t *ptr, void *data);
void lifo_dequeue(lifo_t *ptr, void *data);
void lifo_poke(lifo_t *ptr, void *data);
void lifo_peek(lifo_t *ptr, void *data);





typedef struct fifo
{
    size_t head_ptr, tail_ptr, len, size, data_len;
    char *data;
}
fifo_t;

void fifo_alloc(fifo_t *ptr, size_t size, size_t data_len);
void fifo_alloc_all(fifo_t *ptr, size_t *size, size_t data_len);
void fifo_free(fifo_t *ptr);
void fifo_clear(fifo_t *ptr);
size_t fifo_size(fifo_t *ptr);

# 69 "./omv/img/collections.h" 3 4
_Bool 
# 69 "./omv/img/collections.h"
    fifo_is_not_empty(fifo_t *ptr);

# 70 "./omv/img/collections.h" 3 4
_Bool 
# 70 "./omv/img/collections.h"
    fifo_is_not_full(fifo_t *ptr);
void fifo_enqueue(fifo_t *ptr, void *data);
void fifo_dequeue(fifo_t *ptr, void *data);
void fifo_poke(fifo_t *ptr, void *data);
void fifo_peek(fifo_t *ptr, void *data);





typedef struct list_lnk
{
    struct list_lnk *next_ptr, *prev_ptr;
    char data[];
}
list_lnk_t;

typedef struct list
{
    list_lnk_t *head_ptr, *tail_ptr;
    size_t size, data_len;
}
list_t;

void list_init(list_t *ptr, size_t data_len);
void list_copy(list_t *dst, list_t *src);
void list_free(list_t *ptr);
void list_clear(list_t *ptr);
size_t list_size(list_t *ptr);
void list_push_front(list_t *ptr, void *data);
void list_push_back(list_t *ptr, void *data);
void list_pop_front(list_t *ptr, void *data);
void list_pop_back(list_t *ptr, void *data);
void list_get_front(list_t *ptr, void *data);
void list_get_back(list_t *ptr, void *data);
void list_set_front(list_t *ptr, void *data);
void list_set_back(list_t *ptr, void *data);
void list_insert(list_t *ptr, void *data, size_t index);
void list_remove(list_t *ptr, void *data, size_t index);
void list_get(list_t *ptr, void *data, size_t index);
void list_set(list_t *ptr, void *data, size_t index);





list_lnk_t *iterator_start_from_head(list_t *ptr);
list_lnk_t *iterator_start_from_tail(list_t *ptr);
list_lnk_t *iterator_next(list_lnk_t *lnk);
list_lnk_t *iterator_prev(list_lnk_t *lnk);
void iterator_get(list_t *ptr, list_lnk_t *lnk, void *data);
void iterator_set(list_t *ptr, list_lnk_t *lnk, void *data);
# 26 "./omv/img/imlib.h" 2
# 1 "./omv/imlib_config.h" 1
# 27 "./omv/img/imlib.h" 2

# 1 "./overlay_manager.h" 1
# 17 "./overlay_manager.h"
extern int OverlaySwitch(uint8_t ovlyNdx);
extern int OverlaySetToDefault(void);
# 29 "./omv/img/imlib.h" 2
# 81 "./omv/img/imlib.h"
typedef struct point {
    int16_t x;
    int16_t y;
} point_t;

void point_init(point_t *ptr, int x, int y);
void point_copy(point_t *dst, point_t *src);

# 88 "./omv/img/imlib.h" 3 4
_Bool 
# 88 "./omv/img/imlib.h"
    point_equal_fast(point_t *ptr0, point_t *ptr1);
int point_quadrance(point_t *ptr0, point_t *ptr1);
void point_rotate(int x, int y, float r, int center_x, int center_y, int16_t *new_x, int16_t *new_y);
void point_min_area_rectangle(point_t *corners, point_t *new_corners, int corners_len);





typedef struct line {
    int16_t x1;
    int16_t y1;
    int16_t x2;
    int16_t y2;
} line_t;


# 104 "./omv/img/imlib.h" 3 4
_Bool 
# 104 "./omv/img/imlib.h"
    lb_clip_line(line_t *l, int x, int y, int w, int h);





typedef struct rectangle {
    int16_t x;
    int16_t y;
    int16_t w;
    int16_t h;
} rectangle_t;

void rectangle_init(rectangle_t *ptr, int x, int y, int w, int h);
void rectangle_copy(rectangle_t *dst, rectangle_t *src);

# 119 "./omv/img/imlib.h" 3 4
_Bool 
# 119 "./omv/img/imlib.h"
    rectangle_equal_fast(rectangle_t *ptr0, rectangle_t *ptr1);

# 120 "./omv/img/imlib.h" 3 4
_Bool 
# 120 "./omv/img/imlib.h"
    rectangle_overlap(rectangle_t *ptr0, rectangle_t *ptr1);
void rectangle_intersected(rectangle_t *dst, rectangle_t *src);
void rectangle_united(rectangle_t *dst, rectangle_t *src);





typedef struct color_thresholds_list_lnk_data
{
    uint8_t LMin, LMax;
    int8_t AMin, AMax;
    int8_t BMin, BMax;
}
color_thresholds_list_lnk_data_t;
# 229 "./omv/img/imlib.h"
extern const uint8_t rb528_table[32];
extern const uint8_t g628_table[64];





extern const uint8_t rb825_table[256];
extern const uint8_t g826_table[256];
# 266 "./omv/img/imlib.h"
extern const int8_t lab_table[196608];
extern const int8_t yuv_table[196608];
# 353 "./omv/img/imlib.h"
typedef enum {
    COLOR_PALETTE_RAINBOW,
    COLOR_PALETTE_IRONBOW
} color_palette_t;


extern const uint16_t rainbow_table[256];
extern const uint16_t ironbow_table[256];





typedef enum image_bpp
{
    IMAGE_BPP_BINARY,
    IMAGE_BPP_GRAYSCALE,
    IMAGE_BPP_RGB565,
    IMAGE_BPP_BAYER,
    IMAGE_BPP_JPEG
}
image_bpp_t;

typedef struct image {
    int w;
    int h;
    int bpp;
    union {
        uint8_t *pixels;
        uint8_t *data;
    };
} image_t;

void image_init(image_t *ptr, int w, int h, int bpp, void *data);
void image_copy(image_t *dst, image_t *src);
size_t image_size(image_t *ptr);

# 389 "./omv/img/imlib.h" 3 4
_Bool 
# 389 "./omv/img/imlib.h"
    image_get_mask_pixel(image_t *ptr, int x, int y);
# 684 "./omv/img/imlib.h"
extern const uint8_t rb528_table[32];
extern const uint8_t g628_table[64];
# 700 "./omv/img/imlib.h"
extern const uint8_t rb825_table[256];
extern const uint8_t g826_table[256];
# 738 "./omv/img/imlib.h"
extern const int8_t kernel_gauss_3[9];
extern const int8_t kernel_gauss_5[25];
extern const int kernel_laplacian_3[9];
extern const int kernel_high_pass_3[9];
# 871 "./omv/img/imlib.h"
typedef struct simple_color {
    uint8_t G;
    union {
        int8_t L;
        uint8_t red;
    };
    union {
        int8_t A;
        uint8_t green;
    };
    union {
        int8_t B;
        uint8_t blue;
    };
} simple_color_t;

typedef struct integral_image {
    int w;
    int h;
    uint32_t *data;
} i_image_t;

typedef struct {
    int w;
    int h;
    int y_offs;
    int x_ratio;
    int y_ratio;
    uint32_t **data;
    uint32_t **swap;
} mw_image_t;

typedef struct _vector {
    float x;
    float y;
    float m;
    uint16_t cx,cy;
} vec_t;

typedef struct cluster {
    int x, y, w, h;
    array_t *points;
} cluster_t;


typedef float (*cluster_dist_t)(int cx, int cy, void *obj);


typedef struct kp {
    uint16_t x;
    uint16_t y;
    uint16_t score;
    uint16_t octave;
    uint16_t angle;
    uint16_t matched;
    uint8_t desc[32];
} kp_t;

typedef struct size {
    int w;
    int h;
} wsize_t;


typedef struct cascade {
    int std;
    int step;
    float threshold;
    float scale_factor;
    int n_stages;
    int n_features;
    int n_rectangles;
    struct size window;
    struct image *img;
    mw_image_t *sum;
    mw_image_t *ssq;
    uint8_t *stages_array;
    int16_t *stages_thresh_array;
    int16_t *tree_thresh_array;
    int16_t *alpha1_array;
    int16_t *alpha2_array;
    int8_t *num_rectangles_array;
    int8_t *weights_array;
    int8_t *rectangles_array;
} cascade_t;

typedef struct bmp_read_settings {
    int32_t bmp_w;
    int32_t bmp_h;
    uint16_t bmp_bpp;
    uint32_t bmp_fmt;
    uint32_t bmp_row_bytes;
} bmp_read_settings_t;

typedef struct ppm_read_settings {
    uint8_t read_int_c;
    
# 967 "./omv/img/imlib.h" 3 4
   _Bool 
# 967 "./omv/img/imlib.h"
        read_int_c_valid;
    uint8_t ppm_fmt;
} ppm_read_settings_t;

typedef enum save_image_format {
    FORMAT_DONT_CARE,
    FORMAT_BMP,
    FORMAT_PNM,
    FORMAT_JPG,
    FORMAT_RAW,
} save_image_format_t;

typedef struct img_read_settings {
    union
    {
        bmp_read_settings_t bmp_rs;
        ppm_read_settings_t ppm_rs;
    };
    save_image_format_t format;
} img_read_settings_t;

typedef void (*line_op_t)(image_t*, int, void*, void*, 
# 988 "./omv/img/imlib.h" 3 4
                                                      _Bool
# 988 "./omv/img/imlib.h"
                                                          );
typedef void (*flood_fill_call_back_t)(image_t *, int, int, int, void *);

typedef enum descriptor_type {
    DESC_LBP,
    DESC_ORB,
} descriptor_t;

typedef enum edge_detector_type {
   EDGE_CANNY,
   EDGE_SIMPLE,
} edge_detector_t;

typedef enum template_match {
    SEARCH_EX,
    SEARCH_DS,
} template_match_t;

typedef enum jpeg_subsample {
    JPEG_SUBSAMPLE_1x1 = 0x11,
    JPEG_SUBSAMPLE_2x1 = 0x21,
    JPEG_SUBSAMPLE_2x2 = 0x22,
} jpeg_subsample_t;

typedef enum corner_detector_type {
    CORNER_FAST,
    CORNER_AGAST
} corner_detector_t;

typedef struct histogram {
    int LBinCount;
    float *LBins;
    int ABinCount;
    float *ABins;
    int BBinCount;
    float *BBins;
} histogram_t;

typedef struct percentile {
    uint8_t LValue;
    int8_t AValue;
    int8_t BValue;
} percentile_t;

typedef struct threshold {
    uint8_t LValue;
    int8_t AValue;
    int8_t BValue;
} threshold_t;

typedef struct statistics {
    uint8_t LMean, LMedian, LMode, LSTDev, LMin, LMax, LLQ, LUQ;
    int8_t AMean, AMedian, AMode, ASTDev, AMin, AMax, ALQ, AUQ;
    int8_t BMean, BMedian, BMode, BSTDev, BMin, BMax, BLQ, BUQ;
} statistics_t;




typedef struct find_blobs_list_lnk_data {
    point_t corners[20];
    rectangle_t rect;
    uint32_t pixels, perimeter, code, count;
    float centroid_x, centroid_y, rotation, roundness;
    uint16_t x_hist_bins_count, y_hist_bins_count, *x_hist_bins, *y_hist_bins;
    float centroid_x_acc, centroid_y_acc, rotation_acc_x, rotation_acc_y, roundness_acc;
} find_blobs_list_lnk_data_t;

typedef struct find_lines_list_lnk_data {
    line_t line;
    uint32_t magnitude;
    int16_t theta, rho;
} find_lines_list_lnk_data_t;

typedef struct find_circles_list_lnk_data {
    point_t p;
    uint32_t r, magnitude;
} find_circles_list_lnk_data_t;

typedef struct find_rects_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    uint32_t magnitude;
} find_rects_list_lnk_data_t;

typedef struct find_qrcodes_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint8_t version, ecc_level, mask, data_type;
    uint32_t eci;
} find_qrcodes_list_lnk_data_t;

typedef enum apriltag_families {
    TAG16H5 = 1,
    TAG25H7 = 2,
    TAG25H9 = 4,
    TAG36H10 = 8,
    TAG36H11 = 16,
    ARTOOLKIT = 32
} apriltag_families_t;

typedef struct find_apriltags_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    uint16_t id;
    uint8_t family, hamming;
    point_t centroid;
    float goodness, decision_margin;
    float x_translation, y_translation, z_translation;
    float x_rotation, y_rotation, z_rotation;
} find_apriltags_list_lnk_data_t;

typedef struct find_datamatrices_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint16_t rotation;
    uint8_t rows, columns;
    uint16_t capacity, padding;
} find_datamatrices_list_lnk_data_t;

typedef enum barcodes {
    BARCODE_EAN2,
    BARCODE_EAN5,
    BARCODE_EAN8,
    BARCODE_UPCE,
    BARCODE_ISBN10,
    BARCODE_UPCA,
    BARCODE_EAN13,
    BARCODE_ISBN13,
    BARCODE_I25,
    BARCODE_DATABAR,
    BARCODE_DATABAR_EXP,
    BARCODE_CODABAR,
    BARCODE_CODE39,
    BARCODE_PDF417,
    BARCODE_CODE93,
    BARCODE_CODE128
} barcodes_t;

typedef struct find_barcodes_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint16_t type, rotation;
    int quality;
} find_barcodes_list_lnk_data_t;


int8_t imlib_rgb565_to_l(uint16_t pixel);
int8_t imlib_rgb565_to_a(uint16_t pixel);
int8_t imlib_rgb565_to_b(uint16_t pixel);
int8_t imlib_rgb565_to_y(uint16_t pixel);
int8_t imlib_rgb565_to_u(uint16_t pixel);
int8_t imlib_rgb565_to_v(uint16_t pixel);
uint16_t imlib_lab_to_rgb(uint8_t l, int8_t a, int8_t b);
uint16_t imlib_yuv_to_rgb(uint8_t y, int8_t u, int8_t v);
void imlib_bayer_to_rgb565(image_t *img, int w, int h, int xoffs, int yoffs, uint16_t *rgbbuf);


void ppm_read_geometry(FIL *fp, image_t *img, const char *path, ppm_read_settings_t *rs);
void ppm_read_pixels(FIL *fp, image_t *img, int line_start, int line_end, ppm_read_settings_t *rs);
void ppm_read(image_t *img, const char *path);
void ppm_write_subimg(image_t *img, const char *path, rectangle_t *r);

# 1156 "./omv/img/imlib.h" 3 4
_Bool 
# 1156 "./omv/img/imlib.h"
    bmp_read_geometry(FIL *fp, image_t *img, const char *path, bmp_read_settings_t *rs);
void bmp_read_pixels(FIL *fp, image_t *img, int line_start, int line_end, bmp_read_settings_t *rs);
void bmp_read(image_t *img, const char *path);
void bmp_write_subimg(image_t *img, const char *path, rectangle_t *r);

# 1160 "./omv/img/imlib.h" 3 4
_Bool 
# 1160 "./omv/img/imlib.h"
    jpeg_compress(image_t *src, image_t *dst, int quality, 
# 1160 "./omv/img/imlib.h" 3 4
                                                           _Bool 
# 1160 "./omv/img/imlib.h"
                                                                realloc);
void jpeg_read_geometry(FIL *fp, image_t *img, const char *path);
void jpeg_read_pixels(FIL *fp, image_t *img);
void jpeg_read(image_t *img, const char *path);
void jpeg_write(image_t *img, const char *path, int quality);

# 1165 "./omv/img/imlib.h" 3 4
_Bool 
# 1165 "./omv/img/imlib.h"
    imlib_read_geometry(FIL *fp, image_t *img, const char *path, img_read_settings_t *rs);
void imlib_image_operation(image_t *img, const char *path, image_t *other, int scalar, line_op_t op, void *data);
void imlib_load_image(image_t *img, const char *path);
void imlib_save_image(image_t *img, const char *path, rectangle_t *roi, int quality);


void gif_open(FIL *fp, int width, int height, 
# 1171 "./omv/img/imlib.h" 3 4
                                             _Bool 
# 1171 "./omv/img/imlib.h"
                                                  color, 
# 1171 "./omv/img/imlib.h" 3 4
                                                         _Bool 
# 1171 "./omv/img/imlib.h"
                                                              loop);
void gif_add_frame(FIL *fp, image_t *img, uint16_t delay);
void gif_close(FIL *fp);


void mjpeg_open(FIL *fp, int width, int height);
void mjpeg_add_frame(FIL *fp, uint32_t *frames, uint32_t *bytes, image_t *img, int quality);
void mjpeg_close(FIL *fp, uint32_t *frames, uint32_t *bytes, float fps);


point_t *point_alloc(int16_t x, int16_t y);

# 1182 "./omv/img/imlib.h" 3 4
_Bool 
# 1182 "./omv/img/imlib.h"
    point_equal(point_t *p1, point_t *p2);
float point_distance(point_t *p1, point_t *p2);


rectangle_t *rectangle_alloc(int16_t x, int16_t y, int16_t w, int16_t h);

# 1187 "./omv/img/imlib.h" 3 4
_Bool 
# 1187 "./omv/img/imlib.h"
    rectangle_equal(rectangle_t *r1, rectangle_t *r2);

# 1188 "./omv/img/imlib.h" 3 4
_Bool 
# 1188 "./omv/img/imlib.h"
    rectangle_intersects(rectangle_t *r1, rectangle_t *r2);

# 1189 "./omv/img/imlib.h" 3 4
_Bool 
# 1189 "./omv/img/imlib.h"
    rectangle_subimg(image_t *img, rectangle_t *r, rectangle_t *r_out);
array_t *rectangle_merge(array_t *rectangles);
void rectangle_expand(rectangle_t *r, int x, int y);


void imlib_sepconv3(image_t *img, const int8_t *krn, const float m, const int b);


int imlib_image_mean(image_t *src, int *r_mean, int *g_mean, int *b_mean);
int imlib_image_std(image_t *src);


void imlib_midpoint_pool(image_t *img_i, image_t *img_o, int x_div, int y_div, const int bias);
void imlib_mean_pool(image_t *img_i, image_t *img_o, int x_div, int y_div);
float imlib_template_match_ds(image_t *image, image_t *template, rectangle_t *r);
float imlib_template_match_ex(image_t *image, image_t *template, rectangle_t *roi, int step, rectangle_t *r);


array_t *cluster_kmeans(array_t *points, int k, cluster_dist_t dist_func);


void imlib_integral_image_alloc(struct integral_image *sum, int w, int h);
void imlib_integral_image_free(struct integral_image *sum);
void imlib_integral_image(struct image *src, struct integral_image *sum);
void imlib_integral_image_sq(struct image *src, struct integral_image *sum);
void imlib_integral_image_scaled(struct image *src, struct integral_image *sum);
uint32_t imlib_integral_lookup(struct integral_image *src, int x, int y, int w, int h);


void imlib_integral_mw_alloc(mw_image_t *sum, int w, int h);
void imlib_integral_mw_free(mw_image_t *sum);
void imlib_integral_mw_scale(rectangle_t *roi, mw_image_t *sum, int w, int h);
void imlib_integral_mw(image_t *src, mw_image_t *sum);
void imlib_integral_mw_sq(image_t *src, mw_image_t *sum);
void imlib_integral_mw_shift(image_t *src, mw_image_t *sum, int n);
void imlib_integral_mw_shift_sq(image_t *src, mw_image_t *sum, int n);
void imlib_integral_mw_ss(image_t *src, mw_image_t *sum, mw_image_t *ssq, rectangle_t *roi);
void imlib_integral_mw_shift_ss(image_t *src, mw_image_t *sum, mw_image_t *ssq, rectangle_t *roi, int n);
long imlib_integral_mw_lookup(mw_image_t *sum, int x, int y, int w, int h);


int imlib_load_cascade(struct cascade* cascade, const char *path);
array_t *imlib_detect_objects(struct image *image, struct cascade *cascade, struct rectangle *roi);


void fast_detect(image_t *image, array_t *keypoints, int threshold, rectangle_t *roi);
void agast_detect(image_t *image, array_t *keypoints, int threshold, rectangle_t *roi);


array_t *orb_find_keypoints(image_t *image, 
# 1238 "./omv/img/imlib.h" 3 4
                                           _Bool 
# 1238 "./omv/img/imlib.h"
                                                normalized, int threshold,
        float scale_factor, int max_keypoints, corner_detector_t corner_detector, rectangle_t *roi);
int orb_match_keypoints(array_t *kpts1, array_t *kpts2, int *match, int threshold, rectangle_t *r, point_t *c, int *angle);
int orb_filter_keypoints(array_t *kpts, rectangle_t *r, point_t *c);
int orb_save_descriptor(FIL *fp, array_t *kpts);
int orb_load_descriptor(FIL *fp, array_t *kpts);
float orb_cluster_dist(int cx, int cy, void *kp);


uint8_t *imlib_lbp_desc(image_t *image, rectangle_t *roi);
int imlib_lbp_desc_distance(uint8_t *d0, uint8_t *d1);
int imlib_lbp_desc_save(FIL *fp, uint8_t *desc);
int imlib_lbp_desc_load(FIL *fp, uint8_t **desc);


void imlib_find_iris(image_t *src, point_t *iris, rectangle_t *roi);


void im_filter_bw(uint8_t *src, uint8_t *dst, int size, int bpp, void *args);
void im_filter_skin(uint8_t *src, uint8_t *dst, int size, int bpp, void *args);


void imlib_edge_simple(image_t *src, rectangle_t *roi, int low_thresh, int high_thresh);
void imlib_edge_canny(image_t *src, rectangle_t *roi, int low_thresh, int high_thresh);


void imlib_find_hog(image_t *src, rectangle_t *roi, int cell_size);


void imlib_zero(image_t *img, image_t *mask, 
# 1267 "./omv/img/imlib.h" 3 4
                                            _Bool 
# 1267 "./omv/img/imlib.h"
                                                 invert);
void imlib_flood_fill_int(image_t *out, image_t *img, int x, int y,
                          int seed_threshold, int floating_threshold,
                          flood_fill_call_back_t cb, void *data);

int imlib_get_pixel(image_t *img, int x, int y);
void imlib_set_pixel(image_t *img, int x, int y, int p);
void imlib_draw_line(image_t *img, int x0, int y0, int x1, int y1, int c, int thickness);
void imlib_draw_rectangle(image_t *img, int rx, int ry, int rw, int rh, int c, int thickness, 
# 1275 "./omv/img/imlib.h" 3 4
                                                                                             _Bool 
# 1275 "./omv/img/imlib.h"
                                                                                                  fill);
void imlib_draw_circle(image_t *img, int cx, int cy, int r, int c, int thickness, 
# 1276 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1276 "./omv/img/imlib.h"
                                                                                      fill);
void imlib_draw_ellipse(image_t *img, int cx, int cy, int rx, int ry, int rotation, int c, int thickness, 
# 1277 "./omv/img/imlib.h" 3 4
                                                                                                         _Bool 
# 1277 "./omv/img/imlib.h"
                                                                                                              fill);
void imlib_draw_string(image_t *img, int x_off, int y_off, const char *str, int c, float scale, int x_spacing, int y_spacing, 
# 1278 "./omv/img/imlib.h" 3 4
                                                                                                                             _Bool 
# 1278 "./omv/img/imlib.h"
                                                                                                                                  mono_space,
                       int char_rotation, 
# 1279 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1279 "./omv/img/imlib.h"
                                              char_hmirror, 
# 1279 "./omv/img/imlib.h" 3 4
                                                            _Bool 
# 1279 "./omv/img/imlib.h"
                                                                 char_vflip, int string_rotation, 
# 1279 "./omv/img/imlib.h" 3 4
                                                                                                  _Bool 
# 1279 "./omv/img/imlib.h"
                                                                                                       string_hmirror, 
# 1279 "./omv/img/imlib.h" 3 4
                                                                                                                       _Bool 
# 1279 "./omv/img/imlib.h"
                                                                                                                            string_hflip);
void imlib_draw_image(image_t *img, image_t *other, int x_off, int y_off, float x_scale, float y_scale, float alpha, image_t *mask);
void imlib_flood_fill(image_t *img, int x, int y,
                      float seed_threshold, float floating_threshold,
                      int c, 
# 1283 "./omv/img/imlib.h" 3 4
                            _Bool 
# 1283 "./omv/img/imlib.h"
                                 invert, 
# 1283 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1283 "./omv/img/imlib.h"
                                              clear_background, image_t *mask);

void imlib_binary(image_t *out, image_t *img, list_t *thresholds, 
# 1285 "./omv/img/imlib.h" 3 4
                                                                 _Bool 
# 1285 "./omv/img/imlib.h"
                                                                      invert, 
# 1285 "./omv/img/imlib.h" 3 4
                                                                              _Bool 
# 1285 "./omv/img/imlib.h"
                                                                                   zero, image_t *mask);
void imlib_invert(image_t *img);
void imlib_b_and(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_nand(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_or(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_nor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_xor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_xnor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_erode(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_dilate(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_open(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_close(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_top_hat(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_black_hat(image_t *img, int ksize, int threshold, image_t *mask);

void imlib_gamma_corr(image_t *img, float gamma, float scale, float offset);
void imlib_negate(image_t *img);
void imlib_replace(image_t *img, const char *path, image_t *other, int scalar, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                              _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                   hmirror, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                                            _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                                 vflip, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                                                        _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                                             transpose, image_t *mask);
void imlib_add(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_sub(image_t *img, const char *path, image_t *other, int scalar, 
# 1304 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1304 "./omv/img/imlib.h"
                                                                               reverse, image_t *mask);
void imlib_mul(image_t *img, const char *path, image_t *other, int scalar, 
# 1305 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1305 "./omv/img/imlib.h"
                                                                               invert, image_t *mask);
void imlib_div(image_t *img, const char *path, image_t *other, int scalar, 
# 1306 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1306 "./omv/img/imlib.h"
                                                                               invert, 
# 1306 "./omv/img/imlib.h" 3 4
                                                                                       _Bool 
# 1306 "./omv/img/imlib.h"
                                                                                            mod, image_t *mask);
void imlib_min(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_max(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_difference(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_blend(image_t *img, const char *path, image_t *other, int scalar, float alpha, image_t *mask);

void imlib_histeq(image_t *img, image_t *mask);
void imlib_clahe_histeq(image_t *img, float clip_limit, image_t *mask);
void imlib_mean_filter(image_t *img, const int ksize, 
# 1314 "./omv/img/imlib.h" 3 4
                                                     _Bool 
# 1314 "./omv/img/imlib.h"
                                                          threshold, int offset, 
# 1314 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1314 "./omv/img/imlib.h"
                                                                                      invert, image_t *mask);
void imlib_median_filter(image_t *img, const int ksize, float percentile, 
# 1315 "./omv/img/imlib.h" 3 4
                                                                         _Bool 
# 1315 "./omv/img/imlib.h"
                                                                              threshold, int offset, 
# 1315 "./omv/img/imlib.h" 3 4
                                                                                                     _Bool 
# 1315 "./omv/img/imlib.h"
                                                                                                          invert, image_t *mask);
void imlib_mode_filter(image_t *img, const int ksize, 
# 1316 "./omv/img/imlib.h" 3 4
                                                     _Bool 
# 1316 "./omv/img/imlib.h"
                                                          threshold, int offset, 
# 1316 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1316 "./omv/img/imlib.h"
                                                                                      invert, image_t *mask);
void imlib_midpoint_filter(image_t *img, const int ksize, float bias, 
# 1317 "./omv/img/imlib.h" 3 4
                                                                     _Bool 
# 1317 "./omv/img/imlib.h"
                                                                          threshold, int offset, 
# 1317 "./omv/img/imlib.h" 3 4
                                                                                                 _Bool 
# 1317 "./omv/img/imlib.h"
                                                                                                      invert, image_t *mask);
void imlib_morph(image_t *img, const int ksize, const int *krn, const float m, const int b, 
# 1318 "./omv/img/imlib.h" 3 4
                                                                                           _Bool 
# 1318 "./omv/img/imlib.h"
                                                                                                threshold, int offset, 
# 1318 "./omv/img/imlib.h" 3 4
                                                                                                                       _Bool 
# 1318 "./omv/img/imlib.h"
                                                                                                                            invert, image_t *mask);
void imlib_bilateral_filter(image_t *img, const int ksize, float color_sigma, float space_sigma, 
# 1319 "./omv/img/imlib.h" 3 4
                                                                                                _Bool 
# 1319 "./omv/img/imlib.h"
                                                                                                     threshold, int offset, 
# 1319 "./omv/img/imlib.h" 3 4
                                                                                                                            _Bool 
# 1319 "./omv/img/imlib.h"
                                                                                                                                 invert, image_t *mask);
void imlib_cartoon_filter(image_t *img, float seed_threshold, float floating_threshold, image_t *mask);

void imlib_logpolar_int(image_t *dst, image_t *src, rectangle_t *roi, 
# 1322 "./omv/img/imlib.h" 3 4
                                                                     _Bool 
# 1322 "./omv/img/imlib.h"
                                                                          linear, 
# 1322 "./omv/img/imlib.h" 3 4
                                                                                  _Bool 
# 1322 "./omv/img/imlib.h"
                                                                                       reverse);
void imlib_logpolar(image_t *img, 
# 1323 "./omv/img/imlib.h" 3 4
                                 _Bool 
# 1323 "./omv/img/imlib.h"
                                      linear, 
# 1323 "./omv/img/imlib.h" 3 4
                                              _Bool 
# 1323 "./omv/img/imlib.h"
                                                   reverse);
void imlib_remove_shadows(image_t *img, const char *path, image_t *other, int scalar, 
# 1324 "./omv/img/imlib.h" 3 4
                                                                                     _Bool 
# 1324 "./omv/img/imlib.h"
                                                                                          single);
void imlib_chrominvar(image_t *img);
void imlib_illuminvar(image_t *img);

void imlib_lens_corr(image_t *img, float strength, float zoom);
void imlib_rotation_corr(image_t *img, float x_rotation, float y_rotation,
                         float z_rotation, float x_translation, float y_translation,
                         float zoom);

void imlib_get_similarity(image_t *img, const char *path, image_t *other, int scalar, float *avg, float *std, float *min, float *max);
void imlib_get_histogram(histogram_t *out, image_t *ptr, rectangle_t *roi, list_t *thresholds, 
# 1334 "./omv/img/imlib.h" 3 4
                                                                                              _Bool 
# 1334 "./omv/img/imlib.h"
                                                                                                   invert);
void imlib_get_percentile(percentile_t *out, image_bpp_t bpp, histogram_t *ptr, float percentile);
void imlib_get_threshold(threshold_t *out, image_bpp_t bpp, histogram_t *ptr);
void imlib_get_statistics(statistics_t *out, image_bpp_t bpp, histogram_t *ptr);

# 1338 "./omv/img/imlib.h" 3 4
_Bool 
# 1338 "./omv/img/imlib.h"
    imlib_get_regression(find_lines_list_lnk_data_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                          list_t *thresholds, 
# 1339 "./omv/img/imlib.h" 3 4
                                             _Bool 
# 1339 "./omv/img/imlib.h"
                                                  invert, unsigned int area_threshold, unsigned int pixels_threshold, 
# 1339 "./omv/img/imlib.h" 3 4
                                                                                                                      _Bool 
# 1339 "./omv/img/imlib.h"
                                                                                                                           robust);

void imlib_find_blobs(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                      list_t *thresholds, 
# 1342 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1342 "./omv/img/imlib.h"
                                              invert, unsigned int area_threshold, unsigned int pixels_threshold,
                      
# 1343 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1343 "./omv/img/imlib.h"
                          merge, int margin,
                      
# 1344 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1344 "./omv/img/imlib.h"
                          (*threshold_cb)(void*,find_blobs_list_lnk_data_t*), void *threshold_cb_arg,
                      
# 1345 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1345 "./omv/img/imlib.h"
                          (*merge_cb)(void*,find_blobs_list_lnk_data_t*,find_blobs_list_lnk_data_t*), void *merge_cb_arg,
                      unsigned int x_hist_bins_max, unsigned int y_hist_bins_max);

size_t trace_line(image_t *ptr, line_t *l, int *theta_buffer, uint32_t *mag_buffer, point_t *point_buffer);
void merge_alot(list_t *out, int threshold, int theta_threshold);
void imlib_find_lines(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                      uint32_t threshold, unsigned int theta_margin, unsigned int rho_margin);
void imlib_lsd_find_line_segments(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int merge_distance, unsigned int max_theta_diff);
void imlib_find_line_segments(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                              uint32_t threshold, unsigned int theta_margin, unsigned int rho_margin,
                              uint32_t segment_threshold);
void imlib_find_circles(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                        uint32_t threshold, unsigned int x_margin, unsigned int y_margin, unsigned int r_margin,
                        unsigned int r_min, unsigned int r_max, unsigned int r_step);
void imlib_find_rects(list_t *out, image_t *ptr, rectangle_t *roi,
                      uint32_t threshold);

void imlib_find_qrcodes(list_t *out, image_t *ptr, rectangle_t *roi);
void imlib_find_apriltags(list_t *out, image_t *ptr, rectangle_t *roi, apriltag_families_t families,
                          float fx, float fy, float cx, float cy);
void imlib_find_datamatrices(list_t *out, image_t *ptr, rectangle_t *roi, int effort);
void imlib_find_barcodes(list_t *out, image_t *ptr, rectangle_t *roi);

void imlib_phasecorrelate(image_t *img0, image_t *img1, rectangle_t *roi0, rectangle_t *roi1, 
# 1368 "./omv/img/imlib.h" 3 4
                                                                                             _Bool 
# 1368 "./omv/img/imlib.h"
                                                                                                  logpolar, 
# 1368 "./omv/img/imlib.h" 3 4
                                                                                                            _Bool 
# 1368 "./omv/img/imlib.h"
                                                                                                                 fix_rotation_scale,
                          float *x_translation, float *y_translation, float *rotation, float *scale, float *response);

array_t *imlib_selective_search(image_t *src, float t, int min_size, float a1, float a2, float a3);
# 14 "./omv/sensor.h" 2






typedef enum {
    PIXFORMAT_INVALID = 0,
    PIXFORMAT_BINARY,
    PIXFORMAT_GRAYSCALE,
    PIXFORMAT_RGB565,
    PIXFORMAT_YUV422,
    PIXFORMAT_BAYER,
    PIXFORMAT_JPEG,
} pixformat_t;

typedef enum {
    FRAMESIZE_INVALID = 0,

    FRAMESIZE_QQCIF,
    FRAMESIZE_QCIF,
    FRAMESIZE_CIF,
    FRAMESIZE_QQSIF,
    FRAMESIZE_QSIF,
    FRAMESIZE_SIF,

    FRAMESIZE_QQQQVGA,
    FRAMESIZE_QQQVGA,
    FRAMESIZE_QQVGA,
    FRAMESIZE_QVGA,
    FRAMESIZE_VGA,
    FRAMESIZE_HQQQVGA,
    FRAMESIZE_HQQVGA,
    FRAMESIZE_HQVGA,

    FRAMESIZE_64X32,
    FRAMESIZE_64X64,
    FRAMESIZE_128X64,
    FRAMESIZE_128X128,

    FRAMESIZE_LCD,
    FRAMESIZE_QQVGA2,
    FRAMESIZE_WVGA,
    FRAMESIZE_WVGA2,
    FRAMESIZE_SVGA,
    FRAMESIZE_SXGA,
    FRAMESIZE_UXGA,
} framesize_t;

typedef enum {
    FRAMERATE_2FPS =0x9F,
    FRAMERATE_8FPS =0x87,
    FRAMERATE_15FPS=0x83,
    FRAMERATE_30FPS=0x81,
    FRAMERATE_60FPS=0x80,
 FRAMERATE_HWREG = 0x80000000,
} framerate_t;

typedef enum {
    GAINCEILING_2X,
    GAINCEILING_4X,
    GAINCEILING_8X,
    GAINCEILING_16X,
    GAINCEILING_32X,
    GAINCEILING_64X,
    GAINCEILING_128X,
} gainceiling_t;

typedef enum {
    SDE_NORMAL,
    SDE_NEGATIVE,
} sde_t;

typedef enum {
    ATTR_CONTRAST=0,
    ATTR_BRIGHTNESS,
    ATTR_SATURATION,
    ATTR_GAINCEILING,
} sensor_attr_t;

typedef enum {
    ACTIVE_LOW,
    ACTIVE_HIGH
} polarity_t;

typedef enum {
    IOCTL_SET_TRIGGERED_MODE,
    IOCTL_GET_TRIGGERED_MODE,
    IOCTL_LEPTON_GET_WIDTH,
    IOCTL_LEPTON_GET_HEIGHT,
    IOCTL_LEPTON_GET_RADIOMETRY,
    IOCTL_LEPTON_GET_REFRESH,
    IOCTL_LEPTON_GET_RESOLUTION,
    IOCTL_LEPTON_RUN_COMMAND,
    IOCTL_LEPTON_SET_ATTRIBUTE,
    IOCTL_LEPTON_GET_ATTRIBUTE,
    IOCTL_LEPTON_GET_FPA_TEMPERATURE,
    IOCTL_LEPTON_GET_AUX_TEMPERATURE,
    IOCTL_LEPTON_SET_MEASUREMENT_MODE,
    IOCTL_LEPTON_GET_MEASUREMENT_MODE,
    IOCTL_LEPTON_SET_MEASUREMENT_RANGE,
    IOCTL_LEPTON_GET_MEASUREMENT_RANGE
} ioctl_t;
# 127 "./omv/sensor.h"
typedef 
# 127 "./omv/sensor.h" 3 4
       _Bool 
# 127 "./omv/sensor.h"
            (*streaming_cb_t)(image_t *image);

typedef struct _sensor sensor_t;
typedef struct _sensor {
    uint8_t chip_id;
    uint8_t slv_addr;
    uint16_t gs_bpp;
    uint32_t hw_flags;
    const uint16_t *color_palette;
 uint32_t vsync_pin;
    int fb_w, fb_h;
    uint16_t wndX, wndY, wndW, wndH;
 uint8_t isWindowing;

    polarity_t pwdn_pol;
    polarity_t reset_pol;


    sde_t sde;
    pixformat_t pixformat;
    framesize_t framesize;
    framerate_t framerate;
    gainceiling_t gainceiling;


    int (*reset) (sensor_t *sensor);
    int (*sleep) (sensor_t *sensor, int enable);
    int (*read_reg) (sensor_t *sensor, uint8_t reg_addr);
    int (*write_reg) (sensor_t *sensor, uint8_t reg_addr, uint16_t reg_data);
    int (*set_pixformat) (sensor_t *sensor, pixformat_t pixformat);
    int (*set_framesize) (sensor_t *sensor, framesize_t framesize);
    int (*set_framerate) (sensor_t *sensor, framerate_t framerate);
    int (*set_contrast) (sensor_t *sensor, int level);
    int (*set_brightness) (sensor_t *sensor, int level);
    int (*set_saturation) (sensor_t *sensor, int level);
    int (*set_gainceiling) (sensor_t *sensor, gainceiling_t gainceiling);
    int (*set_quality) (sensor_t *sensor, int quality);
    int (*set_colorbar) (sensor_t *sensor, int enable);
    int (*set_auto_gain) (sensor_t *sensor, int enable, float gain_db, float gain_db_ceiling);
    int (*get_gain_db) (sensor_t *sensor, float *gain_db);
    int (*set_auto_exposure) (sensor_t *sensor, int enable, int exposure_us);
    int (*get_exposure_us) (sensor_t *sensor, int *exposure_us);
    int (*set_auto_whitebal) (sensor_t *sensor, int enable, float r_gain_db, float g_gain_db, float b_gain_db);
    int (*get_rgb_gain_db) (sensor_t *sensor, float *r_gain_db, float *g_gain_db, float *b_gain_db);
    int (*set_hmirror) (sensor_t *sensor, int enable);
    int (*set_vflip) (sensor_t *sensor, int enable);
    int (*set_special_effect) (sensor_t *sensor, sde_t sde);
    int (*set_lens_correction) (sensor_t *sensor, int enable, int radi, int coef);
    int (*ioctl) (sensor_t *sensor, int request, va_list ap);
    int (*snapshot) (sensor_t *sensor, image_t *image, streaming_cb_t streaming_cb);
} sensor_t;


extern const int resolution[][2];


int sensor_init();


void sensor_init0();


int sensor_reset();


int sensor_get_id();


int sensor_sleep(int enable);


int sensor_shutdown(int enable);


int sensor_read_reg(uint8_t reg_addr);


int sensor_write_reg(uint8_t reg_addr, uint16_t reg_data);


int sensor_set_pixformat(pixformat_t pixformat);


int sensor_set_framesize(framesize_t framesize);


int sensor_set_framerate(framerate_t framerate);


int sensor_set_windowing(int x, int y, int w, int h);


int sensor_set_contrast(int level);


int sensor_set_brightness(int level);


int sensor_set_saturation(int level);



int sensor_set_gainceiling(gainceiling_t gainceiling);


int sensor_set_quality(int qs);


int sensor_set_colorbar(int enable);


int sensor_set_auto_gain(int enable, float gain_db, float gain_db_ceiling);


int sensor_get_gain_db(float *gain_db);


int sensor_set_auto_exposure(int enable, int exposure_us);


int sensor_get_exposure_us(int *get_exposure_us);


int sensor_set_auto_whitebal(int enable, float r_gain_db, float g_gain_db, float b_gain_db);


int sensor_get_rgb_gain_db(float *r_gain_db, float *g_gain_db, float *b_gain_db);


int sensor_set_hmirror(int enable);


int sensor_set_vflip(int enable);


int sensor_set_special_effect(sde_t sde);


int sensor_set_lens_correction(int enable, int radi, int coef);

int sensor_ioctl(int request, ...);


int sensor_set_vsync_output(GPIO_Type *gpio, uint32_t pin);


int sensor_set_color_palette(const uint16_t *color_palette);


const uint16_t *sensor_get_color_palette();


int sensor_snapshot(sensor_t *sensor, image_t *image, streaming_cb_t streaming_cb);
# 13 "omv/py/py_sensor.c" 2


# 1 "omv/py/py_assert.h" 1
# 16 "omv/py/py_sensor.c" 2
# 1 "omv/py/py_image.h" 1
# 13 "omv/py/py_image.h"
mp_obj_t py_image(int width, int height, int bpp, void *pixels);
mp_obj_t py_image_from_struct(image_t *img);
void *py_image_cobj(mp_obj_t img_obj);
int py_image_descriptor_from_roi(image_t *img, const char *path, rectangle_t *roi);
# 17 "omv/py/py_sensor.c" 2
# 1 "omv/py/py_sensor.h" 1
# 11 "omv/py/py_sensor.h"
const mp_obj_module_t *py_sensor_init();
# 18 "omv/py/py_sensor.c" 2
# 1 "./boards/omvrt1/omv_boardconfig.h" 1
# 19 "omv/py/py_sensor.c" 2
# 1 "omv/py/py_helper.h" 1
# 9 "omv/py/py_helper.h"
extern const mp_obj_fun_builtin_var_t py_func_unavailable_obj;
image_t *py_helper_arg_to_image_mutable(const mp_obj_t arg);
image_t *py_helper_arg_to_image_mutable_bayer(const mp_obj_t arg);
image_t *py_helper_arg_to_image_grayscale(const mp_obj_t arg);
image_t *py_helper_arg_to_image_color(const mp_obj_t arg);
image_t *py_helper_keyword_to_image_mutable(uint n_args, const mp_obj_t *args, uint arg_index,
                                            mp_map_t *kw_args, mp_obj_t kw, image_t *default_val);
image_t *py_helper_keyword_to_image_mutable_mask(uint n_args, const mp_obj_t *args, uint arg_index,
                                                 mp_map_t *kw_args);
void py_helper_keyword_rectangle(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                                 mp_map_t *kw_args, mp_obj_t kw, rectangle_t *r);
void py_helper_keyword_rectangle_roi(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                                     mp_map_t *kw_args, rectangle_t *r);
int py_helper_keyword_int(uint n_args, const mp_obj_t *args, uint arg_index,
                          mp_map_t *kw_args, mp_obj_t kw, int default_val);
float py_helper_keyword_float(uint n_args, const mp_obj_t *args, uint arg_index,
                              mp_map_t *kw_args, mp_obj_t kw, float default_val);
void py_helper_keyword_int_array(uint n_args, const mp_obj_t *args, uint arg_index,
                                 mp_map_t *kw_args, mp_obj_t kw, int *x, int size);
void py_helper_keyword_float_array(uint n_args, const mp_obj_t *args, uint arg_index,
                                   mp_map_t *kw_args, mp_obj_t kw, float *x, int size);
uint py_helper_consume_array(uint n_args, const mp_obj_t *args, uint arg_index, size_t len, const mp_obj_t **items);
int py_helper_keyword_color(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                            mp_map_t *kw_args, int default_val);
void py_helper_arg_to_thresholds(const mp_obj_t arg, list_t *thresholds);
void py_helper_keyword_thresholds(uint n_args, const mp_obj_t *args, uint arg_index,
                                  mp_map_t *kw_args, list_t *thresholds);
int py_helper_arg_to_ksize(const mp_obj_t arg);
int py_helper_ksize_to_n(int ksize);
mp_obj_t py_helper_keyword_object(uint n_args, const mp_obj_t *args, uint arg_index, mp_map_t *kw_args, mp_obj_t kw);
# 20 "omv/py/py_sensor.c" 2
# 1 "./omv/framebuffer.h" 1
# 12 "./omv/framebuffer.h"
# 1 "./omv/mutex.h" 1
# 15 "./omv/mutex.h"
typedef volatile struct {
    uint32_t tid;
    uint32_t lock;
} mutex_t;
void mutex_init(mutex_t *mutex);
void mutex_lock(mutex_t *mutex, uint32_t tid);
int mutex_try_lock(mutex_t *mutex, uint32_t tid);
void mutex_unlock(mutex_t *mutex, uint32_t tid);
# 13 "./omv/framebuffer.h" 2

typedef struct framebuffer {
 union {
  struct {
   int x, y, w, h, u, v, bpp, res;
  };
  uint64_t u64AlignForIMxRT;
 };
    uint8_t pixels[];
} framebuffer_t;

extern framebuffer_t *fb_framebuffer;

typedef struct jpegbuffer {
    int w,h;
    int size;
    int enabled;
    int quality;
    mutex_t lock;
    uint8_t pixels[];
} jpegbuffer_t;

extern jpegbuffer_t *jpeg_fb_framebuffer;
# 49 "./omv/framebuffer.h"
uint32_t fb_buffer_size();


void fb_update_jpeg_buffer();
# 21 "omv/py/py_sensor.c" 2
# 1 "./systick.h" 1
# 27 "./systick.h"
void sys_tick_wait_at_least(uint32_t stc, uint32_t delay_ms);

# 28 "./systick.h" 3 4
_Bool 
# 28 "./systick.h"
    sys_tick_has_passed(uint32_t stc, uint32_t delay_ms);
void systick_sleep(volatile uint32_t ms);
uint32_t systick_current_millis(void);
# 22 "omv/py/py_sensor.c" 2

extern sensor_t sensor;

static mp_obj_t py_sensor_reset() {
    do { if ((sensor_reset() != 0) == 1) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Reset Failed"))); } while (0); } } while(0);
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_sleep(mp_obj_t enable) {
    do { if ((sensor_sleep(mp_obj_is_true(enable)) != 0) == 1) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Sleep Failed"))); } while (0); } } while(0);
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_shutdown(mp_obj_t enable) {
    do { if ((sensor_shutdown(mp_obj_is_true(enable)) != 0) == 1) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Shutdown Failed"))); } while (0); } } while(0);
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_flush() {
    fb_update_jpeg_buffer();
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_snapshot(uint n_args, const mp_obj_t *args, mp_map_t *kw_args) {

   mp_obj_t image = py_image(0, 0, 0, 0);


    do { if (((sensor.pixformat != PIXFORMAT_JPEG)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Operation not supported on JPEG"))); } while (0); } } while(0);

    if (sensor.snapshot(&sensor, (image_t*) py_image_cobj(image), 
# 52 "omv/py/py_sensor.c" 3 4
                                                                 ((void *)0)
# 52 "omv/py/py_sensor.c"
                                                                     )==-1) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_RuntimeError, "Sensor Timeout!!"))); } while (0);
        return (((mp_obj_t)&mp_const_false_obj));
 }

   return image;
}

static mp_obj_t py_sensor_skip_frames(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    mp_map_elem_t *kw_arg = mp_map_lookup(kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_time)) << 2) | 2)), MP_MAP_LOOKUP);
    mp_int_t time = 300;

    if (kw_arg != 
# 65 "omv/py/py_sensor.c" 3 4
                 ((void *)0)
# 65 "omv/py/py_sensor.c"
                     ) {
        time = mp_obj_get_int(kw_arg->value);
    }

    uint32_t millis = systick_current_millis();

    if (!n_args) {
        while ((systick_current_millis() - millis) < time) {
            if (sensor.snapshot(&sensor, 
# 73 "omv/py/py_sensor.c" 3 4
                                        ((void *)0)
# 73 "omv/py/py_sensor.c"
                                            , 
# 73 "omv/py/py_sensor.c" 3 4
                                              ((void *)0)
# 73 "omv/py/py_sensor.c"
                                                  ) == -1) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_RuntimeError, "Sensor Timeout!!"))); } while (0);
            }
        }
    } else {
        for (int i = 0, j = mp_obj_get_int(args[0]); i < j; i++) {
            if ((kw_arg != 
# 79 "omv/py/py_sensor.c" 3 4
                          ((void *)0)
# 79 "omv/py/py_sensor.c"
                              ) && ((systick_current_millis() - millis) >= time)) {
                break;
            }

            if (sensor.snapshot(&sensor, 
# 83 "omv/py/py_sensor.c" 3 4
                                        ((void *)0)
# 83 "omv/py/py_sensor.c"
                                            , 
# 83 "omv/py/py_sensor.c" 3 4
                                              ((void *)0)
# 83 "omv/py/py_sensor.c"
                                                  ) == -1) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_RuntimeError, "Sensor Timeout!!"))); } while (0);
            }
        }
    }

    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_width()
{
    return mp_obj_new_int(resolution[sensor.framesize][0]);
}

static mp_obj_t py_sensor_height()
{
    return mp_obj_new_int(resolution[sensor.framesize][1]);
}

static mp_obj_t py_sensor_get_fb()
{
    if ((fb_framebuffer)->bpp == 0) {
        return (((mp_obj_t)&mp_const_none_obj));
    }

    image_t image = {
        .w = (fb_framebuffer)->w,
        .h = (fb_framebuffer)->h,
        .bpp = (fb_framebuffer)->bpp,
        .pixels = (fb_framebuffer)->pixels
    };

    return py_image_from_struct(&image);
}

static mp_obj_t py_sensor_get_id() {
    return mp_obj_new_int(sensor_get_id());
}

static mp_obj_t py_sensor_alloc_extra_fb(mp_obj_t w_obj, mp_obj_t h_obj, mp_obj_t type_obj)
{
    int w = mp_obj_get_int(w_obj);
    do { if ((w > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width must be > 0"))); } while (0); } } while(0);

    int h = mp_obj_get_int(h_obj);
    do { if ((h > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height must be > 0"))); } while (0); } } while(0);

    image_t img = {
        .w = w,
        .h = h,
        .bpp = 0,
        .pixels = 0
    };

    switch(mp_obj_get_int(type_obj)) {
        case PIXFORMAT_BINARY:
            img.bpp = IMAGE_BPP_BINARY;
            break;
        case PIXFORMAT_GRAYSCALE:
            img.bpp = IMAGE_BPP_GRAYSCALE;
            break;
        case PIXFORMAT_RGB565:
            img.bpp = IMAGE_BPP_RGB565;
            break;
        default:
            do { if ((
# 148 "omv/py/py_sensor.c" 3 4
           0
# 148 "omv/py/py_sensor.c"
           ) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Unsupported type"))); } while (0); } } while(0);
            break;
    }


    mp_obj_t r = py_image_from_struct(&img);

    ((image_t *) py_image_cobj(r))->pixels = fb_alloc0(image_size(&img));
    return r;
}

static mp_obj_t py_sensor_dealloc_extra_fb()
{
    fb_free();

    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_set_pixformat(mp_obj_t pixformat) {
    if (sensor_set_pixformat(mp_obj_get_int(pixformat)) != 0) {
        do { if ((0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Pixel format is not supported!"))); } while (0); } } while(0);
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_framerate(mp_obj_t framerate) {
    framerate_t fr;
    switch (mp_obj_get_int(framerate)) {
        case 2:
            fr = FRAMERATE_2FPS;
            break;
        case 8:
            fr = FRAMERATE_8FPS;
            break;
        case 15:
            fr = FRAMERATE_15FPS;
            break;
        case 30:
            fr = FRAMERATE_30FPS;
            break;
        case 60:
            fr = FRAMERATE_60FPS;
            break;
        default:
   fr = mp_obj_get_int(framerate) | 0x80000000;

            break;
    }

    if (sensor_set_framerate(fr) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_framesize(mp_obj_t framesize) {
    if (sensor_set_framesize(mp_obj_get_int(framesize)) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Failed to set framesize!"))); } while (0);
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_windowing(mp_obj_t roi_obj) {
    int x, y, w, h;
    int res_w = resolution[sensor.framesize][0];
    int res_h = resolution[sensor.framesize][1];

    mp_obj_t *array;
    mp_uint_t array_len;
    mp_obj_get_array(roi_obj, &array_len, &array);

    if (array_len == 4) {
        x = mp_obj_get_int(array[0]);
        y = mp_obj_get_int(array[1]);
        w = mp_obj_get_int(array[2]);
        h = mp_obj_get_int(array[3]);
    } else if (array_len == 2) {
        w = mp_obj_get_int(array[0]);
        h = mp_obj_get_int(array[1]);
        x = (res_w / 2) - (w / 2);
        y = (res_h / 2) - (h / 2);
    } else {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "The tuple/list must either be (x, y, w, h) or (w, h)"))); } while (0)
                                                                    ;
    }

    if (w < 8 || h < 8) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "The selected window is too small"))); } while (0)
                                                ;
    }

    if (x < 0 || (x + w) > res_w || y < 0 || (y + h) > res_h) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "The selected window is outside the bounds of the frame"))); } while (0)
                                                                      ;
    }

    if (sensor_set_windowing(x, y, w, h) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }

    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_gainceiling(mp_obj_t gainceiling) {
    gainceiling_t gain;
    switch (mp_obj_get_int(gainceiling)) {
        case 2:
            gain = GAINCEILING_2X;
            break;
        case 4:
            gain = GAINCEILING_4X;
            break;
        case 8:
            gain = GAINCEILING_8X;
            break;
        case 16:
            gain = GAINCEILING_16X;
            break;
        case 32:
            gain = GAINCEILING_32X;
            break;
        case 64:
            gain = GAINCEILING_64X;
            break;
        case 128:
            gain = GAINCEILING_128X;
            break;
        default:
            do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Invalid gainceiling"))); } while (0);
            break;
    }

    if (sensor_set_gainceiling(gain) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_brightness(mp_obj_t brightness) {
    if (sensor_set_brightness(mp_obj_get_int(brightness)) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_contrast(mp_obj_t contrast) {
    if (sensor_set_contrast(mp_obj_get_int(contrast)) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_saturation(mp_obj_t saturation) {
    if (sensor_set_saturation(mp_obj_get_int(saturation)) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_quality(mp_obj_t qs) {
    int q = mp_obj_get_int(qs);
    do { if (((q >= 0 && q <= 100)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Operation not supported"))); } while (0); } } while(0);

    q = 100-q;
    q = 255*q/100;
    if (sensor_set_quality(q) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_colorbar(mp_obj_t enable) {
    if (sensor_set_colorbar(mp_obj_is_true(enable)) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_auto_gain(uint n_args, const mp_obj_t *args, mp_map_t *kw_args) {
    int enable = mp_obj_get_int(args[0]);
    float gain_db = py_helper_keyword_float(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_gain_db)) << 2) | 2)), 
# 328 "omv/py/py_sensor.c" 3
                                                                                                       (__builtin_nanf(""))
# 328 "omv/py/py_sensor.c"
                                                                                                          );
    float gain_db_ceiling = py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_gain_db_ceiling)) << 2) | 2)), 
# 329 "omv/py/py_sensor.c" 3
                                                                                                                       (__builtin_nanf(""))
# 329 "omv/py/py_sensor.c"
                                                                                                                          );
    if (sensor_set_auto_gain(enable, gain_db, gain_db_ceiling) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
    }
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_get_gain_db() {
    float gain_db;
    if (sensor_get_gain_db(&gain_db) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
    }
    return mp_obj_new_float(gain_db);
}

static mp_obj_t py_sensor_set_auto_exposure(uint n_args, const mp_obj_t *args, mp_map_t *kw_args) {
    int exposure_us = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_exposure_us)) << 2) | 2)), -1);
    if (sensor_set_auto_exposure(mp_obj_get_int(args[0]), exposure_us) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
    }
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_get_exposure_us() {
    int exposure_us;
    if (sensor_get_exposure_us(&exposure_us) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
    }
    return mp_obj_new_int(exposure_us);
}

static mp_obj_t py_sensor_set_auto_whitebal(uint n_args, const mp_obj_t *args, mp_map_t *kw_args) {
    int enable = mp_obj_get_int(args[0]);
    float rgb_gain_db[3] = {
# 362 "omv/py/py_sensor.c" 3
                           (__builtin_nanf(""))
# 362 "omv/py/py_sensor.c"
                              , 
# 362 "omv/py/py_sensor.c" 3
                                (__builtin_nanf(""))
# 362 "omv/py/py_sensor.c"
                                   , 
# 362 "omv/py/py_sensor.c" 3
                                     (__builtin_nanf(""))
# 362 "omv/py/py_sensor.c"
                                        };
    py_helper_keyword_float_array(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_gain_db)) << 2) | 2)), rgb_gain_db, 3);
    if (sensor_set_auto_whitebal(enable, rgb_gain_db[0], rgb_gain_db[1], rgb_gain_db[2]) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
    }
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_get_rgb_gain_db() {
    float r_gain_db = 0.0, g_gain_db = 0.0, b_gain_db = 0.0;
    if (sensor_get_rgb_gain_db(&r_gain_db, &g_gain_db, &b_gain_db) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
    }
    return mp_obj_new_tuple(3, (mp_obj_t []) {mp_obj_new_float(r_gain_db), mp_obj_new_float(g_gain_db), mp_obj_new_float(b_gain_db)});
}

static mp_obj_t py_sensor_set_hmirror(mp_obj_t enable) {
    if (sensor_set_hmirror(mp_obj_is_true(enable)) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
    }
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_set_vflip(mp_obj_t enable) {
    if (sensor_set_vflip(mp_obj_is_true(enable)) != 0) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
    }
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_set_special_effect(mp_obj_t sde) {
    if (sensor_set_special_effect(mp_obj_get_int(sde)) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_lens_correction(mp_obj_t enable, mp_obj_t radi, mp_obj_t coef) {
    if (sensor_set_lens_correction(mp_obj_is_true(enable),
                mp_obj_get_int(radi), mp_obj_get_int(coef)) != 0) {
        return (((mp_obj_t)&mp_const_false_obj));
    }
    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_set_vsync_output(mp_obj_t pin_obj) {
    pin_obj_t *pin = pin_obj;

    return (((mp_obj_t)&mp_const_true_obj));
}

static mp_obj_t py_sensor_ioctl(uint n_args, const mp_obj_t *args)
{
    mp_obj_t ret_obj = (((mp_obj_t)&mp_const_none_obj));
    int request = mp_obj_get_int(args[0]);

    switch (request) {
        case IOCTL_SET_TRIGGERED_MODE:
            if (n_args < 2 || sensor_ioctl(request, mp_obj_get_int(args[1])) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            break;

        case IOCTL_GET_TRIGGERED_MODE: {
            int enabled;
            if (sensor_ioctl(request, &enabled) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_bool(enabled);
            break;
        }

        case IOCTL_LEPTON_GET_WIDTH: {
            int width;
            if (sensor_ioctl(request, &width) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_int(width);
            break;
        }

        case IOCTL_LEPTON_GET_HEIGHT: {
            int height;
            if (sensor_ioctl(request, &height) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_int(height);
            break;
        }

        case IOCTL_LEPTON_GET_RADIOMETRY: {
            int radiometry;
            if (sensor_ioctl(request, &radiometry) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_int(radiometry);
            break;
        }

        case IOCTL_LEPTON_GET_REFRESH: {
            int refresh;
            if (sensor_ioctl(request, &refresh) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_int(refresh);
            break;
        }

        case IOCTL_LEPTON_GET_RESOLUTION: {
            int resolution;
            if (sensor_ioctl(request, &resolution) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_int(resolution);
            break;
        }

        case IOCTL_LEPTON_RUN_COMMAND: {
            if (n_args < 2 || sensor_ioctl(request, mp_obj_get_int(args[1])) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            break;
        }

        case IOCTL_LEPTON_SET_ATTRIBUTE: {
            size_t data_len;
            int command = mp_obj_get_int(args[1]);
            uint16_t *data = (uint16_t *) mp_obj_str_get_data(args[2], &data_len);
            do { if ((data_len > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "0 bytes transferred!"))); } while (0); } } while(0);
            if (sensor_ioctl(request, command, data, data_len / sizeof(uint16_t)) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            break;
        }

        case IOCTL_LEPTON_GET_ATTRIBUTE: {
            int command = mp_obj_get_int(args[1]);
            size_t data_len = mp_obj_get_int(args[2]);
            do { if ((data_len > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "0 bytes transferred!"))); } while (0); } } while(0);
            uint16_t *data = xalloc(data_len * sizeof(uint16_t));
            if (sensor_ioctl(request, command, data, data_len) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_bytearray_by_ref(data_len * sizeof(uint16_t), data);
            break;
        }

        case IOCTL_LEPTON_GET_FPA_TEMPERATURE:
        case IOCTL_LEPTON_GET_AUX_TEMPERATURE: {
            int temp;
            if (sensor_ioctl(request, &temp) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_float((((float) temp) / 100) - 273.15f);
            break;
        }

        case IOCTL_LEPTON_SET_MEASUREMENT_MODE:
            if (n_args < 2 || sensor_ioctl(request, mp_obj_get_int(args[1])) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            break;

        case IOCTL_LEPTON_GET_MEASUREMENT_MODE: {
            int enabled;
            if (sensor_ioctl(request, &enabled) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_bool(enabled);
            break;
        }

        case IOCTL_LEPTON_SET_MEASUREMENT_RANGE:
            if (n_args < 3) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }

            float min = mp_obj_get_float(args[1]);
            float max = mp_obj_get_float(args[2]);
            if (sensor_ioctl(request, &min, &max) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            break;

        case IOCTL_LEPTON_GET_MEASUREMENT_RANGE: {
            float min, max;
            if (sensor_ioctl(request, &min, &max) != 0) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Sensor control failed!"))); } while (0);
            }
            ret_obj = mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_float(min), mp_obj_new_float(max)});
            break;
        }

        default: {
            do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Operation not supported!"))); } while (0);
            break;
        }
    }
    return ret_obj;
}

static mp_obj_t py_sensor_set_color_palette(mp_obj_t palette_obj) {
    int palette = mp_obj_get_int(palette_obj);
    switch (palette) {
        case COLOR_PALETTE_RAINBOW:
            sensor_set_color_palette(rainbow_table);
            break;
        case COLOR_PALETTE_IRONBOW:
            sensor_set_color_palette(ironbow_table);
            break;
        default:
            do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Invalid color palette!"))); } while (0);
            break;
    }
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_get_color_palette() {
    const uint16_t *palette = sensor_get_color_palette();
    if (palette == rainbow_table) {
        return mp_obj_new_int(COLOR_PALETTE_RAINBOW);
    } else if (palette == ironbow_table) {
        return mp_obj_new_int(COLOR_PALETTE_IRONBOW);
    }
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_write_reg(mp_obj_t addr, mp_obj_t val) {
    sensor_write_reg(mp_obj_get_int(addr), mp_obj_get_int(val));
    return (((mp_obj_t)&mp_const_none_obj));
}

static mp_obj_t py_sensor_read_reg(mp_obj_t addr) {
    return mp_obj_new_int(sensor_read_reg(mp_obj_get_int(addr)));
}






static const mp_obj_fun_builtin_fixed_t py_sensor_reset_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_reset};
static const mp_obj_fun_builtin_fixed_t py_sensor_sleep_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_sleep};
static const mp_obj_fun_builtin_fixed_t py_sensor_shutdown_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_shutdown};
static const mp_obj_fun_builtin_fixed_t py_sensor_flush_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_flush};
static const mp_obj_fun_builtin_var_t py_sensor_snapshot_obj = {{&mp_type_fun_builtin_var}, 
# 607 "omv/py/py_sensor.c" 3 4
      1
# 607 "omv/py/py_sensor.c"
      , 0, (0xffff), .fun.kw = py_sensor_snapshot};
static const mp_obj_fun_builtin_var_t py_sensor_skip_frames_obj = {{&mp_type_fun_builtin_var}, 
# 608 "omv/py/py_sensor.c" 3 4
      1
# 608 "omv/py/py_sensor.c"
      , 0, (0xffff), .fun.kw = py_sensor_skip_frames};
static const mp_obj_fun_builtin_fixed_t py_sensor_width_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_width};
static const mp_obj_fun_builtin_fixed_t py_sensor_height_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_height};
static const mp_obj_fun_builtin_fixed_t py_sensor_get_fb_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_get_fb};
static const mp_obj_fun_builtin_fixed_t py_sensor_get_id_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_get_id};
static const mp_obj_fun_builtin_fixed_t py_sensor_alloc_extra_fb_obj = {{&mp_type_fun_builtin_3}, .fun._3 = py_sensor_alloc_extra_fb};
static const mp_obj_fun_builtin_fixed_t py_sensor_dealloc_extra_fb_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_dealloc_extra_fb};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_pixformat_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_pixformat};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_framerate_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_framerate};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_framesize_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_framesize};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_windowing_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_windowing};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_gainceiling_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_gainceiling};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_contrast_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_contrast};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_brightness_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_brightness};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_saturation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_saturation};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_quality_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_quality};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_colorbar_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_colorbar};
static const mp_obj_fun_builtin_var_t py_sensor_set_auto_gain_obj = {{&mp_type_fun_builtin_var}, 
# 625 "omv/py/py_sensor.c" 3 4
      1
# 625 "omv/py/py_sensor.c"
      , 1, (0xffff), .fun.kw = py_sensor_set_auto_gain};
static const mp_obj_fun_builtin_fixed_t py_sensor_get_gain_db_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_get_gain_db};
static const mp_obj_fun_builtin_var_t py_sensor_set_auto_exposure_obj = {{&mp_type_fun_builtin_var}, 
# 627 "omv/py/py_sensor.c" 3 4
      1
# 627 "omv/py/py_sensor.c"
      , 1, (0xffff), .fun.kw = py_sensor_set_auto_exposure};
static const mp_obj_fun_builtin_fixed_t py_sensor_get_exposure_us_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_get_exposure_us};
static const mp_obj_fun_builtin_var_t py_sensor_set_auto_whitebal_obj = {{&mp_type_fun_builtin_var}, 
# 629 "omv/py/py_sensor.c" 3 4
      1
# 629 "omv/py/py_sensor.c"
      , 1, (0xffff), .fun.kw = py_sensor_set_auto_whitebal};
static const mp_obj_fun_builtin_fixed_t py_sensor_get_rgb_gain_db_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_get_rgb_gain_db};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_hmirror_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_hmirror};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_vflip_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_vflip};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_special_effect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_special_effect};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_lens_correction_obj = {{&mp_type_fun_builtin_3}, .fun._3 = py_sensor_set_lens_correction};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_vsync_output_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_vsync_output};
static const mp_obj_fun_builtin_var_t py_sensor_ioctl_obj = {{&mp_type_fun_builtin_var}, 
# 636 "omv/py/py_sensor.c" 3 4
      0
# 636 "omv/py/py_sensor.c"
      , 1, 5, .fun.var = py_sensor_ioctl};
static const mp_obj_fun_builtin_fixed_t py_sensor_set_color_palette_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_set_color_palette};
static const mp_obj_fun_builtin_fixed_t py_sensor_get_color_palette_obj = {{&mp_type_fun_builtin_0}, .fun._0 = py_sensor_get_color_palette};
static const mp_obj_fun_builtin_fixed_t py_sensor_write_reg_obj = {{&mp_type_fun_builtin_2}, .fun._2 = py_sensor_write_reg};
static const mp_obj_fun_builtin_fixed_t py_sensor_read_reg_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_sensor_read_reg};

static const mp_map_elem_t globals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___name__)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(MP_QSTR_sensor)) << 2) | 2)) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_BINARY)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(PIXFORMAT_BINARY)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_GRAYSCALE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(PIXFORMAT_GRAYSCALE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_RGB565)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(PIXFORMAT_RGB565)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_YUV422)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(PIXFORMAT_YUV422)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_BAYER)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(PIXFORMAT_BAYER)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_JPEG)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(PIXFORMAT_JPEG)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_OV9650)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)((0x96))) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_OV2640)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)((0x26))) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_OV7725)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)((0x77))) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_MT9V034)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)((0x13))) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_LEPTON)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)((0x54))) << 1) | 1))},


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_NORMAL)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(SDE_NORMAL)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_NEGATIVE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(SDE_NEGATIVE)) << 1) | 1))},


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QQCIF)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QQCIF)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QCIF)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QCIF)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_CIF)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_CIF)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QQSIF)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QQSIF)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QSIF)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QSIF)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_SIF)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_SIF)) << 1) | 1))},

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QQQQVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QQQQVGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QQQVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QQQVGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QQVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QQVGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QVGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_VGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_VGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_HQQQVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_HQQQVGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_HQQVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_HQQVGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_HQVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_HQVGA)) << 1) | 1))},

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_B64X32)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_64X32)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_B64X64)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_64X64)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_B128X64)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_128X64)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_B128X128)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_128X128)) << 1) | 1))},

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_LCD)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_LCD)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_QQVGA2)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_QQVGA2)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_WVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_WVGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_WVGA2)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_WVGA2)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_SVGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_SVGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_SXGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_SXGA)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_UXGA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(FRAMESIZE_UXGA)) << 1) | 1))},


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_PALETTE_RAINBOW)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(COLOR_PALETTE_RAINBOW)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_PALETTE_IRONBOW)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(COLOR_PALETTE_IRONBOW)) << 1) | 1))},


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_SET_TRIGGERED_MODE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_SET_TRIGGERED_MODE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_GET_TRIGGERED_MODE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_GET_TRIGGERED_MODE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_WIDTH)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_WIDTH)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_HEIGHT)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_HEIGHT)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_RADIOMETRY)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_RADIOMETRY)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_REFRESH)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_REFRESH)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_RESOLUTION)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_RESOLUTION)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_RUN_COMMAND)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_RUN_COMMAND)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_SET_ATTRIBUTE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_SET_ATTRIBUTE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_ATTRIBUTE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_ATTRIBUTE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_FPA_TEMPERATURE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_FPA_TEMPERATURE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_AUX_TEMPERATURE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_AUX_TEMPERATURE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_SET_MEASUREMENT_MODE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_SET_MEASUREMENT_MODE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_MEASUREMENT_MODE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_MEASUREMENT_MODE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_SET_MEASUREMENT_RANGE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_SET_MEASUREMENT_RANGE)) << 1) | 1))},
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IOCTL_LEPTON_GET_MEASUREMENT_RANGE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(IOCTL_LEPTON_GET_MEASUREMENT_RANGE)) << 1) | 1))},


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_reset)) << 2) | 2)), (mp_obj_t)&py_sensor_reset_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_sleep)) << 2) | 2)), (mp_obj_t)&py_sensor_sleep_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_shutdown)) << 2) | 2)), (mp_obj_t)&py_sensor_shutdown_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_flush)) << 2) | 2)), (mp_obj_t)&py_sensor_flush_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_snapshot)) << 2) | 2)), (mp_obj_t)&py_sensor_snapshot_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_skip_frames)) << 2) | 2)), (mp_obj_t)&py_sensor_skip_frames_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_width)) << 2) | 2)), (mp_obj_t)&py_sensor_width_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_height)) << 2) | 2)), (mp_obj_t)&py_sensor_height_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_fb)) << 2) | 2)), (mp_obj_t)&py_sensor_get_fb_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_id)) << 2) | 2)), (mp_obj_t)&py_sensor_get_id_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_alloc_extra_fb)) << 2) | 2)), (mp_obj_t)&py_sensor_alloc_extra_fb_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_dealloc_extra_fb)) << 2) | 2)), (mp_obj_t)&py_sensor_dealloc_extra_fb_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_pixformat)) << 2) | 2)), (mp_obj_t)&py_sensor_set_pixformat_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_framerate)) << 2) | 2)), (mp_obj_t)&py_sensor_set_framerate_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_framesize)) << 2) | 2)), (mp_obj_t)&py_sensor_set_framesize_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_windowing)) << 2) | 2)), (mp_obj_t)&py_sensor_set_windowing_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_gainceiling)) << 2) | 2)), (mp_obj_t)&py_sensor_set_gainceiling_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_contrast)) << 2) | 2)), (mp_obj_t)&py_sensor_set_contrast_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_brightness)) << 2) | 2)), (mp_obj_t)&py_sensor_set_brightness_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_saturation)) << 2) | 2)), (mp_obj_t)&py_sensor_set_saturation_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_quality)) << 2) | 2)), (mp_obj_t)&py_sensor_set_quality_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_colorbar)) << 2) | 2)), (mp_obj_t)&py_sensor_set_colorbar_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_auto_gain)) << 2) | 2)), (mp_obj_t)&py_sensor_set_auto_gain_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_gain_db)) << 2) | 2)), (mp_obj_t)&py_sensor_get_gain_db_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_auto_exposure)) << 2) | 2)), (mp_obj_t)&py_sensor_set_auto_exposure_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_exposure_us)) << 2) | 2)), (mp_obj_t)&py_sensor_get_exposure_us_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_auto_whitebal)) << 2) | 2)), (mp_obj_t)&py_sensor_set_auto_whitebal_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_rgb_gain_db)) << 2) | 2)), (mp_obj_t)&py_sensor_get_rgb_gain_db_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_hmirror)) << 2) | 2)), (mp_obj_t)&py_sensor_set_hmirror_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_vflip)) << 2) | 2)), (mp_obj_t)&py_sensor_set_vflip_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_special_effect)) << 2) | 2)), (mp_obj_t)&py_sensor_set_special_effect_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_lens_correction)) << 2) | 2)), (mp_obj_t)&py_sensor_set_lens_correction_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_vsync_output)) << 2) | 2)), (mp_obj_t)&py_sensor_set_vsync_output_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_ioctl)) << 2) | 2)), (mp_obj_t)&py_sensor_ioctl_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_color_palette)) << 2) | 2)), (mp_obj_t)&py_sensor_set_color_palette_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_color_palette)) << 2) | 2)), (mp_obj_t)&py_sensor_get_color_palette_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___write_reg)) << 2) | 2)), (mp_obj_t)&py_sensor_write_reg_obj },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___read_reg)) << 2) | 2)), (mp_obj_t)&py_sensor_read_reg_obj },

};

static const mp_obj_dict_t globals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(globals_dict_table) / sizeof((globals_dict_table)[0])), .alloc = (sizeof(globals_dict_table) / sizeof((globals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)globals_dict_table, }, };

const mp_obj_module_t sensor_module = {
    .base = { &mp_type_module },
    .globals = (mp_obj_t)&globals_dict,
};
# 1 "omv/py/py_image.c"
# 1 "/media/sf_D/RTOS_MW/mpyrt_omv/ports/nxp_rt1050_60//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "omv/py/py_image.c"
# 10 "omv/py/py_image.c"
# 1 "../../lib/cmsis/inc/arm_math.h" 1
# 298 "../../lib/cmsis/inc/arm_math.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"





# 1 "../../lib/cmsis/inc/core_cm7.h" 1
# 34 "../../lib/cmsis/inc/core_cm7.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 1 3 4
# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint-gcc.h" 1 3 4
# 34 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint-gcc.h" 3 4

# 34 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint-gcc.h" 3 4
typedef signed char int8_t;


typedef short int int16_t;


typedef long int int32_t;


typedef long long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef long unsigned int uint32_t;


typedef long long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef long int int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef long unsigned int uint_least32_t;
typedef long long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long long unsigned int uint_fast64_t;




typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
# 12 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 2 3 4
# 35 "../../lib/cmsis/inc/core_cm7.h" 2
# 63 "../../lib/cmsis/inc/core_cm7.h"
# 1 "../../lib/cmsis/inc/cmsis_version.h" 1
# 64 "../../lib/cmsis/inc/core_cm7.h" 2
# 162 "../../lib/cmsis/inc/core_cm7.h"
# 1 "../../lib/cmsis/inc/cmsis_compiler.h" 1
# 48 "../../lib/cmsis/inc/cmsis_compiler.h"
# 1 "../../lib/cmsis/inc/cmsis_gcc.h" 1
# 29 "../../lib/cmsis/inc/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 68 "../../lib/cmsis/inc/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  
# 71 "../../lib/cmsis/inc/cmsis_gcc.h"
 struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 126 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 178 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 202 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 274 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 298 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 328 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 379 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}
# 409 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 436 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 488 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 513 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 554 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 704 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{






  uint32_t result;

  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  return(result);




}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{






  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");




}
# 820 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 854 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 873 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 888 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __REVSH(int32_t value)
{

  return (short)__builtin_bswap16(value);






}
# 908 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 930 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 950 "../../lib/cmsis/inc/cmsis_gcc.h"
  return(result);
}
# 973 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 995 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 1017 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 1034 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1051 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1068 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1132 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 1147 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 1169 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 1191 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 1206 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1218 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1230 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1432 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1752 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 1965 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 49 "../../lib/cmsis/inc/cmsis_compiler.h" 2
# 163 "../../lib/cmsis/inc/core_cm7.h" 2
# 308 "../../lib/cmsis/inc/arm_math.h" 2
# 333 "../../lib/cmsis/inc/arm_math.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 1 3
# 10 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 1 3
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 1 3
# 14 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_newlib_version.h" 1 3
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 2 3
# 16 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 1 3



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 5 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/features.h" 1 3
# 6 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 2 3
# 17 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 2 3
# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 1 3
# 13 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 1 3
# 14 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 149 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4

# 149 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 328 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 1 3
# 24 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_types.h" 1 3






# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 1 3
# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 103 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 200 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 8 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_types.h" 2 3
# 25 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h" 1 3
# 33 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h" 3
struct __lock;
typedef struct __lock * _LOCK_T;






extern void __retarget_lock_init(_LOCK_T *lock);

extern void __retarget_lock_init_recursive(_LOCK_T *lock);

extern void __retarget_lock_close(_LOCK_T lock);

extern void __retarget_lock_close_recursive(_LOCK_T lock);

extern void __retarget_lock_acquire(_LOCK_T lock);

extern void __retarget_lock_acquire_recursive(_LOCK_T lock);

extern int __retarget_lock_try_acquire(_LOCK_T lock);

extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);


extern void __retarget_lock_release(_LOCK_T lock);

extern void __retarget_lock_release_recursive(_LOCK_T lock);
# 26 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 129 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef unsigned int __size_t;
# 145 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef signed int _ssize_t;
# 156 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 357 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 160 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;



typedef unsigned long __clock_t;


typedef long __time_t;


typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;




typedef char * __va_list;
# 16 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 38 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 117 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 181 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 319 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 569 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 766 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 12 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 1 3
# 45 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 46 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 2 3
# 13 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3




# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 18 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/xlocale.h" 1 3
# 9 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/xlocale.h" 3
struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3




void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * restrict, const void * restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);






char *strtok_r (char *restrict, const char *restrict, char **restrict);


int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);


void explicit_bzero (void *, size_t);
int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


int ffs (int);
char *index (const char *, int);


void * memccpy (void * restrict, const void * restrict, int, size_t);
# 86 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
char *rindex (const char *, int);


char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);


int strcasecmp (const char *, const char *);






char *strdup (const char *);

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t);

char *_strndup_r (struct _reent *, const char *, size_t);
# 121 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


int strncasecmp (const char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 192 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/string.h" 1 3
# 193 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3


# 334 "../../lib/cmsis/inc/arm_math.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 1 3






# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 8 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 2 3



# 86 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);




extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);





extern int isinf (double);




extern int isnan (double);
# 150 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
    typedef float float_t;
    typedef double double_t;
# 194 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 290 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
# 422 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 503 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double drem (double, double);
extern float dremf (float, float);



extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);



extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);
# 565 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern int *__signgam (void);
# 578 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
struct exception

{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};




extern int matherr (struct exception *e);
# 642 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern enum __fdlibm_version __fdlib_version;
# 662 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3

# 335 "../../lib/cmsis/inc/arm_math.h" 2
# 387 "../../lib/cmsis/inc/arm_math.h"
  
# 387 "../../lib/cmsis/inc/arm_math.h"
 typedef enum
  {
    ARM_MATH_SUCCESS = 0,
    ARM_MATH_ARGUMENT_ERROR = -1,
    ARM_MATH_LENGTH_ERROR = -2,
    ARM_MATH_SIZE_MISMATCH = -3,
    ARM_MATH_NANINF = -4,
    ARM_MATH_SINGULAR = -5,
    ARM_MATH_TEST_FAILURE = -6
  } arm_status;




  typedef int8_t q7_t;




  typedef int16_t q15_t;




  typedef int32_t q31_t;




  typedef int64_t q63_t;




  typedef float float32_t;




  typedef double float64_t;
# 510 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
  }




  __attribute__((always_inline)) static inline q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
  }




  __attribute__((always_inline)) static inline q7_t clip_q31_to_q7(
  q31_t x)
  {
    return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
      ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
  }




  __attribute__((always_inline)) static inline q15_t clip_q31_to_q15(
  q31_t x)
  {
    return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
      ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
  }





  __attribute__((always_inline)) static inline q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
            (((q63_t) (x >> 32) * y)));
  }
# 589 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline uint32_t arm_recip_q31(
  q31_t in,
  q31_t * dst,
  q31_t * pRecipTable)
  {
    q31_t out;
    uint32_t tempVal;
    uint32_t index, i;
    uint32_t signBits;

    if (in > 0)
    {
      signBits = ((uint32_t) (__builtin_clz( in) - 1));
    }
    else
    {
      signBits = ((uint32_t) (__builtin_clz(-in) - 1));
    }


    in = (in << signBits);


    index = (uint32_t)(in >> 24);
    index = (index & 0x0000003F);


    out = pRecipTable[index];



    for (i = 0u; i < 2u; i++)
    {
      tempVal = (uint32_t) (((q63_t) in * out) >> 31);
      tempVal = 0x7FFFFFFFu - tempVal;


      out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
    }


    *dst = out;


    return (signBits + 1u);
  }





  __attribute__((always_inline)) static inline uint32_t arm_recip_q15(
  q15_t in,
  q15_t * dst,
  q15_t * pRecipTable)
  {
    q15_t out = 0;
    uint32_t tempVal = 0;
    uint32_t index = 0, i = 0;
    uint32_t signBits = 0;

    if (in > 0)
    {
      signBits = ((uint32_t)(__builtin_clz( in) - 17));
    }
    else
    {
      signBits = ((uint32_t)(__builtin_clz(-in) - 17));
    }


    in = (in << signBits);


    index = (uint32_t)(in >> 8);
    index = (index & 0x0000003F);


    out = pRecipTable[index];



    for (i = 0u; i < 2u; i++)
    {
      tempVal = (uint32_t) (((q31_t) in * out) >> 15);
      tempVal = 0x7FFFu - tempVal;

      out = (q15_t) (((q31_t) out * tempVal) >> 14);

    }


    *dst = out;


    return (signBits + 1);
  }
# 1094 "../../lib/cmsis/inc/arm_math.h"
  typedef struct
  {
    uint16_t numTaps;
    q7_t *pState;
    q7_t *pCoeffs;
  } arm_fir_instance_q7;




  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
  } arm_fir_instance_q15;




  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
  } arm_fir_instance_q31;




  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_fir_instance_f32;
# 1139 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q7(
  const arm_fir_instance_q7 * S,
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 1154 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_q7(
  arm_fir_instance_q7 * S,
  uint16_t numTaps,
  q7_t * pCoeffs,
  q7_t * pState,
  uint32_t blockSize);
# 1169 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1183 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_fast_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1200 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_init_q15(
  arm_fir_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 1215 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q31(
  const arm_fir_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1229 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_fast_q31(
  const arm_fir_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1244 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_q31(
  arm_fir_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 1259 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 1274 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_f32(
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    int8_t numStages;
    q15_t *pState;
    q15_t *pCoeffs;
    int8_t postShift;
  } arm_biquad_casd_df1_inst_q15;




  typedef struct
  {
    uint32_t numStages;
    q31_t *pState;
    q31_t *pCoeffs;
    uint8_t postShift;
  } arm_biquad_casd_df1_inst_q31;




  typedef struct
  {
    uint32_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_casd_df1_inst_f32;
# 1322 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1337 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_q15(
  arm_biquad_casd_df1_inst_q15 * S,
  uint8_t numStages,
  q15_t * pCoeffs,
  q15_t * pState,
  int8_t postShift);
# 1352 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_fast_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1366 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1380 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_fast_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1395 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_q31(
  arm_biquad_casd_df1_inst_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q31_t * pState,
  int8_t postShift);
# 1410 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 1424 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_f32(
  arm_biquad_casd_df1_inst_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);





  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float32_t *pData;
  } arm_matrix_instance_f32;





  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float64_t *pData;
  } arm_matrix_instance_f64;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q15_t *pData;
  } arm_matrix_instance_q15;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q31_t *pData;
  } arm_matrix_instance_q31;
# 1481 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1495 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst);
# 1509 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1523 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1537 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pScratch);
# 1552 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1565 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst);
# 1577 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_q15(
  const arm_matrix_instance_q15 * pSrc,
  arm_matrix_instance_q15 * pDst);
# 1589 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_q31(
  const arm_matrix_instance_q31 * pSrc,
  arm_matrix_instance_q31 * pDst);
# 1602 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1617 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pState);
# 1633 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_fast_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pState);
# 1648 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1662 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_fast_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1676 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1690 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst);
# 1704 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1718 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
  float32_t scale,
  arm_matrix_instance_f32 * pDst);
# 1733 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_q15(
  const arm_matrix_instance_q15 * pSrc,
  q15_t scaleFract,
  int32_t shift,
  arm_matrix_instance_q15 * pDst);
# 1749 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_q31(
  const arm_matrix_instance_q31 * pSrc,
  q31_t scaleFract,
  int32_t shift,
  arm_matrix_instance_q31 * pDst);
# 1763 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_q31(
  arm_matrix_instance_q31 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q31_t * pData);
# 1777 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_q15(
  arm_matrix_instance_q15 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q15_t * pData);
# 1791 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData);






  typedef struct
  {
    q15_t A0;




    q31_t A1;

    q15_t state[3];
    q15_t Kp;
    q15_t Ki;
    q15_t Kd;
  } arm_pid_instance_q15;




  typedef struct
  {
    q31_t A0;
    q31_t A1;
    q31_t A2;
    q31_t state[3];
    q31_t Kp;
    q31_t Ki;
    q31_t Kd;
  } arm_pid_instance_q31;




  typedef struct
  {
    float32_t A0;
    float32_t A1;
    float32_t A2;
    float32_t state[3];
    float32_t Kp;
    float32_t Ki;
    float32_t Kd;
  } arm_pid_instance_f32;
# 1852 "../../lib/cmsis/inc/arm_math.h"
  void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag);






  void arm_pid_reset_f32(
  arm_pid_instance_f32 * S);







  void arm_pid_init_q31(
  arm_pid_instance_q31 * S,
  int32_t resetStateFlag);







  void arm_pid_reset_q31(
  arm_pid_instance_q31 * S);







  void arm_pid_init_q15(
  arm_pid_instance_q15 * S,
  int32_t resetStateFlag);






  void arm_pid_reset_q15(
  arm_pid_instance_q15 * S);





  typedef struct
  {
    uint32_t nValues;
    float32_t x1;
    float32_t xSpacing;
    float32_t *pYData;
  } arm_linear_interp_instance_f32;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float32_t *pData;
  } arm_bilinear_interp_instance_f32;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q31_t *pData;
  } arm_bilinear_interp_instance_q31;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q15_t *pData;
  } arm_bilinear_interp_instance_q15;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q7_t *pData;
  } arm_bilinear_interp_instance_q7;
# 1961 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 1975 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 1989 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2003 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q15_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix2_instance_q15;


  arm_status arm_cfft_radix2_init_q15(
  arm_cfft_radix2_instance_q15 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_q15(
  const arm_cfft_radix2_instance_q15 * S,
  q15_t * pSrc);





  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q15_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix4_instance_q15;


  arm_status arm_cfft_radix4_init_q15(
  arm_cfft_radix4_instance_q15 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix4_q15(
  const arm_cfft_radix4_instance_q15 * S,
  q15_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q31_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix2_instance_q31;


  arm_status arm_cfft_radix2_init_q31(
  arm_cfft_radix2_instance_q31 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_q31(
  const arm_cfft_radix2_instance_q31 * S,
  q31_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q31_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix4_instance_q31;


  void arm_cfft_radix4_q31(
  const arm_cfft_radix4_instance_q31 * S,
  q31_t * pSrc);


  arm_status arm_cfft_radix4_init_q31(
  arm_cfft_radix4_instance_q31 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    float32_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
    float32_t onebyfftLen;
  } arm_cfft_radix2_instance_f32;


  arm_status arm_cfft_radix2_init_f32(
  arm_cfft_radix2_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_f32(
  const arm_cfft_radix2_instance_f32 * S,
  float32_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    float32_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
    float32_t onebyfftLen;
  } arm_cfft_radix4_instance_f32;


  arm_status arm_cfft_radix4_init_f32(
  arm_cfft_radix4_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix4_f32(
  const arm_cfft_radix4_instance_f32 * S,
  float32_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    const q15_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_q15;

void arm_cfft_q15(
    const arm_cfft_instance_q15 * S,
    q15_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    const q31_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_q31;

void arm_cfft_q31(
    const arm_cfft_instance_q31 * S,
    q31_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    const float32_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_f32;

  void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
  float32_t * p1,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);




  typedef struct
  {
    uint32_t fftLenReal;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    q15_t *pTwiddleAReal;
    q15_t *pTwiddleBReal;
    const arm_cfft_instance_q15 *pCfft;
  } arm_rfft_instance_q15;

  arm_status arm_rfft_init_q15(
  arm_rfft_instance_q15 * S,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst);




  typedef struct
  {
    uint32_t fftLenReal;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    q31_t *pTwiddleAReal;
    q31_t *pTwiddleBReal;
    const arm_cfft_instance_q31 *pCfft;
  } arm_rfft_instance_q31;

  arm_status arm_rfft_init_q31(
  arm_rfft_instance_q31 * S,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_q31(
  const arm_rfft_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst);




  typedef struct
  {
    uint32_t fftLenReal;
    uint16_t fftLenBy2;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    float32_t *pTwiddleAReal;
    float32_t *pTwiddleBReal;
    arm_cfft_radix4_instance_f32 *pCfft;
  } arm_rfft_instance_f32;

  arm_status arm_rfft_init_f32(
  arm_rfft_instance_f32 * S,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_f32(
  const arm_rfft_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst);




typedef struct
  {
    arm_cfft_instance_f32 Sint;
    uint16_t fftLenRFFT;
    float32_t * pTwiddleRFFT;
  } arm_rfft_fast_instance_f32 ;

arm_status arm_rfft_fast_init_f32 (
   arm_rfft_fast_instance_f32 * S,
   uint16_t fftLen);

void arm_rfft_fast_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut,
  uint8_t ifftFlag);




  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    float32_t normalize;
    float32_t *pTwiddle;
    float32_t *pCosFactor;
    arm_rfft_instance_f32 *pRfft;
    arm_cfft_radix4_instance_f32 *pCfft;
  } arm_dct4_instance_f32;
# 2341 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_f32(
  arm_dct4_instance_f32 * S,
  arm_rfft_instance_f32 * S_RFFT,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  float32_t normalize);
# 2356 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_f32(
  const arm_dct4_instance_f32 * S,
  float32_t * pState,
  float32_t * pInlineBuffer);





  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    q31_t normalize;
    q31_t *pTwiddle;
    q31_t *pCosFactor;
    arm_rfft_instance_q31 *pRfft;
    arm_cfft_radix4_instance_q31 *pCfft;
  } arm_dct4_instance_q31;
# 2387 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_q31(
  arm_dct4_instance_q31 * S,
  arm_rfft_instance_q31 * S_RFFT,
  arm_cfft_radix4_instance_q31 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  q31_t normalize);
# 2402 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_q31(
  const arm_dct4_instance_q31 * S,
  q31_t * pState,
  q31_t * pInlineBuffer);





  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    q15_t normalize;
    q15_t *pTwiddle;
    q15_t *pCosFactor;
    arm_rfft_instance_q15 *pRfft;
    arm_cfft_radix4_instance_q15 *pCfft;
  } arm_dct4_instance_q15;
# 2433 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_q15(
  arm_dct4_instance_q15 * S,
  arm_rfft_instance_q15 * S_RFFT,
  arm_cfft_radix4_instance_q15 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  q15_t normalize);
# 2448 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_q15(
  const arm_dct4_instance_q15 * S,
  q15_t * pState,
  q15_t * pInlineBuffer);
# 2461 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);
# 2475 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 2489 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 2503 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2517 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);
# 2531 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 2545 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 2559 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2573 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_f32(
  float32_t * pSrc,
  float32_t scale,
  float32_t * pDst,
  uint32_t blockSize);
# 2588 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q7(
  q7_t * pSrc,
  q7_t scaleFract,
  int8_t shift,
  q7_t * pDst,
  uint32_t blockSize);
# 2604 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q15(
  q15_t * pSrc,
  q15_t scaleFract,
  int8_t shift,
  q15_t * pDst,
  uint32_t blockSize);
# 2620 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q31(
  q31_t * pSrc,
  q31_t scaleFract,
  int8_t shift,
  q31_t * pDst,
  uint32_t blockSize);
# 2634 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2646 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2658 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2670 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2683 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result);
# 2697 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  uint32_t blockSize,
  q31_t * result);
# 2711 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  uint32_t blockSize,
  q63_t * result);
# 2725 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  uint32_t blockSize,
  q63_t * result);
# 2739 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q7(
  q7_t * pSrc,
  int8_t shiftBits,
  q7_t * pDst,
  uint32_t blockSize);
# 2753 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q15(
  q15_t * pSrc,
  int8_t shiftBits,
  q15_t * pDst,
  uint32_t blockSize);
# 2767 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q31(
  q31_t * pSrc,
  int8_t shiftBits,
  q31_t * pDst,
  uint32_t blockSize);
# 2781 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_f32(
  float32_t * pSrc,
  float32_t offset,
  float32_t * pDst,
  uint32_t blockSize);
# 2795 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q7(
  q7_t * pSrc,
  q7_t offset,
  q7_t * pDst,
  uint32_t blockSize);
# 2809 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q15(
  q15_t * pSrc,
  q15_t offset,
  q15_t * pDst,
  uint32_t blockSize);
# 2823 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q31(
  q31_t * pSrc,
  q31_t offset,
  q31_t * pDst,
  uint32_t blockSize);
# 2836 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2848 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2860 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2872 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2884 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2896 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2908 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2920 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2932 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_f32(
  float32_t value,
  float32_t * pDst,
  uint32_t blockSize);
# 2944 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q7(
  q7_t value,
  q7_t * pDst,
  uint32_t blockSize);
# 2956 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q15(
  q15_t value,
  q15_t * pDst,
  uint32_t blockSize);
# 2968 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q31(
  q31_t value,
  q31_t * pDst,
  uint32_t blockSize);
# 2982 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst);
# 3000 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3018 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 3034 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_q15(
          q15_t * pSrcA,
          uint32_t srcALen,
          q15_t * pSrcB,
          uint32_t srcBLen,
          q15_t * pDst);
# 3052 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3070 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 3086 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 3104 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3122 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst);
# 3141 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3164 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3187 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3208 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3231 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3254 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3275 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3298 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3321 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);





  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    q15_t *pCoeffs;
    q15_t *pState;
  } arm_fir_decimate_instance_q15;




  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    q31_t *pCoeffs;
    q31_t *pState;
  } arm_fir_decimate_instance_q31;




  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    float32_t *pCoeffs;
    float32_t *pState;
  } arm_fir_decimate_instance_f32;
# 3372 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3390 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_f32(
  arm_fir_decimate_instance_f32 * S,
  uint16_t numTaps,
  uint8_t M,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);
# 3406 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3420 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_fast_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3438 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_q15(
  arm_fir_decimate_instance_q15 * S,
  uint16_t numTaps,
  uint8_t M,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 3454 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_q31(
  const arm_fir_decimate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3467 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_fast_q31(
  arm_fir_decimate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3485 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_q31(
  arm_fir_decimate_instance_q31 * S,
  uint16_t numTaps,
  uint8_t M,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    q15_t *pCoeffs;
    q15_t *pState;
  } arm_fir_interpolate_instance_q15;




  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    q31_t *pCoeffs;
    q31_t *pState;
  } arm_fir_interpolate_instance_q31;




  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    float32_t *pCoeffs;
    float32_t *pState;
  } arm_fir_interpolate_instance_f32;
# 3535 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_q15(
  const arm_fir_interpolate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3553 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_q15(
  arm_fir_interpolate_instance_q15 * S,
  uint8_t L,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 3569 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_q31(
  const arm_fir_interpolate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3587 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_q31(
  arm_fir_interpolate_instance_q31 * S,
  uint8_t L,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 3603 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3621 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_f32(
  arm_fir_interpolate_instance_f32 * S,
  uint8_t L,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint8_t numStages;
    q63_t *pState;
    q31_t *pCoeffs;
    uint8_t postShift;
  } arm_biquad_cas_df1_32x64_ins_q31;
# 3648 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cas_df1_32x64_q31(
  const arm_biquad_cas_df1_32x64_ins_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3662 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cas_df1_32x64_init_q31(
  arm_biquad_cas_df1_32x64_ins_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q63_t * pState,
  uint8_t postShift);





  typedef struct
  {
    uint8_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_cascade_df2T_instance_f32;




  typedef struct
  {
    uint8_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_cascade_stereo_df2T_instance_f32;




  typedef struct
  {
    uint8_t numStages;
    float64_t *pState;
    float64_t *pCoeffs;
  } arm_biquad_cascade_df2T_instance_f64;
# 3708 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3722 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_stereo_df2T_f32(
  const arm_biquad_cascade_stereo_df2T_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3736 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_f64(
  const arm_biquad_cascade_df2T_instance_f64 * S,
  float64_t * pSrc,
  float64_t * pDst,
  uint32_t blockSize);
# 3750 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_init_f32(
  arm_biquad_cascade_df2T_instance_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3764 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_stereo_df2T_init_f32(
  arm_biquad_cascade_stereo_df2T_instance_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3778 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_init_f64(
  arm_biquad_cascade_df2T_instance_f64 * S,
  uint8_t numStages,
  float64_t * pCoeffs,
  float64_t * pState);





  typedef struct
  {
    uint16_t numStages;
    q15_t *pState;
    q15_t *pCoeffs;
  } arm_fir_lattice_instance_q15;




  typedef struct
  {
    uint16_t numStages;
    q31_t *pState;
    q31_t *pCoeffs;
  } arm_fir_lattice_instance_q31;




  typedef struct
  {
    uint16_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_fir_lattice_instance_f32;
# 3823 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_q15(
  arm_fir_lattice_instance_q15 * S,
  uint16_t numStages,
  q15_t * pCoeffs,
  q15_t * pState);
# 3837 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_q15(
  const arm_fir_lattice_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3851 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_q31(
  arm_fir_lattice_instance_q31 * S,
  uint16_t numStages,
  q31_t * pCoeffs,
  q31_t * pState);
# 3865 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_q31(
  const arm_fir_lattice_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3879 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_f32(
  arm_fir_lattice_instance_f32 * S,
  uint16_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3893 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_f32(
  const arm_fir_lattice_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numStages;
    q15_t *pState;
    q15_t *pkCoeffs;
    q15_t *pvCoeffs;
  } arm_iir_lattice_instance_q15;




  typedef struct
  {
    uint16_t numStages;
    q31_t *pState;
    q31_t *pkCoeffs;
    q31_t *pvCoeffs;
  } arm_iir_lattice_instance_q31;




  typedef struct
  {
    uint16_t numStages;
    float32_t *pState;
    float32_t *pkCoeffs;
    float32_t *pvCoeffs;
  } arm_iir_lattice_instance_f32;
# 3941 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_f32(
  const arm_iir_lattice_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3957 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_f32(
  arm_iir_lattice_instance_f32 * S,
  uint16_t numStages,
  float32_t * pkCoeffs,
  float32_t * pvCoeffs,
  float32_t * pState,
  uint32_t blockSize);
# 3973 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_q31(
  const arm_iir_lattice_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3989 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_q31(
  arm_iir_lattice_instance_q31 * S,
  uint16_t numStages,
  q31_t * pkCoeffs,
  q31_t * pvCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 4005 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_q15(
  const arm_iir_lattice_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 4021 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_q15(
  arm_iir_lattice_instance_q15 * S,
  uint16_t numStages,
  q15_t * pkCoeffs,
  q15_t * pvCoeffs,
  q15_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
    float32_t mu;
  } arm_lms_instance_f32;
# 4051 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_f32(
  const arm_lms_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pRef,
  float32_t * pOut,
  float32_t * pErr,
  uint32_t blockSize);
# 4069 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_f32(
  arm_lms_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  float32_t mu,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
    q15_t mu;
    uint32_t postShift;
  } arm_lms_instance_q15;
# 4101 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_q15(
  arm_lms_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  q15_t mu,
  uint32_t blockSize,
  uint32_t postShift);
# 4120 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_q15(
  const arm_lms_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pRef,
  q15_t * pOut,
  q15_t * pErr,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
    q31_t mu;
    uint32_t postShift;
  } arm_lms_instance_q31;
# 4151 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_q31(
  const arm_lms_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pRef,
  q31_t * pOut,
  q31_t * pErr,
  uint32_t blockSize);
# 4170 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_q31(
  arm_lms_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  q31_t mu,
  uint32_t blockSize,
  uint32_t postShift);





  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
    float32_t mu;
    float32_t energy;
    float32_t x0;
  } arm_lms_norm_instance_f32;
# 4203 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_f32(
  arm_lms_norm_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pRef,
  float32_t * pOut,
  float32_t * pErr,
  uint32_t blockSize);
# 4221 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_f32(
  arm_lms_norm_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  float32_t mu,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
    q31_t mu;
    uint8_t postShift;
    q31_t *recipTable;
    q31_t energy;
    q31_t x0;
  } arm_lms_norm_instance_q31;
# 4255 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_q31(
  arm_lms_norm_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pRef,
  q31_t * pOut,
  q31_t * pErr,
  uint32_t blockSize);
# 4274 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_q31(
  arm_lms_norm_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  q31_t mu,
  uint32_t blockSize,
  uint8_t postShift);





  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
    q15_t mu;
    uint8_t postShift;
    q15_t *recipTable;
    q15_t energy;
    q15_t x0;
  } arm_lms_norm_instance_q15;
# 4309 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_q15(
  arm_lms_norm_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pRef,
  q15_t * pOut,
  q15_t * pErr,
  uint32_t blockSize);
# 4328 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_q15(
  arm_lms_norm_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  q15_t mu,
  uint32_t blockSize,
  uint8_t postShift);
# 4346 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst);
# 4363 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch);
# 4381 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 4398 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 4415 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch);
# 4432 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 4448 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 4466 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 4484 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst);





  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    float32_t *pState;
    float32_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_f32;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q31_t *pState;
    q31_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q31;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q15_t *pState;
    q15_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q15;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q7_t *pState;
    q7_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q7;
# 4553 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_f32(
  arm_fir_sparse_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  float32_t * pScratchIn,
  uint32_t blockSize);
# 4571 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_f32(
  arm_fir_sparse_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4589 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q31(
  arm_fir_sparse_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  q31_t * pScratchIn,
  uint32_t blockSize);
# 4607 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q31(
  arm_fir_sparse_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4626 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q15(
  arm_fir_sparse_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  q15_t * pScratchIn,
  q31_t * pScratchOut,
  uint32_t blockSize);
# 4645 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q15(
  arm_fir_sparse_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4664 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q7(
  arm_fir_sparse_instance_q7 * S,
  q7_t * pSrc,
  q7_t * pDst,
  q7_t * pScratchIn,
  q31_t * pScratchOut,
  uint32_t blockSize);
# 4683 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q7(
  arm_fir_sparse_instance_q7 * S,
  uint16_t numTaps,
  q7_t * pCoeffs,
  q7_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4699 "../../lib/cmsis/inc/arm_math.h"
  void arm_sin_cos_f32(
  float32_t theta,
  float32_t * pSinVal,
  float32_t * pCosVal);
# 4711 "../../lib/cmsis/inc/arm_math.h"
  void arm_sin_cos_q31(
  q31_t theta,
  q31_t * pSinVal,
  q31_t * pCosVal);
# 4723 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_conj_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);







  void arm_cmplx_conj_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 4746 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_conj_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 4758 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);
# 4770 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 4782 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 4860 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
    float32_t out;


    out = (S->A0 * in) +
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);

  }
# 4894 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_pid_q31(
  arm_pid_instance_q31 * S,
  q31_t in)
  {
    q63_t acc;
    q31_t out;


    acc = (q63_t) S->A0 * in;


    acc += (q63_t) S->A1 * S->state[0];


    acc += (q63_t) S->A2 * S->state[1];


    out = (q31_t) (acc >> 31u);


    out += S->state[2];


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);
  }
# 4941 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_pid_q15(
  arm_pid_instance_q15 * S,
  q15_t in)
  {
    q63_t acc;
    q15_t out;


    int32_t *vstate;




    acc = (q31_t) __SMUAD((uint32_t)S->A0, (uint32_t)in);


    vstate = ((int32_t *)(S->state));
    acc = (q63_t)__SMLALD((uint32_t)S->A1, (uint32_t)*vstate, (uint64_t)acc);
# 4969 "../../lib/cmsis/inc/arm_math.h"
    acc += (q31_t) S->state[2] << 15;


    out = (q15_t) (({ int32_t __RES, __ARG1 = ((acc >> 15)); __asm ("ssat %0, %1, %2" : "=r" (__RES) : "I" (16), "r" (__ARG1) ); __RES; }));


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);
  }
# 4995 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * src,
  arm_matrix_instance_f32 * dst);
# 5007 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_inverse_f64(
  const arm_matrix_instance_f64 * src,
  arm_matrix_instance_f64 * dst);
# 5052 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_clarke_f32(
  float32_t Ia,
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {

    *pIalpha = Ia;


    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
  }
# 5079 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_clarke_q31(
  q31_t Ia,
  q31_t Ib,
  q31_t * pIalpha,
  q31_t * pIbeta)
  {
    q31_t product1, product2;


    *pIalpha = Ia;


    product1 = (q31_t) (((q63_t) Ia * 0x24F34E8B) >> 30);


    product2 = (q31_t) (((q63_t) Ib * 0x49E69D16) >> 30);


    *pIbeta = __QADD(product1, product2);
  }
# 5110 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_q31(
  q7_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 5149 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_clarke_f32(
  float32_t Ialpha,
  float32_t Ibeta,
  float32_t * pIa,
  float32_t * pIb)
  {

    *pIa = Ialpha;


    *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
  }
# 5176 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_clarke_q31(
  q31_t Ialpha,
  q31_t Ibeta,
  q31_t * pIa,
  q31_t * pIb)
  {
    q31_t product1, product2;


    *pIa = Ialpha;


    product1 = (q31_t) (((q63_t) (Ialpha) * (0x40000000)) >> 31);


    product2 = (q31_t) (((q63_t) (Ibeta) * (0x6ED9EBA1)) >> 31);


    *pIb = __QSUB(product2, product1);
  }
# 5207 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_q15(
  q7_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 5259 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_park_f32(
  float32_t Ialpha,
  float32_t Ibeta,
  float32_t * pId,
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {

    *pId = Ialpha * cosVal + Ibeta * sinVal;


    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
  }
# 5290 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_park_q31(
  q31_t Ialpha,
  q31_t Ibeta,
  q31_t * pId,
  q31_t * pIq,
  q31_t sinVal,
  q31_t cosVal)
  {
    q31_t product1, product2;
    q31_t product3, product4;


    product1 = (q31_t) (((q63_t) (Ialpha) * (cosVal)) >> 31);


    product2 = (q31_t) (((q63_t) (Ibeta) * (sinVal)) >> 31);



    product3 = (q31_t) (((q63_t) (Ialpha) * (sinVal)) >> 31);


    product4 = (q31_t) (((q63_t) (Ibeta) * (cosVal)) >> 31);


    *pId = __QADD(product1, product2);


    *pIq = __QSUB(product4, product3);
  }
# 5331 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_float(
  q7_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 5372 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_park_f32(
  float32_t Id,
  float32_t Iq,
  float32_t * pIalpha,
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {

    *pIalpha = Id * cosVal - Iq * sinVal;


    *pIbeta = Id * sinVal + Iq * cosVal;
  }
# 5403 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_park_q31(
  q31_t Id,
  q31_t Iq,
  q31_t * pIalpha,
  q31_t * pIbeta,
  q31_t sinVal,
  q31_t cosVal)
  {
    q31_t product1, product2;
    q31_t product3, product4;


    product1 = (q31_t) (((q63_t) (Id) * (cosVal)) >> 31);


    product2 = (q31_t) (((q63_t) (Iq) * (sinVal)) >> 31);



    product3 = (q31_t) (((q63_t) (Id) * (sinVal)) >> 31);


    product4 = (q31_t) (((q63_t) (Iq) * (cosVal)) >> 31);


    *pIalpha = __QSUB(product1, product2);


    *pIbeta = __QADD(product4, product3);
  }
# 5445 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_float(
  q31_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 5498 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_linear_interp_f32(
  arm_linear_interp_instance_f32 * S,
  float32_t x)
  {
    float32_t y;
    float32_t x0, x1;
    float32_t y0, y1;
    float32_t xSpacing = S->xSpacing;
    int32_t i;
    float32_t *pYData = S->pYData;


    i = (int32_t) ((x - S->x1) / xSpacing);

    if (i < 0)
    {

      y = pYData[0];
    }
    else if ((uint32_t)i >= S->nValues)
    {

      y = pYData[S->nValues - 1];
    }
    else
    {

      x0 = S->x1 + i * xSpacing;
      x1 = S->x1 + (i + 1) * xSpacing;


      y0 = pYData[i];
      y1 = pYData[i + 1];


      y = y0 + (x - x0) * ((y1 - y0) / (x1 - x0));

    }


    return (y);
  }
# 5555 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_linear_interp_q31(
  q31_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q31_t y;
    q31_t y0, y1;
    q31_t fract;
    int32_t index;




    index = ((x & (q31_t)0xFFF00000) >> 20);

    if (index >= (int32_t)(nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else if (index < 0)
    {
      return (pYData[0]);
    }
    else
    {


      fract = (x & 0x000FFFFF) << 11;


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((q31_t) ((q63_t) y0 * (0x7FFFFFFF - fract) >> 32));


      y += ((q31_t) (((q63_t) y1 * fract) >> 32));


      return (y << 1u);
    }
  }
# 5613 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_linear_interp_q15(
  q15_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q63_t y;
    q15_t y0, y1;
    q31_t fract;
    int32_t index;




    index = ((x & (int32_t)0xFFF00000) >> 20);

    if (index >= (int32_t)(nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else if (index < 0)
    {
      return (pYData[0]);
    }
    else
    {


      fract = (x & 0x000FFFFF);


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((q63_t) y0 * (0xFFFFF - fract));


      y += ((q63_t) y1 * (fract));


      return (q15_t) (y >> 20);
    }
  }
# 5670 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q7_t arm_linear_interp_q7(
  q7_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q31_t y;
    q7_t y0, y1;
    q31_t fract;
    uint32_t index;




    if (x < 0)
    {
      return (pYData[0]);
    }
    index = (x >> 20) & 0xfff;

    if (index >= (nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else
    {


      fract = (x & 0x000FFFFF);


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((y0 * (0xFFFFF - fract)));


      y += (y1 * fract);


      return (q7_t) (y >> 20);
     }
  }
# 5723 "../../lib/cmsis/inc/arm_math.h"
  float32_t arm_sin_f32(
  float32_t x);







  q31_t arm_sin_q31(
  q31_t x);







  q15_t arm_sin_q15(
  q15_t x);







  float32_t arm_cos_f32(
  float32_t x);







  q31_t arm_cos_q31(
  q31_t x);







  q15_t arm_cos_q15(
  q15_t x);
# 5810 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
    {






      *pOut = __builtin_sqrtf(in);






      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
      return (ARM_MATH_ARGUMENT_ERROR);
    }
  }
# 5846 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut);
# 5858 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_sqrt_q15(
  q15_t in,
  q15_t * pOut);
# 5870 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_circularWrite_f32(
  int32_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const int32_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }






  __attribute__((always_inline)) static inline void arm_circularRead_f32(
  int32_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  int32_t * dst,
  int32_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;
    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (int32_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularWrite_q15(
  q15_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const q15_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularRead_q15(
  q15_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  q15_t * dst,
  q15_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;

    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (q15_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularWrite_q7(
  q7_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const q7_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularRead_q7(
  q7_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  q7_t * dst,
  q7_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;

    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (q7_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }
# 6173 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult);
# 6185 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6197 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult);
# 6209 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6221 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * pResult);
# 6233 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6245 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6257 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6269 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6281 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6293 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6305 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6317 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6329 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6341 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6353 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6365 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6377 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);
# 6389 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 6401 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 6415 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  uint32_t numSamples,
  q31_t * realResult,
  q31_t * imagResult);
# 6431 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  uint32_t numSamples,
  q63_t * realResult,
  q63_t * imagResult);
# 6447 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t numSamples,
  float32_t * realResult,
  float32_t * imagResult);
# 6462 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_q15(
  q15_t * pSrcCmplx,
  q15_t * pSrcReal,
  q15_t * pCmplxDst,
  uint32_t numSamples);
# 6476 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_q31(
  q31_t * pSrcCmplx,
  q31_t * pSrcReal,
  q31_t * pCmplxDst,
  uint32_t numSamples);
# 6490 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_f32(
  float32_t * pSrcCmplx,
  float32_t * pSrcReal,
  float32_t * pCmplxDst,
  uint32_t numSamples);
# 6504 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * result,
  uint32_t * index);
# 6518 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex);
# 6532 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult,
  uint32_t * pIndex);
# 6546 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex);
# 6560 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * pResult,
  uint32_t * pIndex);
# 6574 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex);
# 6588 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult,
  uint32_t * pIndex);
# 6602 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex);
# 6616 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t numSamples);
# 6630 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t numSamples);
# 6644 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples);
# 6657 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q31(
  float32_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 6669 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q15(
  float32_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 6681 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q7(
  float32_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6693 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_q15(
  q31_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 6705 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_q7(
  q31_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6717 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_float(
  q15_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 6729 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_q31(
  q15_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 6741 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_q7(
  q15_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6817 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_bilinear_interp_f32(
  const arm_bilinear_interp_instance_f32 * S,
  float32_t X,
  float32_t Y)
  {
    float32_t out;
    float32_t f00, f01, f10, f11;
    float32_t *pData = S->pData;
    int32_t xIndex, yIndex, index;
    float32_t xdiff, ydiff;
    float32_t b1, b2, b3, b4;

    xIndex = (int32_t) X;
    yIndex = (int32_t) Y;



    if (xIndex < 0 || xIndex > (S->numRows - 1) || yIndex < 0 || yIndex > (S->numCols - 1))
    {
      return (0);
    }


    index = (xIndex - 1) + (yIndex - 1) * S->numCols;



    f00 = pData[index];
    f01 = pData[index + 1];


    index = (xIndex - 1) + (yIndex) * S->numCols;



    f10 = pData[index];
    f11 = pData[index + 1];


    b1 = f00;
    b2 = f01 - f00;
    b3 = f10 - f00;
    b4 = f00 - f01 - f10 + f11;


    xdiff = X - xIndex;


    ydiff = Y - yIndex;


    out = b1 + b2 * xdiff + b3 * ydiff + b4 * xdiff * ydiff;


    return (out);
  }
# 6883 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_bilinear_interp_q31(
  arm_bilinear_interp_instance_q31 * S,
  q31_t X,
  q31_t Y)
  {
    q31_t out;
    q31_t acc = 0;
    q31_t xfract, yfract;
    q31_t x1, x2, y1, y2;
    int32_t rI, cI;
    q31_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & 0x000FFFFF) << 11u;


    x1 = pYData[(rI) + (int32_t)nCols * (cI) ];
    x2 = pYData[(rI) + (int32_t)nCols * (cI) + 1];



    yfract = (Y & 0x000FFFFF) << 11u;


    y1 = pYData[(rI) + (int32_t)nCols * (cI + 1) ];
    y2 = pYData[(rI) + (int32_t)nCols * (cI + 1) + 1];


    out = ((q31_t) (((q63_t) x1 * (0x7FFFFFFF - xfract)) >> 32));
    acc = ((q31_t) (((q63_t) out * (0x7FFFFFFF - yfract)) >> 32));


    out = ((q31_t) ((q63_t) x2 * (0x7FFFFFFF - yfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (xfract) >> 32));


    out = ((q31_t) ((q63_t) y1 * (0x7FFFFFFF - xfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));


    out = ((q31_t) ((q63_t) y2 * (xfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));


    return ((q31_t)(acc << 2));
  }
# 6957 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_bilinear_interp_q15(
  arm_bilinear_interp_instance_q15 * S,
  q31_t X,
  q31_t Y)
  {
    q63_t acc = 0;
    q31_t out;
    q15_t x1, x2, y1, y2;
    q31_t xfract, yfract;
    int32_t rI, cI;
    q15_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & 0x000FFFFF);


    x1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) ];
    x2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) + 1];



    yfract = (Y & 0x000FFFFF);


    y1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) ];
    y2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) + 1];





    out = (q31_t) (((q63_t) x1 * (0xFFFFF - xfract)) >> 4u);
    acc = ((q63_t) out * (0xFFFFF - yfract));


    out = (q31_t) (((q63_t) x2 * (0xFFFFF - yfract)) >> 4u);
    acc += ((q63_t) out * (xfract));


    out = (q31_t) (((q63_t) y1 * (0xFFFFF - xfract)) >> 4u);
    acc += ((q63_t) out * (yfract));


    out = (q31_t) (((q63_t) y2 * (xfract)) >> 4u);
    acc += ((q63_t) out * (yfract));



    return ((q15_t)(acc >> 36));
  }
# 7035 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q7_t arm_bilinear_interp_q7(
  arm_bilinear_interp_instance_q7 * S,
  q31_t X,
  q31_t Y)
  {
    q63_t acc = 0;
    q31_t out;
    q31_t xfract, yfract;
    q7_t x1, x2, y1, y2;
    int32_t rI, cI;
    q7_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & (q31_t)0x000FFFFF);


    x1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) ];
    x2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) + 1];



    yfract = (Y & (q31_t)0x000FFFFF);


    y1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) ];
    y2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) + 1];


    out = ((x1 * (0xFFFFF - xfract)));
    acc = (((q63_t) out * (0xFFFFF - yfract)));


    out = ((x2 * (0xFFFFF - yfract)));
    acc += (((q63_t) out * (xfract)));


    out = ((y1 * (0xFFFFF - xfract)));
    acc += (((q63_t) out * (yfract)));


    out = ((y2 * (yfract)));
    acc += (((q63_t) out * (xfract)));


    return ((q7_t)(acc >> 40));
  }
# 7218 "../../lib/cmsis/inc/arm_math.h"
#pragma GCC diagnostic pop
# 11 "omv/py/py_image.c" 2
# 1 "./omv/py/mp.h" 1
# 11 "./omv/py/mp.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 1 3
# 36 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 37 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 1 3 4
# 40 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 3 4

# 40 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3





typedef __gnuc_va_list va_list;
# 61 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 1 3
# 28 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef int register_t;
# 62 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 63 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h" 1 3
# 20 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h" 3
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 65 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/endian.h" 1 3





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_endian.h" 1 3
# 7 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/endian.h" 2 3
# 68 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 1 3
# 25 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_sigset.h" 1 3
# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_sigset.h" 3
typedef unsigned long __sigset_t;
# 26 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 1 3
# 35 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 3
typedef __suseconds_t suseconds_t;




typedef long time_t;
# 52 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 3
struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};
# 27 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 1 3
# 38 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timespec.h" 1 3
# 45 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 2 3
# 58 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 28 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3



typedef __sigset_t sigset_t;
# 45 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3
typedef unsigned long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 71 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3


int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, struct timeval *__timeout)
                                                   ;

int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set)

                           ;



# 69 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3




typedef __uint32_t in_addr_t;




typedef __uint16_t in_port_t;
# 87 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;







typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;
# 135 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 173 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;
# 236 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __int64_t sbintime_t;


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_pthreadtypes.h" 1 3
# 240 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/types.h" 1 3
# 241 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 62 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3




typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/stdio.h" 1 3
# 80 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3
# 181 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
char * ctermid (char *);




FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *restrict, const char *restrict, FILE *restrict);
void setbuf (FILE *restrict, char *restrict);
int setvbuf (FILE *restrict, char *restrict, int, size_t);
int fprintf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *restrict, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *restrict, int, FILE *restrict);
int fputc (int, FILE *);
int fputs (const char *restrict, FILE *restrict);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite (const void * restrict , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *restrict, fpos_t *restrict);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *restrict _name, const char *restrict _type);
int sprintf (char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 257 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int snprintf (char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vsnprintf (char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vfscanf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsscanf (const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
# 284 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
# 339 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);


int pclose (FILE *);
FILE * popen (const char *, const char *);



void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);



int getw (FILE *);
int putw (int, FILE *);


int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 374 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int dprintf (int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *restrict, size_t, const char *restrict);


FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;



int renameat (int, const char *, int, const char *);






int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *restrict, int, FILE *restrict);
char * _fgets_unlocked_r (struct _reent *, char *restrict, int, FILE *restrict);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *restrict, size_t, const char *restrict);
FILE * _fopen_r (struct _reent *, const char *restrict, const char *restrict);
FILE * _freopen_r (struct _reent *, const char *restrict, const char *restrict, FILE *restrict);
int _fprintf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *restrict, FILE *restrict);
int _fputs_unlocked_r (struct _reent *, const char *restrict, FILE *restrict);
size_t _fread_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fread_unlocked_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
int _fscanf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fwrite_unlocked_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite_unlocked (const void * restrict , size_t _size, size_t _n, FILE *);
# 574 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 598 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
# 684 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
static __inline__ int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 767 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3

# 12 "./omv/py/mp.h" 2

# 1 "../../py/mpconfig.h" 1
# 45 "../../py/mpconfig.h"
# 1 "./mpconfigport.h" 1
# 30 "./mpconfigport.h"
       







# 1 "mcusdk/drivers/fsl_common.h" 1
# 38 "mcusdk/drivers/fsl_common.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 39 "mcusdk/drivers/fsl_common.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdbool.h" 1 3 4
# 40 "mcusdk/drivers/fsl_common.h" 2


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 1 3
# 10 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 17 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/stdlib.h" 1 3
# 21 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/alloca.h" 1 3
# 23 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3
# 33 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3


typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar)



                                ;
void * calloc (size_t __nmemb, size_t __size) ;
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) ;
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size) ;
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *restrict, const char *restrict, size_t);
int _mbtowc_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *restrict, const char *restrict, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
size_t wcstombs (char *restrict, const wchar_t *restrict, size_t);
size_t _wcstombs_r (struct _reent *, char *restrict, const wchar_t *restrict, size_t, _mbstate_t *);


char * mkdtemp (char *);






int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void * realloc (void * __r, size_t __size) ;

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)))
     __attribute__((__alloc_size__(3)));
void * reallocf (void * __r, size_t __size);


char * realpath (const char *restrict path, char *restrict resolved_path);


int rpmatch (const char *response);




void srand (unsigned __seed);
double strtod (const char *restrict __n, char **restrict __end_PTR);
double _strtod_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR);

float strtof (const char *restrict __n, char **restrict __end_PTR);







long strtol (const char *restrict __n, char **restrict __end_PTR, int __base);
long _strtol_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long strtoul (const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
# 188 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void * __arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 221 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char *restrict __n, char **restrict __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long strtoull (const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int __attribute__((__nonnull__(1))) posix_memalign (void **, size_t, size_t);


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) ;
void * _calloc_r (struct _reent *, size_t, size_t) ;
void _free_r (struct _reent *, void *) ;
void * _realloc_r (struct _reent *, void *, size_t) ;
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 308 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
void qsort_r (void * __base, size_t __nmemb, size_t __size, void * __thunk, int (*_compar)(void *, const void *, const void *))
             __asm__ ("" "__bsd_qsort_r");
# 318 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *restrict, char **restrict);

extern long double strtold (const char *restrict, char **restrict);
# 335 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3

# 43 "mcusdk/drivers/fsl_common.h" 2





# 1 "mcusdk/fsl_device_registers.h" 1
# 51 "mcusdk/fsl_device_registers.h"
# 1 "mcusdk/MIMXRT1052.h" 1
# 94 "mcusdk/MIMXRT1052.h"

# 94 "mcusdk/MIMXRT1052.h"
typedef enum IRQn {

  NotAvail_IRQn = -128,


  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,


  DMA0_DMA16_IRQn = 0,
  DMA1_DMA17_IRQn = 1,
  DMA2_DMA18_IRQn = 2,
  DMA3_DMA19_IRQn = 3,
  DMA4_DMA20_IRQn = 4,
  DMA5_DMA21_IRQn = 5,
  DMA6_DMA22_IRQn = 6,
  DMA7_DMA23_IRQn = 7,
  DMA8_DMA24_IRQn = 8,
  DMA9_DMA25_IRQn = 9,
  DMA10_DMA26_IRQn = 10,
  DMA11_DMA27_IRQn = 11,
  DMA12_DMA28_IRQn = 12,
  DMA13_DMA29_IRQn = 13,
  DMA14_DMA30_IRQn = 14,
  DMA15_DMA31_IRQn = 15,
  DMA_ERROR_IRQn = 16,
  CTI0_ERROR_IRQn = 17,
  CTI1_ERROR_IRQn = 18,
  CORE_IRQn = 19,
  LPUART1_IRQn = 20,
  LPUART2_IRQn = 21,
  LPUART3_IRQn = 22,
  LPUART4_IRQn = 23,
  LPUART5_IRQn = 24,
  LPUART6_IRQn = 25,
  LPUART7_IRQn = 26,
  LPUART8_IRQn = 27,
  LPI2C1_IRQn = 28,
  LPI2C2_IRQn = 29,
  LPI2C3_IRQn = 30,
  LPI2C4_IRQn = 31,
  LPSPI1_IRQn = 32,
  LPSPI2_IRQn = 33,
  LPSPI3_IRQn = 34,
  LPSPI4_IRQn = 35,
  CAN1_IRQn = 36,
  CAN2_IRQn = 37,
  FLEXRAM_IRQn = 38,
  KPP_IRQn = 39,
  TSC_DIG_IRQn = 40,
  GPR_IRQ_IRQn = 41,
  LCDIF_IRQn = 42,
  CSI_IRQn = 43,
  PXP_IRQn = 44,
  WDOG2_IRQn = 45,
  SNVS_HP_WRAPPER_IRQn = 46,
  SNVS_HP_WRAPPER_TZ_IRQn = 47,
  SNVS_LP_WRAPPER_IRQn = 48,
  CSU_IRQn = 49,
  DCP_IRQn = 50,
  DCP_VMI_IRQn = 51,
  Reserved68_IRQn = 52,
  TRNG_IRQn = 53,
  SJC_IRQn = 54,
  BEE_IRQn = 55,
  SAI1_IRQn = 56,
  SAI2_IRQn = 57,
  SAI3_RX_IRQn = 58,
  SAI3_TX_IRQn = 59,
  SPDIF_IRQn = 60,
  ANATOP_EVENT0_IRQn = 61,
  ANATOP_EVENT1_IRQn = 62,
  ANATOP_TAMP_LOW_HIGH_IRQn = 63,
  ANATOP_TEMP_PANIC_IRQn = 64,
  USB_PHY1_IRQn = 65,
  USB_PHY2_IRQn = 66,
  ADC1_IRQn = 67,
  ADC2_IRQn = 68,
  DCDC_IRQn = 69,
  Reserved86_IRQn = 70,
  Reserved87_IRQn = 71,
  GPIO1_INT0_IRQn = 72,
  GPIO1_INT1_IRQn = 73,
  GPIO1_INT2_IRQn = 74,
  GPIO1_INT3_IRQn = 75,
  GPIO1_INT4_IRQn = 76,
  GPIO1_INT5_IRQn = 77,
  GPIO1_INT6_IRQn = 78,
  GPIO1_INT7_IRQn = 79,
  GPIO1_Combined_0_15_IRQn = 80,
  GPIO1_Combined_16_31_IRQn = 81,
  GPIO2_Combined_0_15_IRQn = 82,
  GPIO2_Combined_16_31_IRQn = 83,
  GPIO3_Combined_0_15_IRQn = 84,
  GPIO3_Combined_16_31_IRQn = 85,
  GPIO4_Combined_0_15_IRQn = 86,
  GPIO4_Combined_16_31_IRQn = 87,
  GPIO5_Combined_0_15_IRQn = 88,
  GPIO5_Combined_16_31_IRQn = 89,
  FLEXIO1_IRQn = 90,
  FLEXIO2_IRQn = 91,
  WDOG1_IRQn = 92,
  RTWDOG_IRQn = 93,
  EWM_IRQn = 94,
  CCM_1_IRQn = 95,
  CCM_2_IRQn = 96,
  GPC_IRQn = 97,
  SRC_IRQn = 98,
  Reserved115_IRQn = 99,
  GPT1_IRQn = 100,
  GPT2_IRQn = 101,
  PWM1_0_IRQn = 102,
  PWM1_1_IRQn = 103,
  PWM1_2_IRQn = 104,
  PWM1_3_IRQn = 105,
  PWM1_FAULT_IRQn = 106,
  Reserved123_IRQn = 107,
  FLEXSPI_IRQn = 108,
  SEMC_IRQn = 109,
  USDHC1_IRQn = 110,
  USDHC2_IRQn = 111,
  USB_OTG2_IRQn = 112,
  USB_OTG1_IRQn = 113,
  ENET_IRQn = 114,
  ENET_1588_Timer_IRQn = 115,
  XBAR1_IRQ_0_1_IRQn = 116,
  XBAR1_IRQ_2_3_IRQn = 117,
  ADC_ETC_IRQ0_IRQn = 118,
  ADC_ETC_IRQ1_IRQn = 119,
  ADC_ETC_IRQ2_IRQn = 120,
  ADC_ETC_ERROR_IRQ_IRQn = 121,
  PIT_IRQn = 122,
  ACMP1_IRQn = 123,
  ACMP2_IRQn = 124,
  ACMP3_IRQn = 125,
  ACMP4_IRQn = 126,
  Reserved143_IRQn = 127,
  Reserved144_IRQn = 128,
  ENC1_IRQn = 129,
  ENC2_IRQn = 130,
  ENC3_IRQn = 131,
  ENC4_IRQn = 132,
  TMR1_IRQn = 133,
  TMR2_IRQn = 134,
  TMR3_IRQn = 135,
  TMR4_IRQn = 136,
  PWM2_0_IRQn = 137,
  PWM2_1_IRQn = 138,
  PWM2_2_IRQn = 139,
  PWM2_3_IRQn = 140,
  PWM2_FAULT_IRQn = 141,
  PWM3_0_IRQn = 142,
  PWM3_1_IRQn = 143,
  PWM3_2_IRQn = 144,
  PWM3_3_IRQn = 145,
  PWM3_FAULT_IRQn = 146,
  PWM4_0_IRQn = 147,
  PWM4_1_IRQn = 148,
  PWM4_2_IRQn = 149,
  PWM4_3_IRQn = 150,
  PWM4_FAULT_IRQn = 151,
  Reserved168_IRQn = 152,
  Reserved169_IRQn = 153,
  Reserved170_IRQn = 154,
  Reserved171_IRQn = 155,
  Reserved172_IRQn = 156,
  Reserved173_IRQn = 157,
  SJC_ARM_DEBUG_IRQn = 158,
  NMI_WAKEUP_IRQn = 159
} IRQn_Type;
# 294 "mcusdk/MIMXRT1052.h"
# 1 "../../lib/cmsis/inc/core_cm7.h" 1
# 274 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 313 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 331 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 386 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 421 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RSERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 455 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHPR[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t ID_PFR[2U];
  volatile const uint32_t ID_DFR;
  volatile const uint32_t ID_AFR;
  volatile const uint32_t ID_MFR[4U];
  volatile const uint32_t ID_ISAR[5U];
        uint32_t RESERVED0[1U];
  volatile const uint32_t CLIDR;
  volatile const uint32_t CTR;
  volatile const uint32_t CCSIDR;
  volatile uint32_t CSSELR;
  volatile uint32_t CPACR;
        uint32_t RESERVED3[93U];
  volatile uint32_t STIR;
        uint32_t RESERVED4[15U];
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
        uint32_t RESERVED5[1U];
  volatile uint32_t ICIALLU;
        uint32_t RESERVED6[1U];
  volatile uint32_t ICIMVAU;
  volatile uint32_t DCIMVAC;
  volatile uint32_t DCISW;
  volatile uint32_t DCCMVAU;
  volatile uint32_t DCCMVAC;
  volatile uint32_t DCCSW;
  volatile uint32_t DCCIMVAC;
  volatile uint32_t DCCISW;
        uint32_t RESERVED7[6U];
  volatile uint32_t ITCMCR;
  volatile uint32_t DTCMCR;
  volatile uint32_t AHBPCR;
  volatile uint32_t CACR;
  volatile uint32_t AHBSCR;
        uint32_t RESERVED8[1U];
  volatile uint32_t ABFSR;
} SCB_Type;
# 921 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 961 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 1013 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[29U];
  volatile uint32_t IWR;
  volatile const uint32_t IRR;
  volatile uint32_t IMCR;
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 1116 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
        uint32_t RESERVED3[981U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
} DWT_Type;
# 1266 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1425 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1521 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1630 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1854 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1885 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1902 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1921 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1940 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1959 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1974 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1991 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 2013 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
}
# 2035 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 4)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 4)));
  }
}
# 2060 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 2087 "../../lib/cmsis/inc/core_cm7.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 2110 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;
}
# 2125 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return vectors[(int32_t)IRQn + 16];
}






static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}







# 1 "../../lib/cmsis/inc/mpu_armv7.h" 1
# 107 "../../lib/cmsis/inc/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  __DSB();
  __ISB();
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

}



static inline void ARM_MPU_Disable(void)
{
  __DSB();
  __ISB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void orderedCpy(volatile uint32_t* dst, const uint32_t* 
# 173 "../../lib/cmsis/inc/mpu_armv7.h" 3
                                                                       restrict 
# 173 "../../lib/cmsis/inc/mpu_armv7.h"
                                                                                  src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    orderedCpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  orderedCpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 2158 "../../lib/cmsis/inc/core_cm7.h" 2
# 2177 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x220U)
  {
    return 2U;
  }
  else if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2218 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_EnableICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR |= (uint32_t)(1UL << 17U);
    __DSB();
    __ISB();

}






static inline void SCB_DisableICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR &= ~(uint32_t)(1UL << 17U);
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();

}






static inline void SCB_InvalidateICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();

}






static inline void SCB_EnableDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);
    __DSB();

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR |= (uint32_t)(1UL << 16U);

    __DSB();
    __ISB();

}






static inline void SCB_DisableDCache (void)
{

    register uint32_t ccsidr;
    register uint32_t sets;
    register uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR &= ~(uint32_t)(1UL << 16U);
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                       ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_InvalidateDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_CleanDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
   __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCSW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_CleanInvalidateDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                       ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}
# 2453 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCIMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2480 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2507 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCIMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2553 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 4) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2583 "../../lib/cmsis/inc/core_cm7.h"
extern volatile int32_t ITM_RxBuffer;
# 2595 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2616 "../../lib/cmsis/inc/core_cm7.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2636 "../../lib/cmsis/inc/core_cm7.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 295 "mcusdk/MIMXRT1052.h" 2
# 1 "mcusdk/system_MIMXRT1052.h" 1
# 106 "mcusdk/system_MIMXRT1052.h"
extern uint32_t SystemCoreClock;
# 115 "mcusdk/system_MIMXRT1052.h"
void SystemInit (void);
# 124 "mcusdk/system_MIMXRT1052.h"
void SystemCoreClockUpdate (void);
# 296 "mcusdk/MIMXRT1052.h" 2
# 325 "mcusdk/MIMXRT1052.h"
typedef enum _dma_request_source
{
    kDmaRequestMuxFlexIO1Request0Request1 = 0|0x100U,
    kDmaRequestMuxFlexIO2Request0Request1 = 1|0x100U,
    kDmaRequestMuxLPUART1Tx = 2|0x100U,
    kDmaRequestMuxLPUART1Rx = 3|0x100U,
    kDmaRequestMuxLPUART3Tx = 4|0x100U,
    kDmaRequestMuxLPUART3Rx = 5|0x100U,
    kDmaRequestMuxLPUART5Tx = 6|0x100U,
    kDmaRequestMuxLPUART5Rx = 7|0x100U,
    kDmaRequestMuxLPUART7Tx = 8|0x100U,
    kDmaRequestMuxLPUART7Rx = 9|0x100U,
    kDmaRequestMuxCSI = 12|0x100U,
    kDmaRequestMuxLPSPI1Rx = 13|0x100U,
    kDmaRequestMuxLPSPI1Tx = 14|0x100U,
    kDmaRequestMuxLPSPI3Rx = 15|0x100U,
    kDmaRequestMuxLPSPI3Tx = 16|0x100U,
    kDmaRequestMuxLPI2C1 = 17|0x100U,
    kDmaRequestMuxLPI2C3 = 18|0x100U,
    kDmaRequestMuxSai1Rx = 19|0x100U,
    kDmaRequestMuxSai1Tx = 20|0x100U,
    kDmaRequestMuxSai2Rx = 21|0x100U,
    kDmaRequestMuxSai2Tx = 22|0x100U,
    kDmaRequestMuxADC_ETC = 23|0x100U,
    kDmaRequestMuxADC1 = 24|0x100U,
    kDmaRequestMuxACMP1 = 25|0x100U,
    kDmaRequestMuxACMP2 = 26|0x100U,
    kDmaRequestMuxFlexSPIRx = 28|0x100U,
    kDmaRequestMuxFlexSPITx = 29|0x100U,
    kDmaRequestMuxXBAR1Request0 = 30|0x100U,
    kDmaRequestMuxXBAR1Request1 = 31|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub0 = 32|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub1 = 33|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub2 = 34|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub3 = 35|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub0 = 36|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub1 = 37|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub2 = 38|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub3 = 39|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub0 = 40|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub1 = 41|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub2 = 42|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub3 = 43|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub0 = 44|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub1 = 45|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub2 = 46|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub3 = 47|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer0 = 48|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer1 = 49|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer2 = 50|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer3 = 51|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer0Cmpld2Timer1 = 52|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer1Cmpld2Timer0 = 53|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer2Cmpld2Timer3 = 54|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer3Cmpld2Timer2 = 55|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer0Cmpld1Timer0Cmpld2Timer1 = 56|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer1Cmpld1Timer0Cmpld2Timer1 = 57|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer2Cmpld1Timer0Cmpld2Timer1 = 58|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer3Cmpld1Timer0Cmpld2Timer1 = 59|0x100U,
    kDmaRequestMuxFlexIO1Request2Request3 = 64|0x100U,
    kDmaRequestMuxFlexIO2Request2Request3 = 65|0x100U,
    kDmaRequestMuxLPUART2Tx = 66|0x100U,
    kDmaRequestMuxLPUART2Rx = 67|0x100U,
    kDmaRequestMuxLPUART4Tx = 68|0x100U,
    kDmaRequestMuxLPUART4Rx = 69|0x100U,
    kDmaRequestMuxLPUART6Tx = 70|0x100U,
    kDmaRequestMuxLPUART6Rx = 71|0x100U,
    kDmaRequestMuxLPUART8Tx = 72|0x100U,
    kDmaRequestMuxLPUART8Rx = 73|0x100U,
    kDmaRequestMuxPxp = 75|0x100U,
    kDmaRequestMuxLCDIF = 76|0x100U,
    kDmaRequestMuxLPSPI2Rx = 77|0x100U,
    kDmaRequestMuxLPSPI2Tx = 78|0x100U,
    kDmaRequestMuxLPSPI4Rx = 79|0x100U,
    kDmaRequestMuxLPSPI4Tx = 80|0x100U,
    kDmaRequestMuxLPI2C2 = 81|0x100U,
    kDmaRequestMuxLPI2C4 = 82|0x100U,
    kDmaRequestMuxSai3Rx = 83|0x100U,
    kDmaRequestMuxSai3Tx = 84|0x100U,
    kDmaRequestMuxSpdifRx = 85|0x100U,
    kDmaRequestMuxSpdifTx = 86|0x100U,
    kDmaRequestMuxADC2 = 88|0x100U,
    kDmaRequestMuxACMP3 = 89|0x100U,
    kDmaRequestMuxACMP4 = 90|0x100U,
    kDmaRequestMuxEnetTimer0 = 92|0x100U,
    kDmaRequestMuxEnetTimer1 = 93|0x100U,
    kDmaRequestMuxXBAR1Request2 = 94|0x100U,
    kDmaRequestMuxXBAR1Request3 = 95|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub0 = 96|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub1 = 97|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub2 = 98|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub3 = 99|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub0 = 100|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub1 = 101|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub2 = 102|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub3 = 103|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub0 = 104|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub1 = 105|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub2 = 106|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub3 = 107|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub0 = 108|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub1 = 109|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub2 = 110|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub3 = 111|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer0 = 112|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer1 = 113|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer2 = 114|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer3 = 115|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer0Cmpld2Timer1 = 116|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer1Cmpld2Timer0 = 117|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer2Cmpld2Timer3 = 118|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer3Cmpld2Timer2 = 119|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer0Cmpld1Timer0Cmpld2Timer1 = 120|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer1Cmpld1Timer0Cmpld2Timer1 = 121|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer2Cmpld1Timer0Cmpld2Timer1 = 122|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer3Cmpld1Timer0Cmpld2Timer1 = 123|0x100U,
} dma_request_source_t;
# 456 "mcusdk/MIMXRT1052.h"
typedef enum _iomuxc_sw_mux_ctl_pad
{
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00 = 0U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01 = 1U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02 = 2U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03 = 3U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04 = 4U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05 = 5U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06 = 6U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07 = 7U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08 = 8U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09 = 9U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10 = 10U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11 = 11U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12 = 12U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13 = 13U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14 = 14U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15 = 15U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16 = 16U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17 = 17U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18 = 18U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19 = 19U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20 = 20U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21 = 21U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 22U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 23U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 24U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 25U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 26U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 27U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 28U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 29U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30 = 30U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31 = 31U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32 = 32U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33 = 33U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34 = 34U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35 = 35U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36 = 36U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37 = 37U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38 = 38U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39 = 39U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 40U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41 = 41U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00 = 42U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01 = 43U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 44U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03 = 45U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04 = 46U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05 = 47U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06 = 48U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07 = 49U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08 = 50U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09 = 51U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10 = 52U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11 = 53U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12 = 54U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13 = 55U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14 = 56U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15 = 57U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00 = 58U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01 = 59U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02 = 60U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03 = 61U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04 = 62U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05 = 63U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06 = 64U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07 = 65U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08 = 66U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09 = 67U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10 = 68U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11 = 69U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12 = 70U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13 = 71U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14 = 72U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15 = 73U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_00 = 74U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 75U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 76U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 77U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_04 = 78U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_05 = 79U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_06 = 80U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_07 = 81U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_08 = 82U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_09 = 83U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_10 = 84U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_11 = 85U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_12 = 86U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_13 = 87U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_14 = 88U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_15 = 89U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_00 = 90U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_01 = 91U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_02 = 92U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_03 = 93U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_04 = 94U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_05 = 95U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_06 = 96U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_07 = 97U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_08 = 98U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_09 = 99U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_10 = 100U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_11 = 101U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_12 = 102U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_13 = 103U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_14 = 104U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_15 = 105U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 106U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 107U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 108U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 109U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 110U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 111U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00 = 112U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01 = 113U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02 = 114U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03 = 115U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04 = 116U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05 = 117U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06 = 118U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07 = 119U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08 = 120U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09 = 121U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10 = 122U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11 = 123U,
} iomuxc_sw_mux_ctl_pad_t;
# 597 "mcusdk/MIMXRT1052.h"
typedef enum _iomuxc_sw_pad_ctl_pad
{
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00 = 0U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01 = 1U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02 = 2U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03 = 3U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04 = 4U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05 = 5U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06 = 6U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07 = 7U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08 = 8U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09 = 9U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10 = 10U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11 = 11U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12 = 12U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13 = 13U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14 = 14U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15 = 15U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16 = 16U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17 = 17U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18 = 18U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19 = 19U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20 = 20U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21 = 21U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 22U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 23U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 24U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 25U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 26U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 27U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 28U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 29U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30 = 30U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31 = 31U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32 = 32U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33 = 33U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34 = 34U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35 = 35U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36 = 36U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37 = 37U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38 = 38U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39 = 39U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 40U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41 = 41U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00 = 42U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01 = 43U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02 = 44U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03 = 45U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04 = 46U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05 = 47U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06 = 48U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07 = 49U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08 = 50U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09 = 51U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10 = 52U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11 = 53U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12 = 54U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13 = 55U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14 = 56U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15 = 57U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00 = 58U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01 = 59U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02 = 60U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03 = 61U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04 = 62U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05 = 63U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06 = 64U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07 = 65U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08 = 66U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09 = 67U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10 = 68U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11 = 69U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12 = 70U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13 = 71U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14 = 72U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15 = 73U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_00 = 74U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = 75U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = 76U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = 77U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_04 = 78U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_05 = 79U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_06 = 80U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_07 = 81U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_08 = 82U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_09 = 83U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_10 = 84U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_11 = 85U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_12 = 86U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_13 = 87U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_14 = 88U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_15 = 89U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_00 = 90U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_01 = 91U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_02 = 92U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_03 = 93U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_04 = 94U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_05 = 95U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_06 = 96U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_07 = 97U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_08 = 98U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_09 = 99U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_10 = 100U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_11 = 101U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_12 = 102U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_13 = 103U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_14 = 104U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_15 = 105U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = 106U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = 107U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = 108U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = 109U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = 110U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = 111U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00 = 112U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01 = 113U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02 = 114U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03 = 115U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04 = 116U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05 = 117U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06 = 118U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07 = 119U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08 = 120U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09 = 121U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10 = 122U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11 = 123U,
} iomuxc_sw_pad_ctl_pad_t;






typedef enum _iomuxc_select_input
{
    kIOMUXC_ANATOP_USB_OTG1_ID_SELECT_INPUT = 0U,
    kIOMUXC_ANATOP_USB_OTG2_ID_SELECT_INPUT = 1U,
    kIOMUXC_CCM_PMIC_READY_SELECT_INPUT = 2U,
    kIOMUXC_CSI_DATA02_SELECT_INPUT = 3U,
    kIOMUXC_CSI_DATA03_SELECT_INPUT = 4U,
    kIOMUXC_CSI_DATA04_SELECT_INPUT = 5U,
    kIOMUXC_CSI_DATA05_SELECT_INPUT = 6U,
    kIOMUXC_CSI_DATA06_SELECT_INPUT = 7U,
    kIOMUXC_CSI_DATA07_SELECT_INPUT = 8U,
    kIOMUXC_CSI_DATA08_SELECT_INPUT = 9U,
    kIOMUXC_CSI_DATA09_SELECT_INPUT = 10U,
    kIOMUXC_CSI_HSYNC_SELECT_INPUT = 11U,
    kIOMUXC_CSI_PIXCLK_SELECT_INPUT = 12U,
    kIOMUXC_CSI_VSYNC_SELECT_INPUT = 13U,
    kIOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT = 14U,
    kIOMUXC_ENET_MDIO_SELECT_INPUT = 15U,
    kIOMUXC_ENET0_RXDATA_SELECT_INPUT = 16U,
    kIOMUXC_ENET1_RXDATA_SELECT_INPUT = 17U,
    kIOMUXC_ENET_RXEN_SELECT_INPUT = 18U,
    kIOMUXC_ENET_RXERR_SELECT_INPUT = 19U,
    kIOMUXC_ENET0_TIMER_SELECT_INPUT = 20U,
    kIOMUXC_ENET_TXCLK_SELECT_INPUT = 21U,
    kIOMUXC_FLEXCAN1_RX_SELECT_INPUT = 22U,
    kIOMUXC_FLEXCAN2_RX_SELECT_INPUT = 23U,
    kIOMUXC_FLEXPWM1_PWMA3_SELECT_INPUT = 24U,
    kIOMUXC_FLEXPWM1_PWMA0_SELECT_INPUT = 25U,
    kIOMUXC_FLEXPWM1_PWMA1_SELECT_INPUT = 26U,
    kIOMUXC_FLEXPWM1_PWMA2_SELECT_INPUT = 27U,
    kIOMUXC_FLEXPWM1_PWMB3_SELECT_INPUT = 28U,
    kIOMUXC_FLEXPWM1_PWMB0_SELECT_INPUT = 29U,
    kIOMUXC_FLEXPWM1_PWMB1_SELECT_INPUT = 30U,
    kIOMUXC_FLEXPWM1_PWMB2_SELECT_INPUT = 31U,
    kIOMUXC_FLEXPWM2_PWMA3_SELECT_INPUT = 32U,
    kIOMUXC_FLEXPWM2_PWMA0_SELECT_INPUT = 33U,
    kIOMUXC_FLEXPWM2_PWMA1_SELECT_INPUT = 34U,
    kIOMUXC_FLEXPWM2_PWMA2_SELECT_INPUT = 35U,
    kIOMUXC_FLEXPWM2_PWMB3_SELECT_INPUT = 36U,
    kIOMUXC_FLEXPWM2_PWMB0_SELECT_INPUT = 37U,
    kIOMUXC_FLEXPWM2_PWMB1_SELECT_INPUT = 38U,
    kIOMUXC_FLEXPWM2_PWMB2_SELECT_INPUT = 39U,
    kIOMUXC_FLEXPWM4_PWMA0_SELECT_INPUT = 40U,
    kIOMUXC_FLEXPWM4_PWMA1_SELECT_INPUT = 41U,
    kIOMUXC_FLEXPWM4_PWMA2_SELECT_INPUT = 42U,
    kIOMUXC_FLEXPWM4_PWMA3_SELECT_INPUT = 43U,
    kIOMUXC_FLEXSPIA_DQS_SELECT_INPUT = 44U,
    kIOMUXC_FLEXSPIA_DATA0_SELECT_INPUT = 45U,
    kIOMUXC_FLEXSPIA_DATA1_SELECT_INPUT = 46U,
    kIOMUXC_FLEXSPIA_DATA2_SELECT_INPUT = 47U,
    kIOMUXC_FLEXSPIA_DATA3_SELECT_INPUT = 48U,
    kIOMUXC_FLEXSPIB_DATA0_SELECT_INPUT = 49U,
    kIOMUXC_FLEXSPIB_DATA1_SELECT_INPUT = 50U,
    kIOMUXC_FLEXSPIB_DATA2_SELECT_INPUT = 51U,
    kIOMUXC_FLEXSPIB_DATA3_SELECT_INPUT = 52U,
    kIOMUXC_FLEXSPIA_SCK_SELECT_INPUT = 53U,
    kIOMUXC_LPI2C1_SCL_SELECT_INPUT = 54U,
    kIOMUXC_LPI2C1_SDA_SELECT_INPUT = 55U,
    kIOMUXC_LPI2C2_SCL_SELECT_INPUT = 56U,
    kIOMUXC_LPI2C2_SDA_SELECT_INPUT = 57U,
    kIOMUXC_LPI2C3_SCL_SELECT_INPUT = 58U,
    kIOMUXC_LPI2C3_SDA_SELECT_INPUT = 59U,
    kIOMUXC_LPI2C4_SCL_SELECT_INPUT = 60U,
    kIOMUXC_LPI2C4_SDA_SELECT_INPUT = 61U,
    kIOMUXC_LPSPI1_PCS0_SELECT_INPUT = 62U,
    kIOMUXC_LPSPI1_SCK_SELECT_INPUT = 63U,
    kIOMUXC_LPSPI1_SDI_SELECT_INPUT = 64U,
    kIOMUXC_LPSPI1_SDO_SELECT_INPUT = 65U,
    kIOMUXC_LPSPI2_PCS0_SELECT_INPUT = 66U,
    kIOMUXC_LPSPI2_SCK_SELECT_INPUT = 67U,
    kIOMUXC_LPSPI2_SDI_SELECT_INPUT = 68U,
    kIOMUXC_LPSPI2_SDO_SELECT_INPUT = 69U,
    kIOMUXC_LPSPI3_PCS0_SELECT_INPUT = 70U,
    kIOMUXC_LPSPI3_SCK_SELECT_INPUT = 71U,
    kIOMUXC_LPSPI3_SDI_SELECT_INPUT = 72U,
    kIOMUXC_LPSPI3_SDO_SELECT_INPUT = 73U,
    kIOMUXC_LPSPI4_PCS0_SELECT_INPUT = 74U,
    kIOMUXC_LPSPI4_SCK_SELECT_INPUT = 75U,
    kIOMUXC_LPSPI4_SDI_SELECT_INPUT = 76U,
    kIOMUXC_LPSPI4_SDO_SELECT_INPUT = 77U,
    kIOMUXC_LPUART2_RX_SELECT_INPUT = 78U,
    kIOMUXC_LPUART2_TX_SELECT_INPUT = 79U,
    kIOMUXC_LPUART3_CTS_B_SELECT_INPUT = 80U,
    kIOMUXC_LPUART3_RX_SELECT_INPUT = 81U,
    kIOMUXC_LPUART3_TX_SELECT_INPUT = 82U,
    kIOMUXC_LPUART4_RX_SELECT_INPUT = 83U,
    kIOMUXC_LPUART4_TX_SELECT_INPUT = 84U,
    kIOMUXC_LPUART5_RX_SELECT_INPUT = 85U,
    kIOMUXC_LPUART5_TX_SELECT_INPUT = 86U,
    kIOMUXC_LPUART6_RX_SELECT_INPUT = 87U,
    kIOMUXC_LPUART6_TX_SELECT_INPUT = 88U,
    kIOMUXC_LPUART7_RX_SELECT_INPUT = 89U,
    kIOMUXC_LPUART7_TX_SELECT_INPUT = 90U,
    kIOMUXC_LPUART8_RX_SELECT_INPUT = 91U,
    kIOMUXC_LPUART8_TX_SELECT_INPUT = 92U,
    kIOMUXC_NMI_SELECT_INPUT = 93U,
    kIOMUXC_QTIMER2_TIMER0_SELECT_INPUT = 94U,
    kIOMUXC_QTIMER2_TIMER1_SELECT_INPUT = 95U,
    kIOMUXC_QTIMER2_TIMER2_SELECT_INPUT = 96U,
    kIOMUXC_QTIMER2_TIMER3_SELECT_INPUT = 97U,
    kIOMUXC_QTIMER3_TIMER0_SELECT_INPUT = 98U,
    kIOMUXC_QTIMER3_TIMER1_SELECT_INPUT = 99U,
    kIOMUXC_QTIMER3_TIMER2_SELECT_INPUT = 100U,
    kIOMUXC_QTIMER3_TIMER3_SELECT_INPUT = 101U,
    kIOMUXC_SAI1_MCLK2_SELECT_INPUT = 102U,
    kIOMUXC_SAI1_RX_BCLK_SELECT_INPUT = 103U,
    kIOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 104U,
    kIOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 105U,
    kIOMUXC_SAI1_RX_DATA2_SELECT_INPUT = 106U,
    kIOMUXC_SAI1_RX_DATA3_SELECT_INPUT = 107U,
    kIOMUXC_SAI1_RX_SYNC_SELECT_INPUT = 108U,
    kIOMUXC_SAI1_TX_BCLK_SELECT_INPUT = 109U,
    kIOMUXC_SAI1_TX_SYNC_SELECT_INPUT = 110U,
    kIOMUXC_SAI2_MCLK2_SELECT_INPUT = 111U,
    kIOMUXC_SAI2_RX_BCLK_SELECT_INPUT = 112U,
    kIOMUXC_SAI2_RX_DATA0_SELECT_INPUT = 113U,
    kIOMUXC_SAI2_RX_SYNC_SELECT_INPUT = 114U,
    kIOMUXC_SAI2_TX_BCLK_SELECT_INPUT = 115U,
    kIOMUXC_SAI2_TX_SYNC_SELECT_INPUT = 116U,
    kIOMUXC_SPDIF_IN_SELECT_INPUT = 117U,
    kIOMUXC_USB_OTG2_OC_SELECT_INPUT = 118U,
    kIOMUXC_USB_OTG1_OC_SELECT_INPUT = 119U,
    kIOMUXC_USDHC1_CD_B_SELECT_INPUT = 120U,
    kIOMUXC_USDHC1_WP_SELECT_INPUT = 121U,
    kIOMUXC_USDHC2_CLK_SELECT_INPUT = 122U,
    kIOMUXC_USDHC2_CD_B_SELECT_INPUT = 123U,
    kIOMUXC_USDHC2_CMD_SELECT_INPUT = 124U,
    kIOMUXC_USDHC2_DATA0_SELECT_INPUT = 125U,
    kIOMUXC_USDHC2_DATA1_SELECT_INPUT = 126U,
    kIOMUXC_USDHC2_DATA2_SELECT_INPUT = 127U,
    kIOMUXC_USDHC2_DATA3_SELECT_INPUT = 128U,
    kIOMUXC_USDHC2_DATA4_SELECT_INPUT = 129U,
    kIOMUXC_USDHC2_DATA5_SELECT_INPUT = 130U,
    kIOMUXC_USDHC2_DATA6_SELECT_INPUT = 131U,
    kIOMUXC_USDHC2_DATA7_SELECT_INPUT = 132U,
    kIOMUXC_USDHC2_WP_SELECT_INPUT = 133U,
    kIOMUXC_XBAR1_IN02_SELECT_INPUT = 134U,
    kIOMUXC_XBAR1_IN03_SELECT_INPUT = 135U,
    kIOMUXC_XBAR1_IN04_SELECT_INPUT = 136U,
    kIOMUXC_XBAR1_IN05_SELECT_INPUT = 137U,
    kIOMUXC_XBAR1_IN06_SELECT_INPUT = 138U,
    kIOMUXC_XBAR1_IN07_SELECT_INPUT = 139U,
    kIOMUXC_XBAR1_IN08_SELECT_INPUT = 140U,
    kIOMUXC_XBAR1_IN09_SELECT_INPUT = 141U,
    kIOMUXC_XBAR1_IN17_SELECT_INPUT = 142U,
    kIOMUXC_XBAR1_IN18_SELECT_INPUT = 143U,
    kIOMUXC_XBAR1_IN20_SELECT_INPUT = 144U,
    kIOMUXC_XBAR1_IN22_SELECT_INPUT = 145U,
    kIOMUXC_XBAR1_IN23_SELECT_INPUT = 146U,
    kIOMUXC_XBAR1_IN24_SELECT_INPUT = 147U,
    kIOMUXC_XBAR1_IN14_SELECT_INPUT = 148U,
    kIOMUXC_XBAR1_IN15_SELECT_INPUT = 149U,
    kIOMUXC_XBAR1_IN16_SELECT_INPUT = 150U,
    kIOMUXC_XBAR1_IN25_SELECT_INPUT = 151U,
    kIOMUXC_XBAR1_IN19_SELECT_INPUT = 152U,
    kIOMUXC_XBAR1_IN21_SELECT_INPUT = 153U,
} iomuxc_select_input_t;



typedef enum _xbar_input_signal
{
    kXBARA1_InputLogicLow = 0|0x100U,
    kXBARA1_InputLogicHigh = 1|0x100U,
    kXBARA1_InputIomuxXbarIn02 = 2|0x100U,
    kXBARA1_InputIomuxXbarIn03 = 3|0x100U,
    kXBARA1_InputIomuxXbarInout04 = 4|0x100U,
    kXBARA1_InputIomuxXbarInout05 = 5|0x100U,
    kXBARA1_InputIomuxXbarInout06 = 6|0x100U,
    kXBARA1_InputIomuxXbarInout07 = 7|0x100U,
    kXBARA1_InputIomuxXbarInout08 = 8|0x100U,
    kXBARA1_InputIomuxXbarInout09 = 9|0x100U,
    kXBARA1_InputIomuxXbarInout10 = 10|0x100U,
    kXBARA1_InputIomuxXbarInout11 = 11|0x100U,
    kXBARA1_InputIomuxXbarInout12 = 12|0x100U,
    kXBARA1_InputIomuxXbarInout13 = 13|0x100U,
    kXBARA1_InputIomuxXbarInout14 = 14|0x100U,
    kXBARA1_InputIomuxXbarInout15 = 15|0x100U,
    kXBARA1_InputIomuxXbarInout16 = 16|0x100U,
    kXBARA1_InputIomuxXbarInout17 = 17|0x100U,
    kXBARA1_InputIomuxXbarInout18 = 18|0x100U,
    kXBARA1_InputIomuxXbarInout19 = 19|0x100U,
    kXBARA1_InputIomuxXbarIn20 = 20|0x100U,
    kXBARA1_InputIomuxXbarIn21 = 21|0x100U,
    kXBARA1_InputIomuxXbarIn22 = 22|0x100U,
    kXBARA1_InputIomuxXbarIn23 = 23|0x100U,
    kXBARA1_InputIomuxXbarIn24 = 24|0x100U,
    kXBARA1_InputIomuxXbarIn25 = 25|0x100U,
    kXBARA1_InputAcmp1Out = 26|0x100U,
    kXBARA1_InputAcmp2Out = 27|0x100U,
    kXBARA1_InputAcmp3Out = 28|0x100U,
    kXBARA1_InputAcmp4Out = 29|0x100U,
    kXBARA1_InputRESERVED30 = 30|0x100U,
    kXBARA1_InputRESERVED31 = 31|0x100U,
    kXBARA1_InputQtimer3Tmr0Output = 32|0x100U,
    kXBARA1_InputQtimer3Tmr1Output = 33|0x100U,
    kXBARA1_InputQtimer3Tmr2Output = 34|0x100U,
    kXBARA1_InputQtimer3Tmr3Output = 35|0x100U,
    kXBARA1_InputQtimer4Tmr0Output = 36|0x100U,
    kXBARA1_InputQtimer4Tmr1Output = 37|0x100U,
    kXBARA1_InputQtimer4Tmr2Output = 38|0x100U,
    kXBARA1_InputQtimer4Tmr3Output = 39|0x100U,
    kXBARA1_InputFlexpwm1Pwm1OutTrig01 = 40|0x100U,
    kXBARA1_InputFlexpwm1Pwm2OutTrig01 = 41|0x100U,
    kXBARA1_InputFlexpwm1Pwm3OutTrig01 = 42|0x100U,
    kXBARA1_InputFlexpwm1Pwm4OutTrig01 = 43|0x100U,
    kXBARA1_InputFlexpwm2Pwm1OutTrig01 = 44|0x100U,
    kXBARA1_InputFlexpwm2Pwm2OutTrig01 = 45|0x100U,
    kXBARA1_InputFlexpwm2Pwm3OutTrig01 = 46|0x100U,
    kXBARA1_InputFlexpwm2Pwm4OutTrig01 = 47|0x100U,
    kXBARA1_InputFlexpwm3Pwm1OutTrig01 = 48|0x100U,
    kXBARA1_InputFlexpwm3Pwm2OutTrig01 = 49|0x100U,
    kXBARA1_InputFlexpwm3Pwm3OutTrig01 = 50|0x100U,
    kXBARA1_InputFlexpwm3Pwm4OutTrig01 = 51|0x100U,
    kXBARA1_InputFlexpwm4Pwm1OutTrig01 = 52|0x100U,
    kXBARA1_InputFlexpwm4Pwm2OutTrig01 = 53|0x100U,
    kXBARA1_InputFlexpwm4Pwm3OutTrig01 = 54|0x100U,
    kXBARA1_InputFlexpwm4Pwm4OutTrig01 = 55|0x100U,
    kXBARA1_InputPitTrigger0 = 56|0x100U,
    kXBARA1_InputPitTrigger1 = 57|0x100U,
    kXBARA1_InputPitTrigger2 = 58|0x100U,
    kXBARA1_InputPitTrigger3 = 59|0x100U,
    kXBARA1_InputEnc1PosMatch = 60|0x100U,
    kXBARA1_InputEnc2PosMatch = 61|0x100U,
    kXBARA1_InputEnc3PosMatch = 62|0x100U,
    kXBARA1_InputEnc4PosMatch = 63|0x100U,
    kXBARA1_InputDmaDone0 = 64|0x100U,
    kXBARA1_InputDmaDone1 = 65|0x100U,
    kXBARA1_InputDmaDone2 = 66|0x100U,
    kXBARA1_InputDmaDone3 = 67|0x100U,
    kXBARA1_InputDmaDone4 = 68|0x100U,
    kXBARA1_InputDmaDone5 = 69|0x100U,
    kXBARA1_InputDmaDone6 = 70|0x100U,
    kXBARA1_InputDmaDone7 = 71|0x100U,
    kXBARA1_InputAoi1Out0 = 72|0x100U,
    kXBARA1_InputAoi1Out1 = 73|0x100U,
    kXBARA1_InputAoi1Out2 = 74|0x100U,
    kXBARA1_InputAoi1Out3 = 75|0x100U,
    kXBARA1_InputAoi2Out0 = 76|0x100U,
    kXBARA1_InputAoi2Out1 = 77|0x100U,
    kXBARA1_InputAoi2Out2 = 78|0x100U,
    kXBARA1_InputAoi2Out3 = 79|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco0 = 80|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco1 = 81|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco2 = 82|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco3 = 83|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco0 = 84|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco1 = 85|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco2 = 86|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco3 = 87|0x100U,
    kXBARB2_InputLogicLow = 0|0x200U,
    kXBARB2_InputLogicHigh = 1|0x200U,
    kXBARB2_InputRESERVED2 = 2|0x200U,
    kXBARB2_InputRESERVED3 = 3|0x200U,
    kXBARB2_InputRESERVED4 = 4|0x200U,
    kXBARB2_InputRESERVED5 = 5|0x200U,
    kXBARB2_InputAcmp1Out = 6|0x200U,
    kXBARB2_InputAcmp2Out = 7|0x200U,
    kXBARB2_InputAcmp3Out = 8|0x200U,
    kXBARB2_InputAcmp4Out = 9|0x200U,
    kXBARB2_InputRESERVED10 = 10|0x200U,
    kXBARB2_InputRESERVED11 = 11|0x200U,
    kXBARB2_InputQtimer3Tmr0Output = 12|0x200U,
    kXBARB2_InputQtimer3Tmr1Output = 13|0x200U,
    kXBARB2_InputQtimer3Tmr2Output = 14|0x200U,
    kXBARB2_InputQtimer3Tmr3Output = 15|0x200U,
    kXBARB2_InputQtimer4Tmr0Output = 16|0x200U,
    kXBARB2_InputQtimer4Tmr1Output = 17|0x200U,
    kXBARB2_InputQtimer4Tmr2Output = 18|0x200U,
    kXBARB2_InputQtimer4Tmr3Output = 19|0x200U,
    kXBARB2_InputFlexpwm1Pwm1OutTrig01 = 20|0x200U,
    kXBARB2_InputFlexpwm1Pwm2OutTrig01 = 21|0x200U,
    kXBARB2_InputFlexpwm1Pwm3OutTrig01 = 22|0x200U,
    kXBARB2_InputFlexpwm1Pwm4OutTrig01 = 23|0x200U,
    kXBARB2_InputFlexpwm2Pwm1OutTrig01 = 24|0x200U,
    kXBARB2_InputFlexpwm2Pwm2OutTrig01 = 25|0x200U,
    kXBARB2_InputFlexpwm2Pwm3OutTrig01 = 26|0x200U,
    kXBARB2_InputFlexpwm2Pwm4OutTrig01 = 27|0x200U,
    kXBARB2_InputFlexpwm3Pwm1OutTrig01 = 28|0x200U,
    kXBARB2_InputFlexpwm3Pwm2OutTrig01 = 29|0x200U,
    kXBARB2_InputFlexpwm3Pwm3OutTrig01 = 30|0x200U,
    kXBARB2_InputFlexpwm3Pwm4OutTrig01 = 31|0x200U,
    kXBARB2_InputFlexpwm4Pwm1OutTrig01 = 32|0x200U,
    kXBARB2_InputFlexpwm4Pwm2OutTrig01 = 33|0x200U,
    kXBARB2_InputFlexpwm4Pwm3OutTrig01 = 34|0x200U,
    kXBARB2_InputFlexpwm4Pwm4OutTrig01 = 35|0x200U,
    kXBARB2_InputPitTrigger0 = 36|0x200U,
    kXBARB2_InputPitTrigger1 = 37|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco0 = 38|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco1 = 39|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco2 = 40|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco3 = 41|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco0 = 42|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco1 = 43|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco2 = 44|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco3 = 45|0x200U,
    kXBARB2_InputEnc1PosMatch = 46|0x200U,
    kXBARB2_InputEnc2PosMatch = 47|0x200U,
    kXBARB2_InputEnc3PosMatch = 48|0x200U,
    kXBARB2_InputEnc4PosMatch = 49|0x200U,
    kXBARB2_InputDmaDone0 = 50|0x200U,
    kXBARB2_InputDmaDone1 = 51|0x200U,
    kXBARB2_InputDmaDone2 = 52|0x200U,
    kXBARB2_InputDmaDone3 = 53|0x200U,
    kXBARB2_InputDmaDone4 = 54|0x200U,
    kXBARB2_InputDmaDone5 = 55|0x200U,
    kXBARB2_InputDmaDone6 = 56|0x200U,
    kXBARB2_InputDmaDone7 = 57|0x200U,
    kXBARB3_InputLogicLow = 0|0x300U,
    kXBARB3_InputLogicHigh = 1|0x300U,
    kXBARB3_InputRESERVED2 = 2|0x300U,
    kXBARB3_InputRESERVED3 = 3|0x300U,
    kXBARB3_InputRESERVED4 = 4|0x300U,
    kXBARB3_InputRESERVED5 = 5|0x300U,
    kXBARB3_InputAcmp1Out = 6|0x300U,
    kXBARB3_InputAcmp2Out = 7|0x300U,
    kXBARB3_InputAcmp3Out = 8|0x300U,
    kXBARB3_InputAcmp4Out = 9|0x300U,
    kXBARB3_InputRESERVED10 = 10|0x300U,
    kXBARB3_InputRESERVED11 = 11|0x300U,
    kXBARB3_InputQtimer3Tmr0Output = 12|0x300U,
    kXBARB3_InputQtimer3Tmr1Output = 13|0x300U,
    kXBARB3_InputQtimer3Tmr2Output = 14|0x300U,
    kXBARB3_InputQtimer3Tmr3Output = 15|0x300U,
    kXBARB3_InputQtimer4Tmr0Output = 16|0x300U,
    kXBARB3_InputQtimer4Tmr1Output = 17|0x300U,
    kXBARB3_InputQtimer4Tmr2Output = 18|0x300U,
    kXBARB3_InputQtimer4Tmr3Output = 19|0x300U,
    kXBARB3_InputFlexpwm1Pwm1OutTrig01 = 20|0x300U,
    kXBARB3_InputFlexpwm1Pwm2OutTrig01 = 21|0x300U,
    kXBARB3_InputFlexpwm1Pwm3OutTrig01 = 22|0x300U,
    kXBARB3_InputFlexpwm1Pwm4OutTrig01 = 23|0x300U,
    kXBARB3_InputFlexpwm2Pwm1OutTrig01 = 24|0x300U,
    kXBARB3_InputFlexpwm2Pwm2OutTrig01 = 25|0x300U,
    kXBARB3_InputFlexpwm2Pwm3OutTrig01 = 26|0x300U,
    kXBARB3_InputFlexpwm2Pwm4OutTrig01 = 27|0x300U,
    kXBARB3_InputFlexpwm3Pwm1OutTrig01 = 28|0x300U,
    kXBARB3_InputFlexpwm3Pwm2OutTrig01 = 29|0x300U,
    kXBARB3_InputFlexpwm3Pwm3OutTrig01 = 30|0x300U,
    kXBARB3_InputFlexpwm3Pwm4OutTrig01 = 31|0x300U,
    kXBARB3_InputFlexpwm4Pwm1OutTrig01 = 32|0x300U,
    kXBARB3_InputFlexpwm4Pwm2OutTrig01 = 33|0x300U,
    kXBARB3_InputFlexpwm4Pwm3OutTrig01 = 34|0x300U,
    kXBARB3_InputFlexpwm4Pwm4OutTrig01 = 35|0x300U,
    kXBARB3_InputPitTrigger0 = 36|0x300U,
    kXBARB3_InputPitTrigger1 = 37|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco0 = 38|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco1 = 39|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco2 = 40|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco3 = 41|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco0 = 42|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco1 = 43|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco2 = 44|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco3 = 45|0x300U,
    kXBARB3_InputEnc1PosMatch = 46|0x300U,
    kXBARB3_InputEnc2PosMatch = 47|0x300U,
    kXBARB3_InputEnc3PosMatch = 48|0x300U,
    kXBARB3_InputEnc4PosMatch = 49|0x300U,
    kXBARB3_InputDmaDone0 = 50|0x300U,
    kXBARB3_InputDmaDone1 = 51|0x300U,
    kXBARB3_InputDmaDone2 = 52|0x300U,
    kXBARB3_InputDmaDone3 = 53|0x300U,
    kXBARB3_InputDmaDone4 = 54|0x300U,
    kXBARB3_InputDmaDone5 = 55|0x300U,
    kXBARB3_InputDmaDone6 = 56|0x300U,
    kXBARB3_InputDmaDone7 = 57|0x300U,
} xbar_input_signal_t;

typedef enum _xbar_output_signal
{
    kXBARA1_OutputDmaChMuxReq30 = 0|0x100U,
    kXBARA1_OutputDmaChMuxReq31 = 1|0x100U,
    kXBARA1_OutputDmaChMuxReq94 = 2|0x100U,
    kXBARA1_OutputDmaChMuxReq95 = 3|0x100U,
    kXBARA1_OutputIomuxXbarInout04 = 4|0x100U,
    kXBARA1_OutputIomuxXbarInout05 = 5|0x100U,
    kXBARA1_OutputIomuxXbarInout06 = 6|0x100U,
    kXBARA1_OutputIomuxXbarInout07 = 7|0x100U,
    kXBARA1_OutputIomuxXbarInout08 = 8|0x100U,
    kXBARA1_OutputIomuxXbarInout09 = 9|0x100U,
    kXBARA1_OutputIomuxXbarInout10 = 10|0x100U,
    kXBARA1_OutputIomuxXbarInout11 = 11|0x100U,
    kXBARA1_OutputIomuxXbarInout12 = 12|0x100U,
    kXBARA1_OutputIomuxXbarInout13 = 13|0x100U,
    kXBARA1_OutputIomuxXbarInout14 = 14|0x100U,
    kXBARA1_OutputIomuxXbarInout15 = 15|0x100U,
    kXBARA1_OutputIomuxXbarInout16 = 16|0x100U,
    kXBARA1_OutputIomuxXbarInout17 = 17|0x100U,
    kXBARA1_OutputIomuxXbarInout18 = 18|0x100U,
    kXBARA1_OutputIomuxXbarInout19 = 19|0x100U,
    kXBARA1_OutputAcmp1Sample = 20|0x100U,
    kXBARA1_OutputAcmp2Sample = 21|0x100U,
    kXBARA1_OutputAcmp3Sample = 22|0x100U,
    kXBARA1_OutputAcmp4Sample = 23|0x100U,
    kXBARA1_OutputRESERVED24 = 24|0x100U,
    kXBARA1_OutputRESERVED25 = 25|0x100U,
    kXBARA1_OutputFlexpwm1Exta0 = 26|0x100U,
    kXBARA1_OutputFlexpwm1Exta1 = 27|0x100U,
    kXBARA1_OutputFlexpwm1Exta2 = 28|0x100U,
    kXBARA1_OutputFlexpwm1Exta3 = 29|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync0 = 30|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync1 = 31|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync2 = 32|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync3 = 33|0x100U,
    kXBARA1_OutputFlexpwm1ExtClk = 34|0x100U,
    kXBARA1_OutputFlexpwm1Fault0 = 35|0x100U,
    kXBARA1_OutputFlexpwm1Fault1 = 36|0x100U,
    kXBARA1_OutputFlexpwm1234Fault2 = 37|0x100U,
    kXBARA1_OutputFlexpwm1234Fault3 = 38|0x100U,
    kXBARA1_OutputFlexpwm1ExtForce = 39|0x100U,
    kXBARA1_OutputFlexpwm234Exta0 = 40|0x100U,
    kXBARA1_OutputFlexpwm234Exta1 = 41|0x100U,
    kXBARA1_OutputFlexpwm234Exta2 = 42|0x100U,
    kXBARA1_OutputFlexpwm234Exta3 = 43|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync0 = 44|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync1 = 45|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync2 = 46|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync3 = 47|0x100U,
    kXBARA1_OutputFlexpwm234ExtClk = 48|0x100U,
    kXBARA1_OutputFlexpwm2Fault0 = 49|0x100U,
    kXBARA1_OutputFlexpwm2Fault1 = 50|0x100U,
    kXBARA1_OutputFlexpwm2ExtForce = 51|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync0 = 52|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync1 = 53|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync2 = 54|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync3 = 55|0x100U,
    kXBARA1_OutputFlexpwm3Fault0 = 56|0x100U,
    kXBARA1_OutputFlexpwm3Fault1 = 57|0x100U,
    kXBARA1_OutputFlexpwm3ExtForce = 58|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync0 = 59|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync1 = 60|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync2 = 61|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync3 = 62|0x100U,
    kXBARA1_OutputFlexpwm4Fault0 = 63|0x100U,
    kXBARA1_OutputFlexpwm4Fault1 = 64|0x100U,
    kXBARA1_OutputFlexpwm4ExtForce = 65|0x100U,
    kXBARA1_OutputEnc1PhaseAInput = 66|0x100U,
    kXBARA1_OutputEnc1PhaseBInput = 67|0x100U,
    kXBARA1_OutputEnc1Index = 68|0x100U,
    kXBARA1_OutputEnc1Home = 69|0x100U,
    kXBARA1_OutputEnc1Trigger = 70|0x100U,
    kXBARA1_OutputEnc2PhaseAInput = 71|0x100U,
    kXBARA1_OutputEnc2PhaseBInput = 72|0x100U,
    kXBARA1_OutputEnc2Index = 73|0x100U,
    kXBARA1_OutputEnc2Home = 74|0x100U,
    kXBARA1_OutputEnc2Trigger = 75|0x100U,
    kXBARA1_OutputEnc3PhaseAInput = 76|0x100U,
    kXBARA1_OutputEnc3PhaseBInput = 77|0x100U,
    kXBARA1_OutputEnc3Index = 78|0x100U,
    kXBARA1_OutputEnc3Home = 79|0x100U,
    kXBARA1_OutputEnc3Trigger = 80|0x100U,
    kXBARA1_OutputEnc4PhaseAInput = 81|0x100U,
    kXBARA1_OutputEnc4PhaseBInput = 82|0x100U,
    kXBARA1_OutputEnc4Index = 83|0x100U,
    kXBARA1_OutputEnc4Home = 84|0x100U,
    kXBARA1_OutputEnc4Trigger = 85|0x100U,
    kXBARA1_OutputQtimer1Tmr0Input = 86|0x100U,
    kXBARA1_OutputQtimer1Tmr1Input = 87|0x100U,
    kXBARA1_OutputQtimer1Tmr2Input = 88|0x100U,
    kXBARA1_OutputQtimer1Tmr3Input = 89|0x100U,
    kXBARA1_OutputQtimer2Tmr0Input = 90|0x100U,
    kXBARA1_OutputQtimer2Tmr1Input = 91|0x100U,
    kXBARA1_OutputQtimer2Tmr2Input = 92|0x100U,
    kXBARA1_OutputQtimer2Tmr3Input = 93|0x100U,
    kXBARA1_OutputQtimer3Tmr0Input = 94|0x100U,
    kXBARA1_OutputQtimer3Tmr1Input = 95|0x100U,
    kXBARA1_OutputQtimer3Tmr2Input = 96|0x100U,
    kXBARA1_OutputQtimer3Tmr3Input = 97|0x100U,
    kXBARA1_OutputQtimer4Tmr0Input = 98|0x100U,
    kXBARA1_OutputQtimer4Tmr1Input = 99|0x100U,
    kXBARA1_OutputQtimer4Tmr2Input = 100|0x100U,
    kXBARA1_OutputQtimer4Tmr3Input = 101|0x100U,
    kXBARA1_OutputEwmEwmIn = 102|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig0 = 103|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig1 = 104|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig2 = 105|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig3 = 106|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig0 = 107|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig1 = 108|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig2 = 109|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig3 = 110|0x100U,
    kXBARA1_OutputLpi2c1TrgInput = 111|0x100U,
    kXBARA1_OutputLpi2c2TrgInput = 112|0x100U,
    kXBARA1_OutputLpi2c3TrgInput = 113|0x100U,
    kXBARA1_OutputLpi2c4TrgInput = 114|0x100U,
    kXBARA1_OutputLpspi1TrgInput = 115|0x100U,
    kXBARA1_OutputLpspi2TrgInput = 116|0x100U,
    kXBARA1_OutputLpspi3TrgInput = 117|0x100U,
    kXBARA1_OutputLpspi4TrgInput = 118|0x100U,
    kXBARA1_OutputLpuart1TrgInput = 119|0x100U,
    kXBARA1_OutputLpuart2TrgInput = 120|0x100U,
    kXBARA1_OutputLpuart3TrgInput = 121|0x100U,
    kXBARA1_OutputLpuart4TrgInput = 122|0x100U,
    kXBARA1_OutputLpuart5TrgInput = 123|0x100U,
    kXBARA1_OutputLpuart6TrgInput = 124|0x100U,
    kXBARA1_OutputLpuart7TrgInput = 125|0x100U,
    kXBARA1_OutputLpuart8TrgInput = 126|0x100U,
    kXBARA1_OutputFlexio1TriggerIn0 = 127|0x100U,
    kXBARA1_OutputFlexio1TriggerIn1 = 128|0x100U,
    kXBARA1_OutputFlexio2TriggerIn0 = 129|0x100U,
    kXBARA1_OutputFlexio2TriggerIn1 = 130|0x100U,
    kXBARB2_OutputAoi1In00 = 0|0x200U,
    kXBARB2_OutputAoi1In01 = 1|0x200U,
    kXBARB2_OutputAoi1In02 = 2|0x200U,
    kXBARB2_OutputAoi1In03 = 3|0x200U,
    kXBARB2_OutputAoi1In04 = 4|0x200U,
    kXBARB2_OutputAoi1In05 = 5|0x200U,
    kXBARB2_OutputAoi1In06 = 6|0x200U,
    kXBARB2_OutputAoi1In07 = 7|0x200U,
    kXBARB2_OutputAoi1In08 = 8|0x200U,
    kXBARB2_OutputAoi1In09 = 9|0x200U,
    kXBARB2_OutputAoi1In10 = 10|0x200U,
    kXBARB2_OutputAoi1In11 = 11|0x200U,
    kXBARB2_OutputAoi1In12 = 12|0x200U,
    kXBARB2_OutputAoi1In13 = 13|0x200U,
    kXBARB2_OutputAoi1In14 = 14|0x200U,
    kXBARB2_OutputAoi1In15 = 15|0x200U,
    kXBARB3_OutputAoi2In00 = 0|0x300U,
    kXBARB3_OutputAoi2In01 = 1|0x300U,
    kXBARB3_OutputAoi2In02 = 2|0x300U,
    kXBARB3_OutputAoi2In03 = 3|0x300U,
    kXBARB3_OutputAoi2In04 = 4|0x300U,
    kXBARB3_OutputAoi2In05 = 5|0x300U,
    kXBARB3_OutputAoi2In06 = 6|0x300U,
    kXBARB3_OutputAoi2In07 = 7|0x300U,
    kXBARB3_OutputAoi2In08 = 8|0x300U,
    kXBARB3_OutputAoi2In09 = 9|0x300U,
    kXBARB3_OutputAoi2In10 = 10|0x300U,
    kXBARB3_OutputAoi2In11 = 11|0x300U,
    kXBARB3_OutputAoi2In12 = 12|0x300U,
    kXBARB3_OutputAoi2In13 = 13|0x300U,
    kXBARB3_OutputAoi2In14 = 14|0x300U,
    kXBARB3_OutputAoi2In15 = 15|0x300U,
} xbar_output_signal_t;
# 1313 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t HC[8];
  volatile const uint32_t HS;
  volatile const uint32_t R[8];
  volatile uint32_t CFG;
  volatile uint32_t GC;
  volatile uint32_t GS;
  volatile uint32_t CV;
  volatile uint32_t OFS;
  volatile uint32_t CAL;
} ADC_Type;
# 1488 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t DONE0_1_IRQ;
  volatile uint32_t DONE2_ERR_IRQ;
  volatile uint32_t DMA_CTRL;
  struct {
    volatile uint32_t TRIGn_CTRL;
    volatile uint32_t TRIGn_COUNTER;
    volatile uint32_t TRIGn_CHAIN_1_0;
    volatile uint32_t TRIGn_CHAIN_3_2;
    volatile uint32_t TRIGn_CHAIN_5_4;
    volatile uint32_t TRIGn_CHAIN_7_6;
    volatile const uint32_t TRIGn_RESULT_1_0;
    volatile const uint32_t TRIGn_RESULT_3_2;
    volatile const uint32_t TRIGn_RESULT_5_4;
    volatile const uint32_t TRIGn_RESULT_7_6;
  } TRIG[8];
} ADC_ETC_Type;
# 1920 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MPR;
       uint8_t RESERVED_0[60];
  volatile uint32_t OPACR;
  volatile uint32_t OPACR1;
  volatile uint32_t OPACR2;
  volatile uint32_t OPACR3;
  volatile uint32_t OPACR4;
} AIPSTZ_Type;
# 2111 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile uint16_t BFCRT01;
    volatile uint16_t BFCRT23;
  } BFCRT[4];
} AOI_Type;
# 2220 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t ADDR_OFFSET0;
  volatile uint32_t ADDR_OFFSET1;
  volatile uint32_t AES_KEY0_W0;
  volatile uint32_t AES_KEY0_W1;
  volatile uint32_t AES_KEY0_W2;
  volatile uint32_t AES_KEY0_W3;
  volatile uint32_t STATUS;
  volatile uint32_t CTR_NONCE0_W0;
  volatile uint32_t CTR_NONCE0_W1;
  volatile uint32_t CTR_NONCE0_W2;
  volatile uint32_t CTR_NONCE0_W3;
  volatile uint32_t CTR_NONCE1_W0;
  volatile uint32_t CTR_NONCE1_W1;
  volatile uint32_t CTR_NONCE1_W2;
  volatile uint32_t CTR_NONCE1_W3;
  volatile uint32_t REGION1_TOP;
  volatile uint32_t REGION1_BOT;
} BEE_Type;
# 2452 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
  volatile uint32_t CTRL1;
  volatile uint32_t TIMER;
       uint8_t RESERVED_0[4];
  volatile uint32_t RXMGMASK;
  volatile uint32_t RX14MASK;
  volatile uint32_t RX15MASK;
  volatile uint32_t ECR;
  volatile uint32_t ESR1;
  volatile uint32_t IMASK2;
  volatile uint32_t IMASK1;
  volatile uint32_t IFLAG2;
  volatile uint32_t IFLAG1;
  volatile uint32_t CTRL2;
  volatile const uint32_t ESR2;
       uint8_t RESERVED_1[8];
  volatile const uint32_t CRCR;
  volatile uint32_t RXFGMASK;
  volatile const uint32_t RXFIR;
       uint8_t RESERVED_2[48];
  struct {
    volatile uint32_t CS;
    volatile uint32_t ID;
    volatile uint32_t WORD0;
    volatile uint32_t WORD1;
  } MB[64];
       uint8_t RESERVED_3[1024];
  volatile uint32_t RXIMR[64];
       uint8_t RESERVED_4[96];
  volatile uint32_t GFWR;
} CAN_Type;
# 2899 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CCR;
       uint8_t RESERVED_0[4];
  volatile const uint32_t CSR;
  volatile uint32_t CCSR;
  volatile uint32_t CACRR;
  volatile uint32_t CBCDR;
  volatile uint32_t CBCMR;
  volatile uint32_t CSCMR1;
  volatile uint32_t CSCMR2;
  volatile uint32_t CSCDR1;
  volatile uint32_t CS1CDR;
  volatile uint32_t CS2CDR;
  volatile uint32_t CDCDR;
       uint8_t RESERVED_1[4];
  volatile uint32_t CSCDR2;
  volatile uint32_t CSCDR3;
       uint8_t RESERVED_2[8];
  volatile const uint32_t CDHIPR;
       uint8_t RESERVED_3[8];
  volatile uint32_t CLPCR;
  volatile uint32_t CISR;
  volatile uint32_t CIMR;
  volatile uint32_t CCOSR;
  volatile uint32_t CGPR;
  volatile uint32_t CCGR0;
  volatile uint32_t CCGR1;
  volatile uint32_t CCGR2;
  volatile uint32_t CCGR3;
  volatile uint32_t CCGR4;
  volatile uint32_t CCGR5;
  volatile uint32_t CCGR6;
       uint8_t RESERVED_4[4];
  volatile uint32_t CMEOR;
} CCM_Type;
# 3696 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t PLL_ARM;
  volatile uint32_t PLL_ARM_SET;
  volatile uint32_t PLL_ARM_CLR;
  volatile uint32_t PLL_ARM_TOG;
  volatile uint32_t PLL_USB1;
  volatile uint32_t PLL_USB1_SET;
  volatile uint32_t PLL_USB1_CLR;
  volatile uint32_t PLL_USB1_TOG;
  volatile uint32_t PLL_USB2;
  volatile uint32_t PLL_USB2_SET;
  volatile uint32_t PLL_USB2_CLR;
  volatile uint32_t PLL_USB2_TOG;
  volatile uint32_t PLL_SYS;
  volatile uint32_t PLL_SYS_SET;
  volatile uint32_t PLL_SYS_CLR;
  volatile uint32_t PLL_SYS_TOG;
  volatile uint32_t PLL_SYS_SS;
       uint8_t RESERVED_0[12];
  volatile uint32_t PLL_SYS_NUM;
       uint8_t RESERVED_1[12];
  volatile uint32_t PLL_SYS_DENOM;
       uint8_t RESERVED_2[12];
  volatile uint32_t PLL_AUDIO;
  volatile uint32_t PLL_AUDIO_SET;
  volatile uint32_t PLL_AUDIO_CLR;
  volatile uint32_t PLL_AUDIO_TOG;
  volatile uint32_t PLL_AUDIO_NUM;
       uint8_t RESERVED_3[12];
  volatile uint32_t PLL_AUDIO_DENOM;
       uint8_t RESERVED_4[12];
  volatile uint32_t PLL_VIDEO;
  volatile uint32_t PLL_VIDEO_SET;
  volatile uint32_t PLL_VIDEO_CLR;
  volatile uint32_t PLL_VIDEO_TOG;
  volatile uint32_t PLL_VIDEO_NUM;
       uint8_t RESERVED_5[12];
  volatile uint32_t PLL_VIDEO_DENOM;
       uint8_t RESERVED_6[28];
  volatile uint32_t PLL_ENET;
  volatile uint32_t PLL_ENET_SET;
  volatile uint32_t PLL_ENET_CLR;
  volatile uint32_t PLL_ENET_TOG;
  volatile uint32_t PFD_480;
  volatile uint32_t PFD_480_SET;
  volatile uint32_t PFD_480_CLR;
  volatile uint32_t PFD_480_TOG;
  volatile uint32_t PFD_528;
  volatile uint32_t PFD_528_SET;
  volatile uint32_t PFD_528_CLR;
  volatile uint32_t PFD_528_TOG;
       uint8_t RESERVED_7[64];
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
  volatile uint32_t MISC1;
  volatile uint32_t MISC1_SET;
  volatile uint32_t MISC1_CLR;
  volatile uint32_t MISC1_TOG;
  volatile uint32_t MISC2;
  volatile uint32_t MISC2_SET;
  volatile uint32_t MISC2_CLR;
  volatile uint32_t MISC2_TOG;
} CCM_ANALOG_Type;
# 5391 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint8_t CR0;
  volatile uint8_t CR1;
  volatile uint8_t FPR;
  volatile uint8_t SCR;
  volatile uint8_t DACCR;
  volatile uint8_t MUXCR;
} CMP_Type;
# 5529 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CSICR1;
  volatile uint32_t CSICR2;
  volatile uint32_t CSICR3;
  volatile const uint32_t CSISTATFIFO;
  volatile const uint32_t CSIRFIFO;
  volatile uint32_t CSIRXCNT;
  volatile uint32_t CSISR;
       uint8_t RESERVED_0[4];
  volatile uint32_t CSIDMASA_STATFIFO;
  volatile uint32_t CSIDMATS_STATFIFO;
  volatile uint32_t CSIDMASA_FB1;
  volatile uint32_t CSIDMASA_FB2;
  volatile uint32_t CSIFBUF_PARA;
  volatile uint32_t CSIIMAG_PARA;
       uint8_t RESERVED_1[16];
  volatile uint32_t CSICR18;
  volatile uint32_t CSICR19;
} CSI_Type;
# 5891 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CSL[32];
       uint8_t RESERVED_0[384];
  volatile uint32_t HP0;
       uint8_t RESERVED_1[20];
  volatile uint32_t SA;
       uint8_t RESERVED_2[316];
  volatile uint32_t HPCONTROL0;
} CSU_Type;
# 6186 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t REG0;
  volatile uint32_t REG1;
  volatile uint32_t REG2;
  volatile uint32_t REG3;
} DCDC_Type;
# 6363 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
       uint8_t RESERVED_0[12];
  volatile uint32_t STAT;
       uint8_t RESERVED_1[12];
  volatile uint32_t CHANNELCTRL;
       uint8_t RESERVED_2[12];
  volatile uint32_t CAPABILITY0;
       uint8_t RESERVED_3[12];
  volatile const uint32_t CAPABILITY1;
       uint8_t RESERVED_4[12];
  volatile uint32_t CONTEXT;
       uint8_t RESERVED_5[12];
  volatile uint32_t KEY;
       uint8_t RESERVED_6[12];
  volatile uint32_t KEYDATA;
       uint8_t RESERVED_7[12];
  volatile const uint32_t PACKET0;
       uint8_t RESERVED_8[12];
  volatile const uint32_t PACKET1;
       uint8_t RESERVED_9[12];
  volatile const uint32_t PACKET2;
       uint8_t RESERVED_10[12];
  volatile const uint32_t PACKET3;
       uint8_t RESERVED_11[12];
  volatile const uint32_t PACKET4;
       uint8_t RESERVED_12[12];
  volatile const uint32_t PACKET5;
       uint8_t RESERVED_13[12];
  volatile const uint32_t PACKET6;
       uint8_t RESERVED_14[28];
  volatile uint32_t CH0CMDPTR;
       uint8_t RESERVED_15[12];
  volatile uint32_t CH0SEMA;
       uint8_t RESERVED_16[12];
  volatile uint32_t CH0STAT;
       uint8_t RESERVED_17[12];
  volatile uint32_t CH0OPTS;
       uint8_t RESERVED_18[12];
  volatile uint32_t CH1CMDPTR;
       uint8_t RESERVED_19[12];
  volatile uint32_t CH1SEMA;
       uint8_t RESERVED_20[12];
  volatile uint32_t CH1STAT;
       uint8_t RESERVED_21[12];
  volatile uint32_t CH1OPTS;
       uint8_t RESERVED_22[12];
  volatile uint32_t CH2CMDPTR;
       uint8_t RESERVED_23[12];
  volatile uint32_t CH2SEMA;
       uint8_t RESERVED_24[12];
  volatile uint32_t CH2STAT;
       uint8_t RESERVED_25[12];
  volatile uint32_t CH2OPTS;
       uint8_t RESERVED_26[12];
  volatile uint32_t CH3CMDPTR;
       uint8_t RESERVED_27[12];
  volatile uint32_t CH3SEMA;
       uint8_t RESERVED_28[12];
  volatile uint32_t CH3STAT;
       uint8_t RESERVED_29[12];
  volatile uint32_t CH3OPTS;
       uint8_t RESERVED_30[524];
  volatile uint32_t DBGSELECT;
       uint8_t RESERVED_31[12];
  volatile const uint32_t DBGDATA;
       uint8_t RESERVED_32[12];
  volatile uint32_t PAGETABLE;
       uint8_t RESERVED_33[12];
  volatile const uint32_t VERSION;
} DCP_Type;
# 6947 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CR;
  volatile const uint32_t ES;
       uint8_t RESERVED_0[4];
  volatile uint32_t ERQ;
       uint8_t RESERVED_1[4];
  volatile uint32_t EEI;
  volatile uint8_t CEEI;
  volatile uint8_t SEEI;
  volatile uint8_t CERQ;
  volatile uint8_t SERQ;
  volatile uint8_t CDNE;
  volatile uint8_t SSRT;
  volatile uint8_t CERR;
  volatile uint8_t CINT;
       uint8_t RESERVED_2[4];
  volatile uint32_t INT;
       uint8_t RESERVED_3[4];
  volatile uint32_t ERR;
       uint8_t RESERVED_4[4];
  volatile const uint32_t HRS;
       uint8_t RESERVED_5[12];
  volatile uint32_t EARS;
       uint8_t RESERVED_6[184];
  volatile uint8_t DCHPRI3;
  volatile uint8_t DCHPRI2;
  volatile uint8_t DCHPRI1;
  volatile uint8_t DCHPRI0;
  volatile uint8_t DCHPRI7;
  volatile uint8_t DCHPRI6;
  volatile uint8_t DCHPRI5;
  volatile uint8_t DCHPRI4;
  volatile uint8_t DCHPRI11;
  volatile uint8_t DCHPRI10;
  volatile uint8_t DCHPRI9;
  volatile uint8_t DCHPRI8;
  volatile uint8_t DCHPRI15;
  volatile uint8_t DCHPRI14;
  volatile uint8_t DCHPRI13;
  volatile uint8_t DCHPRI12;
  volatile uint8_t DCHPRI19;
  volatile uint8_t DCHPRI18;
  volatile uint8_t DCHPRI17;
  volatile uint8_t DCHPRI16;
  volatile uint8_t DCHPRI23;
  volatile uint8_t DCHPRI22;
  volatile uint8_t DCHPRI21;
  volatile uint8_t DCHPRI20;
  volatile uint8_t DCHPRI27;
  volatile uint8_t DCHPRI26;
  volatile uint8_t DCHPRI25;
  volatile uint8_t DCHPRI24;
  volatile uint8_t DCHPRI31;
  volatile uint8_t DCHPRI30;
  volatile uint8_t DCHPRI29;
  volatile uint8_t DCHPRI28;
       uint8_t RESERVED_7[3808];
  struct {
    volatile uint32_t SADDR;
    volatile uint16_t SOFF;
    volatile uint16_t ATTR;
    union {
      volatile uint32_t NBYTES_MLNO;
      volatile uint32_t NBYTES_MLOFFNO;
      volatile uint32_t NBYTES_MLOFFYES;
    };
    volatile uint32_t SLAST;
    volatile uint32_t DADDR;
    volatile uint16_t DOFF;
    union {
      volatile uint16_t CITER_ELINKNO;
      volatile uint16_t CITER_ELINKYES;
    };
    volatile uint32_t DLAST_SGA;
    volatile uint16_t CSR;
    union {
      volatile uint16_t BITER_ELINKNO;
      volatile uint16_t BITER_ELINKYES;
    };
  } TCD[32];
} DMA_Type;
# 8464 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CHCFG[32];
} DMAMUX_Type;
# 8525 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t CTRL;
  volatile uint16_t FILT;
  volatile uint16_t WTR;
  volatile uint16_t POSD;
  volatile const uint16_t POSDH;
  volatile uint16_t REV;
  volatile const uint16_t REVH;
  volatile uint16_t UPOS;
  volatile uint16_t LPOS;
  volatile const uint16_t UPOSH;
  volatile const uint16_t LPOSH;
  volatile uint16_t UINIT;
  volatile uint16_t LINIT;
  volatile const uint16_t IMR;
  volatile uint16_t TST;
  volatile uint16_t CTRL2;
  volatile uint16_t UMOD;
  volatile uint16_t LMOD;
  volatile uint16_t UCOMP;
  volatile uint16_t LCOMP;
} ENC_Type;
# 8820 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[4];
  volatile uint32_t EIR;
  volatile uint32_t EIMR;
       uint8_t RESERVED_1[4];
  volatile uint32_t RDAR;
  volatile uint32_t TDAR;
       uint8_t RESERVED_2[12];
  volatile uint32_t ECR;
       uint8_t RESERVED_3[24];
  volatile uint32_t MMFR;
  volatile uint32_t MSCR;
       uint8_t RESERVED_4[28];
  volatile uint32_t MIBC;
       uint8_t RESERVED_5[28];
  volatile uint32_t RCR;
       uint8_t RESERVED_6[60];
  volatile uint32_t TCR;
       uint8_t RESERVED_7[28];
  volatile uint32_t PALR;
  volatile uint32_t PAUR;
  volatile uint32_t OPD;
  volatile uint32_t TXIC;
       uint8_t RESERVED_8[12];
  volatile uint32_t RXIC;
       uint8_t RESERVED_9[20];
  volatile uint32_t IAUR;
  volatile uint32_t IALR;
  volatile uint32_t GAUR;
  volatile uint32_t GALR;
       uint8_t RESERVED_10[28];
  volatile uint32_t TFWR;
       uint8_t RESERVED_11[56];
  volatile uint32_t RDSR;
  volatile uint32_t TDSR;
  volatile uint32_t MRBR;
       uint8_t RESERVED_12[4];
  volatile uint32_t RSFL;
  volatile uint32_t RSEM;
  volatile uint32_t RAEM;
  volatile uint32_t RAFL;
  volatile uint32_t TSEM;
  volatile uint32_t TAEM;
  volatile uint32_t TAFL;
  volatile uint32_t TIPG;
  volatile uint32_t FTRL;
       uint8_t RESERVED_13[12];
  volatile uint32_t TACC;
  volatile uint32_t RACC;
       uint8_t RESERVED_14[56];
       uint32_t RMON_T_DROP;
  volatile const uint32_t RMON_T_PACKETS;
  volatile const uint32_t RMON_T_BC_PKT;
  volatile const uint32_t RMON_T_MC_PKT;
  volatile const uint32_t RMON_T_CRC_ALIGN;
  volatile const uint32_t RMON_T_UNDERSIZE;
  volatile const uint32_t RMON_T_OVERSIZE;
  volatile const uint32_t RMON_T_FRAG;
  volatile const uint32_t RMON_T_JAB;
  volatile const uint32_t RMON_T_COL;
  volatile const uint32_t RMON_T_P64;
  volatile const uint32_t RMON_T_P65TO127;
  volatile const uint32_t RMON_T_P128TO255;
  volatile const uint32_t RMON_T_P256TO511;
  volatile const uint32_t RMON_T_P512TO1023;
  volatile const uint32_t RMON_T_P1024TO2047;
  volatile const uint32_t RMON_T_P_GTE2048;
  volatile const uint32_t RMON_T_OCTETS;
       uint32_t IEEE_T_DROP;
  volatile const uint32_t IEEE_T_FRAME_OK;
  volatile const uint32_t IEEE_T_1COL;
  volatile const uint32_t IEEE_T_MCOL;
  volatile const uint32_t IEEE_T_DEF;
  volatile const uint32_t IEEE_T_LCOL;
  volatile const uint32_t IEEE_T_EXCOL;
  volatile const uint32_t IEEE_T_MACERR;
  volatile const uint32_t IEEE_T_CSERR;
  volatile const uint32_t IEEE_T_SQE;
  volatile const uint32_t IEEE_T_FDXFC;
  volatile const uint32_t IEEE_T_OCTETS_OK;
       uint8_t RESERVED_15[12];
  volatile const uint32_t RMON_R_PACKETS;
  volatile const uint32_t RMON_R_BC_PKT;
  volatile const uint32_t RMON_R_MC_PKT;
  volatile const uint32_t RMON_R_CRC_ALIGN;
  volatile const uint32_t RMON_R_UNDERSIZE;
  volatile const uint32_t RMON_R_OVERSIZE;
  volatile const uint32_t RMON_R_FRAG;
  volatile const uint32_t RMON_R_JAB;
       uint32_t RMON_R_RESVD_0;
  volatile const uint32_t RMON_R_P64;
  volatile const uint32_t RMON_R_P65TO127;
  volatile const uint32_t RMON_R_P128TO255;
  volatile const uint32_t RMON_R_P256TO511;
  volatile const uint32_t RMON_R_P512TO1023;
  volatile const uint32_t RMON_R_P1024TO2047;
  volatile const uint32_t RMON_R_P_GTE2048;
  volatile const uint32_t RMON_R_OCTETS;
  volatile const uint32_t IEEE_R_DROP;
  volatile const uint32_t IEEE_R_FRAME_OK;
  volatile const uint32_t IEEE_R_CRC;
  volatile const uint32_t IEEE_R_ALIGN;
  volatile const uint32_t IEEE_R_MACERR;
  volatile const uint32_t IEEE_R_FDXFC;
  volatile const uint32_t IEEE_R_OCTETS_OK;
       uint8_t RESERVED_16[284];
  volatile uint32_t ATCR;
  volatile uint32_t ATVR;
  volatile uint32_t ATOFF;
  volatile uint32_t ATPER;
  volatile uint32_t ATCOR;
  volatile uint32_t ATINC;
  volatile const uint32_t ATSTMP;
       uint8_t RESERVED_17[488];
  volatile uint32_t TGSR;
  struct {
    volatile uint32_t TCSR;
    volatile uint32_t TCCR;
  } CHANNEL[4];
} ENET_Type;
# 9758 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint8_t CTRL;
  volatile uint8_t SERV;
  volatile uint8_t CMPL;
  volatile uint8_t CMPH;
  volatile uint8_t CLKCTRL;
  volatile uint8_t CLKPRESCALER;
} EWM_Type;
# 9848 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t CTRL;
  volatile const uint32_t PIN;
  volatile uint32_t SHIFTSTAT;
  volatile uint32_t SHIFTERR;
  volatile uint32_t TIMSTAT;
       uint8_t RESERVED_0[4];
  volatile uint32_t SHIFTSIEN;
  volatile uint32_t SHIFTEIEN;
  volatile uint32_t TIMIEN;
       uint8_t RESERVED_1[4];
  volatile uint32_t SHIFTSDEN;
       uint8_t RESERVED_2[12];
  volatile uint32_t SHIFTSTATE;
       uint8_t RESERVED_3[60];
  volatile uint32_t SHIFTCTL[4];
       uint8_t RESERVED_4[112];
  volatile uint32_t SHIFTCFG[4];
       uint8_t RESERVED_5[240];
  volatile uint32_t SHIFTBUF[4];
       uint8_t RESERVED_6[112];
  volatile uint32_t SHIFTBUFBIS[4];
       uint8_t RESERVED_7[112];
  volatile uint32_t SHIFTBUFBYS[4];
       uint8_t RESERVED_8[112];
  volatile uint32_t SHIFTBUFBBS[4];
       uint8_t RESERVED_9[112];
  volatile uint32_t TIMCTL[4];
       uint8_t RESERVED_10[112];
  volatile uint32_t TIMCFG[4];
       uint8_t RESERVED_11[112];
  volatile uint32_t TIMCMP[4];
       uint8_t RESERVED_12[368];
  volatile uint32_t SHIFTBUFNBS[4];
       uint8_t RESERVED_13[112];
  volatile uint32_t SHIFTBUFHWS[4];
       uint8_t RESERVED_14[112];
  volatile uint32_t SHIFTBUFNIS[4];
} FLEXIO_Type;
# 10179 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t TCM_CTRL;
  volatile uint32_t OCRAM_MAGIC_ADDR;
  volatile uint32_t DTCM_MAGIC_ADDR;
  volatile uint32_t ITCM_MAGIC_ADDR;
  volatile uint32_t INT_STATUS;
  volatile uint32_t INT_STAT_EN;
  volatile uint32_t INT_SIG_EN;
} FLEXRAM_Type;
# 10347 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR0;
  volatile uint32_t MCR1;
  volatile uint32_t MCR2;
  volatile uint32_t AHBCR;
  volatile uint32_t INTEN;
  volatile uint32_t INTR;
  volatile uint32_t LUTKEY;
  volatile uint32_t LUTCR;
  volatile uint32_t AHBRXBUFCR0[4];
       uint8_t RESERVED_0[48];
  volatile uint32_t FLSHCR0[4];
  volatile uint32_t FLSHCR1[4];
  volatile uint32_t FLSHCR2[4];
       uint8_t RESERVED_1[4];
  volatile uint32_t FLSHCR4;
       uint8_t RESERVED_2[8];
  volatile uint32_t IPCR0;
  volatile uint32_t IPCR1;
       uint8_t RESERVED_3[8];
  volatile uint32_t IPCMD;
       uint8_t RESERVED_4[4];
  volatile uint32_t IPRXFCR;
  volatile uint32_t IPTXFCR;
  volatile uint32_t DLLCR[2];
       uint8_t RESERVED_5[24];
  volatile const uint32_t STS0;
  volatile const uint32_t STS1;
  volatile const uint32_t STS2;
  volatile const uint32_t AHBSPNDSTS;
  volatile const uint32_t IPRXFSTS;
  volatile const uint32_t IPTXFSTS;
       uint8_t RESERVED_6[8];
  volatile const uint32_t RFDR[32];
  volatile uint32_t TFDR[32];
  volatile uint32_t LUT[64];
} FLEXSPI_Type;
# 10861 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CNTR;
       uint8_t RESERVED_0[4];
  volatile uint32_t IMR[4];
  volatile const uint32_t ISR[4];
       uint8_t RESERVED_1[12];
  volatile uint32_t IMR5;
  volatile const uint32_t ISR5;
} GPC_Type;
# 10968 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t DR;
  volatile uint32_t GDIR;
  volatile const uint32_t PSR;
  volatile uint32_t ICR1;
  volatile uint32_t ICR2;
  volatile uint32_t IMR;
  volatile uint32_t ISR;
  volatile uint32_t EDGE_SEL;
} GPIO_Type;
# 11168 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CR;
  volatile uint32_t PR;
  volatile uint32_t SR;
  volatile uint32_t IR;
  volatile uint32_t OCR[3];
  volatile const uint32_t ICR[2];
  volatile const uint32_t CNT;
} GPT_Type;
# 11349 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t TCSR;
  volatile uint32_t TCR1;
  volatile uint32_t TCR2;
  volatile uint32_t TCR3;
  volatile uint32_t TCR4;
  volatile uint32_t TCR5;
  volatile uint32_t TDR[4];
       uint8_t RESERVED_0[16];
  volatile const uint32_t TFR[4];
       uint8_t RESERVED_1[16];
  volatile uint32_t TMR;
       uint8_t RESERVED_2[36];
  volatile uint32_t RCSR;
  volatile uint32_t RCR1;
  volatile uint32_t RCR2;
  volatile uint32_t RCR3;
  volatile uint32_t RCR4;
  volatile uint32_t RCR5;
  volatile const uint32_t RDR[4];
       uint8_t RESERVED_3[16];
  volatile const uint32_t RFR[4];
       uint8_t RESERVED_4[16];
  volatile uint32_t RMR;
} I2S_Type;
# 11783 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[20];
  volatile uint32_t SW_MUX_CTL_PAD[124];
  volatile uint32_t SW_PAD_CTL_PAD[124];
  volatile uint32_t SELECT_INPUT[154];
} IOMUXC_Type;
# 11878 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint32_t GPR0;
  volatile uint32_t GPR1;
  volatile uint32_t GPR2;
  volatile uint32_t GPR3;
  volatile uint32_t GPR4;
  volatile uint32_t GPR5;
  volatile uint32_t GPR6;
  volatile uint32_t GPR7;
  volatile uint32_t GPR8;
       uint32_t GPR9;
  volatile uint32_t GPR10;
  volatile uint32_t GPR11;
  volatile uint32_t GPR12;
  volatile uint32_t GPR13;
  volatile uint32_t GPR14;
       uint32_t GPR15;
  volatile uint32_t GPR16;
  volatile uint32_t GPR17;
  volatile uint32_t GPR18;
  volatile uint32_t GPR19;
  volatile uint32_t GPR20;
  volatile uint32_t GPR21;
  volatile uint32_t GPR22;
  volatile uint32_t GPR23;
  volatile uint32_t GPR24;
  volatile uint32_t GPR25;
} IOMUXC_GPR_Type;
# 12632 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SW_MUX_CTL_PAD_WAKEUP;
  volatile uint32_t SW_MUX_CTL_PAD_PMIC_ON_REQ;
  volatile uint32_t SW_MUX_CTL_PAD_PMIC_STBY_REQ;
  volatile uint32_t SW_PAD_CTL_PAD_TEST_MODE;
  volatile uint32_t SW_PAD_CTL_PAD_POR_B;
  volatile uint32_t SW_PAD_CTL_PAD_ONOFF;
  volatile uint32_t SW_PAD_CTL_PAD_WAKEUP;
  volatile uint32_t SW_PAD_CTL_PAD_PMIC_ON_REQ;
  volatile uint32_t SW_PAD_CTL_PAD_PMIC_STBY_REQ;
} IOMUXC_SNVS_Type;
# 12864 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint32_t GPR0;
       uint32_t GPR1;
       uint32_t GPR2;
  volatile uint32_t GPR3;
} IOMUXC_SNVS_GPR_Type;
# 12934 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t KPCR;
  volatile uint16_t KPSR;
  volatile uint16_t KDDR;
  volatile uint16_t KPDR;
} KPP_Type;
# 13027 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t CTRL1;
  volatile uint32_t CTRL1_SET;
  volatile uint32_t CTRL1_CLR;
  volatile uint32_t CTRL1_TOG;
  volatile uint32_t CTRL2;
  volatile uint32_t CTRL2_SET;
  volatile uint32_t CTRL2_CLR;
  volatile uint32_t CTRL2_TOG;
  volatile uint32_t TRANSFER_COUNT;
       uint8_t RESERVED_0[12];
  volatile uint32_t CUR_BUF;
       uint8_t RESERVED_1[12];
  volatile uint32_t NEXT_BUF;
       uint8_t RESERVED_2[28];
  volatile uint32_t VDCTRL0;
  volatile uint32_t VDCTRL0_SET;
  volatile uint32_t VDCTRL0_CLR;
  volatile uint32_t VDCTRL0_TOG;
  volatile uint32_t VDCTRL1;
       uint8_t RESERVED_3[12];
  volatile uint32_t VDCTRL2;
       uint8_t RESERVED_4[12];
  volatile uint32_t VDCTRL3;
       uint8_t RESERVED_5[12];
  volatile uint32_t VDCTRL4;
       uint8_t RESERVED_6[220];
  volatile uint32_t BM_ERROR_STAT;
       uint8_t RESERVED_7[12];
  volatile uint32_t CRC_STAT;
       uint8_t RESERVED_8[12];
  volatile const uint32_t STAT;
       uint8_t RESERVED_9[76];
  volatile uint32_t THRES;
       uint8_t RESERVED_10[380];
  volatile uint32_t PIGEONCTRL0;
  volatile uint32_t PIGEONCTRL0_SET;
  volatile uint32_t PIGEONCTRL0_CLR;
  volatile uint32_t PIGEONCTRL0_TOG;
  volatile uint32_t PIGEONCTRL1;
  volatile uint32_t PIGEONCTRL1_SET;
  volatile uint32_t PIGEONCTRL1_CLR;
  volatile uint32_t PIGEONCTRL1_TOG;
  volatile uint32_t PIGEONCTRL2;
  volatile uint32_t PIGEONCTRL2_SET;
  volatile uint32_t PIGEONCTRL2_CLR;
  volatile uint32_t PIGEONCTRL2_TOG;
       uint8_t RESERVED_11[1104];
  struct {
    volatile uint32_t PIGEON_0;
         uint8_t RESERVED_0[12];
    volatile uint32_t PIGEON_1;
         uint8_t RESERVED_1[12];
    volatile uint32_t PIGEON_2;
         uint8_t RESERVED_2[28];
  } PIGEON[12];
  volatile uint32_t LUT_CTRL;
       uint8_t RESERVED_12[12];
  volatile uint32_t LUT0_ADDR;
       uint8_t RESERVED_13[12];
  volatile uint32_t LUT0_DATA;
       uint8_t RESERVED_14[12];
  volatile uint32_t LUT1_ADDR;
       uint8_t RESERVED_15[12];
  volatile uint32_t LUT1_DATA;
} LCDIF_Type;
# 14128 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
       uint8_t RESERVED_0[8];
  volatile uint32_t MCR;
  volatile uint32_t MSR;
  volatile uint32_t MIER;
  volatile uint32_t MDER;
  volatile uint32_t MCFGR0;
  volatile uint32_t MCFGR1;
  volatile uint32_t MCFGR2;
  volatile uint32_t MCFGR3;
       uint8_t RESERVED_1[16];
  volatile uint32_t MDMR;
       uint8_t RESERVED_2[4];
  volatile uint32_t MCCR0;
       uint8_t RESERVED_3[4];
  volatile uint32_t MCCR1;
       uint8_t RESERVED_4[4];
  volatile uint32_t MFCR;
  volatile const uint32_t MFSR;
  volatile uint32_t MTDR;
       uint8_t RESERVED_5[12];
  volatile const uint32_t MRDR;
       uint8_t RESERVED_6[156];
  volatile uint32_t SCR;
  volatile uint32_t SSR;
  volatile uint32_t SIER;
  volatile uint32_t SDER;
       uint8_t RESERVED_7[4];
  volatile uint32_t SCFGR1;
  volatile uint32_t SCFGR2;
       uint8_t RESERVED_8[20];
  volatile uint32_t SAMR;
       uint8_t RESERVED_9[12];
  volatile const uint32_t SASR;
  volatile uint32_t STAR;
       uint8_t RESERVED_10[8];
  volatile uint32_t STDR;
       uint8_t RESERVED_11[12];
  volatile const uint32_t SRDR;
} LPI2C_Type;
# 14656 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
       uint8_t RESERVED_0[8];
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t IER;
  volatile uint32_t DER;
  volatile uint32_t CFGR0;
  volatile uint32_t CFGR1;
       uint8_t RESERVED_1[8];
  volatile uint32_t DMR0;
  volatile uint32_t DMR1;
       uint8_t RESERVED_2[8];
  volatile uint32_t CCR;
       uint8_t RESERVED_3[20];
  volatile uint32_t FCR;
  volatile const uint32_t FSR;
  volatile uint32_t TCR;
  volatile uint32_t TDR;
       uint8_t RESERVED_4[8];
  volatile const uint32_t RSR;
  volatile const uint32_t RDR;
} LPSPI_Type;
# 14982 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t GLOBAL;
  volatile uint32_t PINCFG;
  volatile uint32_t BAUD;
  volatile uint32_t STAT;
  volatile uint32_t CTRL;
  volatile uint32_t DATA;
  volatile uint32_t MATCH;
  volatile uint32_t MODIR;
  volatile uint32_t FIFO;
  volatile uint32_t WATER;
} LPUART_Type;
# 15418 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t TIMING;
       uint8_t RESERVED_0[12];
  volatile uint32_t DATA;
       uint8_t RESERVED_1[12];
  volatile uint32_t READ_CTRL;
       uint8_t RESERVED_2[12];
  volatile uint32_t READ_FUSE_DATA;
       uint8_t RESERVED_3[12];
  volatile uint32_t SW_STICKY;
       uint8_t RESERVED_4[12];
  volatile uint32_t SCS;
  volatile uint32_t SCS_SET;
  volatile uint32_t SCS_CLR;
  volatile uint32_t SCS_TOG;
       uint8_t RESERVED_5[32];
  volatile const uint32_t VERSION;
       uint8_t RESERVED_6[108];
  volatile uint32_t TIMING2;
       uint8_t RESERVED_7[764];
  volatile uint32_t LOCK;
       uint8_t RESERVED_8[12];
  volatile uint32_t CFG0;
       uint8_t RESERVED_9[12];
  volatile uint32_t CFG1;
       uint8_t RESERVED_10[12];
  volatile uint32_t CFG2;
       uint8_t RESERVED_11[12];
  volatile uint32_t CFG3;
       uint8_t RESERVED_12[12];
  volatile uint32_t CFG4;
       uint8_t RESERVED_13[12];
  volatile uint32_t CFG5;
       uint8_t RESERVED_14[12];
  volatile uint32_t CFG6;
       uint8_t RESERVED_15[12];
  volatile uint32_t MEM0;
       uint8_t RESERVED_16[12];
  volatile uint32_t MEM1;
       uint8_t RESERVED_17[12];
  volatile uint32_t MEM2;
       uint8_t RESERVED_18[12];
  volatile uint32_t MEM3;
       uint8_t RESERVED_19[12];
  volatile uint32_t MEM4;
       uint8_t RESERVED_20[12];
  volatile uint32_t ANA0;
       uint8_t RESERVED_21[12];
  volatile uint32_t ANA1;
       uint8_t RESERVED_22[12];
  volatile uint32_t ANA2;
       uint8_t RESERVED_23[140];
  volatile uint32_t SRK0;
       uint8_t RESERVED_24[12];
  volatile uint32_t SRK1;
       uint8_t RESERVED_25[12];
  volatile uint32_t SRK2;
       uint8_t RESERVED_26[12];
  volatile uint32_t SRK3;
       uint8_t RESERVED_27[12];
  volatile uint32_t SRK4;
       uint8_t RESERVED_28[12];
  volatile uint32_t SRK5;
       uint8_t RESERVED_29[12];
  volatile uint32_t SRK6;
       uint8_t RESERVED_30[12];
  volatile uint32_t SRK7;
       uint8_t RESERVED_31[12];
  volatile uint32_t SJC_RESP0;
       uint8_t RESERVED_32[12];
  volatile uint32_t SJC_RESP1;
       uint8_t RESERVED_33[12];
  volatile uint32_t MAC0;
       uint8_t RESERVED_34[12];
  volatile uint32_t MAC1;
       uint8_t RESERVED_35[12];
  volatile uint32_t GP3;
       uint8_t RESERVED_36[28];
  volatile uint32_t GP1;
       uint8_t RESERVED_37[12];
  volatile uint32_t GP2;
       uint8_t RESERVED_38[12];
  volatile uint32_t SW_GP1;
       uint8_t RESERVED_39[12];
  volatile uint32_t SW_GP20;
       uint8_t RESERVED_40[12];
  volatile uint32_t SW_GP21;
       uint8_t RESERVED_41[12];
  volatile uint32_t SW_GP22;
       uint8_t RESERVED_42[12];
  volatile uint32_t SW_GP23;
       uint8_t RESERVED_43[12];
  volatile uint32_t MISC_CONF0;
       uint8_t RESERVED_44[12];
  volatile uint32_t MISC_CONF1;
       uint8_t RESERVED_45[12];
  volatile uint32_t SRK_REVOKE;
} OCOTP_Type;
# 15987 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[544];
  volatile uint32_t MEGA_CTRL;
  volatile uint32_t MEGA_PUPSCR;
  volatile uint32_t MEGA_PDNSCR;
  volatile uint32_t MEGA_SR;
       uint8_t RESERVED_1[112];
  volatile uint32_t CPU_CTRL;
  volatile uint32_t CPU_PUPSCR;
  volatile uint32_t CPU_PDNSCR;
  volatile uint32_t CPU_SR;
} PGC_Type;
# 16092 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
       uint8_t RESERVED_0[220];
  volatile const uint32_t LTMR64H;
  volatile const uint32_t LTMR64L;
       uint8_t RESERVED_1[24];
  struct {
    volatile uint32_t LDVAL;
    volatile const uint32_t CVAL;
    volatile uint32_t TCTRL;
    volatile uint32_t TFLG;
  } CHANNEL[4];
} PIT_Type;
# 16204 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[272];
  volatile uint32_t REG_1P1;
  volatile uint32_t REG_1P1_SET;
  volatile uint32_t REG_1P1_CLR;
  volatile uint32_t REG_1P1_TOG;
  volatile uint32_t REG_3P0;
  volatile uint32_t REG_3P0_SET;
  volatile uint32_t REG_3P0_CLR;
  volatile uint32_t REG_3P0_TOG;
  volatile uint32_t REG_2P5;
  volatile uint32_t REG_2P5_SET;
  volatile uint32_t REG_2P5_CLR;
  volatile uint32_t REG_2P5_TOG;
  volatile uint32_t REG_CORE;
  volatile uint32_t REG_CORE_SET;
  volatile uint32_t REG_CORE_CLR;
  volatile uint32_t REG_CORE_TOG;
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
  volatile uint32_t MISC1;
  volatile uint32_t MISC1_SET;
  volatile uint32_t MISC1_CLR;
  volatile uint32_t MISC1_TOG;
  volatile uint32_t MISC2;
  volatile uint32_t MISC2_SET;
  volatile uint32_t MISC2_CLR;
  volatile uint32_t MISC2_TOG;
} PMU_Type;
# 17148 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile const uint16_t CNT;
    volatile uint16_t INIT;
    volatile uint16_t CTRL2;
    volatile uint16_t CTRL;
         uint8_t RESERVED_0[2];
    volatile uint16_t VAL0;
    volatile uint16_t FRACVAL1;
    volatile uint16_t VAL1;
    volatile uint16_t FRACVAL2;
    volatile uint16_t VAL2;
    volatile uint16_t FRACVAL3;
    volatile uint16_t VAL3;
    volatile uint16_t FRACVAL4;
    volatile uint16_t VAL4;
    volatile uint16_t FRACVAL5;
    volatile uint16_t VAL5;
    volatile uint16_t FRCTRL;
    volatile uint16_t OCTRL;
    volatile uint16_t STS;
    volatile uint16_t INTEN;
    volatile uint16_t DMAEN;
    volatile uint16_t TCTRL;
    volatile uint16_t DISMAP[2];
    volatile uint16_t DTCNT0;
    volatile uint16_t DTCNT1;
    volatile uint16_t CAPTCTRLA;
    volatile uint16_t CAPTCOMPA;
    volatile uint16_t CAPTCTRLB;
    volatile uint16_t CAPTCOMPB;
    volatile uint16_t CAPTCTRLX;
    volatile uint16_t CAPTCOMPX;
    volatile const uint16_t CVAL0;
    volatile const uint16_t CVAL0CYC;
    volatile const uint16_t CVAL1;
    volatile const uint16_t CVAL1CYC;
    volatile const uint16_t CVAL2;
    volatile const uint16_t CVAL2CYC;
    volatile const uint16_t CVAL3;
    volatile const uint16_t CVAL3CYC;
    volatile const uint16_t CVAL4;
    volatile const uint16_t CVAL4CYC;
    volatile const uint16_t CVAL5;
    volatile const uint16_t CVAL5CYC;
         uint8_t RESERVED_1[8];
  } SM[4];
  volatile uint16_t OUTEN;
  volatile uint16_t MASK;
  volatile uint16_t SWCOUT;
  volatile uint16_t DTSRCSEL;
  volatile uint16_t MCTRL;
  volatile uint16_t MCTRL2;
  volatile uint16_t FCTRL;
  volatile uint16_t FSTS;
  volatile uint16_t FFILT;
  volatile uint16_t FTST;
  volatile uint16_t FCTRL2;
} PWM_Type;
# 18026 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t STAT;
  volatile uint32_t STAT_SET;
  volatile uint32_t STAT_CLR;
  volatile uint32_t STAT_TOG;
  volatile uint32_t OUT_CTRL;
  volatile uint32_t OUT_CTRL_SET;
  volatile uint32_t OUT_CTRL_CLR;
  volatile uint32_t OUT_CTRL_TOG;
  volatile uint32_t OUT_BUF;
       uint8_t RESERVED_0[12];
  volatile uint32_t OUT_BUF2;
       uint8_t RESERVED_1[12];
  volatile uint32_t OUT_PITCH;
       uint8_t RESERVED_2[12];
  volatile uint32_t OUT_LRC;
       uint8_t RESERVED_3[12];
  volatile uint32_t OUT_PS_ULC;
       uint8_t RESERVED_4[12];
  volatile uint32_t OUT_PS_LRC;
       uint8_t RESERVED_5[12];
  volatile uint32_t OUT_AS_ULC;
       uint8_t RESERVED_6[12];
  volatile uint32_t OUT_AS_LRC;
       uint8_t RESERVED_7[12];
  volatile uint32_t PS_CTRL;
  volatile uint32_t PS_CTRL_SET;
  volatile uint32_t PS_CTRL_CLR;
  volatile uint32_t PS_CTRL_TOG;
  volatile uint32_t PS_BUF;
       uint8_t RESERVED_8[12];
  volatile uint32_t PS_UBUF;
       uint8_t RESERVED_9[12];
  volatile uint32_t PS_VBUF;
       uint8_t RESERVED_10[12];
  volatile uint32_t PS_PITCH;
       uint8_t RESERVED_11[12];
  volatile uint32_t PS_BACKGROUND;
       uint8_t RESERVED_12[12];
  volatile uint32_t PS_SCALE;
       uint8_t RESERVED_13[12];
  volatile uint32_t PS_OFFSET;
       uint8_t RESERVED_14[12];
  volatile uint32_t PS_CLRKEYLOW;
       uint8_t RESERVED_15[12];
  volatile uint32_t PS_CLRKEYHIGH;
       uint8_t RESERVED_16[12];
  volatile uint32_t AS_CTRL;
       uint8_t RESERVED_17[12];
  volatile uint32_t AS_BUF;
       uint8_t RESERVED_18[12];
  volatile uint32_t AS_PITCH;
       uint8_t RESERVED_19[12];
  volatile uint32_t AS_CLRKEYLOW;
       uint8_t RESERVED_20[12];
  volatile uint32_t AS_CLRKEYHIGH;
       uint8_t RESERVED_21[12];
  volatile uint32_t CSC1_COEF0;
       uint8_t RESERVED_22[12];
  volatile uint32_t CSC1_COEF1;
       uint8_t RESERVED_23[12];
  volatile uint32_t CSC1_COEF2;
       uint8_t RESERVED_24[348];
  volatile uint32_t POWER;
       uint8_t RESERVED_25[220];
  volatile uint32_t NEXT;
       uint8_t RESERVED_26[60];
  volatile uint32_t PORTER_DUFF_CTRL;
} PXP_Type;
# 18938 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[212];
  volatile uint32_t ROMPATCHD[8];
  volatile uint32_t ROMPATCHCNTL;
       uint32_t ROMPATCHENH;
  volatile uint32_t ROMPATCHENL;
  volatile uint32_t ROMPATCHA[16];
       uint8_t RESERVED_1[200];
  volatile uint32_t ROMPATCHSR;
} ROMC_Type;
# 19029 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CS;
  volatile uint32_t CNT;
  volatile uint32_t TOVAL;
  volatile uint32_t WIN;
} RTWDOG_Type;
# 19150 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
  volatile uint32_t IOCR;
  volatile uint32_t BMCR0;
  volatile uint32_t BMCR1;
  volatile uint32_t BR[9];
       uint8_t RESERVED_0[4];
  volatile uint32_t INTEN;
  volatile uint32_t INTR;
  volatile uint32_t SDRAMCR0;
  volatile uint32_t SDRAMCR1;
  volatile uint32_t SDRAMCR2;
  volatile uint32_t SDRAMCR3;
  volatile uint32_t NANDCR0;
  volatile uint32_t NANDCR1;
  volatile uint32_t NANDCR2;
  volatile uint32_t NANDCR3;
  volatile uint32_t NORCR0;
  volatile uint32_t NORCR1;
  volatile uint32_t NORCR2;
       uint32_t NORCR3;
  volatile uint32_t SRAMCR0;
  volatile uint32_t SRAMCR1;
  volatile uint32_t SRAMCR2;
       uint32_t SRAMCR3;
  volatile uint32_t DBICR0;
  volatile uint32_t DBICR1;
       uint8_t RESERVED_1[8];
  volatile uint32_t IPCR0;
  volatile uint32_t IPCR1;
  volatile uint32_t IPCR2;
  volatile uint32_t IPCMD;
  volatile uint32_t IPTXDAT;
       uint8_t RESERVED_2[12];
  volatile const uint32_t IPRXDAT;
       uint8_t RESERVED_3[12];
  volatile const uint32_t STS0;
       uint32_t STS1;
  volatile const uint32_t STS2;
       uint32_t STS3;
       uint32_t STS4;
       uint32_t STS5;
       uint32_t STS6;
       uint32_t STS7;
       uint32_t STS8;
       uint32_t STS9;
       uint32_t STS10;
       uint32_t STS11;
  volatile const uint32_t STS12;
       uint32_t STS13;
       uint32_t STS14;
       uint32_t STS15;
} SEMC_Type;
# 19739 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t HPLR;
  volatile uint32_t HPCOMR;
  volatile uint32_t HPCR;
  volatile uint32_t HPSICR;
  volatile uint32_t HPSVCR;
  volatile uint32_t HPSR;
  volatile uint32_t HPSVSR;
  volatile uint32_t HPHACIVR;
  volatile const uint32_t HPHACR;
  volatile uint32_t HPRTCMR;
  volatile uint32_t HPRTCLR;
  volatile uint32_t HPTAMR;
  volatile uint32_t HPTALR;
  volatile uint32_t LPLR;
  volatile uint32_t LPCR;
  volatile uint32_t LPMKCR;
  volatile uint32_t LPSVCR;
       uint8_t RESERVED_0[4];
  volatile uint32_t LPTDCR;
  volatile uint32_t LPSR;
  volatile uint32_t LPSRTCMR;
  volatile uint32_t LPSRTCLR;
  volatile uint32_t LPTAR;
  volatile const uint32_t LPSMCMR;
  volatile const uint32_t LPSMCLR;
  volatile uint32_t LPPGDR;
  volatile uint32_t LPGPR0_LEGACY_ALIAS;
  volatile uint32_t LPZMKR[8];
       uint8_t RESERVED_1[4];
  volatile uint32_t LPGPR_ALIAS[4];
       uint8_t RESERVED_2[96];
  volatile uint32_t LPGPR[8];
       uint8_t RESERVED_3[2776];
  volatile const uint32_t HPVIDR1;
  volatile const uint32_t HPVIDR2;
} SNVS_Type;
# 20345 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SCR;
  volatile uint32_t SRCD;
  volatile uint32_t SRPC;
  volatile uint32_t SIE;
  union {
    volatile uint32_t SIC;
    volatile const uint32_t SIS;
  };
  volatile const uint32_t SRL;
  volatile const uint32_t SRR;
  volatile const uint32_t SRCSH;
  volatile const uint32_t SRCSL;
  volatile const uint32_t SRU;
  volatile const uint32_t SRQ;
  volatile uint32_t STL;
  volatile uint32_t STR;
  volatile uint32_t STCSCH;
  volatile uint32_t STCSCL;
       uint8_t RESERVED_0[8];
  volatile const uint32_t SRFM;
       uint8_t RESERVED_1[8];
  volatile uint32_t STC;
} SPDIF_Type;
# 20700 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SCR;
  volatile const uint32_t SBMR1;
  volatile uint32_t SRSR;
       uint8_t RESERVED_0[16];
  volatile const uint32_t SBMR2;
  volatile uint32_t GPR[10];
} SRC_Type;
# 20865 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[384];
  volatile uint32_t TEMPSENSE0;
  volatile uint32_t TEMPSENSE0_SET;
  volatile uint32_t TEMPSENSE0_CLR;
  volatile uint32_t TEMPSENSE0_TOG;
  volatile uint32_t TEMPSENSE1;
  volatile uint32_t TEMPSENSE1_SET;
  volatile uint32_t TEMPSENSE1_CLR;
  volatile uint32_t TEMPSENSE1_TOG;
       uint8_t RESERVED_1[240];
  volatile uint32_t TEMPSENSE2;
  volatile uint32_t TEMPSENSE2_SET;
  volatile uint32_t TEMPSENSE2_CLR;
  volatile uint32_t TEMPSENSE2_TOG;
} TEMPMON_Type;
# 21042 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile uint16_t COMP1;
    volatile uint16_t COMP2;
    volatile uint16_t CAPT;
    volatile uint16_t LOAD;
    volatile uint16_t HOLD;
    volatile uint16_t CNTR;
    volatile uint16_t CTRL;
    volatile uint16_t SCTRL;
    volatile uint16_t CMPLD1;
    volatile uint16_t CMPLD2;
    volatile uint16_t CSCTRL;
    volatile uint16_t FILT;
    volatile uint16_t DMA;
         uint8_t RESERVED_0[4];
    volatile uint16_t ENBL;
  } CHANNEL[4];
} TMR_Type;
# 21333 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCTL;
  volatile uint32_t SCMISC;
  volatile uint32_t PKRRNG;
  union {
    volatile uint32_t PKRMAX;
    volatile const uint32_t PKRSQ;
  };
  volatile uint32_t SDCTL;
  union {
    volatile uint32_t SBLIM;
    volatile const uint32_t TOTSAM;
  };
  volatile uint32_t FRQMIN;
  union {
    volatile const uint32_t FRQCNT;
    volatile uint32_t FRQMAX;
  };
  union {
    volatile const uint32_t SCMC;
    volatile uint32_t SCML;
  };
  union {
    volatile const uint32_t SCR1C;
    volatile uint32_t SCR1L;
  };
  union {
    volatile const uint32_t SCR2C;
    volatile uint32_t SCR2L;
  };
  union {
    volatile const uint32_t SCR3C;
    volatile uint32_t SCR3L;
  };
  union {
    volatile const uint32_t SCR4C;
    volatile uint32_t SCR4L;
  };
  union {
    volatile const uint32_t SCR5C;
    volatile uint32_t SCR5L;
  };
  union {
    volatile const uint32_t SCR6PC;
    volatile uint32_t SCR6PL;
  };
  volatile const uint32_t STATUS;
  volatile const uint32_t ENT[16];
  volatile const uint32_t PKRCNT10;
  volatile const uint32_t PKRCNT32;
  volatile const uint32_t PKRCNT54;
  volatile const uint32_t PKRCNT76;
  volatile const uint32_t PKRCNT98;
  volatile const uint32_t PKRCNTBA;
  volatile const uint32_t PKRCNTDC;
  volatile const uint32_t PKRCNTFE;
  volatile uint32_t SEC_CFG;
  volatile uint32_t INT_CTRL;
  volatile uint32_t INT_MASK;
  volatile const uint32_t INT_STATUS;
       uint8_t RESERVED_0[64];
  volatile const uint32_t VID1;
  volatile const uint32_t VID2;
} TRNG_Type;
# 21846 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t BASIC_SETTING;
       uint8_t RESERVED_0[12];
  volatile uint32_t PRE_CHARGE_TIME;
       uint8_t RESERVED_1[12];
  volatile uint32_t FLOW_CONTROL;
       uint8_t RESERVED_2[12];
  volatile const uint32_t MEASEURE_VALUE;
       uint8_t RESERVED_3[12];
  volatile uint32_t INT_EN;
       uint8_t RESERVED_4[12];
  volatile uint32_t INT_SIG_EN;
       uint8_t RESERVED_5[12];
  volatile uint32_t INT_STATUS;
       uint8_t RESERVED_6[12];
  volatile uint32_t DEBUG_MODE;
       uint8_t RESERVED_7[12];
  volatile uint32_t DEBUG_MODE2;
} TSC_Type;
# 22084 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t ID;
  volatile const uint32_t HWGENERAL;
  volatile const uint32_t HWHOST;
  volatile const uint32_t HWDEVICE;
  volatile const uint32_t HWTXBUF;
  volatile const uint32_t HWRXBUF;
       uint8_t RESERVED_0[104];
  volatile uint32_t GPTIMER0LD;
  volatile uint32_t GPTIMER0CTRL;
  volatile uint32_t GPTIMER1LD;
  volatile uint32_t GPTIMER1CTRL;
  volatile uint32_t SBUSCFG;
       uint8_t RESERVED_1[108];
  volatile const uint8_t CAPLENGTH;
       uint8_t RESERVED_2[1];
  volatile const uint16_t HCIVERSION;
  volatile const uint32_t HCSPARAMS;
  volatile const uint32_t HCCPARAMS;
       uint8_t RESERVED_3[20];
  volatile const uint16_t DCIVERSION;
       uint8_t RESERVED_4[2];
  volatile const uint32_t DCCPARAMS;
       uint8_t RESERVED_5[24];
  volatile uint32_t USBCMD;
  volatile uint32_t USBSTS;
  volatile uint32_t USBINTR;
  volatile uint32_t FRINDEX;
       uint8_t RESERVED_6[4];
  union {
    volatile uint32_t DEVICEADDR;
    volatile uint32_t PERIODICLISTBASE;
  };
  union {
    volatile uint32_t ASYNCLISTADDR;
    volatile uint32_t ENDPTLISTADDR;
  };
       uint8_t RESERVED_7[4];
  volatile uint32_t BURSTSIZE;
  volatile uint32_t TXFILLTUNING;
       uint8_t RESERVED_8[16];
  volatile uint32_t ENDPTNAK;
  volatile uint32_t ENDPTNAKEN;
  volatile const uint32_t CONFIGFLAG;
  volatile uint32_t PORTSC1;
       uint8_t RESERVED_9[28];
  volatile uint32_t OTGSC;
  volatile uint32_t USBMODE;
  volatile uint32_t ENDPTSETUPSTAT;
  volatile uint32_t ENDPTPRIME;
  volatile uint32_t ENDPTFLUSH;
  volatile const uint32_t ENDPTSTAT;
  volatile uint32_t ENDPTCOMPLETE;
  volatile uint32_t ENDPTCTRL0;
  volatile uint32_t ENDPTCTRL[7];
} USB_Type;
# 23396 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[2048];
  volatile uint32_t USB_OTGn_CTRL;
       uint8_t RESERVED_1[20];
  volatile uint32_t USB_OTGn_PHY_CTRL_0;
} USBNC_Type;
# 23484 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t PWD;
  volatile uint32_t PWD_SET;
  volatile uint32_t PWD_CLR;
  volatile uint32_t PWD_TOG;
  volatile uint32_t TX;
  volatile uint32_t TX_SET;
  volatile uint32_t TX_CLR;
  volatile uint32_t TX_TOG;
  volatile uint32_t RX;
  volatile uint32_t RX_SET;
  volatile uint32_t RX_CLR;
  volatile uint32_t RX_TOG;
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t STATUS;
       uint8_t RESERVED_0[12];
  volatile uint32_t DEBUGr;
  volatile uint32_t DEBUG_SET;
  volatile uint32_t DEBUG_CLR;
  volatile uint32_t DEBUG_TOG;
  volatile const uint32_t DEBUG0_STATUS;
       uint8_t RESERVED_1[12];
  volatile uint32_t DEBUG1;
  volatile uint32_t DEBUG1_SET;
  volatile uint32_t DEBUG1_CLR;
  volatile uint32_t DEBUG1_TOG;
  volatile const uint32_t VERSION;
} USBPHY_Type;
# 24545 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[416];
  struct {
    volatile uint32_t VBUS_DETECT;
    volatile uint32_t VBUS_DETECT_SET;
    volatile uint32_t VBUS_DETECT_CLR;
    volatile uint32_t VBUS_DETECT_TOG;
    volatile uint32_t CHRG_DETECT;
    volatile uint32_t CHRG_DETECT_SET;
    volatile uint32_t CHRG_DETECT_CLR;
    volatile uint32_t CHRG_DETECT_TOG;
    volatile const uint32_t VBUS_DETECT_STAT;
         uint8_t RESERVED_0[12];
    volatile const uint32_t CHRG_DETECT_STAT;
         uint8_t RESERVED_1[28];
    volatile uint32_t MISC;
    volatile uint32_t MISC_SET;
    volatile uint32_t MISC_CLR;
    volatile uint32_t MISC_TOG;
  } INSTANCE[2];
  volatile const uint32_t DIGPROG;
} USB_ANALOG_Type;
# 24833 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t DS_ADDR;
  volatile uint32_t BLK_ATT;
  volatile uint32_t CMD_ARG;
  volatile uint32_t CMD_XFR_TYP;
  volatile const uint32_t CMD_RSP0;
  volatile const uint32_t CMD_RSP1;
  volatile const uint32_t CMD_RSP2;
  volatile const uint32_t CMD_RSP3;
  volatile uint32_t DATA_BUFF_ACC_PORT;
  volatile const uint32_t PRES_STATE;
  volatile uint32_t PROT_CTRL;
  volatile uint32_t SYS_CTRL;
  volatile uint32_t INT_STATUS;
  volatile uint32_t INT_STATUS_EN;
  volatile uint32_t INT_SIGNAL_EN;
  volatile uint32_t AUTOCMD12_ERR_STATUS;
  volatile uint32_t HOST_CTRL_CAP;
  volatile uint32_t WTMK_LVL;
  volatile uint32_t MIX_CTRL;
       uint8_t RESERVED_0[4];
  volatile uint32_t FORCE_EVENT;
  volatile const uint32_t ADMA_ERR_STATUS;
  volatile uint32_t ADMA_SYS_ADDR;
       uint8_t RESERVED_1[4];
  volatile uint32_t DLL_CTRL;
  volatile const uint32_t DLL_STATUS;
  volatile uint32_t CLK_TUNE_CTRL_STATUS;
       uint8_t RESERVED_2[84];
  volatile uint32_t VEND_SPEC;
  volatile uint32_t MMC_BOOT;
  volatile uint32_t VEND_SPEC2;
  volatile uint32_t TUNING_CTRL;
} USDHC_Type;
# 25659 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t WCR;
  volatile uint16_t WSR;
  volatile const uint16_t WRSR;
  volatile uint16_t WICR;
  volatile uint16_t WMCR;
} WDOG_Type;
# 25774 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t SEL0;
  volatile uint16_t SEL1;
  volatile uint16_t SEL2;
  volatile uint16_t SEL3;
  volatile uint16_t SEL4;
  volatile uint16_t SEL5;
  volatile uint16_t SEL6;
  volatile uint16_t SEL7;
  volatile uint16_t SEL8;
  volatile uint16_t SEL9;
  volatile uint16_t SEL10;
  volatile uint16_t SEL11;
  volatile uint16_t SEL12;
  volatile uint16_t SEL13;
  volatile uint16_t SEL14;
  volatile uint16_t SEL15;
  volatile uint16_t SEL16;
  volatile uint16_t SEL17;
  volatile uint16_t SEL18;
  volatile uint16_t SEL19;
  volatile uint16_t SEL20;
  volatile uint16_t SEL21;
  volatile uint16_t SEL22;
  volatile uint16_t SEL23;
  volatile uint16_t SEL24;
  volatile uint16_t SEL25;
  volatile uint16_t SEL26;
  volatile uint16_t SEL27;
  volatile uint16_t SEL28;
  volatile uint16_t SEL29;
  volatile uint16_t SEL30;
  volatile uint16_t SEL31;
  volatile uint16_t SEL32;
  volatile uint16_t SEL33;
  volatile uint16_t SEL34;
  volatile uint16_t SEL35;
  volatile uint16_t SEL36;
  volatile uint16_t SEL37;
  volatile uint16_t SEL38;
  volatile uint16_t SEL39;
  volatile uint16_t SEL40;
  volatile uint16_t SEL41;
  volatile uint16_t SEL42;
  volatile uint16_t SEL43;
  volatile uint16_t SEL44;
  volatile uint16_t SEL45;
  volatile uint16_t SEL46;
  volatile uint16_t SEL47;
  volatile uint16_t SEL48;
  volatile uint16_t SEL49;
  volatile uint16_t SEL50;
  volatile uint16_t SEL51;
  volatile uint16_t SEL52;
  volatile uint16_t SEL53;
  volatile uint16_t SEL54;
  volatile uint16_t SEL55;
  volatile uint16_t SEL56;
  volatile uint16_t SEL57;
  volatile uint16_t SEL58;
  volatile uint16_t SEL59;
  volatile uint16_t SEL60;
  volatile uint16_t SEL61;
  volatile uint16_t SEL62;
  volatile uint16_t SEL63;
  volatile uint16_t SEL64;
  volatile uint16_t SEL65;
  volatile uint16_t CTRL0;
  volatile uint16_t CTRL1;
} XBARA_Type;
# 26465 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t SEL0;
  volatile uint16_t SEL1;
  volatile uint16_t SEL2;
  volatile uint16_t SEL3;
  volatile uint16_t SEL4;
  volatile uint16_t SEL5;
  volatile uint16_t SEL6;
  volatile uint16_t SEL7;
} XBARB_Type;
# 26584 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[336];
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
       uint8_t RESERVED_1[272];
  volatile uint32_t LOWPWR_CTRL;
  volatile uint32_t LOWPWR_CTRL_SET;
  volatile uint32_t LOWPWR_CTRL_CLR;
  volatile uint32_t LOWPWR_CTRL_TOG;
       uint8_t RESERVED_2[32];
  volatile uint32_t OSC_CONFIG0;
  volatile uint32_t OSC_CONFIG0_SET;
  volatile uint32_t OSC_CONFIG0_CLR;
  volatile uint32_t OSC_CONFIG0_TOG;
  volatile uint32_t OSC_CONFIG1;
  volatile uint32_t OSC_CONFIG1_SET;
  volatile uint32_t OSC_CONFIG1_CLR;
  volatile uint32_t OSC_CONFIG1_TOG;
  volatile uint32_t OSC_CONFIG2;
  volatile uint32_t OSC_CONFIG2_SET;
  volatile uint32_t OSC_CONFIG2_CLR;
  volatile uint32_t OSC_CONFIG2_TOG;
} XTALOSC24M_Type;
# 52 "mcusdk/fsl_device_registers.h" 2

# 1 "mcusdk/MIMXRT1052_features.h" 1
# 54 "mcusdk/fsl_device_registers.h" 2
# 49 "mcusdk/drivers/fsl_common.h" 2
# 82 "mcusdk/drivers/fsl_common.h"
enum _status_groups
{
    kStatusGroup_Generic = 0,
    kStatusGroup_FLASH = 1,
    kStatusGroup_LPSPI = 4,
    kStatusGroup_FLEXIO_SPI = 5,
    kStatusGroup_DSPI = 6,
    kStatusGroup_FLEXIO_UART = 7,
    kStatusGroup_FLEXIO_I2C = 8,
    kStatusGroup_LPI2C = 9,
    kStatusGroup_UART = 10,
    kStatusGroup_I2C = 11,
    kStatusGroup_LPSCI = 12,
    kStatusGroup_LPUART = 13,
    kStatusGroup_SPI = 14,
    kStatusGroup_XRDC = 15,
    kStatusGroup_SEMA42 = 16,
    kStatusGroup_SDHC = 17,
    kStatusGroup_SDMMC = 18,
    kStatusGroup_SAI = 19,
    kStatusGroup_MCG = 20,
    kStatusGroup_SCG = 21,
    kStatusGroup_SDSPI = 22,
    kStatusGroup_FLEXIO_I2S = 23,
    kStatusGroup_FLEXIO_MCULCD = 24,
    kStatusGroup_FLASHIAP = 25,
    kStatusGroup_FLEXCOMM_I2C = 26,
    kStatusGroup_I2S = 27,
    kStatusGroup_IUART = 28,
    kStatusGroup_CSI = 29,
    kStatusGroup_MIPI_DSI = 30,
    kStatusGroup_SDRAMC = 35,
    kStatusGroup_POWER = 39,
    kStatusGroup_ENET = 40,
    kStatusGroup_PHY = 41,
    kStatusGroup_TRGMUX = 42,
    kStatusGroup_SMARTCARD = 43,
    kStatusGroup_LMEM = 44,
    kStatusGroup_QSPI = 45,
    kStatusGroup_DMA = 50,
    kStatusGroup_EDMA = 51,
    kStatusGroup_DMAMGR = 52,
    kStatusGroup_FLEXCAN = 53,
    kStatusGroup_LTC = 54,
    kStatusGroup_FLEXIO_CAMERA = 55,
    kStatusGroup_LPC_SPI = 56,
    kStatusGroup_LPC_USART = 57,
    kStatusGroup_DMIC = 58,
    kStatusGroup_SDIF = 59,
    kStatusGroup_SPIFI = 60,
    kStatusGroup_OTP = 61,
    kStatusGroup_MCAN = 62,
    kStatusGroup_CAAM = 63,
    kStatusGroup_ECSPI = 64,
    kStatusGroup_USDHC = 65,
    kStatusGroup_LPC_I2C = 66,
    kStatusGroup_DCP = 67,
    kStatusGroup_MSCAN = 68,
    kStatusGroup_ESAI = 69,
    kStatusGroup_FLEXSPI = 70,
    kStatusGroup_MMDC = 71,
    kStatusGroup_MICFIL = 72,
    kStatusGroup_SDMA = 73,
    kStatusGroup_ICS = 74,
    kStatusGroup_SPDIF = 75,
    kStatusGroup_NOTIFIER = 98,
    kStatusGroup_DebugConsole = 99,
    kStatusGroup_SEMC = 100,
    kStatusGroup_ApplicationRangeStart = 101,
};


enum _generic_status
{
    kStatus_Success = ((((kStatusGroup_Generic)*100) + (0))),
    kStatus_Fail = ((((kStatusGroup_Generic)*100) + (1))),
    kStatus_ReadOnly = ((((kStatusGroup_Generic)*100) + (2))),
    kStatus_OutOfRange = ((((kStatusGroup_Generic)*100) + (3))),
    kStatus_InvalidArgument = ((((kStatusGroup_Generic)*100) + (4))),
    kStatus_Timeout = ((((kStatusGroup_Generic)*100) + (5))),
    kStatus_NoTransferInProgress = ((((kStatusGroup_Generic)*100) + (6))),
};


typedef int32_t status_t;





# 1 "mcusdk/drivers/fsl_clock.h" 1
# 40 "mcusdk/drivers/fsl_clock.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3

# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 41 "mcusdk/drivers/fsl_clock.h" 2
# 102 "mcusdk/drivers/fsl_clock.h"

# 102 "mcusdk/drivers/fsl_clock.h"
extern uint32_t g_xtalFreq;






extern uint32_t g_rtcXtalFreq;
# 381 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_name
{
    kCLOCK_CpuClk = 0x0U,
    kCLOCK_AhbClk = 0x1U,
    kCLOCK_SemcClk = 0x2U,
    kCLOCK_IpgClk = 0x3U,

    kCLOCK_OscClk = 0x4U,
    kCLOCK_RtcClk = 0x5U,

    kCLOCK_ArmPllClk = 0x6U,

    kCLOCK_Usb1PllClk = 0x7U,
    kCLOCK_Usb1PllPfd0Clk = 0x8U,
    kCLOCK_Usb1PllPfd1Clk = 0x9U,
    kCLOCK_Usb1PllPfd2Clk = 0xAU,
    kCLOCK_Usb1PllPfd3Clk = 0xBU,

    kCLOCK_Usb2PllClk = 0xCU,

    kCLOCK_SysPllClk = 0xDU,
    kCLOCK_SysPllPfd0Clk = 0xEU,
    kCLOCK_SysPllPfd1Clk = 0xFU,
    kCLOCK_SysPllPfd2Clk = 0x10U,
    kCLOCK_SysPllPfd3Clk = 0x11U,

    kCLOCK_EnetPll0Clk = 0x12U,
    kCLOCK_EnetPll1Clk = 0x13U,
    kCLOCK_EnetPll2Clk = 0x14U,

    kCLOCK_AudioPllClk = 0x15U,
    kCLOCK_VideoPllClk = 0x16U,
} clock_name_t;







typedef enum _clock_ip_name
{
    kCLOCK_IpInvalid = -1,


    kCLOCK_Aips_tz1 = (0U << 8U) | (0U),
    kCLOCK_Aips_tz2 = (0U << 8U) | (2U),



    kCLOCK_Dcp = (0U << 8U) | (10U),
    kCLOCK_Lpuart3 = (0U << 8U) | (12U),
    kCLOCK_Can1 = (0U << 8U) | (14U),
    kCLOCK_Can1S = (0U << 8U) | (16U),
    kCLOCK_Can2 = (0U << 8U) | (18U),
    kCLOCK_Can2S = (0U << 8U) | (20U),
    kCLOCK_Trace = (0U << 8U) | (22U),
    kCLOCK_Gpt2 = (0U << 8U) | (24U),
    kCLOCK_Gpt2S = (0U << 8U) | (26U),
    kCLOCK_Lpuart2 = (0U << 8U) | (28U),
    kCLOCK_Gpio2 = (0U << 8U) | (30U),


    kCLOCK_Lpspi1 = (1U << 8U) | (0U),
    kCLOCK_Lpspi2 = (1U << 8U) | (2U),
    kCLOCK_Lpspi3 = (1U << 8U) | (4U),
    kCLOCK_Lpspi4 = (1U << 8U) | (6U),
    kCLOCK_Adc2 = (1U << 8U) | (8U),
    kCLOCK_Enet = (1U << 8U) | (10U),
    kCLOCK_Pit = (1U << 8U) | (12U),
    kCLOCK_Aoi2 = (1U << 8U) | (14U),
    kCLOCK_Adc1 = (1U << 8U) | (16U),

    kCLOCK_Gpt1 = (1U << 8U) | (20U),
    kCLOCK_Gpt1S = (1U << 8U) | (22U),
    kCLOCK_Lpuart4 = (1U << 8U) | (24U),
    kCLOCK_Gpio1 = (1U << 8U) | (26U),
    kCLOCK_Csu = (1U << 8U) | (28U),
    kCLOCK_Gpio5 = (1U << 8U) | (30U),



    kCLOCK_Csi = (2U << 8U) | (2U),
    kCLOCK_IomuxcSnvs = (2U << 8U) | (4U),
    kCLOCK_Lpi2c1 = (2U << 8U) | (6U),
    kCLOCK_Lpi2c2 = (2U << 8U) | (8U),
    kCLOCK_Lpi2c3 = (2U << 8U) | (10U),
    kCLOCK_Ocotp = (2U << 8U) | (12U),
    kCLOCK_Xbar3 = (2U << 8U) | (14U),
    kCLOCK_Ipmux1 = (2U << 8U) | (16U),
    kCLOCK_Ipmux2 = (2U << 8U) | (18U),
    kCLOCK_Ipmux3 = (2U << 8U) | (20U),
    kCLOCK_Xbar1 = (2U << 8U) | (22U),
    kCLOCK_Xbar2 = (2U << 8U) | (24U),
    kCLOCK_Gpio3 = (2U << 8U) | (26U),
    kCLOCK_Lcd = (2U << 8U) | (28U),
    kCLOCK_Pxp = (2U << 8U) | (30U),


    kCLOCK_Flexio2 = (3U << 8U) | (0U),
    kCLOCK_Lpuart5 = (3U << 8U) | (2U),
    kCLOCK_Semc = (3U << 8U) | (4U),
    kCLOCK_Lpuart6 = (3U << 8U) | (6U),
    kCLOCK_Aoi1 = (3U << 8U) | (8U),
    kCLOCK_LcdPixel = (3U << 8U) | (10U),
    kCLOCK_Gpio4 = (3U << 8U) | (12U),
    kCLOCK_Ewm0 = (3U << 8U) | (14U),
    kCLOCK_Wdog1 = (3U << 8U) | (16U),
    kCLOCK_FlexRam = (3U << 8U) | (18U),
    kCLOCK_Acmp1 = (3U << 8U) | (20U),
    kCLOCK_Acmp2 = (3U << 8U) | (22U),
    kCLOCK_Acmp3 = (3U << 8U) | (24U),
    kCLOCK_Acmp4 = (3U << 8U) | (26U),
    kCLOCK_Ocram = (3U << 8U) | (28U),
    kCLOCK_IomuxcSnvsGpr = (3U << 8U) | (30U),


    kCLOCK_Iomuxc = (4U << 8U) | (2U),
    kCLOCK_IomuxcGpr = (4U << 8U) | (4U),
    kCLOCK_Bee = (4U << 8U) | (6U),
    kCLOCK_SimM7 = (4U << 8U) | (8U),
    kCLOCK_Tsc = (4U << 8U) | (10U),
    kCLOCK_SimM = (4U << 8U) | (12U),
    kCLOCK_SimEms = (4U << 8U) | (14U),
    kCLOCK_Pwm1 = (4U << 8U) | (16U),
    kCLOCK_Pwm2 = (4U << 8U) | (18U),
    kCLOCK_Pwm3 = (4U << 8U) | (20U),
    kCLOCK_Pwm4 = (4U << 8U) | (22U),
    kCLOCK_Enc1 = (4U << 8U) | (24U),
    kCLOCK_Enc2 = (4U << 8U) | (26U),
    kCLOCK_Enc3 = (4U << 8U) | (28U),
    kCLOCK_Enc4 = (4U << 8U) | (30U),


    kCLOCK_Rom = (5U << 8U) | (0U),
    kCLOCK_Flexio1 = (5U << 8U) | (2U),
    kCLOCK_Wdog3 = (5U << 8U) | (4U),
    kCLOCK_Dma = (5U << 8U) | (6U),
    kCLOCK_Kpp = (5U << 8U) | (8U),
    kCLOCK_Wdog2 = (5U << 8U) | (10U),
    kCLOCK_Aips_tz4 = (5U << 8U) | (12U),
    kCLOCK_Spdif = (5U << 8U) | (14U),
    kCLOCK_SimMain = (5U << 8U) | (16U),
    kCLOCK_Sai1 = (5U << 8U) | (18U),
    kCLOCK_Sai2 = (5U << 8U) | (20U),
    kCLOCK_Sai3 = (5U << 8U) | (22U),
    kCLOCK_Lpuart1 = (5U << 8U) | (24U),
    kCLOCK_Lpuart7 = (5U << 8U) | (26U),
    kCLOCK_SnvsHp = (5U << 8U) | (28U),
    kCLOCK_SnvsLp = (5U << 8U) | (30U),


    kCLOCK_UsbOh3 = (6U << 8U) | (0U),
    kCLOCK_Usdhc1 = (6U << 8U) | (2U),
    kCLOCK_Usdhc2 = (6U << 8U) | (4U),
    kCLOCK_Dcdc = (6U << 8U) | (6U),
    kCLOCK_Ipmux4 = (6U << 8U) | (8U),
    kCLOCK_FlexSpi = (6U << 8U) | (10U),
    kCLOCK_Trng = (6U << 8U) | (12U),
    kCLOCK_Lpuart8 = (6U << 8U) | (14U),
    kCLOCK_Timer4 = (6U << 8U) | (16U),
    kCLOCK_Aips_tz3 = (6U << 8U) | (18U),
    kCLOCK_SimPer = (6U << 8U) | (20U),
    kCLOCK_Anadig = (6U << 8U) | (22U),
    kCLOCK_Lpi2c4 = (6U << 8U) | (24U),
    kCLOCK_Timer1 = (6U << 8U) | (26U),
    kCLOCK_Timer2 = (6U << 8U) | (28U),
    kCLOCK_Timer3 = (6U << 8U) | (30U),

} clock_ip_name_t;


typedef enum _clock_osc
{
    kCLOCK_RcOsc = 0U,
    kCLOCK_XtalOsc = 1U,
} clock_osc_t;


typedef enum _clock_gate_value
{
    kCLOCK_ClockNotNeeded = 0U,
    kCLOCK_ClockNeededRun = 1U,
    kCLOCK_ClockNeededRunWait = 3U,
} clock_gate_value_t;


typedef enum _clock_mode_t
{
    kCLOCK_ModeRun = 0U,
    kCLOCK_ModeWait = 1U,
    kCLOCK_ModeStop = 2U,
} clock_mode_t;
# 584 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_mux
{
    kCLOCK_Pll3SwMux = ((((uint32_t)(&((CCM_Type *)0U)->CCSR)) & 0xFFU) | (((0U)) << 8U) | (((((0x1U)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_PeriphMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((25U)) << 8U) | (((((0x2000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((5U)) << 26U)),
    kCLOCK_SemcAltMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((7U)) << 8U) | (((((0x80U)) >> ((7U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_SemcMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_PrePeriphMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((18U)) << 8U) | (((((0xC0000U)) >> ((18U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_TraceMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((14U)) << 8U) | (((((0xC000U)) >> ((14U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PeriphClk2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((12U)) << 8U) | (((((0x3000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_LpspiMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((4U)) << 8U) | (((((0x30U)) >> ((4U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_FlexspiMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((29U)) << 8U) | (((((0x60000000U)) >> ((29U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((17U)) << 8U) | (((((0x20000U)) >> ((17U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((16U)) << 8U) | (((((0x10000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((14U)) << 8U) | (((((0xC000U)) >> ((14U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((12U)) << 8U) | (((((0x3000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((10U)) << 8U) | (((((0xC00U)) >> ((10U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PerclkMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Flexio2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((19U)) << 8U) | (((((0x180000U)) >> ((19U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_CanMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((8U)) << 8U) | (((((0x300U)) >> ((8U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_UartMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_SpdifMux = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((20U)) << 8U) | (((((0x300000U)) >> ((20U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((7U)) << 8U) | (((((0x180U)) >> ((7U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Lpi2cMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((18U)) << 8U) | (((((0x40000U)) >> ((18U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1PreMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((15U)) << 8U) | (((((0x38000U)) >> ((15U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CsiMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR3)) & 0xFFU) | (((9U)) << 8U) | (((((0x600U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
} clock_mux_t;
# 629 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_div
{
    kCLOCK_ArmDiv = ((((uint32_t)(&((CCM_Type *)0U)->CACRR)) & 0xFFU) | (((0U)) << 8U) | (((((0x7U)) >> ((0U))) & 0x1FFFU) << 13U) | (((16U)) << 26U)),

    kCLOCK_PeriphClk2Div = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((27U)) << 8U) | (((((0x38000000U)) >> ((27U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_SemcDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((16U)) << 8U) | (((((0x70000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0U)) << 26U)),
    kCLOCK_AhbDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((10U)) << 8U) | (((((0x1C00U)) >> ((10U))) & 0x1FFFU) << 13U) | (((1U)) << 26U)),
    kCLOCK_IpgDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((8U)) << 8U) | (((((0x300U)) >> ((8U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_LpspiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((26U)) << 8U) | (((((0x1C000000U)) >> ((26U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1Div = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((23U)) << 8U) | (((((0x3800000U)) >> ((23U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_FlexspiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((23U)) << 8U) | (((((0x3800000U)) >> ((23U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PerclkDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CanDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((2U)) << 8U) | (((((0xFCU)) >> ((2U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_TraceDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((25U)) << 8U) | (((((0x6000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc2Div = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((16U)) << 8U) | (((((0x70000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc1Div = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((11U)) << 8U) | (((((0x3800U)) >> ((11U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_UartDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Flexio2Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((25U)) << 8U) | (((((0xE000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((22U)) << 8U) | (((((0x1C00000U)) >> ((22U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((16U)) << 8U) | (((((0x3F0000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio2PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x1C0U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Sai2PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS2CDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x1C0U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai2Div = ((((uint32_t)(&((CCM_Type *)0U)->CS2CDR)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Spdif0PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((25U)) << 8U) | (((((0xE000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Spdif0Div = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((22U)) << 8U) | (((((0x1C00000U)) >> ((22U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((12U)) << 8U) | (((((0x7000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1Div = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Lpi2cDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((19U)) << 8U) | (((((0x1F80000U)) >> ((19U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((12U)) << 8U) | (((((0x7000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CsiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR3)) & 0xFFU) | (((11U)) << 8U) | (((((0x3800U)) >> ((11U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
} clock_div_t;


enum _clock_pll_bypass_clk_src
{
    kCLOCK_PllBypassClkSrc24M = 0U,
    kCLOCK_PllBypassClkSrcClkPN = 1U,
};


typedef struct _clock_arm_pll_config
{
    uint32_t loopDivider;
} clock_arm_pll_config_t;


typedef struct _clock_usb_pll_config
{
    uint8_t loopDivider;


} clock_usb_pll_config_t;



typedef struct _clock_sys_pll_config
{
    uint8_t loopDivider;


    uint32_t numerator;
    uint32_t denominator;
} clock_sys_pll_config_t;


typedef struct _clock_audio_pll_config
{
    uint8_t loopDivider;
    uint8_t postDivider;
    uint32_t numerator;
    uint32_t denominator;
} clock_audio_pll_config_t;


typedef struct _clock_video_pll_config
{
    uint8_t loopDivider;
    uint8_t postDivider;
    uint32_t numerator;
    uint32_t denominator;
} clock_video_pll_config_t;


typedef struct _clock_enet_pll_config
{
    
# 725 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 725 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput0;
    
# 726 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 726 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput1;
    
# 727 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 727 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput2;
    uint8_t loopDivider0;




    uint8_t loopDivider1;




} clock_enet_pll_config_t;


typedef enum _clock_pll
{
    kCLOCK_PllArm = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ARM) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllSys = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_SYS) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllUsb1 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_USB1) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllAudio = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_AUDIO) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllVideo = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_VIDEO) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllEnet0 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllEnet1 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((20U))),
    kCLOCK_PllEnet2 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((21U))),
    kCLOCK_PllUsb2 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_USB2) & 0xFFFU) << 16U) | ((13U))),
} clock_pll_t;


typedef enum _clock_pfd
{
    kCLOCK_Pfd0 = 0U,
    kCLOCK_Pfd1 = 1U,
    kCLOCK_Pfd2 = 2U,
    kCLOCK_Pfd3 = 3U,
} clock_pfd_t;


typedef enum _clock_usb_src
{
    kCLOCK_Usb480M = 0,
    kCLOCK_UsbSrcUnused = 0xFFFFFFFFU,

} clock_usb_src_t;


typedef enum _clock_usb_phy_src
{
    kCLOCK_Usbphy480M = 0,
} clock_usb_phy_src_t;
# 791 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetMux(clock_mux_t mux, uint32_t value)
{
    uint32_t busyShift;

    busyShift = (((mux) >> 26U) & 0x3FU);
    (*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) = ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) & (~((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU)))))) |
                              (((uint32_t)((value) << (((mux) >> 8U) & 0x1FU))) & ((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU)))));

    
# 799 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 799 "mcusdk/drivers/fsl_clock.h"
                                        ;


    if ((0x20U) != busyShift)
    {

        while (((CCM_Type *)(0x400FC000u))->CDHIPR & (1U << busyShift))
        {
        }
    }
}







static inline uint32_t CLOCK_GetMux(clock_mux_t mux)
{
    return ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) & ((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU))))) >> (((mux) >> 8U) & 0x1FU);
}







static inline void CLOCK_SetDiv(clock_div_t divider, uint32_t value)
{
    uint32_t busyShift;

    busyShift = (((divider) >> 26U) & 0x3FU);
    (*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) = ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) & (~((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU)))))) |
                              (((uint32_t)((value) << (((divider) >> 8U) & 0x1FU))) & ((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU)))));

    
# 836 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 836 "mcusdk/drivers/fsl_clock.h"
                                        ;


    if ((0x20U) != busyShift)
    {

        while (((CCM_Type *)(0x400FC000u))->CDHIPR & (1U << busyShift))
        {
        }
    }
}






static inline uint32_t CLOCK_GetDiv(clock_div_t divider)
{
    return (((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) & ((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU))))) >> (((divider) >> 8U) & 0x1FU));
}







static inline void CLOCK_ControlGate(clock_ip_name_t name, clock_gate_value_t value)
{
    uint32_t index = ((uint32_t)name) >> 8U;
    uint32_t shift = ((uint32_t)name) & 0x1FU;
    volatile uint32_t *reg;

    
# 870 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 870 "mcusdk/drivers/fsl_clock.h"
                      ;

    reg = ((volatile uint32_t *)&((CCM_Type *)(0x400FC000u))->CCGR0) + index;
    *reg = ((*reg) & ~(3U << shift)) | (((uint32_t)value) << shift);
}






static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
}






static inline void CLOCK_DisableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNotNeeded);
}






static inline void CLOCK_SetMode(clock_mode_t mode)
{
    ((CCM_Type *)(0x400FC000u))->CLPCR = (((CCM_Type *)(0x400FC000u))->CLPCR & ~(0x3U)) | (((uint32_t)(((uint32_t)((uint32_t)mode)) << (0U))) & (0x3U));
}
# 915 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetPllBypass(CCM_ANALOG_Type * base, clock_pll_t pll, 
# 915 "mcusdk/drivers/fsl_clock.h" 3 4
                                                                              _Bool 
# 915 "mcusdk/drivers/fsl_clock.h"
                                                                                   bypass)
{
    if (bypass)
    {
        (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 4U))) |= 1U << (16U);
    }
    else
    {
        (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 8U))) |= 1U << (16U);
    }
}
# 936 "mcusdk/drivers/fsl_clock.h"
static inline 
# 936 "mcusdk/drivers/fsl_clock.h" 3 4
             _Bool 
# 936 "mcusdk/drivers/fsl_clock.h"
                  CLOCK_IsPllBypassed(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return (
# 938 "mcusdk/drivers/fsl_clock.h" 3 4
           _Bool
# 938 "mcusdk/drivers/fsl_clock.h"
               )((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (1U << (16U)));
}
# 950 "mcusdk/drivers/fsl_clock.h"
static inline 
# 950 "mcusdk/drivers/fsl_clock.h" 3 4
             _Bool 
# 950 "mcusdk/drivers/fsl_clock.h"
                  CLOCK_IsPllEnabled(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return (
# 952 "mcusdk/drivers/fsl_clock.h" 3 4
           _Bool
# 952 "mcusdk/drivers/fsl_clock.h"
               )((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (1U << (((uint32_t)pll) & 0x1FU)));
}
# 963 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetPllBypassRefClkSrc(CCM_ANALOG_Type * base, clock_pll_t pll, uint32_t src)
{
    (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) |= ((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (~(0xC000U))) | src;
}
# 978 "mcusdk/drivers/fsl_clock.h"
static inline uint32_t CLOCK_GetOscFreq(void)
{
    return (((XTALOSC24M_Type *)(0x400D8000u))->LOWPWR_CTRL & (0x10U)) ? 24000000UL : g_xtalFreq;
}
# 990 "mcusdk/drivers/fsl_clock.h"
static inline uint32_t CLOCK_GetPllBypassRefClk(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return ((((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (0xC000U)) >> (14U)) == kCLOCK_PllBypassClkSrc24M) ?
    CLOCK_GetOscFreq() : 0U;
}
# 1005 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetFreq(clock_name_t name);






static inline uint32_t CLOCK_GetCpuClkFreq(void)
{
    return CLOCK_GetFreq(kCLOCK_CpuClk);
}
# 1036 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitExternalClk(
# 1036 "mcusdk/drivers/fsl_clock.h" 3 4
                          _Bool 
# 1036 "mcusdk/drivers/fsl_clock.h"
                               bypassXtalOsc);
# 1046 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitExternalClk(void);
# 1055 "mcusdk/drivers/fsl_clock.h"
void CLOCK_SwitchOsc(clock_osc_t osc);






static inline uint32_t CLOCK_GetRtcFreq(void)
{
    return 32768U;
}






static inline void CLOCK_SetXtalFreq(uint32_t freq)
{
    g_xtalFreq = freq;
}






static inline void CLOCK_SetRtcXtalFreq(uint32_t freq)
{
    g_rtcXtalFreq = freq;
}





void CLOCK_InitRcOsc24M(void);




void CLOCK_DeinitRcOsc24M(void);
# 1111 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitArmPll(const clock_arm_pll_config_t *config);




void CLOCK_DeinitArmPll(void);
# 1125 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitSysPll(const clock_sys_pll_config_t *config);




void CLOCK_DeinitSysPll(void);
# 1139 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb1Pll(const clock_usb_pll_config_t *config);




void CLOCK_DeinitUsb1Pll(void);
# 1153 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb2Pll(const clock_usb_pll_config_t *config);




void CLOCK_DeinitUsb2Pll(void);
# 1167 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitAudioPll(const clock_audio_pll_config_t *config);




void CLOCK_DeinitAudioPll(void);
# 1181 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitVideoPll(const clock_video_pll_config_t *config);




void CLOCK_DeinitVideoPll(void);
# 1195 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitEnetPll(const clock_enet_pll_config_t *config);






void CLOCK_DeinitEnetPll(void);
# 1212 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetPllFreq(clock_pll_t pll);
# 1224 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitSysPfd(clock_pfd_t pfd, uint8_t pfdFrac);
# 1233 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitSysPfd(clock_pfd_t pfd);
# 1245 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb1Pfd(clock_pfd_t pfd, uint8_t pfdFrac);
# 1254 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitUsb1Pfd(clock_pfd_t pfd);
# 1264 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetSysPfdFreq(clock_pfd_t pfd);
# 1274 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetUsb1PfdFreq(clock_pfd_t pfd);
# 1287 "mcusdk/drivers/fsl_clock.h"

# 1287 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1287 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs0Clock(clock_usb_src_t src, uint32_t freq);
# 1299 "mcusdk/drivers/fsl_clock.h"

# 1299 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1299 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs0PhyPllClock(clock_usb_phy_src_t src, uint32_t freq);





void CLOCK_DisableUsbhs0PhyPllClock(void);
# 1318 "mcusdk/drivers/fsl_clock.h"

# 1318 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1318 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs1Clock(clock_usb_src_t src, uint32_t freq);
# 1330 "mcusdk/drivers/fsl_clock.h"

# 1330 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1330 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs1PhyPllClock(clock_usb_phy_src_t src, uint32_t freq);





void CLOCK_DisableUsbhs1PhyPllClock(void);
# 173 "mcusdk/drivers/fsl_common.h" 2
# 364 "mcusdk/drivers/fsl_common.h"
    static inline status_t EnableIRQ(IRQn_Type interrupt)
    {
        if (NotAvail_IRQn == interrupt)
        {
            return kStatus_Fail;
        }
# 381 "mcusdk/drivers/fsl_common.h"
        __NVIC_EnableIRQ(interrupt);

        return kStatus_Success;
    }
# 402 "mcusdk/drivers/fsl_common.h"
    static inline status_t DisableIRQ(IRQn_Type interrupt)
    {
        if (NotAvail_IRQn == interrupt)
        {
            return kStatus_Fail;
        }
# 419 "mcusdk/drivers/fsl_common.h"
    __NVIC_DisableIRQ(interrupt);

        return kStatus_Success;
    }
# 432 "mcusdk/drivers/fsl_common.h"
    static inline uint32_t DisableGlobalIRQ(void)
    {







    uint32_t regPrimask = __get_PRIMASK();

    __disable_irq();

    return regPrimask;

    }
# 459 "mcusdk/drivers/fsl_common.h"
    static inline void EnableGlobalIRQ(uint32_t primask)
    {



    __set_PRIMASK(primask);

    }
# 520 "mcusdk/drivers/fsl_common.h"
    void *SDK_Malloc(size_t size, size_t alignbytes);






    void SDK_Free(void *ptr);
# 39 "./mpconfigport.h" 2
# 179 "./mpconfigport.h"
extern const struct _mp_obj_module_t machine_module;
extern const struct _mp_obj_module_t pyb_module;
extern const struct _mp_obj_module_t mcu_module;
extern const struct _mp_obj_module_t mp_module_ubinascii;
extern const struct _mp_obj_module_t mp_module_ure;
extern const struct _mp_obj_module_t mp_module_uzlib;
extern const struct _mp_obj_module_t mp_module_ujson;
extern const struct _mp_obj_module_t mp_module_uheapq;
extern const struct _mp_obj_module_t mp_module_uhashlib;
extern const struct _mp_obj_module_t mp_module_uos;
extern const struct _mp_obj_module_t mp_module_utime;
extern const struct _mp_obj_module_t mp_module_usocket;
extern const struct _mp_obj_module_t mp_module_network;
extern const struct _mp_obj_module_t time_module;
extern const struct _mp_obj_module_t lcd_module;

extern const struct _mp_obj_module_t sensor_module;
extern const struct _mp_obj_module_t image_module;
extern const struct _mp_obj_module_t mjpeg_module;
extern const struct _mp_obj_module_t nn_module;
extern const struct _mp_obj_module_t gif_module;
# 330 "./mpconfigport.h"
typedef int mp_int_t;
typedef unsigned int mp_uint_t;
typedef long mp_off_t;
# 345 "./mpconfigport.h"
static inline void enable_irq(mp_uint_t state) {
    __set_PRIMASK(state);
}

static inline mp_uint_t disable_irq(void) {
    mp_uint_t state = __get_PRIMASK();
    __disable_irq();
    return state;
}
# 372 "./mpconfigport.h"
extern void HAL_WFI(void);
# 46 "../../py/mpconfig.h" 2
# 554 "../../py/mpconfig.h"
typedef float mp_float_t;
# 14 "./omv/py/mp.h" 2
# 1 "../../py/misc.h" 1
# 35 "../../py/misc.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 36 "../../py/misc.h" 2

typedef unsigned char byte;
typedef unsigned int uint;
# 82 "../../py/misc.h"
void *m_malloc(size_t num_bytes);
void *m_malloc_maybe(size_t num_bytes);
void *m_malloc_with_finaliser(size_t num_bytes);
void *m_malloc0(size_t num_bytes);





void *m_realloc(void *ptr, size_t new_num_bytes);
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, 
# 92 "../../py/misc.h" 3 4
                                                      _Bool 
# 92 "../../py/misc.h"
                                                           allow_move);
void m_free(void *ptr);




__attribute__((noreturn)) void m_malloc_fail(size_t num_bytes);
# 119 "../../py/misc.h"
typedef uint32_t unichar;






unichar utf8_get_char(const byte *s);
const byte *utf8_next_char(const byte *s);


# 129 "../../py/misc.h" 3 4
_Bool 
# 129 "../../py/misc.h"
    unichar_isspace(unichar c);

# 130 "../../py/misc.h" 3 4
_Bool 
# 130 "../../py/misc.h"
    unichar_isalpha(unichar c);

# 131 "../../py/misc.h" 3 4
_Bool 
# 131 "../../py/misc.h"
    unichar_isprint(unichar c);

# 132 "../../py/misc.h" 3 4
_Bool 
# 132 "../../py/misc.h"
    unichar_isdigit(unichar c);

# 133 "../../py/misc.h" 3 4
_Bool 
# 133 "../../py/misc.h"
    unichar_isxdigit(unichar c);

# 134 "../../py/misc.h" 3 4
_Bool 
# 134 "../../py/misc.h"
    unichar_isident(unichar c);

# 135 "../../py/misc.h" 3 4
_Bool 
# 135 "../../py/misc.h"
    unichar_isupper(unichar c);

# 136 "../../py/misc.h" 3 4
_Bool 
# 136 "../../py/misc.h"
    unichar_islower(unichar c);
unichar unichar_tolower(unichar c);
unichar unichar_toupper(unichar c);
mp_uint_t unichar_xdigit_value(unichar c);
mp_uint_t unichar_charlen(const char *str, mp_uint_t len);





typedef struct _vstr_t {
    size_t alloc;
    size_t len;
    char *buf;
    
# 150 "../../py/misc.h" 3 4
   _Bool 
# 150 "../../py/misc.h"
        fixed_buf : 1;
} vstr_t;




void vstr_init(vstr_t *vstr, size_t alloc);
void vstr_init_len(vstr_t *vstr, size_t len);
void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf);
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
void vstr_hint_size(vstr_t *vstr, size_t size);
char *vstr_extend(vstr_t *vstr, size_t size);
char *vstr_add_len(vstr_t *vstr, size_t len);
char *vstr_null_terminated_str(vstr_t *vstr);
void vstr_add_byte(vstr_t *vstr, byte v);
void vstr_add_char(vstr_t *vstr, unichar chr);
void vstr_add_str(vstr_t *vstr, const char *str);
void vstr_add_strn(vstr_t *vstr, const char *str, size_t len);
void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b);
void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr);
void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_tail_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut);
void vstr_printf(vstr_t *vstr, const char *fmt, ...);
# 199 "../../py/misc.h"
int DEBUG_printf(const char *fmt, ...);

extern mp_uint_t mp_verbose_flag;






static inline mp_uint_t count_lead_ones(byte val) {
    mp_uint_t c = 0;
    for (byte mask = 0x80; val & mask; mask >>= 1) {
        c++;
    }
    return c;
}
# 15 "./omv/py/mp.h" 2
# 1 "./systick.h" 1
# 27 "./systick.h"
void sys_tick_wait_at_least(uint32_t stc, uint32_t delay_ms);

# 28 "./systick.h" 3 4
_Bool 
# 28 "./systick.h"
    sys_tick_has_passed(uint32_t stc, uint32_t delay_ms);
void systick_sleep(volatile uint32_t ms);
uint32_t systick_current_millis(void);
# 16 "./omv/py/mp.h" 2
# 1 "./pendsv.h" 1
# 27 "./pendsv.h"
void pendsv_init(void);
void pendsv_kbd_intr(void);






void pendsv_isr_handler(void) __attribute__((naked));


void pendsv_nlr_jump(void *o);
void pendsv_nlr_jump_hard(void *o);
# 17 "./omv/py/mp.h" 2
# 1 "../../py/qstr.h" 1
# 29 "../../py/qstr.h"
# 1 "../../py/mpconfig.h" 1
# 30 "../../py/qstr.h" 2
# 1 "../../py/misc.h" 1
# 31 "../../py/qstr.h" 2
# 39 "../../py/qstr.h"
enum {





    MP_QSTRnumber_of,
};

typedef size_t qstr;

typedef struct _qstr_pool_t {
    struct _qstr_pool_t *prev;
    size_t total_prev_len;
    size_t alloc;
    size_t len;
    const byte *qstrs[];
} qstr_pool_t;



void qstr_init(void);

mp_uint_t qstr_compute_hash(const byte *data, size_t len);
qstr qstr_find_strn(const char *str, size_t str_len);

qstr qstr_from_str(const char *str);
qstr qstr_from_strn(const char *str, size_t len);

byte *qstr_build_start(size_t len, byte **q_ptr);
qstr qstr_build_end(byte *q_ptr);

mp_uint_t qstr_hash(qstr q);
const char *qstr_str(qstr q);
size_t qstr_len(qstr q);
const byte *qstr_data(qstr q, size_t *len);

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes);
void qstr_dump_data(void);
# 18 "./omv/py/mp.h" 2

# 1 "../../py/nlr.h" 1
# 32 "../../py/nlr.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 34 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/syslimits.h" 1 3 4






# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 168 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/limits.h" 1 3 4
# 169 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 2 3 4
# 8 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/syslimits.h" 2 3 4
# 35 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 2 3 4
# 33 "../../py/nlr.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 1 3
# 10 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 1 3


# 365 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 3

# 365 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 3
typedef int jmp_buf[23];




# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 2 3




void longjmp (jmp_buf __jmpb, int __retval)
   __attribute__ ((__noreturn__));



int setjmp (jmp_buf __jmpb);


# 34 "../../py/nlr.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 35 "../../py/nlr.h" 2




# 38 "../../py/nlr.h"
typedef struct _nlr_buf_t nlr_buf_t;
struct _nlr_buf_t {

    nlr_buf_t *prev;
    void *ret_val;
# 53 "../../py/nlr.h"
    void *regs[10];
# 65 "../../py/nlr.h"
};
# 77 "../../py/nlr.h"
unsigned int nlr_push(nlr_buf_t *);
void nlr_pop(void);
__attribute__((noreturn)) void nlr_jump(void *val);





__attribute__((noreturn)) void nlr_jump_fail(void *val);






extern void fb_alloc_free_till_mark();
# 20 "./omv/py/mp.h" 2
# 1 "../../py/lexer.h" 1
# 32 "../../py/lexer.h"
# 1 "../../py/qstr.h" 1
# 33 "../../py/lexer.h" 2
# 1 "../../py/reader.h" 1
# 29 "../../py/reader.h"
# 1 "../../py/obj.h" 1
# 32 "../../py/obj.h"
# 1 "../../py/mpprint.h" 1
# 48 "../../py/mpprint.h"
typedef void (*mp_print_strn_t)(void *data, const char *str, size_t len);

typedef struct _mp_print_t {
    void *data;
    mp_print_strn_t print_strn;
} mp_print_t;



extern const mp_print_t mp_plat_print;


extern const mp_print_t mp_sys_stdout_print;


int mp_print_str(const mp_print_t *print, const char *str);
int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width);

int mp_print_float(const mp_print_t *print, mp_float_t f, char fmt, int flags, char fill, int width, int prec);


int mp_printf(const mp_print_t *print, const char *fmt, ...);
# 33 "../../py/obj.h" 2
# 1 "../../py/runtime0.h" 1
# 45 "../../py/runtime0.h"
typedef enum {


    MP_UNARY_OP_POSITIVE,
    MP_UNARY_OP_NEGATIVE,
    MP_UNARY_OP_INVERT,
    MP_UNARY_OP_NOT,


    MP_UNARY_OP_NUM_BYTECODE,

    MP_UNARY_OP_BOOL = MP_UNARY_OP_NUM_BYTECODE,
    MP_UNARY_OP_LEN,
    MP_UNARY_OP_HASH,
    MP_UNARY_OP_ABS,
    MP_UNARY_OP_SIZEOF,

    MP_UNARY_OP_NUM_RUNTIME,
} mp_unary_op_t;



typedef enum {

    MP_BINARY_OP_LESS,
    MP_BINARY_OP_MORE,
    MP_BINARY_OP_EQUAL,
    MP_BINARY_OP_LESS_EQUAL,
    MP_BINARY_OP_MORE_EQUAL,
    MP_BINARY_OP_NOT_EQUAL,
    MP_BINARY_OP_IN,
    MP_BINARY_OP_IS,
    MP_BINARY_OP_EXCEPTION_MATCH,


    MP_BINARY_OP_INPLACE_OR,
    MP_BINARY_OP_INPLACE_XOR,
    MP_BINARY_OP_INPLACE_AND,
    MP_BINARY_OP_INPLACE_LSHIFT,
    MP_BINARY_OP_INPLACE_RSHIFT,
    MP_BINARY_OP_INPLACE_ADD,
    MP_BINARY_OP_INPLACE_SUBTRACT,
    MP_BINARY_OP_INPLACE_MULTIPLY,
    MP_BINARY_OP_INPLACE_FLOOR_DIVIDE,
    MP_BINARY_OP_INPLACE_TRUE_DIVIDE,
    MP_BINARY_OP_INPLACE_MODULO,
    MP_BINARY_OP_INPLACE_POWER,


    MP_BINARY_OP_OR,
    MP_BINARY_OP_XOR,
    MP_BINARY_OP_AND,
    MP_BINARY_OP_LSHIFT,
    MP_BINARY_OP_RSHIFT,
    MP_BINARY_OP_ADD,
    MP_BINARY_OP_SUBTRACT,
    MP_BINARY_OP_MULTIPLY,
    MP_BINARY_OP_FLOOR_DIVIDE,
    MP_BINARY_OP_TRUE_DIVIDE,
    MP_BINARY_OP_MODULO,
    MP_BINARY_OP_POWER,



    MP_BINARY_OP_NUM_BYTECODE,
# 128 "../../py/runtime0.h"
    MP_BINARY_OP_DIVMOD

        = MP_BINARY_OP_NUM_BYTECODE

    ,

    MP_BINARY_OP_NUM_RUNTIME,


    MP_BINARY_OP_NOT_IN,
    MP_BINARY_OP_IS_NOT,
} mp_binary_op_t;

typedef enum {
    MP_F_CONVERT_OBJ_TO_NATIVE = 0,
    MP_F_CONVERT_NATIVE_TO_OBJ,
    MP_F_LOAD_NAME,
    MP_F_LOAD_GLOBAL,
    MP_F_LOAD_BUILD_CLASS,
    MP_F_LOAD_ATTR,
    MP_F_LOAD_METHOD,
    MP_F_LOAD_SUPER_METHOD,
    MP_F_STORE_NAME,
    MP_F_STORE_GLOBAL,
    MP_F_STORE_ATTR,
    MP_F_OBJ_SUBSCR,
    MP_F_OBJ_IS_TRUE,
    MP_F_UNARY_OP,
    MP_F_BINARY_OP,
    MP_F_BUILD_TUPLE,
    MP_F_BUILD_LIST,
    MP_F_LIST_APPEND,
    MP_F_BUILD_MAP,
    MP_F_STORE_MAP,

    MP_F_BUILD_SET,
    MP_F_STORE_SET,

    MP_F_MAKE_FUNCTION_FROM_RAW_CODE,
    MP_F_NATIVE_CALL_FUNCTION_N_KW,
    MP_F_CALL_METHOD_N_KW,
    MP_F_CALL_METHOD_N_KW_VAR,
    MP_F_NATIVE_GETITER,
    MP_F_NATIVE_ITERNEXT,
    MP_F_NLR_PUSH,
    MP_F_NLR_POP,
    MP_F_NATIVE_RAISE,
    MP_F_IMPORT_NAME,
    MP_F_IMPORT_FROM,
    MP_F_IMPORT_ALL,

    MP_F_NEW_SLICE,

    MP_F_UNPACK_SEQUENCE,
    MP_F_UNPACK_EX,
    MP_F_DELETE_NAME,
    MP_F_DELETE_GLOBAL,
    MP_F_NEW_CELL,
    MP_F_MAKE_CLOSURE_FROM_RAW_CODE,
    MP_F_SETUP_CODE_STATE,
    MP_F_SMALL_INT_FLOOR_DIVIDE,
    MP_F_SMALL_INT_MODULO,
    MP_F_NUMBER_OF,
} mp_fun_kind_t;

extern void *const mp_fun_table[MP_F_NUMBER_OF];
# 34 "../../py/obj.h" 2
# 42 "../../py/obj.h"
typedef void *mp_obj_t;
typedef const void *mp_const_obj_t;




typedef struct _mp_obj_type_t mp_obj_type_t;



struct _mp_obj_base_t {
    const mp_obj_type_t *type __attribute__((aligned(4)));
};
typedef struct _mp_obj_base_t mp_obj_base_t;
# 84 "../../py/obj.h"
 static inline 
# 84 "../../py/obj.h" 3 4
              _Bool 
# 84 "../../py/obj.h"
                   MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 1) != 0); }



 static inline 
# 89 "../../py/obj.h" 3 4
              _Bool 
# 89 "../../py/obj.h"
                   MP_OBJ_IS_QSTR(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 3) == 2); }






 extern const struct _mp_obj_float_t mp_const_float_e_obj;
 extern const struct _mp_obj_float_t mp_const_float_pi_obj;


 mp_float_t mp_obj_float_get(mp_obj_t self_in);
 mp_obj_t mp_obj_new_float(mp_float_t value);


 static inline 
# 105 "../../py/obj.h" 3 4
              _Bool 
# 105 "../../py/obj.h"
                   MP_OBJ_IS_OBJ(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 3) == 0); }
# 239 "../../py/obj.h"
typedef mp_const_obj_t mp_rom_obj_t;
# 265 "../../py/obj.h"
extern const mp_obj_type_t mp_type_int;
extern const mp_obj_type_t mp_type_bool;
static inline 
# 267 "../../py/obj.h" 3 4
             _Bool 
# 267 "../../py/obj.h"
                  mp_obj_is_integer(mp_const_obj_t o) {
 return (MP_OBJ_IS_SMALL_INT(o) || (MP_OBJ_IS_OBJ(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_int)))) || (MP_OBJ_IS_OBJ(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_bool)));
}
# 343 "../../py/obj.h"
typedef struct _mp_map_elem_t {
    mp_obj_t key;
    mp_obj_t value;
} mp_map_elem_t;

typedef struct _mp_rom_map_elem_t {
    mp_rom_obj_t key;
    mp_rom_obj_t value;
} mp_rom_map_elem_t;






typedef struct _mp_map_t {
    size_t all_keys_are_qstrs : 1;
    size_t is_fixed : 1;
    size_t is_ordered : 1;
    size_t used : (8 * sizeof(size_t) - 3);
    size_t alloc;
    mp_map_elem_t *table;
} mp_map_t;


typedef enum _mp_map_lookup_kind_t {
    MP_MAP_LOOKUP = 0,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND = 1,
    MP_MAP_LOOKUP_REMOVE_IF_FOUND = 2,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3,
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline 
# 377 "../../py/obj.h" 3 4
             _Bool 
# 377 "../../py/obj.h"
                  MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != (((mp_obj_t)(void*)0)) && (map)->table[pos].key != (((mp_obj_t)(void*)4))); }

void mp_map_init(mp_map_t *map, size_t n);
void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table);
mp_map_t *mp_map_new(size_t n);
void mp_map_deinit(mp_map_t *map);
void mp_map_free(mp_map_t *map);
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
void mp_map_clear(mp_map_t *map);
void mp_map_dump(mp_map_t *map);



typedef struct _mp_set_t {
    size_t alloc;
    size_t used;
    mp_obj_t *table;
} mp_set_t;

static inline 
# 396 "../../py/obj.h" 3 4
             _Bool 
# 396 "../../py/obj.h"
                  MP_SET_SLOT_IS_FILLED(const mp_set_t *set, size_t pos) { return ((set)->table[pos] != (((mp_obj_t)(void*)0)) && (set)->table[pos] != (((mp_obj_t)(void*)4))); }

void mp_set_init(mp_set_t *set, size_t n);
mp_obj_t mp_set_lookup(mp_set_t *set, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
mp_obj_t mp_set_remove_first(mp_set_t *set);
void mp_set_clear(mp_set_t *set);



typedef mp_obj_t (*mp_fun_0_t)(void);
typedef mp_obj_t (*mp_fun_1_t)(mp_obj_t);
typedef mp_obj_t (*mp_fun_2_t)(mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_3_t)(mp_obj_t, mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_var_t)(size_t n, const mp_obj_t *);


typedef mp_obj_t (*mp_fun_kw_t)(size_t n, const mp_obj_t *, mp_map_t *);

typedef enum {
    PRINT_STR = 0,
    PRINT_REPR = 1,
    PRINT_EXC = 2,
    PRINT_JSON = 3,
    PRINT_RAW = 4,
    PRINT_EXC_SUBCLASS = 0x80,
} mp_print_kind_t;

typedef struct _mp_obj_iter_buf_t {
    mp_obj_base_t base;
    mp_obj_t buf[3];
} mp_obj_iter_buf_t;





typedef void (*mp_print_fun_t)(const mp_print_t *print, mp_obj_t o, mp_print_kind_t kind);
typedef mp_obj_t (*mp_make_new_fun_t)(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_call_fun_t)(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_unary_op_fun_t)(mp_unary_op_t op, mp_obj_t);
typedef mp_obj_t (*mp_binary_op_fun_t)(mp_binary_op_t op, mp_obj_t, mp_obj_t);
typedef void (*mp_attr_fun_t)(mp_obj_t self_in, qstr attr, mp_obj_t *dest);
typedef mp_obj_t (*mp_subscr_fun_t)(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
typedef mp_obj_t (*mp_getiter_fun_t)(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_buffer_info_t {





    void *buf;
    size_t len;
    int typecode;




} mp_buffer_info_t;



typedef struct _mp_buffer_p_t {
    mp_int_t (*get_buffer)(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
} mp_buffer_p_t;

# 462 "../../py/obj.h" 3 4
_Bool 
# 462 "../../py/obj.h"
    mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);


typedef struct _mp_stream_p_t {


    mp_uint_t (*read)(mp_obj_t obj, void *buf, mp_uint_t size, int *errcode);
    mp_uint_t (*write)(mp_obj_t obj, const void *buf, mp_uint_t size, int *errcode);
    mp_uint_t (*ioctl)(mp_obj_t obj, mp_uint_t request, uintptr_t arg, int *errcode);
    mp_uint_t is_text : 1;
} mp_stream_p_t;

struct _mp_obj_type_t {

    mp_obj_base_t base;


    qstr name;


    mp_print_fun_t print;


    mp_make_new_fun_t make_new;


    mp_call_fun_t call;



    mp_unary_op_fun_t unary_op;
    mp_binary_op_fun_t binary_op;
# 507 "../../py/obj.h"
    mp_attr_fun_t attr;






    mp_subscr_fun_t subscr;




    mp_getiter_fun_t getiter;



    mp_fun_1_t iternext;


    mp_buffer_p_t buffer_p;


    const void *protocol;





    const void *parent;


    struct _mp_obj_dict_t *locals_dict;
};


extern const mp_obj_type_t mp_type_type;
extern const mp_obj_type_t mp_type_object;
extern const mp_obj_type_t mp_type_NoneType;
extern const mp_obj_type_t mp_type_bool;
extern const mp_obj_type_t mp_type_int;
extern const mp_obj_type_t mp_type_str;
extern const mp_obj_type_t mp_type_bytes;
extern const mp_obj_type_t mp_type_bytearray;
extern const mp_obj_type_t mp_type_memoryview;
extern const mp_obj_type_t mp_type_float;
extern const mp_obj_type_t mp_type_complex;
extern const mp_obj_type_t mp_type_tuple;
extern const mp_obj_type_t mp_type_list;
extern const mp_obj_type_t mp_type_map;
extern const mp_obj_type_t mp_type_enumerate;
extern const mp_obj_type_t mp_type_filter;
extern const mp_obj_type_t mp_type_dict;
extern const mp_obj_type_t mp_type_ordereddict;
extern const mp_obj_type_t mp_type_range;
extern const mp_obj_type_t mp_type_set;
extern const mp_obj_type_t mp_type_frozenset;
extern const mp_obj_type_t mp_type_slice;
extern const mp_obj_type_t mp_type_zip;
extern const mp_obj_type_t mp_type_array;
extern const mp_obj_type_t mp_type_super;
extern const mp_obj_type_t mp_type_gen_instance;
extern const mp_obj_type_t mp_type_fun_builtin_0;
extern const mp_obj_type_t mp_type_fun_builtin_1;
extern const mp_obj_type_t mp_type_fun_builtin_2;
extern const mp_obj_type_t mp_type_fun_builtin_3;
extern const mp_obj_type_t mp_type_fun_builtin_var;
extern const mp_obj_type_t mp_type_fun_bc;
extern const mp_obj_type_t mp_type_module;
extern const mp_obj_type_t mp_type_staticmethod;
extern const mp_obj_type_t mp_type_classmethod;
extern const mp_obj_type_t mp_type_property;
extern const mp_obj_type_t mp_type_stringio;
extern const mp_obj_type_t mp_type_bytesio;
extern const mp_obj_type_t mp_type_reversed;
extern const mp_obj_type_t mp_type_polymorph_iter;


extern const mp_obj_type_t mp_type_BaseException;
extern const mp_obj_type_t mp_type_ArithmeticError;
extern const mp_obj_type_t mp_type_AssertionError;
extern const mp_obj_type_t mp_type_AttributeError;
extern const mp_obj_type_t mp_type_EOFError;
extern const mp_obj_type_t mp_type_Exception;
extern const mp_obj_type_t mp_type_GeneratorExit;
extern const mp_obj_type_t mp_type_ImportError;
extern const mp_obj_type_t mp_type_IndentationError;
extern const mp_obj_type_t mp_type_IndexError;
extern const mp_obj_type_t mp_type_KeyboardInterrupt;
extern const mp_obj_type_t mp_type_KeyError;
extern const mp_obj_type_t mp_type_LookupError;
extern const mp_obj_type_t mp_type_MemoryError;
extern const mp_obj_type_t mp_type_NameError;
extern const mp_obj_type_t mp_type_NotImplementedError;
extern const mp_obj_type_t mp_type_OSError;
extern const mp_obj_type_t mp_type_TimeoutError;
extern const mp_obj_type_t mp_type_OverflowError;
extern const mp_obj_type_t mp_type_RuntimeError;
extern const mp_obj_type_t mp_type_StopAsyncIteration;
extern const mp_obj_type_t mp_type_StopIteration;
extern const mp_obj_type_t mp_type_SyntaxError;
extern const mp_obj_type_t mp_type_SystemExit;
extern const mp_obj_type_t mp_type_TypeError;
extern const mp_obj_type_t mp_type_UnicodeError;
extern const mp_obj_type_t mp_type_ValueError;
extern const mp_obj_type_t mp_type_ViperTypeError;
extern const mp_obj_type_t mp_type_ZeroDivisionError;
# 622 "../../py/obj.h"
extern const struct _mp_obj_none_t mp_const_none_obj;
extern const struct _mp_obj_bool_t mp_const_false_obj;
extern const struct _mp_obj_bool_t mp_const_true_obj;
extern const struct _mp_obj_str_t mp_const_empty_bytes_obj;
extern const struct _mp_obj_tuple_t mp_const_empty_tuple_obj;
extern const struct _mp_obj_singleton_t mp_const_ellipsis_obj;
extern const struct _mp_obj_singleton_t mp_const_notimplemented_obj;
extern const struct _mp_obj_exception_t mp_const_MemoryError_obj;
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;



mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? (((mp_obj_t)&mp_const_true_obj)) : (((mp_obj_t)&mp_const_false_obj)); }
mp_obj_t mp_obj_new_cell(mp_obj_t obj);
mp_obj_t mp_obj_new_int(mp_int_t value);
mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value);
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, 
# 639 "../../py/obj.h" 3 4
                                                                  _Bool 
# 639 "../../py/obj.h"
                                                                       neg, unsigned int base);
mp_obj_t mp_obj_new_int_from_ll(long long val);
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val);
mp_obj_t mp_obj_new_str(const char* data, size_t len, 
# 642 "../../py/obj.h" 3 4
                                                     _Bool 
# 642 "../../py/obj.h"
                                                          make_qstr_if_not_already);
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr);
mp_obj_t mp_obj_new_bytes(const byte* data, size_t len);
mp_obj_t mp_obj_new_bytearray(size_t n, void *items);
mp_obj_t mp_obj_new_bytearray_by_ref(size_t n, void *items);

mp_obj_t mp_obj_new_int_from_float(mp_float_t val);
mp_obj_t mp_obj_new_complex(mp_float_t real, mp_float_t imag);

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type);
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg);
mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg);
mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...);
mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_native(mp_obj_t def_args_in, mp_obj_t def_kw_args, const void *fun_data, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_viper(size_t n_args, void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_fun_asm(size_t n_args, void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun);
mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed, const mp_obj_t *closed);
mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items);
mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items);
mp_obj_t mp_obj_new_dict(size_t n_args);
mp_obj_t mp_obj_new_set(size_t n_args, mp_obj_t *items);
mp_obj_t mp_obj_new_slice(mp_obj_t start, mp_obj_t stop, mp_obj_t step);
mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self);
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_obj_new_module(qstr module_name);
mp_obj_t mp_obj_new_memoryview(byte typecode, size_t nitems, void *items);

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in);
const char *mp_obj_get_type_str(mp_const_obj_t o_in);

# 674 "../../py/obj.h" 3 4
_Bool 
# 674 "../../py/obj.h"
    mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo);
mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type);

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
void mp_obj_print(mp_obj_t o, mp_print_kind_t kind);
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc);


# 681 "../../py/obj.h" 3 4
_Bool 
# 681 "../../py/obj.h"
    mp_obj_is_true(mp_obj_t arg);

# 682 "../../py/obj.h" 3 4
_Bool 
# 682 "../../py/obj.h"
    mp_obj_is_callable(mp_obj_t o_in);

# 683 "../../py/obj.h" 3 4
_Bool 
# 683 "../../py/obj.h"
    mp_obj_equal(mp_obj_t o1, mp_obj_t o2);

mp_int_t mp_obj_get_int(mp_const_obj_t arg);
mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg);

# 687 "../../py/obj.h" 3 4
_Bool 
# 687 "../../py/obj.h"
    mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value);

mp_float_t mp_obj_get_float(mp_obj_t self_in);

# 690 "../../py/obj.h" 3 4
_Bool 
# 690 "../../py/obj.h"
    mp_obj_get_float_maybe(mp_obj_t arg, mp_float_t *value);
void mp_obj_get_complex(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);


void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items);
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items);
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, 
# 696 "../../py/obj.h" 3 4
                                                                          _Bool 
# 696 "../../py/obj.h"
                                                                               is_slice);
mp_obj_t mp_obj_id(mp_obj_t o_in);
mp_obj_t mp_obj_len(mp_obj_t o_in);
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in);
mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t val);
mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in);


mp_obj_t mp_obj_cell_get(mp_obj_t self_in);
void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj);



mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in);

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in);




# 715 "../../py/obj.h" 3 4
_Bool 
# 715 "../../py/obj.h"
    mp_obj_is_exception_type(mp_obj_t self_in);

# 716 "../../py/obj.h" 3 4
_Bool 
# 716 "../../py/obj.h"
    mp_obj_is_exception_instance(mp_obj_t self_in);

# 717 "../../py/obj.h" 3 4
_Bool 
# 717 "../../py/obj.h"
    mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type);
void mp_obj_exception_clear_traceback(mp_obj_t self_in);
void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block);
void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values);
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in);
mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_alloc_emergency_exception_buf(mp_obj_t size_in);
void mp_init_emergency_exception_buf(void);



# 727 "../../py/obj.h" 3 4
_Bool 
# 727 "../../py/obj.h"
    mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2);
qstr mp_obj_str_get_qstr(mp_obj_t self_in);
const char *mp_obj_str_get_str(mp_obj_t self_in);
const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len);
mp_obj_t mp_obj_str_intern(mp_obj_t str);
void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, 
# 732 "../../py/obj.h" 3 4
                                                                                       _Bool 
# 732 "../../py/obj.h"
                                                                                            is_bytes);






static inline mp_int_t mp_float_hash(mp_float_t val) { return (mp_int_t)val; }

mp_obj_t mp_obj_float_binary_op(mp_binary_op_t op, mp_float_t lhs_val, mp_obj_t rhs);


void mp_obj_complex_get(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);
mp_obj_t mp_obj_complex_binary_op(mp_binary_op_t op, mp_float_t lhs_real, mp_float_t lhs_imag, mp_obj_t rhs_in);





void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_tuple_del(mp_obj_t self_in);
mp_int_t mp_obj_tuple_hash(mp_obj_t self_in);


struct _mp_obj_list_t;
void mp_obj_list_init(struct _mp_obj_list_t *o, size_t n);
mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg);
mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value);
void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_list_set_len(mp_obj_t self_in, size_t len);
void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);


typedef struct _mp_obj_dict_t {
    mp_obj_base_t base;
    mp_map_t map;
} mp_obj_dict_t;
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
mp_map_t *mp_obj_dict_get_map(mp_obj_t self_in);


void mp_obj_set_store(mp_obj_t self_in, mp_obj_t item);


void mp_obj_slice_get(mp_obj_t self_in, mp_obj_t *start, mp_obj_t *stop, mp_obj_t *step);



typedef struct _mp_obj_fun_builtin_fixed_t {
    mp_obj_base_t base;
    union {
        mp_fun_0_t _0;
        mp_fun_1_t _1;
        mp_fun_2_t _2;
        mp_fun_3_t _3;
    } fun;
} mp_obj_fun_builtin_fixed_t;


typedef struct _mp_obj_fun_builtin_var_t {
    mp_obj_base_t base;
    
# 798 "../../py/obj.h" 3 4
   _Bool 
# 798 "../../py/obj.h"
        is_kw : 1;
    mp_uint_t n_args_min : 15;
    mp_uint_t n_args_max : 16;
    union {
        mp_fun_var_t var;
        mp_fun_kw_t kw;
    } fun;
} mp_obj_fun_builtin_var_t;

qstr mp_obj_fun_get_name(mp_const_obj_t fun);
qstr mp_obj_code_get_name(const byte *code_info);

mp_obj_t mp_identity(mp_obj_t self);
extern const mp_obj_fun_builtin_fixed_t mp_identity_obj;
mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t self_in);


# 821 "../../py/obj.h" 3 4
_Bool 
# 821 "../../py/obj.h"
    mp_obj_is_package(mp_obj_t module);



typedef struct _mp_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_obj_t fun;
} mp_obj_static_class_method_t;
typedef struct _mp_rom_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_rom_obj_t fun;
} mp_rom_obj_static_class_method_t;


const mp_obj_t *mp_obj_property_get(mp_obj_t self_in);




typedef struct {
    mp_uint_t start;
    mp_uint_t stop;
    mp_int_t step;
} mp_bound_slice_t;

void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest);


# 848 "../../py/obj.h" 3 4
_Bool 
# 848 "../../py/obj.h"
    mp_seq_get_fast_slice_indexes(mp_uint_t len, mp_obj_t slice, mp_bound_slice_t *indexes);




# 852 "../../py/obj.h" 3 4
_Bool 
# 852 "../../py/obj.h"
    mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2);

# 853 "../../py/obj.h" 3 4
_Bool 
# 853 "../../py/obj.h"
    mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2);
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value);
mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes);
# 30 "../../py/reader.h" 2






typedef struct _mp_reader_t {
    void *data;
    mp_uint_t (*readbyte)(void *data);
    void (*close)(void *data);
} mp_reader_t;

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len);
void mp_reader_new_file(mp_reader_t *reader, const char *filename);
void mp_reader_new_file_from_fd(mp_reader_t *reader, int fd, 
# 44 "../../py/reader.h" 3 4
                                                            _Bool 
# 44 "../../py/reader.h"
                                                                 close_fd);
# 34 "../../py/lexer.h" 2







typedef enum _mp_token_kind_t {
    MP_TOKEN_END,

    MP_TOKEN_INVALID,
    MP_TOKEN_DEDENT_MISMATCH,
    MP_TOKEN_LONELY_STRING_OPEN,

    MP_TOKEN_NEWLINE,
    MP_TOKEN_INDENT,
    MP_TOKEN_DEDENT,

    MP_TOKEN_NAME,
    MP_TOKEN_INTEGER,
    MP_TOKEN_FLOAT_OR_IMAG,
    MP_TOKEN_STRING,
    MP_TOKEN_BYTES,

    MP_TOKEN_ELLIPSIS,

    MP_TOKEN_KW_FALSE,
    MP_TOKEN_KW_NONE,
    MP_TOKEN_KW_TRUE,
    MP_TOKEN_KW___DEBUG__,
    MP_TOKEN_KW_AND,
    MP_TOKEN_KW_AS,
    MP_TOKEN_KW_ASSERT,

    MP_TOKEN_KW_ASYNC,
    MP_TOKEN_KW_AWAIT,

    MP_TOKEN_KW_BREAK,
    MP_TOKEN_KW_CLASS,
    MP_TOKEN_KW_CONTINUE,
    MP_TOKEN_KW_DEF,
    MP_TOKEN_KW_DEL,
    MP_TOKEN_KW_ELIF,
    MP_TOKEN_KW_ELSE,
    MP_TOKEN_KW_EXCEPT,
    MP_TOKEN_KW_FINALLY,
    MP_TOKEN_KW_FOR,
    MP_TOKEN_KW_FROM,
    MP_TOKEN_KW_GLOBAL,
    MP_TOKEN_KW_IF,
    MP_TOKEN_KW_IMPORT,
    MP_TOKEN_KW_IN,
    MP_TOKEN_KW_IS,
    MP_TOKEN_KW_LAMBDA,
    MP_TOKEN_KW_NONLOCAL,
    MP_TOKEN_KW_NOT,
    MP_TOKEN_KW_OR,
    MP_TOKEN_KW_PASS,
    MP_TOKEN_KW_RAISE,
    MP_TOKEN_KW_RETURN,
    MP_TOKEN_KW_TRY,
    MP_TOKEN_KW_WHILE,
    MP_TOKEN_KW_WITH,
    MP_TOKEN_KW_YIELD,

    MP_TOKEN_OP_PLUS,
    MP_TOKEN_OP_MINUS,
    MP_TOKEN_OP_STAR,
    MP_TOKEN_OP_DBL_STAR,
    MP_TOKEN_OP_SLASH,
    MP_TOKEN_OP_DBL_SLASH,
    MP_TOKEN_OP_PERCENT,
    MP_TOKEN_OP_LESS,
    MP_TOKEN_OP_DBL_LESS,
    MP_TOKEN_OP_MORE,
    MP_TOKEN_OP_DBL_MORE,
    MP_TOKEN_OP_AMPERSAND,
    MP_TOKEN_OP_PIPE,
    MP_TOKEN_OP_CARET,
    MP_TOKEN_OP_TILDE,
    MP_TOKEN_OP_LESS_EQUAL,
    MP_TOKEN_OP_MORE_EQUAL,
    MP_TOKEN_OP_DBL_EQUAL,
    MP_TOKEN_OP_NOT_EQUAL,

    MP_TOKEN_DEL_PAREN_OPEN,
    MP_TOKEN_DEL_PAREN_CLOSE,
    MP_TOKEN_DEL_BRACKET_OPEN,
    MP_TOKEN_DEL_BRACKET_CLOSE,
    MP_TOKEN_DEL_BRACE_OPEN,
    MP_TOKEN_DEL_BRACE_CLOSE,
    MP_TOKEN_DEL_COMMA,
    MP_TOKEN_DEL_COLON,
    MP_TOKEN_DEL_PERIOD,
    MP_TOKEN_DEL_SEMICOLON,
    MP_TOKEN_DEL_AT,
    MP_TOKEN_DEL_EQUAL,
    MP_TOKEN_DEL_PLUS_EQUAL,
    MP_TOKEN_DEL_MINUS_EQUAL,
    MP_TOKEN_DEL_STAR_EQUAL,
    MP_TOKEN_DEL_SLASH_EQUAL,
    MP_TOKEN_DEL_DBL_SLASH_EQUAL,
    MP_TOKEN_DEL_PERCENT_EQUAL,
    MP_TOKEN_DEL_AMPERSAND_EQUAL,
    MP_TOKEN_DEL_PIPE_EQUAL,
    MP_TOKEN_DEL_CARET_EQUAL,
    MP_TOKEN_DEL_DBL_MORE_EQUAL,
    MP_TOKEN_DEL_DBL_LESS_EQUAL,
    MP_TOKEN_DEL_DBL_STAR_EQUAL,
    MP_TOKEN_DEL_MINUS_MORE,
} mp_token_kind_t;



typedef struct _mp_lexer_t {
    qstr source_name;
    mp_reader_t reader;

    unichar chr0, chr1, chr2;

    size_t line;
    size_t column;

    mp_int_t emit_dent;
    mp_int_t nested_bracket_level;

    size_t alloc_indent_level;
    size_t num_indent_level;
    uint16_t *indent_level;

    size_t tok_line;
    size_t tok_column;
    mp_token_kind_t tok_kind;
    vstr_t vstr;
} mp_lexer_t;

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader);
mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len);

void mp_lexer_free(mp_lexer_t *lex);
void mp_lexer_to_next(mp_lexer_t *lex);







typedef enum {
    MP_IMPORT_STAT_NO_EXIST,
    MP_IMPORT_STAT_DIR,
    MP_IMPORT_STAT_FILE,
} mp_import_stat_t;

mp_import_stat_t mp_vfs_import_stat(const char *path);
mp_lexer_t *mp_lexer_new_from_file(const char *filename);
# 21 "./omv/py/mp.h" 2
# 1 "../../py/parse.h" 1
# 29 "../../py/parse.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 30 "../../py/parse.h" 2




struct _mp_lexer_t;
# 52 "../../py/parse.h"
typedef uintptr_t mp_parse_node_t;

typedef struct _mp_parse_node_struct_t {
    uint32_t source_line;
    uint32_t kind_num_nodes;
    mp_parse_node_t nodes[];
} mp_parse_node_struct_t;
# 79 "../../py/parse.h"
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    return (mp_parse_node_t)((0x1) | ((mp_uint_t)val << 1));
}
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
}

# 85 "../../py/parse.h" 3 4
_Bool 
# 85 "../../py/parse.h"
    mp_parse_node_is_const_false(mp_parse_node_t pn);

# 86 "../../py/parse.h" 3 4
_Bool 
# 86 "../../py/parse.h"
    mp_parse_node_is_const_true(mp_parse_node_t pn);

# 87 "../../py/parse.h" 3 4
_Bool 
# 87 "../../py/parse.h"
    mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o);
int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes);
void mp_parse_node_print(mp_parse_node_t pn, size_t indent);

typedef enum {
    MP_PARSE_SINGLE_INPUT,
    MP_PARSE_FILE_INPUT,
    MP_PARSE_EVAL_INPUT,
} mp_parse_input_kind_t;

typedef struct _mp_parse_t {
    mp_parse_node_t root;
    struct _mp_parse_chunk_t *chunk;
} mp_parse_tree_t;



mp_parse_tree_t mp_parse(struct _mp_lexer_t *lex, mp_parse_input_kind_t input_kind);
void mp_parse_tree_clear(mp_parse_tree_t *tree);
# 22 "./omv/py/mp.h" 2
# 1 "../../py/obj.h" 1
# 23 "./omv/py/mp.h" 2
# 1 "../../py/objtuple.h" 1
# 31 "../../py/objtuple.h"
typedef struct _mp_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_obj_t items[];
} mp_obj_tuple_t;

typedef struct _mp_rom_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_rom_obj_t items[];
} mp_rom_obj_tuple_t;

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in);
mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);
mp_obj_t mp_obj_tuple_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf);

extern const mp_obj_type_t mp_type_attrtuple;
# 59 "../../py/objtuple.h"
void mp_obj_attrtuple_print_helper(const mp_print_t *print, const qstr *fields, mp_obj_tuple_t *o);


mp_obj_t mp_obj_new_attrtuple(const qstr *fields, size_t n, const mp_obj_t *items);
# 24 "./omv/py/mp.h" 2
# 1 "../../py/runtime.h" 1
# 29 "../../py/runtime.h"
# 1 "../../py/mpstate.h" 1
# 32 "../../py/mpstate.h"
# 1 "../../py/mpthread.h" 1
# 33 "../../py/mpstate.h" 2

# 1 "../../py/nlr.h" 1
# 35 "../../py/mpstate.h" 2

# 1 "../../py/objlist.h" 1
# 31 "../../py/objlist.h"
typedef struct _mp_obj_list_t {
    mp_obj_base_t base;
    size_t alloc;
    size_t len;
    mp_obj_t *items;
} mp_obj_list_t;
# 37 "../../py/mpstate.h" 2
# 1 "../../py/objexcept.h" 1
# 30 "../../py/objexcept.h"
# 1 "../../py/objtuple.h" 1
# 31 "../../py/objexcept.h" 2

typedef struct _mp_obj_exception_t {
    mp_obj_base_t base;
    size_t traceback_alloc : (8 * sizeof(size_t) / 2);
    size_t traceback_len : (8 * sizeof(size_t) / 2);
    size_t *traceback_data;
    mp_obj_tuple_t *args;
} mp_obj_exception_t;
# 38 "../../py/mpstate.h" 2
# 58 "../../py/mpstate.h"
typedef struct _mp_sched_item_t {
    mp_obj_t func;
    mp_obj_t arg;
} mp_sched_item_t;


typedef struct _mp_state_mem_t {






    byte *gc_alloc_table_start;
    size_t gc_alloc_table_byte_len;

    byte *gc_finaliser_table_start;

    byte *gc_pool_start;
    byte *gc_pool_end;

    int gc_stack_overflow;
    size_t gc_stack[(64)];
    size_t *gc_sp;
    uint16_t gc_lock_depth;




    uint16_t gc_auto_collect_enabled;


    size_t gc_alloc_amount;
    size_t gc_alloc_threshold;


    size_t gc_last_free_atb_index;
# 104 "../../py/mpstate.h"
} mp_state_mem_t;



typedef struct _mp_state_vm_t {






    qstr_pool_t *last_pool;


    mp_obj_exception_t mp_emergency_exception_obj;
# 127 "../../py/mpstate.h"
    byte *mp_emergency_exception_buf;





    mp_obj_exception_t mp_kbd_exception;



    mp_obj_dict_t mp_loaded_modules_dict;


    volatile mp_obj_t mp_pending_exception;
# 154 "../../py/mpstate.h"
    mp_obj_dict_t dict_main;


    mp_obj_list_t mp_sys_path_obj;
    mp_obj_list_t mp_sys_argv_obj;



    mp_obj_dict_t *mp_module_builtins_override_dict;



    const char *readline_hist[8]; mp_obj_t pyb_hid_report_desc; mp_obj_t pyb_config_main; mp_obj_t omv_ide_irq; mp_obj_t pyb_switch_callback; mp_obj_t pin_class_mapper; mp_obj_t pin_class_map_dict; mp_obj_t pyb_extint_callback[8]; struct _pyb_timer_obj_t *pyb_timer_obj_all[14]; struct _pyb_uart_obj_t *pyb_stdio_uart; struct _pyb_uart_obj_t *pyb_uart_obj_all[(10)]; struct _pyb_can_obj_t *pyb_can_obj_all[2]; mp_obj_list_t mod_network_nic_list; void* pvPortRoots[16];
# 180 "../../py/mpstate.h"
    struct _mp_vfs_mount_t *vfs_cur;
    struct _mp_vfs_mount_t *vfs_mount_table;
# 190 "../../py/mpstate.h"
    byte *qstr_last_chunk;
    size_t qstr_last_alloc;
    size_t qstr_last_used;






    mp_uint_t mp_optimise_value;



    mp_int_t mp_emergency_exception_buf_size;






} mp_state_vm_t;



typedef struct _mp_state_thread_t {
    mp_obj_dict_t *dict_locals;
    mp_obj_dict_t *dict_globals;


    nlr_buf_t *nlr_top;


    char *stack_top;


    size_t stack_limit;

} mp_state_thread_t;





typedef struct _mp_state_ctx_t {
    mp_state_thread_t thread;
    mp_state_vm_t vm;
    mp_state_mem_t mem;
} mp_state_ctx_t;

extern mp_state_ctx_t mp_state_ctx;
# 30 "../../py/runtime.h" 2

typedef enum {
    MP_VM_RETURN_NORMAL,
    MP_VM_RETURN_YIELD,
    MP_VM_RETURN_EXCEPTION,
} mp_vm_return_kind_t;

typedef enum {
    MP_ARG_BOOL = 0x001,
    MP_ARG_INT = 0x002,
    MP_ARG_OBJ = 0x003,
    MP_ARG_KIND_MASK = 0x0ff,
    MP_ARG_REQUIRED = 0x100,
    MP_ARG_KW_ONLY = 0x200,
} mp_arg_flag_t;

typedef union _mp_arg_val_t {
    
# 47 "../../py/runtime.h" 3 4
   _Bool 
# 47 "../../py/runtime.h"
        u_bool;
    mp_int_t u_int;
    mp_obj_t u_obj;
    mp_rom_obj_t u_rom_obj;
} mp_arg_val_t;

typedef struct _mp_arg_t {
    uint16_t qst;
    uint16_t flags;
    mp_arg_val_t defval;
} mp_arg_t;


extern const byte mp_unary_op_method_name[];
extern const byte mp_binary_op_method_name[];

void mp_init(void);
void mp_deinit(void);

void mp_handle_pending(void);
void mp_handle_pending_tail(mp_uint_t atomic_state);
# 77 "../../py/runtime.h"
int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec);

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, 
# 79 "../../py/runtime.h" 3 4
                                                                                       _Bool 
# 79 "../../py/runtime.h"
                                                                                            takes_kw);
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
__attribute__((noreturn)) void mp_arg_error_terse_mismatch(void);
__attribute__((noreturn)) void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return (mp_state_ctx.thread.dict_locals); }
static inline void mp_locals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_locals) = d; }
static inline mp_obj_dict_t *mp_globals_get(void) { return (mp_state_ctx.thread.dict_globals); }
static inline void mp_globals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_globals) = d; }

mp_obj_t mp_load_name(qstr qst);
mp_obj_t mp_load_global(qstr qst);
mp_obj_t mp_load_build_class(void);
void mp_store_name(qstr qst, mp_obj_t obj);
void mp_store_global(qstr qst, mp_obj_t obj);
void mp_delete_name(qstr qst);
void mp_delete_global(qstr qst);

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg);
mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);

mp_obj_t mp_call_function_0(mp_obj_t fun);
mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg);
mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);
mp_obj_t mp_call_function_n_kw(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw_var(
# 106 "../../py/runtime.h" 3 4
                                _Bool 
# 106 "../../py/runtime.h"
                                     have_self, size_t n_args_n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args);

void mp_call_function_1_protected(mp_obj_t fun, mp_obj_t arg);
void mp_call_function_2_protected(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);

typedef struct _mp_call_args_t {
    mp_obj_t fun;
    size_t n_args, n_kw, n_alloc;
    mp_obj_t *args;
} mp_call_args_t;
# 126 "../../py/runtime.h"
void mp_unpack_sequence(mp_obj_t seq, size_t num, mp_obj_t *items);
void mp_unpack_ex(mp_obj_t seq, size_t num, mp_obj_t *items);
mp_obj_t mp_store_map(mp_obj_t map, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_load_attr(mp_obj_t base, qstr attr);
void mp_convert_member_lookup(mp_obj_t obj, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest);
void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_method_maybe(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_super_method(qstr attr, mp_obj_t *dest);
void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t val);

mp_obj_t mp_getiter(mp_obj_t o, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_iternext_allow_raise(mp_obj_t o);
mp_obj_t mp_iternext(mp_obj_t o);
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val);

mp_obj_t mp_make_raise_obj(mp_obj_t o);

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level);
mp_obj_t mp_import_from(mp_obj_t module, qstr name);
void mp_import_all(mp_obj_t module);

__attribute__((noreturn)) void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg);

__attribute__((noreturn)) void mp_raise_ValueError(const char *msg);
__attribute__((noreturn)) void mp_raise_TypeError(const char *msg);
__attribute__((noreturn)) void mp_raise_NotImplementedError(const char *msg);
__attribute__((noreturn)) void mp_raise_OSError(int errno_);
__attribute__((noreturn)) void mp_exc_recursion_depth(void);
# 166 "../../py/runtime.h"
mp_uint_t mp_convert_obj_to_native(mp_obj_t obj, mp_uint_t type);
mp_obj_t mp_convert_native_to_obj(mp_uint_t val, mp_uint_t type);
mp_obj_t mp_native_call_function_n_kw(mp_obj_t fun_in, size_t n_args_kw, const mp_obj_t *args);
void mp_native_raise(mp_obj_t o);
# 25 "./omv/py/mp.h" 2
# 1 "../../py/stream.h" 1
# 30 "../../py/stream.h"
# 1 "../../py/mperrno.h" 1
# 146 "../../py/mperrno.h"
qstr mp_errno_to_str(mp_obj_t errno_val);
# 31 "../../py/stream.h" 2
# 52 "../../py/stream.h"
struct mp_stream_seek_t {



    mp_off_t offset;
    int whence;
};






extern const mp_obj_fun_builtin_var_t mp_stream_read_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_read1_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_readinto_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_unbuffered_readline_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_unbuffered_readlines_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_write_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_write1_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_seek_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_tell_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_flush_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_ioctl_obj;






const mp_stream_p_t *mp_get_stream_raise(mp_obj_t self_in, int flags);
mp_obj_t mp_stream_close(mp_obj_t stream);


mp_obj_t mp_stream_unbuffered_iter(mp_obj_t self);

mp_obj_t mp_stream_write(mp_obj_t self_in, const void *buf, size_t len, byte flags);





mp_uint_t mp_stream_rw(mp_obj_t stream, void *buf, mp_uint_t size, int *errcode, byte flags);



void mp_stream_write_adaptor(void *self, const char *buf, size_t len);
# 26 "./omv/py/mp.h" 2
# 1 "../../py/gc.h" 1
# 34 "../../py/gc.h"
void gc_init(void *start, void *end);



void gc_lock(void);
void gc_unlock(void);

# 40 "../../py/gc.h" 3 4
_Bool 
# 40 "../../py/gc.h"
    gc_is_locked(void);


void gc_collect(void);
void gc_collect_start(void);
void gc_collect_root(void **ptrs, size_t len);
void gc_collect_end(void);

void *gc_alloc(size_t n_bytes, 
# 48 "../../py/gc.h" 3 4
                              _Bool 
# 48 "../../py/gc.h"
                                   has_finaliser);
void gc_free(void *ptr);
size_t gc_nbytes(const void *ptr);
void *gc_realloc(void *ptr, size_t n_bytes, 
# 51 "../../py/gc.h" 3 4
                                           _Bool 
# 51 "../../py/gc.h"
                                                allow_move);

typedef struct _gc_info_t {
    size_t total;
    size_t used;
    size_t free;
    size_t max_free;
    size_t num_1block;
    size_t num_2block;
    size_t max_block;
} gc_info_t;

void gc_info(gc_info_t *info);
void gc_dump_info(void);
void gc_dump_alloc_table(void);
# 27 "./omv/py/mp.h" 2
# 1 "./gccollect.h" 1
# 29 "./gccollect.h"
extern uint32_t _etext;
extern uint32_t _sidata;
extern uint32_t _ram_start;
extern uint32_t _sdata;
extern uint32_t _edata;
extern uint32_t _sbss;
extern uint32_t _ebss;
extern uint32_t _heap_start;
extern uint32_t _heap_end;
extern uint32_t _estack;
extern uint32_t _ram_end;
# 28 "./omv/py/mp.h" 2
# 1 "../../lib/mp-readline/readline.h" 1
# 40 "../../lib/mp-readline/readline.h"
void readline_init0(void);
int readline(vstr_t *line, const char *prompt);
void readline_push_history(const char *line);

void readline_init(vstr_t *line, const char *prompt);
void readline_note_newline(const char *prompt);
int readline_process_char(int c);
# 29 "./omv/py/mp.h" 2
# 1 "./pin.h" 1
# 33 "./pin.h"
# 1 "mcusdk/drivers/fsl_iomuxc.h" 1
# 38 "mcusdk/drivers/fsl_iomuxc.h"
# 1 "mcusdk/drivers/fsl_common.h" 1
# 39 "mcusdk/drivers/fsl_iomuxc.h" 2
# 1059 "mcusdk/drivers/fsl_iomuxc.h"
typedef enum _iomuxc_gpr_mode
{
    kIOMUXC_GPR_GlobalInterruptRequest = (0x1000U),
    kIOMUXC_GPR_ENET1RefClkMode = (0x2000U),
    kIOMUXC_GPR_USBExposureMode = (0x8000U),
    kIOMUXC_GPR_ENET1TxClkOutputDir = (0x20000U),
    kIOMUXC_GPR_SAI1MClkOutputDir = (0x80000U),
    kIOMUXC_GPR_SAI2MClkOutputDir = (0x100000U),
    kIOMUXC_GPR_SAI3MClkOutputDir = (0x200000U),
    kIOMUXC_GPR_ExcMonitorSlavErrResponse = (0x400000U),
    kIOMUXC_GPR_ENETIpgClkOn = (0x800000U),
    kIOMUXC_GPR_AHBClockEnable = (0x80000000U),
} iomuxc_gpr_mode_t;

typedef enum _iomuxc_gpr_saimclk
{
    kIOMUXC_GPR_SAI1MClk1Sel = (0U),
    kIOMUXC_GPR_SAI1MClk2Sel = (3U),
    kIOMUXC_GPR_SAI1MClk3Sel = (6U),
    kIOMUXC_GPR_SAI2MClk3Sel = (8U),
    kIOMUXC_GPR_SAI3MClk3Sel = (10U),
} iomuxc_gpr_saimclk_t;

typedef enum _iomuxc_mqs_pwm_oversample_rate
{
    kIOMUXC_MqsPwmOverSampleRate32 = 0,
    kIOMUXC_MqsPwmOverSampleRate64 = 1
} iomuxc_mqs_pwm_oversample_rate_t;
# 1118 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetPinMux(uint32_t muxRegister,
                                    uint32_t muxMode,
                                    uint32_t inputRegister,
                                    uint32_t inputDaisy,
                                    uint32_t configRegister,
                                    uint32_t inputOnfield)
{
    *((volatile uint32_t *)muxRegister) =
        (((uint32_t)(((uint32_t)(muxMode)) << (0U))) & (0x7U)) | (((uint32_t)(((uint32_t)(inputOnfield)) << (4U))) & (0x10U));

    if (inputRegister)
    {
        *((volatile uint32_t *)inputRegister) = inputDaisy;
    }
}
# 1150 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetPinConfig(uint32_t muxRegister,
                                       uint32_t muxMode,
                                       uint32_t inputRegister,
                                       uint32_t inputDaisy,
                                       uint32_t configRegister,
                                       uint32_t configValue)
{
    if (configRegister)
    {
        *((volatile uint32_t *)configRegister) = configValue;
    }
}
# 1170 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_EnableMode(IOMUXC_GPR_Type *base, uint32_t mode, 
# 1170 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                                          _Bool 
# 1170 "mcusdk/drivers/fsl_iomuxc.h"
                                                                               enable)
{
    uint32_t gpr = base->GPR1 & 0xFFF;

    if (enable)
    {
        base->GPR1 = mode | gpr;
    }
    else
    {
        base->GPR1 &= ~mode;
    }
}
# 1191 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetSaiMClkClockSource(IOMUXC_GPR_Type *base, iomuxc_gpr_saimclk_t mclk, uint8_t clkSrc)
{
    uint32_t gpr;

    if (mclk > kIOMUXC_GPR_SAI1MClk2Sel)
    {
        gpr = base->GPR1 & ~((0x3U) << mclk);
        base->GPR1 = ((clkSrc & (0x3U)) << mclk) | gpr;
    }
    else
    {
        gpr = base->GPR1 & ~((0x7U) << mclk);
        base->GPR1 = ((clkSrc & (0x7U)) << mclk) | gpr;
    }
}







static inline void IOMUXC_MQSEnterSoftwareReset(IOMUXC_GPR_Type *base, 
# 1213 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                                      _Bool 
# 1213 "mcusdk/drivers/fsl_iomuxc.h"
                                                                           enable)
{
    if (enable)
    {
        base->GPR2 |= (0x1000000U);
    }
    else
    {
        base->GPR2 &= ~(0x1000000U);
    }
}
# 1232 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_MQSEnable(IOMUXC_GPR_Type *base, 
# 1232 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                          _Bool 
# 1232 "mcusdk/drivers/fsl_iomuxc.h"
                                                               enable)
{
    if (enable)
    {
        base->GPR2 |= (0x2000000U);
    }
    else
    {
        base->GPR2 &= ~(0x2000000U);
    }
}
# 1252 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_MQSConfig(IOMUXC_GPR_Type *base, iomuxc_mqs_pwm_oversample_rate_t rate, uint8_t divider)
{
    uint32_t gpr = base->GPR2 & ~((0x4000000U) | (0xFF0000U));

    base->GPR2 = gpr | (((uint32_t)(((uint32_t)(rate)) << (26U))) & (0x4000000U)) | (((uint32_t)(((uint32_t)(divider)) << (16U))) & (0xFF0000U));
}
# 34 "./pin.h" 2
# 1 "mcusdk/drivers/fsl_gpio.h" 1
# 56 "mcusdk/drivers/fsl_gpio.h"
typedef enum _gpio_pin_direction
{
    kGPIO_DigitalInput = 0U,
    kGPIO_DigitalOutput = 1U,
} gpio_pin_direction_t;


typedef enum _gpio_interrupt_mode
{
    kGPIO_NoIntmode = 0U,
    kGPIO_IntLowLevel = 1U,
    kGPIO_IntHighLevel = 2U,
    kGPIO_IntRisingEdge = 3U,
    kGPIO_IntFallingEdge = 4U,
    kGPIO_IntRisingOrFallingEdge = 5U,
} gpio_interrupt_mode_t;


typedef struct _gpio_pin_config
{
    gpio_pin_direction_t direction;
    uint8_t outputLogic;
    gpio_interrupt_mode_t interruptMode;
} gpio_pin_config_t;
# 103 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config);
# 120 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinWrite(GPIO_Type* base, uint32_t pin, uint8_t output);





static inline void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
    GPIO_PinWrite(base, pin, output);
}







static inline void GPIO_PortSet(GPIO_Type* base, uint32_t mask)
{
    base->DR |= mask;
}





static inline void GPIO_SetPinsOutput(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortSet(base, mask);
}







static inline void GPIO_PortClear(GPIO_Type* base, uint32_t mask)
{
    base->DR &= ~mask;
}





static inline void GPIO_ClearPinsOutput(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortClear(base, mask);
}
# 178 "mcusdk/drivers/fsl_gpio.h"
static inline uint32_t GPIO_PinRead(GPIO_Type* base, uint32_t pin)
{
    
# 180 "mcusdk/drivers/fsl_gpio.h" 3
   ((void)0)
# 180 "mcusdk/drivers/fsl_gpio.h"
                   ;

    return (((base->DR) >> pin) & 0x1U);
}





static inline uint32_t GPIO_ReadPinInput(GPIO_Type* base, uint32_t pin)
{
    return GPIO_PinRead(base, pin);
}
# 207 "mcusdk/drivers/fsl_gpio.h"
static inline uint8_t GPIO_PinReadPadStatus(GPIO_Type* base, uint32_t pin)
{
    
# 209 "mcusdk/drivers/fsl_gpio.h" 3
   ((void)0)
# 209 "mcusdk/drivers/fsl_gpio.h"
                   ;

    return (uint8_t)(((base->PSR) >> pin) & 0x1U);
}





static inline uint8_t GPIO_ReadPadStatus(GPIO_Type* base, uint32_t pin)
{
    return GPIO_PinReadPadStatus(base, pin);
}
# 237 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinSetInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode);





static inline void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
    GPIO_PinSetInterruptConfig(base, pin, pinInterruptMode);
}







static inline void GPIO_PortEnableInterrupts(GPIO_Type* base, uint32_t mask)
{
    base->IMR |= mask;
}







static inline void GPIO_EnableInterrupts(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortEnableInterrupts(base, mask);
}







static inline void GPIO_PortDisableInterrupts(GPIO_Type* base, uint32_t mask)
{
    base->IMR &= ~mask;
}





static inline void GPIO_DisableInterrupts(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortDisableInterrupts(base, mask);
}







static inline uint32_t GPIO_PortGetInterruptFlags(GPIO_Type* base)
{
    return base->ISR;
}







static inline uint32_t GPIO_GetPinsInterruptFlags(GPIO_Type* base)
{
    return GPIO_PortGetInterruptFlags(base);
}
# 319 "mcusdk/drivers/fsl_gpio.h"
static inline void GPIO_PortClearInterruptFlags(GPIO_Type* base, uint32_t mask)
{
    base->ISR = mask;
}
# 331 "mcusdk/drivers/fsl_gpio.h"
static inline void GPIO_ClearPinsInterruptFlags(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortClearInterruptFlags(base, mask);
}
# 35 "./pin.h" 2


# 1 "./pin_defs_mcu.h" 1
# 30 "./pin_defs_mcu.h"
enum {
  PORT_0 = 0,
  PORT_1,
  PORT_2,
  PORT_3,
  PORT_4,
  PORT_5,
  PORT_6,
  PORT_7,
  PORT_8,
  PORT_9,
};





enum {
  AF_FN_GPIO,
  AF_FN_LPUART,
  AF_FN_LPI2C,
  AF_FN_LPSPI,
  AF_FN_SAI,
  AF_FN_I2S = AF_FN_SAI,
  AF_FN_GPT,
  AF_FN_TMR,
  AF_FN_PWM,
  AF_FN_SDMMC,
};

enum {
  AF_PIN_TYPE_GPIO_PIN0,
  AF_PIN_TYPE_GPIO_PIN1,
  AF_PIN_TYPE_GPIO_PIN2,
  AF_PIN_TYPE_GPIO_PIN3,
  AF_PIN_TYPE_GPIO_PIN4,
  AF_PIN_TYPE_GPIO_PIN5,
  AF_PIN_TYPE_GPIO_PIN6,
  AF_PIN_TYPE_GPIO_PIN7,
  AF_PIN_TYPE_GPIO_PIN8,
  AF_PIN_TYPE_GPIO_PIN9,
  AF_PIN_TYPE_GPIO_PIN10,
  AF_PIN_TYPE_GPIO_PIN11,
  AF_PIN_TYPE_GPIO_PIN12,
  AF_PIN_TYPE_GPIO_PIN13,
  AF_PIN_TYPE_GPIO_PIN14,
  AF_PIN_TYPE_GPIO_PIN15,
  AF_PIN_TYPE_GPIO_PIN16,
  AF_PIN_TYPE_GPIO_PIN17,
  AF_PIN_TYPE_GPIO_PIN18,
  AF_PIN_TYPE_GPIO_PIN19,
  AF_PIN_TYPE_GPIO_PIN20,
  AF_PIN_TYPE_GPIO_PIN21,
  AF_PIN_TYPE_GPIO_PIN22,
  AF_PIN_TYPE_GPIO_PIN23,
  AF_PIN_TYPE_GPIO_PIN24,
  AF_PIN_TYPE_GPIO_PIN25,
  AF_PIN_TYPE_GPIO_PIN26,
  AF_PIN_TYPE_GPIO_PIN27,
  AF_PIN_TYPE_GPIO_PIN28,
  AF_PIN_TYPE_GPIO_PIN29,
  AF_PIN_TYPE_GPIO_PIN30,
  AF_PIN_TYPE_GPIO_PIN31,

 AF_PIN_TYPE_TMR_TIMER0 = 0,
 AF_PIN_TYPE_TMR_TIMER1,
 AF_PIN_TYPE_TMR_TIMER2,
 AF_PIN_TYPE_TMR_TIMER3,

   AF_PIN_TYPE_GPT_CLK,
   AF_PIN_TYPE_GPT_CAPTURE1,
   AF_PIN_TYPE_GPT_CAPTURE2,
   AF_PIN_TYPE_GPT_COMPARE1,
   AF_PIN_TYPE_GPT_COMPARE2,
   AF_PIN_TYPE_GPT_COMPARE3,

  AF_PIN_TYPE_LPI2C_SDA = 0,
  AF_PIN_TYPE_LPI2C_SCL,

  AF_PIN_TYPE_LPUART_TX = 0,
  AF_PIN_TYPE_LPUART_RX,
  AF_PIN_TYPE_LPUART_CTS_B,
  AF_PIN_TYPE_LPUART_RTS_B,
  AF_PIN_TYPE_LPUART_CK,

  AF_PIN_TYPE_LPSPI_SDI = 0,
  AF_PIN_TYPE_LPSPI_SDO,
  AF_PIN_TYPE_LPSPI_SCK,
  AF_PIN_TYPE_LPSPI_PCS0,

  AF_PIN_TYPE_PWM_PWMA0 = 0,
  AF_PIN_TYPE_PWM_PWMB0,
  AF_PIN_TYPE_PWM_PWMX0,
  AF_PIN_TYPE_PWM_PWMA1,
  AF_PIN_TYPE_PWM_PWMB1,
  AF_PIN_TYPE_PWM_PWMx1,
  AF_PIN_TYPE_PWM_PWMA2,
  AF_PIN_TYPE_PWM_PWMB2,
  AF_PIN_TYPE_PWM_PWMx2,
  AF_PIN_TYPE_PWM_PWMA3,
  AF_PIN_TYPE_PWM_PWMB3,
  AF_PIN_TYPE_PWM_PWMX3,


  AF_PIN_TYPE_SAI_MCLK = 0,
  AF_PIN_TYPE_SAI_TX_BCLK,
  AF_PIN_TYPE_SAI_TX_SYNC,
  AF_PIN_TYPE_SAI_TX_DATA,
  AF_PIN_TYPE_SAI_TX_DATA0 = AF_PIN_TYPE_SAI_TX_DATA,
  AF_PIN_TYPE_SAI_TX_DATA1,
  AF_PIN_TYPE_SAI_TX_DATA2,
  AF_PIN_TYPE_SAI_TX_DATA3,
  AF_PIN_TYPE_SAI_RX_BCLK,
  AF_PIN_TYPE_SAI_RX_SYNC,
  AF_PIN_TYPE_SAI_RX_DATA,
  AF_PIN_TYPE_SAI_RX_DATA0 = AF_PIN_TYPE_SAI_RX_DATA,
};

enum {
  PIN_ADC1 = (1 << 1),
  PIN_ADC2 = (1 << 2),
  PIN_ADC3 = (1 << 3),
};


typedef union _McuPinCfgReg_t
{
 struct {
 uint32_t b00_1_SRE_isFastSlew:1;
 uint32_t b01_2_res1:2;
 uint32_t b03_3_DSE_driveStrength:3;
 uint32_t b06_2_Speed:2;
 uint32_t b08_3_res2:3;
 uint32_t b11_1_OD_isOD:1;
 uint32_t b12_1_PKE_digiInEn:1;
 uint32_t b13_1_PUE_keepOrPull:1;
 uint32_t b14_2_PUS_PullSel:2;
 uint32_t b16_1_HYS:1;
 uint32_t b17_15_res3:15;
 };
 uint32_t v32;
}McuPinCfgReg_t;

typedef union _McuPinMuxReg_t
{
 struct {
 uint32_t b00_3_muxMode:3;
 uint32_t b03_1_res:1;
 uint32_t b04_1_inForceOn:1;
 uint32_t b05_27_res:27;
 };
 uint32_t v32;
}McuPinMuxReg_t;
# 38 "./pin.h" 2



typedef struct {
  mp_obj_base_t base;
  qstr name;
  uint8_t idx;
  uint8_t fn;
  uint8_t unit;
  uint8_t type;

  uint32_t inSelReg;
  uint32_t inSelVal;


  union {
    void *reg;
 TMR_Type *pQTmr;
 LPI2C_Type *pI2C;
 LPUART_Type *pUART;
 LPSPI_Type *pSPI;
  };
} pin_af_obj_t;

typedef struct {
  mp_obj_base_t base;
  qstr name;
  uint32_t port : 4;
  uint32_t pin : 5;
  uint32_t num_af : 4;
  uint32_t adc_channel : 5;
  uint32_t adc_num : 3;
  uint32_t pin_mask;
  GPIO_Type *gpio;

  uint32_t afReg;
  uint32_t cfgReg;

  const pin_af_obj_t *af;
} pin_obj_t;

extern const mp_obj_type_t pin_type;
extern const mp_obj_type_t pin_af_type;

typedef struct {
  const char *name;
  const pin_obj_t *pin;
} pin_named_pin_t;

extern const pin_named_pin_t pin_board_pins[];
extern const pin_named_pin_t pin_cpu_pins[];



typedef struct {
    mp_obj_base_t base;
    qstr name;
    const pin_named_pin_t *named_pins;
} pin_named_pins_obj_t;

extern const mp_obj_type_t pin_board_pins_obj_type;
extern const mp_obj_type_t pin_cpu_pins_obj_type;

extern const mp_obj_dict_t pin_cpu_pins_locals_dict;
extern const mp_obj_dict_t pin_board_pins_locals_dict;

extern const mp_obj_fun_builtin_var_t pin_init_obj;

void pin_init0(void);
uint32_t pin_get_mode(const pin_obj_t *pin);
uint32_t pin_get_pull(const pin_obj_t *pin);
uint32_t pin_get_af(const pin_obj_t *pin);
const pin_obj_t *pin_find(mp_obj_t user_obj);
const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name);
const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn);
const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx);
const pin_af_obj_t *pin_find_af_by_name(const pin_obj_t *pin, const char *name);
# 30 "./omv/py/mp.h" 2
# 1 "./extint.h" 1
# 42 "./extint.h"
void extint_init0(void);

uint extint_register(mp_obj_t pin_obj, uint32_t mode, uint32_t pull, mp_obj_t callback_obj, 
# 44 "./extint.h" 3 4
                                                                                           _Bool 
# 44 "./extint.h"
                                                                                                override_callback_obj);

void extint_enable(uint line);
void extint_disable(uint line);
void extint_swint(uint line);

void Handle_EXTI_Irq(uint32_t line);

extern const mp_obj_type_t extint_type;
# 31 "./omv/py/mp.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb.h" 1
# 41 "mcusdk/middleware/sdkusb/include/usb.h"
# 1 "mcusdk/middleware/sdkusb/osa/usb_osa.h" 1
# 56 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
typedef void *usb_osa_event_handle;


typedef void *usb_osa_sem_handle;


typedef void *usb_osa_mutex_handle;


typedef void *usb_osa_msgq_handle;


typedef enum _usb_osa_status
{
    kStatus_USB_OSA_Success = 0x00U,
    kStatus_USB_OSA_Error,
    kStatus_USB_OSA_TimeOut,
} usb_osa_status_t;


typedef enum _usb_osa_event_mode
{
    kUSB_OsaEventManualClear = 0U,
    kUSB_OsaEventAutoClear = 1U,
} usb_osa_event_mode_t;




# 1 "mcusdk/middleware/sdkusb/osa/usb_osa_bm.h" 1
# 54 "mcusdk/middleware/sdkusb/osa/usb_osa_bm.h"
extern void USB_OsaEnterCritical(uint32_t *sr);
extern void USB_OsaExitCritical(uint32_t sr);
# 86 "mcusdk/middleware/sdkusb/osa/usb_osa.h" 2
# 148 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
void *USB_OsaMemoryAllocate(uint32_t length);
# 158 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern void USB_OsaMemoryFree(void *p);
# 188 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventCreate(usb_osa_event_handle *handle, uint32_t flag);
# 205 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventDestroy(usb_osa_event_handle handle);
# 225 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventSet(usb_osa_event_handle handle, uint32_t bitMask);
# 254 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventWait(
    usb_osa_event_handle handle, uint32_t bitMask, uint32_t flag, uint32_t timeout, uint32_t *bitSet);
# 277 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventCheck(usb_osa_event_handle handle, uint32_t bitMask, uint32_t *bitSet);
# 296 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventClear(usb_osa_event_handle handle, uint32_t bitMask);
# 322 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemCreate(usb_osa_sem_handle *handle, uint32_t count);
# 342 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemDestroy(usb_osa_sem_handle handle);
# 363 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemPost(usb_osa_sem_handle handle);
# 388 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemWait(usb_osa_sem_handle handle, uint32_t timeout);
# 413 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexCreate(usb_osa_mutex_handle *handle);
# 433 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexDestroy(usb_osa_mutex_handle handle);
# 455 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexLock(usb_osa_mutex_handle handle);
# 475 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexUnlock(usb_osa_mutex_handle handle);
# 502 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqCreate(usb_osa_msgq_handle *handle, uint32_t count, uint32_t size);
# 522 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqDestroy(usb_osa_msgq_handle handle);
# 544 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqSend(usb_osa_msgq_handle handle, void *msg);
# 570 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqRecv(usb_osa_msgq_handle handle, void *msg, uint32_t timeout);
# 592 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqCheck(usb_osa_msgq_handle handle, void *msg);
# 42 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb_misc.h" 1
# 53 "mcusdk/middleware/sdkusb/include/usb_misc.h"
extern int DbgConsole_Printf(const char *fmt_s, ...);
# 67 "mcusdk/middleware/sdkusb/include/usb_misc.h"
# 1 "../../py/runtime.h" 1
# 68 "mcusdk/middleware/sdkusb/include/usb_misc.h" 2
# 1 "../../py/mphal.h" 1
# 34 "../../py/mphal.h"
# 1 "./mphalport.h" 1


# 1 "./pin.h" 1
# 4 "./mphalport.h" 2
# 1 "./hal_wrapper.h" 1





typedef enum
{
  HAL_OK = 0x00U,
  HAL_ERROR = 0x01U,
  HAL_BUSY = 0x02U,
  HAL_TIMEOUT = 0x03U
} HAL_StatusTypeDef;
# 153 "./hal_wrapper.h"
static inline void HAL_MPU_Disable(void)
{

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);


  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}
# 173 "./hal_wrapper.h"
static inline void HAL_MPU_Enable(uint32_t MPU_Control)
{

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );


  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);
}
# 190 "./hal_wrapper.h"
HAL_StatusTypeDef HAL_Init(void);
HAL_StatusTypeDef HAL_DeInit(void);
void HAL_MspInit(void);
void HAL_MspDeInit(void);
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);
void HAL_WFI(void);
void HAL_IncTick(void);
void HAL_Delay(volatile uint32_t Delay);
uint32_t HAL_GetTick(void);
void HAL_SuspendTick(void);
void HAL_ResumeTick(void);
uint32_t HAL_GetHalVersion(void);
uint32_t HAL_GetREVID(void);
uint32_t HAL_GetDEVID(void);
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);




static inline void HAL_GPIO_DeInit(GPIO_Type *pPort, uint32_t pin) {
 gpio_pin_config_t cfg;
 cfg.direction = kGPIO_DigitalInput;
 GPIO_PinInit(pPort, pin, &cfg);
}
# 5 "./mphalport.h" 2

extern const unsigned char mp_hal_status_to_errno_table[4];

__attribute__((noreturn)) void mp_hal_raise(HAL_StatusTypeDef status);
void mp_hal_set_interrupt_char(int c);





extern 
# 15 "./mphalport.h" 3 4
      _Bool 
# 15 "./mphalport.h"
           mp_hal_ticks_cpu_enabled;
void mp_hal_ticks_cpu_enable(void);
static inline mp_uint_t mp_hal_ticks_cpu(void) {
    if (!mp_hal_ticks_cpu_enabled) {
        mp_hal_ticks_cpu_enable();
    }
    return ((DWT_Type *) (0xE0001000UL) )->CYCCNT;
}
# 48 "./mphalport.h"
static inline GPIO_Type * _find_gpio(const pin_obj_t *p){
 GPIO_Type *gps[] = {0, ((GPIO_Type *)(0x401B8000u)), ((GPIO_Type *)(0x401BC000u)), ((GPIO_Type *)(0x401C0000u)), ((GPIO_Type *)(0x401C4000u)), ((GPIO_Type *)(0x400C0000u)),};
 if (p->port > 5)
  while(1);
 return gps[p->port];
}

static inline void mp_hal_pin_write(GPIO_Type *pPort, uint32_t pin, uint32_t bitLevel) {
 GPIO_PinWrite(pPort, pin, bitLevel);
}

static inline void mp_hal_pin_high(const pin_obj_t *pPin) {
 GPIO_PinWrite(pPin->gpio, pPin->pin, 1);

}

static inline void mp_hal_pin_low(const pin_obj_t *pPin) {
 GPIO_PinWrite(pPin->gpio, pPin->pin, 0);
}

static inline void mp_hal_pin_toggle(const pin_obj_t *pPin)
{
 uint32_t a, pinNdx = pPin->pin;
 a = (0 == GPIO_PinRead(pPin->gpio, pinNdx) );
 GPIO_PinWrite(pPin->gpio, pinNdx, a);

}
# 90 "./mphalport.h"
void mp_hal_gpio_clock_enable(uint32_t portNum);
void mp_hal_pin_config(const pin_obj_t *p, const pin_af_obj_t *af, uint32_t alt, uint32_t padCfgVal );

# 92 "./mphalport.h" 3 4
_Bool 
# 92 "./mphalport.h"
    mp_hal_pin_config_alt(const pin_obj_t* pin, uint32_t padCfg, uint8_t fn);

void mp_hal_ConfigGPIO(const pin_obj_t *p, uint32_t gpioModeAndPadCfg, uint32_t isInitialHighForOutput);
# 35 "../../py/mphal.h" 2



int mp_hal_stdin_rx_chr(void);



void mp_hal_stdout_tx_str(const char *str);



void mp_hal_stdout_tx_strn(const char *str, size_t len);



void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len);



void mp_hal_delay_ms(mp_uint_t ms);



void mp_hal_delay_us(mp_uint_t us);



mp_uint_t mp_hal_ticks_ms(void);



mp_uint_t mp_hal_ticks_us(void);



mp_uint_t mp_hal_ticks_cpu(void);
# 69 "mcusdk/middleware/sdkusb/include/usb_misc.h" 2
# 43 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb_spec.h" 1
# 48 "mcusdk/middleware/sdkusb/include/usb_spec.h"
typedef struct _usb_setup_struct
{
    uint8_t bmRequestType;
    uint8_t bRequest;
    uint16_t wValue;
    uint16_t wIndex;
    uint16_t wLength;
} usb_setup_struct_t;
# 200 "mcusdk/middleware/sdkusb/include/usb_spec.h"
typedef struct _usb_language
{
    uint8_t **string;
    uint32_t *length;
    uint16_t languageId;
} usb_language_t;

typedef struct _usb_language_list
{
    uint8_t *languageString;
    uint32_t stringLength;
    usb_language_t *languageList;
    uint8_t count;
} usb_language_list_t;

typedef struct _usb_descriptor_common
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bData[1];
} usb_descriptor_common_t;

typedef struct _usb_descriptor_device
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bcdUSB[2];
    uint8_t bDeviceClass;
    uint8_t bDeviceSubClass;
    uint8_t bDeviceProtocol;
    uint8_t bMaxPacketSize0;
    uint8_t idVendor[2];
    uint8_t idProduct[2];
    uint8_t bcdDevice[2];
    uint8_t iManufacturer;
    uint8_t iProduct;
    uint8_t iSerialNumber;
    uint8_t bNumConfigurations;
} usb_descriptor_device_t;

typedef struct _usb_descriptor_configuration
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t wTotalLength[2];
    uint8_t bNumInterfaces;
    uint8_t bConfigurationValue;
    uint8_t iConfiguration;
    uint8_t bmAttributes;
    uint8_t bMaxPower;
} usb_descriptor_configuration_t;

typedef struct _usb_descriptor_interface
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bInterfaceNumber;
    uint8_t bAlternateSetting;
    uint8_t bNumEndpoints;
    uint8_t bInterfaceClass;
    uint8_t bInterfaceSubClass;
    uint8_t bInterfaceProtocol;
    uint8_t iInterface;
} usb_descriptor_interface_t;

typedef struct _usb_descriptor_endpoint
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bEndpointAddress;
    uint8_t bmAttributes;
    uint8_t wMaxPacketSize[2];
    uint8_t bInterval;
} usb_descriptor_endpoint_t;

typedef struct _usb_descriptor_binary_device_object_store
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t wTotalLength[2];
    uint8_t bNumDeviceCaps;
} usb_descriptor_bos_t;

typedef struct _usb_descriptor_usb20_extension
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bDevCapabilityType;
    uint8_t bmAttributes[4];
} usb_descriptor_usb20_extension_t;

typedef union _usb_descriptor_union
{
    usb_descriptor_common_t common;
    usb_descriptor_device_t device;
    usb_descriptor_configuration_t configuration;
    usb_descriptor_interface_t interface;
    usb_descriptor_endpoint_t endpoint;
} usb_descriptor_union_t;
# 44 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 64 "mcusdk/middleware/sdkusb/include/usb.h"
typedef enum _usb_status
{
    kStatus_USB_Success = 0x00U,
    kStatus_USB_Error,

    kStatus_USB_Busy,
    kStatus_USB_InvalidHandle,
    kStatus_USB_InvalidParameter,
    kStatus_USB_InvalidRequest,
    kStatus_USB_ControllerNotFound,
    kStatus_USB_InvalidControllerInterface,

    kStatus_USB_NotSupported,
    kStatus_USB_Retry,
    kStatus_USB_TransferStall,
    kStatus_USB_TransferFailed,
    kStatus_USB_AllocFail,
    kStatus_USB_LackSwapBuffer,
    kStatus_USB_TransferCancel,
    kStatus_USB_BandwidthFail,
    kStatus_USB_MSDStatusFail,
    kStatus_USB_EHCIAttached,
    kStatus_USB_EHCIDetached,
} usb_status_t;


typedef void *usb_host_handle;



typedef void *usb_device_handle;


typedef void *usb_otg_handle;


typedef enum _usb_controller_index
{
    kUSB_ControllerKhci0 = 0U,
    kUSB_ControllerKhci1 = 1U,

    kUSB_ControllerEhci0 = 2U,
    kUSB_ControllerEhci1 = 3U,


    kUSB_ControllerLpcIp3511Fs0 = 4U,
    kUSB_ControllerLpcIp3511Fs1 =
        5U,


    kUSB_ControllerLpcIp3511Hs0 = 6U,
    kUSB_ControllerLpcIp3511Hs1 =
        7U,


    kUSB_ControllerOhci0 = 8U,
    kUSB_ControllerOhci1 = 9U,


    kUSB_ControllerIp3516Hs0 = 10U,
    kUSB_ControllerIp3516Hs1 =
        11U,

} usb_controller_index_t;




typedef struct _usb_version
{
    uint8_t major;
    uint8_t minor;
    uint8_t bugfix;
} usb_version_t;
# 32 "./omv/py/mp.h" 2
# 1 "../../extmod/vfs.h" 1
# 29 "../../extmod/vfs.h"
# 1 "../../py/lexer.h" 1
# 30 "../../extmod/vfs.h" 2
# 48 "../../extmod/vfs.h"
typedef struct _mp_vfs_mount_t {
    const char *str;
    size_t len;
    mp_obj_t obj;
    struct _mp_vfs_mount_t *next;
} mp_vfs_mount_t;

mp_vfs_mount_t *mp_vfs_lookup_path(const char *path, const char **path_out);
mp_import_stat_t mp_vfs_import_stat(const char *path);
mp_obj_t mp_vfs_mount(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args);
mp_obj_t mp_vfs_umount(mp_obj_t mnt_in);
mp_obj_t mp_vfs_open(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args);
mp_obj_t mp_vfs_chdir(mp_obj_t path_in);
mp_obj_t mp_vfs_getcwd(void);
mp_obj_t mp_vfs_ilistdir(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_vfs_listdir(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_vfs_mkdir(mp_obj_t path_in);
mp_obj_t mp_vfs_remove(mp_obj_t path_in);
mp_obj_t mp_vfs_rename(mp_obj_t old_path_in, mp_obj_t new_path_in);
mp_obj_t mp_vfs_rmdir(mp_obj_t path_in);
mp_obj_t mp_vfs_stat(mp_obj_t path_in);
mp_obj_t mp_vfs_statvfs(mp_obj_t path_in);

extern const mp_obj_fun_builtin_var_t mp_vfs_mount_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_umount_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_open_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_chdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_getcwd_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_ilistdir_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_listdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_mkdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_remove_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_rename_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_rmdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_stat_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_statvfs_obj;
# 33 "./omv/py/mp.h" 2
# 1 "../../extmod/vfs_fat.h" 1
# 31 "../../extmod/vfs_fat.h"
# 1 "../../lib/oofatfs/ff.h" 1
# 35 "../../lib/oofatfs/ff.h"
typedef uint8_t BYTE;


typedef int16_t SHORT;
typedef uint16_t WORD;
typedef uint16_t WCHAR;


typedef int INT;
typedef unsigned int UINT;


typedef int32_t LONG;
typedef uint32_t DWORD;


typedef uint64_t QWORD;

# 1 "../../lib/oofatfs/ffconf.h" 1
# 54 "../../lib/oofatfs/ff.h" 2
# 84 "../../lib/oofatfs/ff.h"
typedef char TCHAR;
# 100 "../../lib/oofatfs/ff.h"
typedef DWORD FSIZE_t;






typedef struct {
    void *drv;

    BYTE part;

    BYTE fs_type;
    BYTE n_fats;
    BYTE wflag;
    BYTE fsi_flag;
    WORD id;
    WORD n_rootdir;
    WORD csize;




    WCHAR* lfnbuf;
# 132 "../../lib/oofatfs/ff.h"
    DWORD last_clst;
    DWORD free_clst;


    DWORD cdir;






    DWORD n_fatent;
    DWORD fsize;
    DWORD volbase;
    DWORD fatbase;
    DWORD dirbase;
    DWORD database;
    DWORD winsect;
    BYTE win[512];
} FATFS;





typedef struct {
    FATFS* fs;
    WORD id;
    BYTE attr;
    BYTE stat;
    DWORD sclust;
    FSIZE_t objsize;
# 173 "../../lib/oofatfs/ff.h"
} _FDID;





typedef struct {
    _FDID obj;
    BYTE flag;
    BYTE err;
    FSIZE_t fptr;
    DWORD clust;
    DWORD sect;

    DWORD dir_sect;
    BYTE* dir_ptr;







} FIL;





typedef struct {
    _FDID obj;
    DWORD dptr;
    DWORD clust;
    DWORD sect;
    BYTE* dir;
    BYTE fn[12];

    DWORD blk_ofs;




} FF_DIR;





typedef struct {
    FSIZE_t fsize;
    WORD fdate;
    WORD ftime;
    BYTE fattrib;

    TCHAR altname[13];
    TCHAR fname[255 + 1];



} FILINFO;





typedef enum {
    FR_OK = 0,
    FR_DISK_ERR,
    FR_INT_ERR,
    FR_NOT_READY,
    FR_NO_FILE,
    FR_NO_PATH,
    FR_INVALID_NAME,
    FR_DENIED,
    FR_EXIST,
    FR_INVALID_OBJECT,
    FR_WRITE_PROTECTED,
    FR_INVALID_DRIVE,
    FR_NOT_ENABLED,
    FR_NO_FILESYSTEM,
    FR_MKFS_ABORTED,
    FR_TIMEOUT,
    FR_LOCKED,
    FR_NOT_ENOUGH_CORE,
    FR_TOO_MANY_OPEN_FILES,
    FR_INVALID_PARAMETER
} FRESULT;






FRESULT f_open (FATFS *fs, FIL* fp, const TCHAR* path, BYTE mode);
FRESULT f_close (FIL* fp);
FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
FRESULT f_lseek (FIL* fp, FSIZE_t ofs);
FRESULT f_truncate (FIL* fp);
FRESULT f_sync (FIL* fp);
FRESULT f_opendir (FATFS *fs, FF_DIR* dp, const TCHAR* path);
FRESULT f_closedir (FF_DIR* dp);
FRESULT f_readdir (FF_DIR* dp, FILINFO* fno);
FRESULT f_findfirst (FF_DIR* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
FRESULT f_findnext (FF_DIR* dp, FILINFO* fno);
FRESULT f_mkdir (FATFS *fs, const TCHAR* path);
FRESULT f_unlink (FATFS *fs, const TCHAR* path);
FRESULT f_rename (FATFS *fs, const TCHAR* path_old, const TCHAR* path_new);
FRESULT f_stat (FATFS *fs, const TCHAR* path, FILINFO* fno);
FRESULT f_chmod (FATFS *fs, const TCHAR* path, BYTE attr, BYTE mask);
FRESULT f_utime (FATFS *fs, const TCHAR* path, const FILINFO* fno);
FRESULT f_chdir (FATFS *fs, const TCHAR* path);
FRESULT f_getcwd (FATFS *fs, TCHAR* buff, UINT len);
FRESULT f_getfree (FATFS *fs, DWORD* nclst);
FRESULT f_getlabel (FATFS *fs, TCHAR* label, DWORD* vsn);
FRESULT f_setlabel (FATFS *fs, const TCHAR* label);
FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
FRESULT f_expand (FIL* fp, FSIZE_t szf, BYTE opt);
FRESULT f_mount (FATFS* fs);
FRESULT f_umount (FATFS* fs);
FRESULT f_mkfs (FATFS *fs, BYTE opt, DWORD au, void* work, UINT len);
FRESULT f_fdisk (void *pdrv, const DWORD* szt, void* work);
# 315 "../../lib/oofatfs/ff.h"
DWORD get_fattime (void);




WCHAR ff_convert (WCHAR chr, UINT dir);
WCHAR ff_wtoupper (WCHAR chr);
# 32 "../../extmod/vfs_fat.h" 2







typedef struct _fs_user_mount_t {
    mp_obj_base_t base;
    uint16_t flags;
    mp_obj_t readblocks[4];
    mp_obj_t writeblocks[4];

    union {
        mp_obj_t ioctl[4];
        struct {
            mp_obj_t sync[2];
            mp_obj_t count[2];
        } old;
    } u;
    FATFS fatfs;
} fs_user_mount_t;

extern const byte fresult_to_errno_table[20];
extern const mp_obj_type_t mp_fat_vfs_type;

mp_import_stat_t fat_vfs_import_stat(struct _fs_user_mount_t *vfs, const char *path);
mp_obj_t fatfs_builtin_open_self(mp_obj_t self_in, mp_obj_t path, mp_obj_t mode);
extern const mp_obj_fun_builtin_var_t mp_vfs_open_obj;

mp_obj_t fat_vfs_ilistdir2(struct _fs_user_mount_t *vfs, const char *path, 
# 62 "../../extmod/vfs_fat.h" 3 4
                                                                          _Bool 
# 62 "../../extmod/vfs_fat.h"
                                                                               is_str_type);
# 34 "./omv/py/mp.h" 2
# 12 "omv/py/py_image.c" 2
# 1 "./omv/img/imlib.h" 1
# 11 "./omv/img/imlib.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 12 "./omv/img/imlib.h" 2



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 16 "./omv/img/imlib.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/float.h" 1 3 4
# 17 "./omv/img/imlib.h" 2


# 1 "../../lib/oofatfs/ff.h" 1
# 20 "./omv/img/imlib.h" 2
# 1 "./omv/fb_alloc.h" 1
# 12 "./omv/fb_alloc.h"
void fb_alloc_fail();
void fb_alloc_init0();
uint32_t fb_avail();
void fb_alloc_mark();
void fb_alloc_free_till_mark();
void *fb_alloc(uint32_t size);
void *fb_alloc0(uint32_t size);
void *fb_alloc_all(uint32_t *size);
void *fb_alloc0_all(uint32_t *size);
void fb_free();
void fb_free_all();
# 21 "./omv/img/imlib.h" 2
# 1 "./omv/umm_malloc.h" 1
# 10 "./omv/umm_malloc.h"
void umm_alloc_fail();
# 48 "./omv/umm_malloc.h"
void umm_init_x( size_t size );
void *umm_malloc( size_t size );
void *umm_calloc( size_t num, size_t size );
void *umm_realloc( void *ptr, size_t size );
void umm_free( void *ptr );
# 22 "./omv/img/imlib.h" 2
# 1 "./omv/xalloc.h" 1
# 12 "./omv/xalloc.h"
void *xalloc(uint32_t size);
void *xalloc_try_alloc(uint32_t size);
void *xalloc0(uint32_t size);
void xfree(void *mem);
void *xrealloc(void *mem, uint32_t size);
# 23 "./omv/img/imlib.h" 2
# 1 "./omv/array.h" 1
# 11 "./omv/array.h"
typedef void (*array_dtor_t)(void*);
typedef int (*array_comp_t)(const void*, const void*);



typedef struct {
    int index;
    int length;
    void **data;
    array_dtor_t dtor;
} array_t;
void array_alloc(array_t **a, array_dtor_t dtor);
void array_alloc_init(array_t **a, array_dtor_t dtor, int size);
void array_clear(array_t *array);
void array_free(array_t *array);
int array_length(array_t *array);
void *array_at(array_t *array, int idx);
void array_push_back(array_t *array, void *element);
void *array_pop_back(array_t *array);
void *array_take(array_t *array, int idx);
void array_erase(array_t *array, int idx);
void array_resize(array_t *array, int num);
void array_sort(array_t *array, array_comp_t comp);
void array_isort(array_t *array, array_comp_t comp);
# 24 "./omv/img/imlib.h" 2
# 1 "./omv/img/fmath.h" 1
# 12 "./omv/img/fmath.h"
# 1 "./omv/common.h" 1
# 13 "./omv/img/fmath.h" 2
# 101 "./omv/img/fmath.h"
float fast_sqrtf(float x);
int fast_floorf(float x);
int fast_ceilf(float x);


int fast_roundf(float x);


float fast_atanf(float x);
float fast_atan2f(float y, float x);
float fast_expf(float x);
float fast_cbrtf(float d);
float fast_fabsf(float d);
float fast_log(float x);
float fast_log2(float x);
float fast_powf(float a, float b);
extern const float cos_table[360];
extern const float sin_table[360];
# 25 "./omv/img/imlib.h" 2
# 1 "./omv/img/collections.h" 1
# 9 "./omv/img/collections.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 10 "./omv/img/collections.h" 2





typedef struct bitmap
{
    size_t size;
    char *data;
}
bitmap_t;

void bitmap_alloc(bitmap_t *ptr, size_t size);
void bitmap_free(bitmap_t *ptr);
void bitmap_clear(bitmap_t *ptr);
void bitmap_bit_set(bitmap_t *ptr, size_t index);

# 26 "./omv/img/collections.h" 3 4
_Bool 
# 26 "./omv/img/collections.h"
    bitmap_bit_get(bitmap_t *ptr, size_t index);







typedef struct lifo
{
    size_t len, size, data_len;
    char *data;
}
lifo_t;

void lifo_alloc(lifo_t *ptr, size_t size, size_t data_len);
void lifo_alloc_all(lifo_t *ptr, size_t *size, size_t data_len);
void lifo_free(lifo_t *ptr);
void lifo_clear(lifo_t *ptr);
size_t lifo_size(lifo_t *ptr);

# 46 "./omv/img/collections.h" 3 4
_Bool 
# 46 "./omv/img/collections.h"
    lifo_is_not_empty(lifo_t *ptr);

# 47 "./omv/img/collections.h" 3 4
_Bool 
# 47 "./omv/img/collections.h"
    lifo_is_not_full(lifo_t *ptr);
void lifo_enqueue(lifo_t *ptr, void *data);
void lifo_dequeue(lifo_t *ptr, void *data);
void lifo_poke(lifo_t *ptr, void *data);
void lifo_peek(lifo_t *ptr, void *data);





typedef struct fifo
{
    size_t head_ptr, tail_ptr, len, size, data_len;
    char *data;
}
fifo_t;

void fifo_alloc(fifo_t *ptr, size_t size, size_t data_len);
void fifo_alloc_all(fifo_t *ptr, size_t *size, size_t data_len);
void fifo_free(fifo_t *ptr);
void fifo_clear(fifo_t *ptr);
size_t fifo_size(fifo_t *ptr);

# 69 "./omv/img/collections.h" 3 4
_Bool 
# 69 "./omv/img/collections.h"
    fifo_is_not_empty(fifo_t *ptr);

# 70 "./omv/img/collections.h" 3 4
_Bool 
# 70 "./omv/img/collections.h"
    fifo_is_not_full(fifo_t *ptr);
void fifo_enqueue(fifo_t *ptr, void *data);
void fifo_dequeue(fifo_t *ptr, void *data);
void fifo_poke(fifo_t *ptr, void *data);
void fifo_peek(fifo_t *ptr, void *data);





typedef struct list_lnk
{
    struct list_lnk *next_ptr, *prev_ptr;
    char data[];
}
list_lnk_t;

typedef struct list
{
    list_lnk_t *head_ptr, *tail_ptr;
    size_t size, data_len;
}
list_t;

void list_init(list_t *ptr, size_t data_len);
void list_copy(list_t *dst, list_t *src);
void list_free(list_t *ptr);
void list_clear(list_t *ptr);
size_t list_size(list_t *ptr);
void list_push_front(list_t *ptr, void *data);
void list_push_back(list_t *ptr, void *data);
void list_pop_front(list_t *ptr, void *data);
void list_pop_back(list_t *ptr, void *data);
void list_get_front(list_t *ptr, void *data);
void list_get_back(list_t *ptr, void *data);
void list_set_front(list_t *ptr, void *data);
void list_set_back(list_t *ptr, void *data);
void list_insert(list_t *ptr, void *data, size_t index);
void list_remove(list_t *ptr, void *data, size_t index);
void list_get(list_t *ptr, void *data, size_t index);
void list_set(list_t *ptr, void *data, size_t index);





list_lnk_t *iterator_start_from_head(list_t *ptr);
list_lnk_t *iterator_start_from_tail(list_t *ptr);
list_lnk_t *iterator_next(list_lnk_t *lnk);
list_lnk_t *iterator_prev(list_lnk_t *lnk);
void iterator_get(list_t *ptr, list_lnk_t *lnk, void *data);
void iterator_set(list_t *ptr, list_lnk_t *lnk, void *data);
# 26 "./omv/img/imlib.h" 2
# 1 "./omv/imlib_config.h" 1
# 27 "./omv/img/imlib.h" 2

# 1 "./overlay_manager.h" 1
# 17 "./overlay_manager.h"
extern int OverlaySwitch(uint8_t ovlyNdx);
extern int OverlaySetToDefault(void);
# 29 "./omv/img/imlib.h" 2
# 81 "./omv/img/imlib.h"
typedef struct point {
    int16_t x;
    int16_t y;
} point_t;

void point_init(point_t *ptr, int x, int y);
void point_copy(point_t *dst, point_t *src);

# 88 "./omv/img/imlib.h" 3 4
_Bool 
# 88 "./omv/img/imlib.h"
    point_equal_fast(point_t *ptr0, point_t *ptr1);
int point_quadrance(point_t *ptr0, point_t *ptr1);
void point_rotate(int x, int y, float r, int center_x, int center_y, int16_t *new_x, int16_t *new_y);
void point_min_area_rectangle(point_t *corners, point_t *new_corners, int corners_len);





typedef struct line {
    int16_t x1;
    int16_t y1;
    int16_t x2;
    int16_t y2;
} line_t;


# 104 "./omv/img/imlib.h" 3 4
_Bool 
# 104 "./omv/img/imlib.h"
    lb_clip_line(line_t *l, int x, int y, int w, int h);





typedef struct rectangle {
    int16_t x;
    int16_t y;
    int16_t w;
    int16_t h;
} rectangle_t;

void rectangle_init(rectangle_t *ptr, int x, int y, int w, int h);
void rectangle_copy(rectangle_t *dst, rectangle_t *src);

# 119 "./omv/img/imlib.h" 3 4
_Bool 
# 119 "./omv/img/imlib.h"
    rectangle_equal_fast(rectangle_t *ptr0, rectangle_t *ptr1);

# 120 "./omv/img/imlib.h" 3 4
_Bool 
# 120 "./omv/img/imlib.h"
    rectangle_overlap(rectangle_t *ptr0, rectangle_t *ptr1);
void rectangle_intersected(rectangle_t *dst, rectangle_t *src);
void rectangle_united(rectangle_t *dst, rectangle_t *src);





typedef struct color_thresholds_list_lnk_data
{
    uint8_t LMin, LMax;
    int8_t AMin, AMax;
    int8_t BMin, BMax;
}
color_thresholds_list_lnk_data_t;
# 229 "./omv/img/imlib.h"
extern const uint8_t rb528_table[32];
extern const uint8_t g628_table[64];





extern const uint8_t rb825_table[256];
extern const uint8_t g826_table[256];
# 266 "./omv/img/imlib.h"
extern const int8_t lab_table[196608];
extern const int8_t yuv_table[196608];
# 353 "./omv/img/imlib.h"
typedef enum {
    COLOR_PALETTE_RAINBOW,
    COLOR_PALETTE_IRONBOW
} color_palette_t;


extern const uint16_t rainbow_table[256];
extern const uint16_t ironbow_table[256];





typedef enum image_bpp
{
    IMAGE_BPP_BINARY,
    IMAGE_BPP_GRAYSCALE,
    IMAGE_BPP_RGB565,
    IMAGE_BPP_BAYER,
    IMAGE_BPP_JPEG
}
image_bpp_t;

typedef struct image {
    int w;
    int h;
    int bpp;
    union {
        uint8_t *pixels;
        uint8_t *data;
    };
} image_t;

void image_init(image_t *ptr, int w, int h, int bpp, void *data);
void image_copy(image_t *dst, image_t *src);
size_t image_size(image_t *ptr);

# 389 "./omv/img/imlib.h" 3 4
_Bool 
# 389 "./omv/img/imlib.h"
    image_get_mask_pixel(image_t *ptr, int x, int y);
# 684 "./omv/img/imlib.h"
extern const uint8_t rb528_table[32];
extern const uint8_t g628_table[64];
# 700 "./omv/img/imlib.h"
extern const uint8_t rb825_table[256];
extern const uint8_t g826_table[256];
# 738 "./omv/img/imlib.h"
extern const int8_t kernel_gauss_3[9];
extern const int8_t kernel_gauss_5[25];
extern const int kernel_laplacian_3[9];
extern const int kernel_high_pass_3[9];
# 871 "./omv/img/imlib.h"
typedef struct simple_color {
    uint8_t G;
    union {
        int8_t L;
        uint8_t red;
    };
    union {
        int8_t A;
        uint8_t green;
    };
    union {
        int8_t B;
        uint8_t blue;
    };
} simple_color_t;

typedef struct integral_image {
    int w;
    int h;
    uint32_t *data;
} i_image_t;

typedef struct {
    int w;
    int h;
    int y_offs;
    int x_ratio;
    int y_ratio;
    uint32_t **data;
    uint32_t **swap;
} mw_image_t;

typedef struct _vector {
    float x;
    float y;
    float m;
    uint16_t cx,cy;
} vec_t;

typedef struct cluster {
    int x, y, w, h;
    array_t *points;
} cluster_t;


typedef float (*cluster_dist_t)(int cx, int cy, void *obj);


typedef struct kp {
    uint16_t x;
    uint16_t y;
    uint16_t score;
    uint16_t octave;
    uint16_t angle;
    uint16_t matched;
    uint8_t desc[32];
} kp_t;

typedef struct size {
    int w;
    int h;
} wsize_t;


typedef struct cascade {
    int std;
    int step;
    float threshold;
    float scale_factor;
    int n_stages;
    int n_features;
    int n_rectangles;
    struct size window;
    struct image *img;
    mw_image_t *sum;
    mw_image_t *ssq;
    uint8_t *stages_array;
    int16_t *stages_thresh_array;
    int16_t *tree_thresh_array;
    int16_t *alpha1_array;
    int16_t *alpha2_array;
    int8_t *num_rectangles_array;
    int8_t *weights_array;
    int8_t *rectangles_array;
} cascade_t;

typedef struct bmp_read_settings {
    int32_t bmp_w;
    int32_t bmp_h;
    uint16_t bmp_bpp;
    uint32_t bmp_fmt;
    uint32_t bmp_row_bytes;
} bmp_read_settings_t;

typedef struct ppm_read_settings {
    uint8_t read_int_c;
    
# 967 "./omv/img/imlib.h" 3 4
   _Bool 
# 967 "./omv/img/imlib.h"
        read_int_c_valid;
    uint8_t ppm_fmt;
} ppm_read_settings_t;

typedef enum save_image_format {
    FORMAT_DONT_CARE,
    FORMAT_BMP,
    FORMAT_PNM,
    FORMAT_JPG,
    FORMAT_RAW,
} save_image_format_t;

typedef struct img_read_settings {
    union
    {
        bmp_read_settings_t bmp_rs;
        ppm_read_settings_t ppm_rs;
    };
    save_image_format_t format;
} img_read_settings_t;

typedef void (*line_op_t)(image_t*, int, void*, void*, 
# 988 "./omv/img/imlib.h" 3 4
                                                      _Bool
# 988 "./omv/img/imlib.h"
                                                          );
typedef void (*flood_fill_call_back_t)(image_t *, int, int, int, void *);

typedef enum descriptor_type {
    DESC_LBP,
    DESC_ORB,
} descriptor_t;

typedef enum edge_detector_type {
   EDGE_CANNY,
   EDGE_SIMPLE,
} edge_detector_t;

typedef enum template_match {
    SEARCH_EX,
    SEARCH_DS,
} template_match_t;

typedef enum jpeg_subsample {
    JPEG_SUBSAMPLE_1x1 = 0x11,
    JPEG_SUBSAMPLE_2x1 = 0x21,
    JPEG_SUBSAMPLE_2x2 = 0x22,
} jpeg_subsample_t;

typedef enum corner_detector_type {
    CORNER_FAST,
    CORNER_AGAST
} corner_detector_t;

typedef struct histogram {
    int LBinCount;
    float *LBins;
    int ABinCount;
    float *ABins;
    int BBinCount;
    float *BBins;
} histogram_t;

typedef struct percentile {
    uint8_t LValue;
    int8_t AValue;
    int8_t BValue;
} percentile_t;

typedef struct threshold {
    uint8_t LValue;
    int8_t AValue;
    int8_t BValue;
} threshold_t;

typedef struct statistics {
    uint8_t LMean, LMedian, LMode, LSTDev, LMin, LMax, LLQ, LUQ;
    int8_t AMean, AMedian, AMode, ASTDev, AMin, AMax, ALQ, AUQ;
    int8_t BMean, BMedian, BMode, BSTDev, BMin, BMax, BLQ, BUQ;
} statistics_t;




typedef struct find_blobs_list_lnk_data {
    point_t corners[20];
    rectangle_t rect;
    uint32_t pixels, perimeter, code, count;
    float centroid_x, centroid_y, rotation, roundness;
    uint16_t x_hist_bins_count, y_hist_bins_count, *x_hist_bins, *y_hist_bins;
    float centroid_x_acc, centroid_y_acc, rotation_acc_x, rotation_acc_y, roundness_acc;
} find_blobs_list_lnk_data_t;

typedef struct find_lines_list_lnk_data {
    line_t line;
    uint32_t magnitude;
    int16_t theta, rho;
} find_lines_list_lnk_data_t;

typedef struct find_circles_list_lnk_data {
    point_t p;
    uint32_t r, magnitude;
} find_circles_list_lnk_data_t;

typedef struct find_rects_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    uint32_t magnitude;
} find_rects_list_lnk_data_t;

typedef struct find_qrcodes_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint8_t version, ecc_level, mask, data_type;
    uint32_t eci;
} find_qrcodes_list_lnk_data_t;

typedef enum apriltag_families {
    TAG16H5 = 1,
    TAG25H7 = 2,
    TAG25H9 = 4,
    TAG36H10 = 8,
    TAG36H11 = 16,
    ARTOOLKIT = 32
} apriltag_families_t;

typedef struct find_apriltags_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    uint16_t id;
    uint8_t family, hamming;
    point_t centroid;
    float goodness, decision_margin;
    float x_translation, y_translation, z_translation;
    float x_rotation, y_rotation, z_rotation;
} find_apriltags_list_lnk_data_t;

typedef struct find_datamatrices_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint16_t rotation;
    uint8_t rows, columns;
    uint16_t capacity, padding;
} find_datamatrices_list_lnk_data_t;

typedef enum barcodes {
    BARCODE_EAN2,
    BARCODE_EAN5,
    BARCODE_EAN8,
    BARCODE_UPCE,
    BARCODE_ISBN10,
    BARCODE_UPCA,
    BARCODE_EAN13,
    BARCODE_ISBN13,
    BARCODE_I25,
    BARCODE_DATABAR,
    BARCODE_DATABAR_EXP,
    BARCODE_CODABAR,
    BARCODE_CODE39,
    BARCODE_PDF417,
    BARCODE_CODE93,
    BARCODE_CODE128
} barcodes_t;

typedef struct find_barcodes_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint16_t type, rotation;
    int quality;
} find_barcodes_list_lnk_data_t;


int8_t imlib_rgb565_to_l(uint16_t pixel);
int8_t imlib_rgb565_to_a(uint16_t pixel);
int8_t imlib_rgb565_to_b(uint16_t pixel);
int8_t imlib_rgb565_to_y(uint16_t pixel);
int8_t imlib_rgb565_to_u(uint16_t pixel);
int8_t imlib_rgb565_to_v(uint16_t pixel);
uint16_t imlib_lab_to_rgb(uint8_t l, int8_t a, int8_t b);
uint16_t imlib_yuv_to_rgb(uint8_t y, int8_t u, int8_t v);
void imlib_bayer_to_rgb565(image_t *img, int w, int h, int xoffs, int yoffs, uint16_t *rgbbuf);


void ppm_read_geometry(FIL *fp, image_t *img, const char *path, ppm_read_settings_t *rs);
void ppm_read_pixels(FIL *fp, image_t *img, int line_start, int line_end, ppm_read_settings_t *rs);
void ppm_read(image_t *img, const char *path);
void ppm_write_subimg(image_t *img, const char *path, rectangle_t *r);

# 1156 "./omv/img/imlib.h" 3 4
_Bool 
# 1156 "./omv/img/imlib.h"
    bmp_read_geometry(FIL *fp, image_t *img, const char *path, bmp_read_settings_t *rs);
void bmp_read_pixels(FIL *fp, image_t *img, int line_start, int line_end, bmp_read_settings_t *rs);
void bmp_read(image_t *img, const char *path);
void bmp_write_subimg(image_t *img, const char *path, rectangle_t *r);

# 1160 "./omv/img/imlib.h" 3 4
_Bool 
# 1160 "./omv/img/imlib.h"
    jpeg_compress(image_t *src, image_t *dst, int quality, 
# 1160 "./omv/img/imlib.h" 3 4
                                                           _Bool 
# 1160 "./omv/img/imlib.h"
                                                                realloc);
void jpeg_read_geometry(FIL *fp, image_t *img, const char *path);
void jpeg_read_pixels(FIL *fp, image_t *img);
void jpeg_read(image_t *img, const char *path);
void jpeg_write(image_t *img, const char *path, int quality);

# 1165 "./omv/img/imlib.h" 3 4
_Bool 
# 1165 "./omv/img/imlib.h"
    imlib_read_geometry(FIL *fp, image_t *img, const char *path, img_read_settings_t *rs);
void imlib_image_operation(image_t *img, const char *path, image_t *other, int scalar, line_op_t op, void *data);
void imlib_load_image(image_t *img, const char *path);
void imlib_save_image(image_t *img, const char *path, rectangle_t *roi, int quality);


void gif_open(FIL *fp, int width, int height, 
# 1171 "./omv/img/imlib.h" 3 4
                                             _Bool 
# 1171 "./omv/img/imlib.h"
                                                  color, 
# 1171 "./omv/img/imlib.h" 3 4
                                                         _Bool 
# 1171 "./omv/img/imlib.h"
                                                              loop);
void gif_add_frame(FIL *fp, image_t *img, uint16_t delay);
void gif_close(FIL *fp);


void mjpeg_open(FIL *fp, int width, int height);
void mjpeg_add_frame(FIL *fp, uint32_t *frames, uint32_t *bytes, image_t *img, int quality);
void mjpeg_close(FIL *fp, uint32_t *frames, uint32_t *bytes, float fps);


point_t *point_alloc(int16_t x, int16_t y);

# 1182 "./omv/img/imlib.h" 3 4
_Bool 
# 1182 "./omv/img/imlib.h"
    point_equal(point_t *p1, point_t *p2);
float point_distance(point_t *p1, point_t *p2);


rectangle_t *rectangle_alloc(int16_t x, int16_t y, int16_t w, int16_t h);

# 1187 "./omv/img/imlib.h" 3 4
_Bool 
# 1187 "./omv/img/imlib.h"
    rectangle_equal(rectangle_t *r1, rectangle_t *r2);

# 1188 "./omv/img/imlib.h" 3 4
_Bool 
# 1188 "./omv/img/imlib.h"
    rectangle_intersects(rectangle_t *r1, rectangle_t *r2);

# 1189 "./omv/img/imlib.h" 3 4
_Bool 
# 1189 "./omv/img/imlib.h"
    rectangle_subimg(image_t *img, rectangle_t *r, rectangle_t *r_out);
array_t *rectangle_merge(array_t *rectangles);
void rectangle_expand(rectangle_t *r, int x, int y);


void imlib_sepconv3(image_t *img, const int8_t *krn, const float m, const int b);


int imlib_image_mean(image_t *src, int *r_mean, int *g_mean, int *b_mean);
int imlib_image_std(image_t *src);


void imlib_midpoint_pool(image_t *img_i, image_t *img_o, int x_div, int y_div, const int bias);
void imlib_mean_pool(image_t *img_i, image_t *img_o, int x_div, int y_div);
float imlib_template_match_ds(image_t *image, image_t *template, rectangle_t *r);
float imlib_template_match_ex(image_t *image, image_t *template, rectangle_t *roi, int step, rectangle_t *r);


array_t *cluster_kmeans(array_t *points, int k, cluster_dist_t dist_func);


void imlib_integral_image_alloc(struct integral_image *sum, int w, int h);
void imlib_integral_image_free(struct integral_image *sum);
void imlib_integral_image(struct image *src, struct integral_image *sum);
void imlib_integral_image_sq(struct image *src, struct integral_image *sum);
void imlib_integral_image_scaled(struct image *src, struct integral_image *sum);
uint32_t imlib_integral_lookup(struct integral_image *src, int x, int y, int w, int h);


void imlib_integral_mw_alloc(mw_image_t *sum, int w, int h);
void imlib_integral_mw_free(mw_image_t *sum);
void imlib_integral_mw_scale(rectangle_t *roi, mw_image_t *sum, int w, int h);
void imlib_integral_mw(image_t *src, mw_image_t *sum);
void imlib_integral_mw_sq(image_t *src, mw_image_t *sum);
void imlib_integral_mw_shift(image_t *src, mw_image_t *sum, int n);
void imlib_integral_mw_shift_sq(image_t *src, mw_image_t *sum, int n);
void imlib_integral_mw_ss(image_t *src, mw_image_t *sum, mw_image_t *ssq, rectangle_t *roi);
void imlib_integral_mw_shift_ss(image_t *src, mw_image_t *sum, mw_image_t *ssq, rectangle_t *roi, int n);
long imlib_integral_mw_lookup(mw_image_t *sum, int x, int y, int w, int h);


int imlib_load_cascade(struct cascade* cascade, const char *path);
array_t *imlib_detect_objects(struct image *image, struct cascade *cascade, struct rectangle *roi);


void fast_detect(image_t *image, array_t *keypoints, int threshold, rectangle_t *roi);
void agast_detect(image_t *image, array_t *keypoints, int threshold, rectangle_t *roi);


array_t *orb_find_keypoints(image_t *image, 
# 1238 "./omv/img/imlib.h" 3 4
                                           _Bool 
# 1238 "./omv/img/imlib.h"
                                                normalized, int threshold,
        float scale_factor, int max_keypoints, corner_detector_t corner_detector, rectangle_t *roi);
int orb_match_keypoints(array_t *kpts1, array_t *kpts2, int *match, int threshold, rectangle_t *r, point_t *c, int *angle);
int orb_filter_keypoints(array_t *kpts, rectangle_t *r, point_t *c);
int orb_save_descriptor(FIL *fp, array_t *kpts);
int orb_load_descriptor(FIL *fp, array_t *kpts);
float orb_cluster_dist(int cx, int cy, void *kp);


uint8_t *imlib_lbp_desc(image_t *image, rectangle_t *roi);
int imlib_lbp_desc_distance(uint8_t *d0, uint8_t *d1);
int imlib_lbp_desc_save(FIL *fp, uint8_t *desc);
int imlib_lbp_desc_load(FIL *fp, uint8_t **desc);


void imlib_find_iris(image_t *src, point_t *iris, rectangle_t *roi);


void im_filter_bw(uint8_t *src, uint8_t *dst, int size, int bpp, void *args);
void im_filter_skin(uint8_t *src, uint8_t *dst, int size, int bpp, void *args);


void imlib_edge_simple(image_t *src, rectangle_t *roi, int low_thresh, int high_thresh);
void imlib_edge_canny(image_t *src, rectangle_t *roi, int low_thresh, int high_thresh);


void imlib_find_hog(image_t *src, rectangle_t *roi, int cell_size);


void imlib_zero(image_t *img, image_t *mask, 
# 1267 "./omv/img/imlib.h" 3 4
                                            _Bool 
# 1267 "./omv/img/imlib.h"
                                                 invert);
void imlib_flood_fill_int(image_t *out, image_t *img, int x, int y,
                          int seed_threshold, int floating_threshold,
                          flood_fill_call_back_t cb, void *data);

int imlib_get_pixel(image_t *img, int x, int y);
void imlib_set_pixel(image_t *img, int x, int y, int p);
void imlib_draw_line(image_t *img, int x0, int y0, int x1, int y1, int c, int thickness);
void imlib_draw_rectangle(image_t *img, int rx, int ry, int rw, int rh, int c, int thickness, 
# 1275 "./omv/img/imlib.h" 3 4
                                                                                             _Bool 
# 1275 "./omv/img/imlib.h"
                                                                                                  fill);
void imlib_draw_circle(image_t *img, int cx, int cy, int r, int c, int thickness, 
# 1276 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1276 "./omv/img/imlib.h"
                                                                                      fill);
void imlib_draw_ellipse(image_t *img, int cx, int cy, int rx, int ry, int rotation, int c, int thickness, 
# 1277 "./omv/img/imlib.h" 3 4
                                                                                                         _Bool 
# 1277 "./omv/img/imlib.h"
                                                                                                              fill);
void imlib_draw_string(image_t *img, int x_off, int y_off, const char *str, int c, float scale, int x_spacing, int y_spacing, 
# 1278 "./omv/img/imlib.h" 3 4
                                                                                                                             _Bool 
# 1278 "./omv/img/imlib.h"
                                                                                                                                  mono_space,
                       int char_rotation, 
# 1279 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1279 "./omv/img/imlib.h"
                                              char_hmirror, 
# 1279 "./omv/img/imlib.h" 3 4
                                                            _Bool 
# 1279 "./omv/img/imlib.h"
                                                                 char_vflip, int string_rotation, 
# 1279 "./omv/img/imlib.h" 3 4
                                                                                                  _Bool 
# 1279 "./omv/img/imlib.h"
                                                                                                       string_hmirror, 
# 1279 "./omv/img/imlib.h" 3 4
                                                                                                                       _Bool 
# 1279 "./omv/img/imlib.h"
                                                                                                                            string_hflip);
void imlib_draw_image(image_t *img, image_t *other, int x_off, int y_off, float x_scale, float y_scale, float alpha, image_t *mask);
void imlib_flood_fill(image_t *img, int x, int y,
                      float seed_threshold, float floating_threshold,
                      int c, 
# 1283 "./omv/img/imlib.h" 3 4
                            _Bool 
# 1283 "./omv/img/imlib.h"
                                 invert, 
# 1283 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1283 "./omv/img/imlib.h"
                                              clear_background, image_t *mask);

void imlib_binary(image_t *out, image_t *img, list_t *thresholds, 
# 1285 "./omv/img/imlib.h" 3 4
                                                                 _Bool 
# 1285 "./omv/img/imlib.h"
                                                                      invert, 
# 1285 "./omv/img/imlib.h" 3 4
                                                                              _Bool 
# 1285 "./omv/img/imlib.h"
                                                                                   zero, image_t *mask);
void imlib_invert(image_t *img);
void imlib_b_and(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_nand(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_or(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_nor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_xor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_xnor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_erode(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_dilate(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_open(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_close(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_top_hat(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_black_hat(image_t *img, int ksize, int threshold, image_t *mask);

void imlib_gamma_corr(image_t *img, float gamma, float scale, float offset);
void imlib_negate(image_t *img);
void imlib_replace(image_t *img, const char *path, image_t *other, int scalar, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                              _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                   hmirror, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                                            _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                                 vflip, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                                                        _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                                             transpose, image_t *mask);
void imlib_add(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_sub(image_t *img, const char *path, image_t *other, int scalar, 
# 1304 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1304 "./omv/img/imlib.h"
                                                                               reverse, image_t *mask);
void imlib_mul(image_t *img, const char *path, image_t *other, int scalar, 
# 1305 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1305 "./omv/img/imlib.h"
                                                                               invert, image_t *mask);
void imlib_div(image_t *img, const char *path, image_t *other, int scalar, 
# 1306 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1306 "./omv/img/imlib.h"
                                                                               invert, 
# 1306 "./omv/img/imlib.h" 3 4
                                                                                       _Bool 
# 1306 "./omv/img/imlib.h"
                                                                                            mod, image_t *mask);
void imlib_min(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_max(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_difference(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_blend(image_t *img, const char *path, image_t *other, int scalar, float alpha, image_t *mask);

void imlib_histeq(image_t *img, image_t *mask);
void imlib_clahe_histeq(image_t *img, float clip_limit, image_t *mask);
void imlib_mean_filter(image_t *img, const int ksize, 
# 1314 "./omv/img/imlib.h" 3 4
                                                     _Bool 
# 1314 "./omv/img/imlib.h"
                                                          threshold, int offset, 
# 1314 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1314 "./omv/img/imlib.h"
                                                                                      invert, image_t *mask);
void imlib_median_filter(image_t *img, const int ksize, float percentile, 
# 1315 "./omv/img/imlib.h" 3 4
                                                                         _Bool 
# 1315 "./omv/img/imlib.h"
                                                                              threshold, int offset, 
# 1315 "./omv/img/imlib.h" 3 4
                                                                                                     _Bool 
# 1315 "./omv/img/imlib.h"
                                                                                                          invert, image_t *mask);
void imlib_mode_filter(image_t *img, const int ksize, 
# 1316 "./omv/img/imlib.h" 3 4
                                                     _Bool 
# 1316 "./omv/img/imlib.h"
                                                          threshold, int offset, 
# 1316 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1316 "./omv/img/imlib.h"
                                                                                      invert, image_t *mask);
void imlib_midpoint_filter(image_t *img, const int ksize, float bias, 
# 1317 "./omv/img/imlib.h" 3 4
                                                                     _Bool 
# 1317 "./omv/img/imlib.h"
                                                                          threshold, int offset, 
# 1317 "./omv/img/imlib.h" 3 4
                                                                                                 _Bool 
# 1317 "./omv/img/imlib.h"
                                                                                                      invert, image_t *mask);
void imlib_morph(image_t *img, const int ksize, const int *krn, const float m, const int b, 
# 1318 "./omv/img/imlib.h" 3 4
                                                                                           _Bool 
# 1318 "./omv/img/imlib.h"
                                                                                                threshold, int offset, 
# 1318 "./omv/img/imlib.h" 3 4
                                                                                                                       _Bool 
# 1318 "./omv/img/imlib.h"
                                                                                                                            invert, image_t *mask);
void imlib_bilateral_filter(image_t *img, const int ksize, float color_sigma, float space_sigma, 
# 1319 "./omv/img/imlib.h" 3 4
                                                                                                _Bool 
# 1319 "./omv/img/imlib.h"
                                                                                                     threshold, int offset, 
# 1319 "./omv/img/imlib.h" 3 4
                                                                                                                            _Bool 
# 1319 "./omv/img/imlib.h"
                                                                                                                                 invert, image_t *mask);
void imlib_cartoon_filter(image_t *img, float seed_threshold, float floating_threshold, image_t *mask);

void imlib_logpolar_int(image_t *dst, image_t *src, rectangle_t *roi, 
# 1322 "./omv/img/imlib.h" 3 4
                                                                     _Bool 
# 1322 "./omv/img/imlib.h"
                                                                          linear, 
# 1322 "./omv/img/imlib.h" 3 4
                                                                                  _Bool 
# 1322 "./omv/img/imlib.h"
                                                                                       reverse);
void imlib_logpolar(image_t *img, 
# 1323 "./omv/img/imlib.h" 3 4
                                 _Bool 
# 1323 "./omv/img/imlib.h"
                                      linear, 
# 1323 "./omv/img/imlib.h" 3 4
                                              _Bool 
# 1323 "./omv/img/imlib.h"
                                                   reverse);
void imlib_remove_shadows(image_t *img, const char *path, image_t *other, int scalar, 
# 1324 "./omv/img/imlib.h" 3 4
                                                                                     _Bool 
# 1324 "./omv/img/imlib.h"
                                                                                          single);
void imlib_chrominvar(image_t *img);
void imlib_illuminvar(image_t *img);

void imlib_lens_corr(image_t *img, float strength, float zoom);
void imlib_rotation_corr(image_t *img, float x_rotation, float y_rotation,
                         float z_rotation, float x_translation, float y_translation,
                         float zoom);

void imlib_get_similarity(image_t *img, const char *path, image_t *other, int scalar, float *avg, float *std, float *min, float *max);
void imlib_get_histogram(histogram_t *out, image_t *ptr, rectangle_t *roi, list_t *thresholds, 
# 1334 "./omv/img/imlib.h" 3 4
                                                                                              _Bool 
# 1334 "./omv/img/imlib.h"
                                                                                                   invert);
void imlib_get_percentile(percentile_t *out, image_bpp_t bpp, histogram_t *ptr, float percentile);
void imlib_get_threshold(threshold_t *out, image_bpp_t bpp, histogram_t *ptr);
void imlib_get_statistics(statistics_t *out, image_bpp_t bpp, histogram_t *ptr);

# 1338 "./omv/img/imlib.h" 3 4
_Bool 
# 1338 "./omv/img/imlib.h"
    imlib_get_regression(find_lines_list_lnk_data_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                          list_t *thresholds, 
# 1339 "./omv/img/imlib.h" 3 4
                                             _Bool 
# 1339 "./omv/img/imlib.h"
                                                  invert, unsigned int area_threshold, unsigned int pixels_threshold, 
# 1339 "./omv/img/imlib.h" 3 4
                                                                                                                      _Bool 
# 1339 "./omv/img/imlib.h"
                                                                                                                           robust);

void imlib_find_blobs(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                      list_t *thresholds, 
# 1342 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1342 "./omv/img/imlib.h"
                                              invert, unsigned int area_threshold, unsigned int pixels_threshold,
                      
# 1343 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1343 "./omv/img/imlib.h"
                          merge, int margin,
                      
# 1344 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1344 "./omv/img/imlib.h"
                          (*threshold_cb)(void*,find_blobs_list_lnk_data_t*), void *threshold_cb_arg,
                      
# 1345 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1345 "./omv/img/imlib.h"
                          (*merge_cb)(void*,find_blobs_list_lnk_data_t*,find_blobs_list_lnk_data_t*), void *merge_cb_arg,
                      unsigned int x_hist_bins_max, unsigned int y_hist_bins_max);

size_t trace_line(image_t *ptr, line_t *l, int *theta_buffer, uint32_t *mag_buffer, point_t *point_buffer);
void merge_alot(list_t *out, int threshold, int theta_threshold);
void imlib_find_lines(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                      uint32_t threshold, unsigned int theta_margin, unsigned int rho_margin);
void imlib_lsd_find_line_segments(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int merge_distance, unsigned int max_theta_diff);
void imlib_find_line_segments(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                              uint32_t threshold, unsigned int theta_margin, unsigned int rho_margin,
                              uint32_t segment_threshold);
void imlib_find_circles(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                        uint32_t threshold, unsigned int x_margin, unsigned int y_margin, unsigned int r_margin,
                        unsigned int r_min, unsigned int r_max, unsigned int r_step);
void imlib_find_rects(list_t *out, image_t *ptr, rectangle_t *roi,
                      uint32_t threshold);

void imlib_find_qrcodes(list_t *out, image_t *ptr, rectangle_t *roi);
void imlib_find_apriltags(list_t *out, image_t *ptr, rectangle_t *roi, apriltag_families_t families,
                          float fx, float fy, float cx, float cy);
void imlib_find_datamatrices(list_t *out, image_t *ptr, rectangle_t *roi, int effort);
void imlib_find_barcodes(list_t *out, image_t *ptr, rectangle_t *roi);

void imlib_phasecorrelate(image_t *img0, image_t *img1, rectangle_t *roi0, rectangle_t *roi1, 
# 1368 "./omv/img/imlib.h" 3 4
                                                                                             _Bool 
# 1368 "./omv/img/imlib.h"
                                                                                                  logpolar, 
# 1368 "./omv/img/imlib.h" 3 4
                                                                                                            _Bool 
# 1368 "./omv/img/imlib.h"
                                                                                                                 fix_rotation_scale,
                          float *x_translation, float *y_translation, float *rotation, float *scale, float *response);

array_t *imlib_selective_search(image_t *src, float t, int min_size, float a1, float a2, float a3);
# 13 "omv/py/py_image.c" 2

# 1 "./omv/sensor.h" 1
# 12 "./omv/sensor.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 1 3 4
# 13 "./omv/sensor.h" 2







typedef enum {
    PIXFORMAT_INVALID = 0,
    PIXFORMAT_BINARY,
    PIXFORMAT_GRAYSCALE,
    PIXFORMAT_RGB565,
    PIXFORMAT_YUV422,
    PIXFORMAT_BAYER,
    PIXFORMAT_JPEG,
} pixformat_t;

typedef enum {
    FRAMESIZE_INVALID = 0,

    FRAMESIZE_QQCIF,
    FRAMESIZE_QCIF,
    FRAMESIZE_CIF,
    FRAMESIZE_QQSIF,
    FRAMESIZE_QSIF,
    FRAMESIZE_SIF,

    FRAMESIZE_QQQQVGA,
    FRAMESIZE_QQQVGA,
    FRAMESIZE_QQVGA,
    FRAMESIZE_QVGA,
    FRAMESIZE_VGA,
    FRAMESIZE_HQQQVGA,
    FRAMESIZE_HQQVGA,
    FRAMESIZE_HQVGA,

    FRAMESIZE_64X32,
    FRAMESIZE_64X64,
    FRAMESIZE_128X64,
    FRAMESIZE_128X128,

    FRAMESIZE_LCD,
    FRAMESIZE_QQVGA2,
    FRAMESIZE_WVGA,
    FRAMESIZE_WVGA2,
    FRAMESIZE_SVGA,
    FRAMESIZE_SXGA,
    FRAMESIZE_UXGA,
} framesize_t;

typedef enum {
    FRAMERATE_2FPS =0x9F,
    FRAMERATE_8FPS =0x87,
    FRAMERATE_15FPS=0x83,
    FRAMERATE_30FPS=0x81,
    FRAMERATE_60FPS=0x80,
 FRAMERATE_HWREG = 0x80000000,
} framerate_t;

typedef enum {
    GAINCEILING_2X,
    GAINCEILING_4X,
    GAINCEILING_8X,
    GAINCEILING_16X,
    GAINCEILING_32X,
    GAINCEILING_64X,
    GAINCEILING_128X,
} gainceiling_t;

typedef enum {
    SDE_NORMAL,
    SDE_NEGATIVE,
} sde_t;

typedef enum {
    ATTR_CONTRAST=0,
    ATTR_BRIGHTNESS,
    ATTR_SATURATION,
    ATTR_GAINCEILING,
} sensor_attr_t;

typedef enum {
    ACTIVE_LOW,
    ACTIVE_HIGH
} polarity_t;

typedef enum {
    IOCTL_SET_TRIGGERED_MODE,
    IOCTL_GET_TRIGGERED_MODE,
    IOCTL_LEPTON_GET_WIDTH,
    IOCTL_LEPTON_GET_HEIGHT,
    IOCTL_LEPTON_GET_RADIOMETRY,
    IOCTL_LEPTON_GET_REFRESH,
    IOCTL_LEPTON_GET_RESOLUTION,
    IOCTL_LEPTON_RUN_COMMAND,
    IOCTL_LEPTON_SET_ATTRIBUTE,
    IOCTL_LEPTON_GET_ATTRIBUTE,
    IOCTL_LEPTON_GET_FPA_TEMPERATURE,
    IOCTL_LEPTON_GET_AUX_TEMPERATURE,
    IOCTL_LEPTON_SET_MEASUREMENT_MODE,
    IOCTL_LEPTON_GET_MEASUREMENT_MODE,
    IOCTL_LEPTON_SET_MEASUREMENT_RANGE,
    IOCTL_LEPTON_GET_MEASUREMENT_RANGE
} ioctl_t;
# 127 "./omv/sensor.h"
typedef 
# 127 "./omv/sensor.h" 3 4
       _Bool 
# 127 "./omv/sensor.h"
            (*streaming_cb_t)(image_t *image);

typedef struct _sensor sensor_t;
typedef struct _sensor {
    uint8_t chip_id;
    uint8_t slv_addr;
    uint16_t gs_bpp;
    uint32_t hw_flags;
    const uint16_t *color_palette;
 uint32_t vsync_pin;
    int fb_w, fb_h;
    uint16_t wndX, wndY, wndW, wndH;
 uint8_t isWindowing;

    polarity_t pwdn_pol;
    polarity_t reset_pol;


    sde_t sde;
    pixformat_t pixformat;
    framesize_t framesize;
    framerate_t framerate;
    gainceiling_t gainceiling;


    int (*reset) (sensor_t *sensor);
    int (*sleep) (sensor_t *sensor, int enable);
    int (*read_reg) (sensor_t *sensor, uint8_t reg_addr);
    int (*write_reg) (sensor_t *sensor, uint8_t reg_addr, uint16_t reg_data);
    int (*set_pixformat) (sensor_t *sensor, pixformat_t pixformat);
    int (*set_framesize) (sensor_t *sensor, framesize_t framesize);
    int (*set_framerate) (sensor_t *sensor, framerate_t framerate);
    int (*set_contrast) (sensor_t *sensor, int level);
    int (*set_brightness) (sensor_t *sensor, int level);
    int (*set_saturation) (sensor_t *sensor, int level);
    int (*set_gainceiling) (sensor_t *sensor, gainceiling_t gainceiling);
    int (*set_quality) (sensor_t *sensor, int quality);
    int (*set_colorbar) (sensor_t *sensor, int enable);
    int (*set_auto_gain) (sensor_t *sensor, int enable, float gain_db, float gain_db_ceiling);
    int (*get_gain_db) (sensor_t *sensor, float *gain_db);
    int (*set_auto_exposure) (sensor_t *sensor, int enable, int exposure_us);
    int (*get_exposure_us) (sensor_t *sensor, int *exposure_us);
    int (*set_auto_whitebal) (sensor_t *sensor, int enable, float r_gain_db, float g_gain_db, float b_gain_db);
    int (*get_rgb_gain_db) (sensor_t *sensor, float *r_gain_db, float *g_gain_db, float *b_gain_db);
    int (*set_hmirror) (sensor_t *sensor, int enable);
    int (*set_vflip) (sensor_t *sensor, int enable);
    int (*set_special_effect) (sensor_t *sensor, sde_t sde);
    int (*set_lens_correction) (sensor_t *sensor, int enable, int radi, int coef);
    int (*ioctl) (sensor_t *sensor, int request, va_list ap);
    int (*snapshot) (sensor_t *sensor, image_t *image, streaming_cb_t streaming_cb);
} sensor_t;


extern const int resolution[][2];


int sensor_init();


void sensor_init0();


int sensor_reset();


int sensor_get_id();


int sensor_sleep(int enable);


int sensor_shutdown(int enable);


int sensor_read_reg(uint8_t reg_addr);


int sensor_write_reg(uint8_t reg_addr, uint16_t reg_data);


int sensor_set_pixformat(pixformat_t pixformat);


int sensor_set_framesize(framesize_t framesize);


int sensor_set_framerate(framerate_t framerate);


int sensor_set_windowing(int x, int y, int w, int h);


int sensor_set_contrast(int level);


int sensor_set_brightness(int level);


int sensor_set_saturation(int level);



int sensor_set_gainceiling(gainceiling_t gainceiling);


int sensor_set_quality(int qs);


int sensor_set_colorbar(int enable);


int sensor_set_auto_gain(int enable, float gain_db, float gain_db_ceiling);


int sensor_get_gain_db(float *gain_db);


int sensor_set_auto_exposure(int enable, int exposure_us);


int sensor_get_exposure_us(int *get_exposure_us);


int sensor_set_auto_whitebal(int enable, float r_gain_db, float g_gain_db, float b_gain_db);


int sensor_get_rgb_gain_db(float *r_gain_db, float *g_gain_db, float *b_gain_db);


int sensor_set_hmirror(int enable);


int sensor_set_vflip(int enable);


int sensor_set_special_effect(sde_t sde);


int sensor_set_lens_correction(int enable, int radi, int coef);

int sensor_ioctl(int request, ...);


int sensor_set_vsync_output(GPIO_Type *gpio, uint32_t pin);


int sensor_set_color_palette(const uint16_t *color_palette);


const uint16_t *sensor_get_color_palette();


int sensor_snapshot(sensor_t *sensor, image_t *image, streaming_cb_t streaming_cb);
# 15 "omv/py/py_image.c" 2
# 1 "./omv/ff_wrapper.h" 1
# 13 "./omv/ff_wrapper.h"
extern const char *ffs_strerror(FRESULT res);


FRESULT f_open_helper(FIL *fp, const TCHAR *path, BYTE mode);
FRESULT f_opendir_helper(FF_DIR *dp, const TCHAR *path);
FRESULT f_stat_helper(const TCHAR *path, FILINFO *fno);
FRESULT f_mkdir_helper(const TCHAR *path);
FRESULT f_unlink_helper(const TCHAR *path);
FRESULT f_rename_helper(const TCHAR *path_old, const TCHAR *path_new);

void ff_unsupported_format(FIL *fp);
void ff_file_corrupted(FIL *fp);
void ff_not_equal(FIL *fp);
void ff_no_intersection(FIL *fp);
void file_read_open(FIL *fp, const char *path);
void file_write_open(FIL *fp, const char *path);
void file_close(FIL *fp);
void file_seek(FIL *fp, UINT offset);
void file_truncate(FIL *fp);
void file_sync(FIL *fp);


void file_buffer_init0();
void file_buffer_on(FIL *fp);
uint32_t file_tell_w_buf(FIL *fp);
uint32_t file_size_w_buf(FIL *fp);
void file_buffer_off(FIL *fp);
void read_byte(FIL *fp, uint8_t *value);
void read_byte_expect(FIL *fp, uint8_t value);
void read_byte_ignore(FIL *fp);
void read_word(FIL *fp, uint16_t *value);
void read_word_expect(FIL *fp, uint16_t value);
void read_word_ignore(FIL *fp);
void read_long(FIL *fp, uint32_t *value);
void read_long_expect(FIL *fp, uint32_t value);
void read_long_ignore(FIL *fp);
void read_data(FIL *fp, void *data, UINT size);
void write_byte(FIL *fp, uint8_t value);
void write_word(FIL *fp, uint16_t value);
void write_long(FIL *fp, uint32_t value);
void write_data(FIL *fp, const void *data, UINT size);
# 16 "omv/py/py_image.c" 2


# 1 "./omv/framebuffer.h" 1
# 12 "./omv/framebuffer.h"
# 1 "./omv/mutex.h" 1
# 15 "./omv/mutex.h"
typedef volatile struct {
    uint32_t tid;
    uint32_t lock;
} mutex_t;
void mutex_init(mutex_t *mutex);
void mutex_lock(mutex_t *mutex, uint32_t tid);
int mutex_try_lock(mutex_t *mutex, uint32_t tid);
void mutex_unlock(mutex_t *mutex, uint32_t tid);
# 13 "./omv/framebuffer.h" 2

typedef struct framebuffer {
 union {
  struct {
   int x, y, w, h, u, v, bpp, res;
  };
  uint64_t u64AlignForIMxRT;
 };
    uint8_t pixels[];
} framebuffer_t;

extern framebuffer_t *fb_framebuffer;

typedef struct jpegbuffer {
    int w,h;
    int size;
    int enabled;
    int quality;
    mutex_t lock;
    uint8_t pixels[];
} jpegbuffer_t;

extern jpegbuffer_t *jpeg_fb_framebuffer;
# 49 "./omv/framebuffer.h"
uint32_t fb_buffer_size();


void fb_update_jpeg_buffer();
# 19 "omv/py/py_image.c" 2
# 1 "omv/py/py_assert.h" 1
# 11 "omv/py/py_assert.h"
# 1 "omv/py/mp.h" 1
# 12 "omv/py/py_assert.h" 2
# 20 "omv/py/py_image.c" 2
# 1 "omv/py/py_helper.h" 1
# 9 "omv/py/py_helper.h"
extern const mp_obj_fun_builtin_var_t py_func_unavailable_obj;
image_t *py_helper_arg_to_image_mutable(const mp_obj_t arg);
image_t *py_helper_arg_to_image_mutable_bayer(const mp_obj_t arg);
image_t *py_helper_arg_to_image_grayscale(const mp_obj_t arg);
image_t *py_helper_arg_to_image_color(const mp_obj_t arg);
image_t *py_helper_keyword_to_image_mutable(uint n_args, const mp_obj_t *args, uint arg_index,
                                            mp_map_t *kw_args, mp_obj_t kw, image_t *default_val);
image_t *py_helper_keyword_to_image_mutable_mask(uint n_args, const mp_obj_t *args, uint arg_index,
                                                 mp_map_t *kw_args);
void py_helper_keyword_rectangle(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                                 mp_map_t *kw_args, mp_obj_t kw, rectangle_t *r);
void py_helper_keyword_rectangle_roi(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                                     mp_map_t *kw_args, rectangle_t *r);
int py_helper_keyword_int(uint n_args, const mp_obj_t *args, uint arg_index,
                          mp_map_t *kw_args, mp_obj_t kw, int default_val);
float py_helper_keyword_float(uint n_args, const mp_obj_t *args, uint arg_index,
                              mp_map_t *kw_args, mp_obj_t kw, float default_val);
void py_helper_keyword_int_array(uint n_args, const mp_obj_t *args, uint arg_index,
                                 mp_map_t *kw_args, mp_obj_t kw, int *x, int size);
void py_helper_keyword_float_array(uint n_args, const mp_obj_t *args, uint arg_index,
                                   mp_map_t *kw_args, mp_obj_t kw, float *x, int size);
uint py_helper_consume_array(uint n_args, const mp_obj_t *args, uint arg_index, size_t len, const mp_obj_t **items);
int py_helper_keyword_color(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                            mp_map_t *kw_args, int default_val);
void py_helper_arg_to_thresholds(const mp_obj_t arg, list_t *thresholds);
void py_helper_keyword_thresholds(uint n_args, const mp_obj_t *args, uint arg_index,
                                  mp_map_t *kw_args, list_t *thresholds);
int py_helper_arg_to_ksize(const mp_obj_t arg);
int py_helper_ksize_to_n(int ksize);
mp_obj_t py_helper_keyword_object(uint n_args, const mp_obj_t *args, uint arg_index, mp_map_t *kw_args, mp_obj_t kw);
# 21 "omv/py/py_image.c" 2
# 1 "omv/py/py_image.h" 1
# 13 "omv/py/py_image.h"
mp_obj_t py_image(int width, int height, int bpp, void *pixels);
mp_obj_t py_image_from_struct(image_t *img);
void *py_image_cobj(mp_obj_t img_obj);
int py_image_descriptor_from_roi(image_t *img, const char *path, rectangle_t *roi);
# 22 "omv/py/py_image.c" 2
# 1 "./boards/omvrt1/omv_boardconfig.h" 1
# 23 "omv/py/py_image.c" 2







static const mp_obj_type_t py_cascade_type;
static const mp_obj_type_t py_image_type;

extern const char *ffs_strerror(FRESULT res);



typedef struct _py_cascade_obj_t {
    mp_obj_base_t base;
    struct cascade _cobj;
} py_cascade_obj_t;

void *py_cascade_cobj(mp_obj_t cascade)
{
    do { __typeof__ (cascade) _a = (cascade); __typeof__ (&py_cascade_type) _b = (&py_cascade_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);
    return &((py_cascade_obj_t *)cascade)->_cobj;
}

static void py_cascade_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_cascade_obj_t *self = self_in;
    mp_printf(print, "{\"width\":%d, \"height\":%d, \"n_stages\":%d, \"n_features\":%d, \"n_rectangles\":%d}",
            self->_cobj.window.w, self->_cobj.window.h, self->_cobj.n_stages,
            self->_cobj.n_features, self->_cobj.n_rectangles);
}

static const mp_obj_type_t py_cascade_type = {
    { &mp_type_type },
    .name = MP_QSTR_Cascade,
    .print = py_cascade_print,
};





typedef struct _py_kp_obj_t {
    mp_obj_base_t base;
    array_t *kpts;
    int threshold;
    
# 70 "omv/py/py_image.c" 3 4
   _Bool 
# 70 "omv/py/py_image.c"
        normalized;
} py_kp_obj_t;

static void py_kp_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_kp_obj_t *self = self_in;
    mp_printf(print, "{\"size\":%d, \"threshold\":%d, \"normalized\":%d}", array_length(self->kpts), self->threshold, self->normalized);
}

mp_obj_t py_kp_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    py_kp_obj_t *self = ((void*)self_in);
    switch (op) {
        case MP_UNARY_OP_LEN:
            return ((mp_obj_t)((((mp_uint_t)(array_length(self->kpts))) << 1) | 1));

        default:
            return (((mp_obj_t)(void*)0));
    }
}

static mp_obj_t py_kp_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_kp_obj_t *self = self_in;
        int size = array_length(self->kpts);
        int i = mp_get_index(self->base.type, size, index, 
# 95 "omv/py/py_image.c" 3 4
                                                          0
# 95 "omv/py/py_image.c"
                                                               );
        kp_t *kp = array_at(self->kpts, i);
        return mp_obj_new_tuple(5, (mp_obj_t []) {mp_obj_new_int(kp->x),
                                                  mp_obj_new_int(kp->y),
                                                  mp_obj_new_int(kp->score),
                                                  mp_obj_new_int(kp->octave),
                                                  mp_obj_new_int(kp->angle)});
    }

    return (((mp_obj_t)(void*)0));
}

static const mp_obj_type_t py_kp_type = {
    { &mp_type_type },
    .name = MP_QSTR_kp_desc,
    .print = py_kp_print,
    .subscr = py_kp_subscr,
    .unary_op = py_kp_unary_op,
};

py_kp_obj_t *py_kpts_obj(mp_obj_t kpts_obj)
{
    do { __typeof__ (kpts_obj) _a = (kpts_obj); __typeof__ (&py_kp_type) _b = (&py_kp_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);
    return kpts_obj;
}







typedef struct _py_lbp_obj_t {
    mp_obj_base_t base;
    uint8_t *hist;
} py_lbp_obj_t;

static void py_lbp_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    mp_printf(print, "{}");
}

static const mp_obj_type_t py_lbp_type = {
    { &mp_type_type },
    .name = MP_QSTR_lbp_desc,
    .print = py_lbp_print,
};
# 150 "omv/py/py_image.c"
typedef struct _py_kptmatch_obj_t {
    mp_obj_base_t base;
    mp_obj_t cx, cy;
    mp_obj_t x, y, w, h;
    mp_obj_t count;
    mp_obj_t theta;
    mp_obj_t match;
} py_kptmatch_obj_t;

static void py_kptmatch_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_kptmatch_obj_t *self = self_in;
    mp_printf(print, "{\"cx\":%d, \"cy\":%d, \"x\":%d, \"y\":%d, \"w\":%d, \"h\":%d, \"count\":%d, \"theta\":%d}",
              mp_obj_get_int(self->cx), mp_obj_get_int(self->cy), mp_obj_get_int(self->x), mp_obj_get_int(self->y),
              mp_obj_get_int(self->w), mp_obj_get_int(self->h), mp_obj_get_int(self->count), mp_obj_get_int(self->theta));
}

static mp_obj_t py_kptmatch_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_kptmatch_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(9, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 176 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 176 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 9, index, 
# 180 "omv/py/py_image.c" 3 4
                                                                       0
# 180 "omv/py/py_image.c"
                                                                            )) {
            case 0: return self->cx;
            case 1: return self->cy;
            case 2: return self->x;
            case 3: return self->y;
            case 4: return self->w;
            case 5: return self->h;
            case 6: return self->count;
            case 7: return self->theta;
            case 8: return self->match;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_kptmatch_cx(mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->cx; }
mp_obj_t py_kptmatch_cy(mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->cy; }
mp_obj_t py_kptmatch_x (mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->x; }
mp_obj_t py_kptmatch_y (mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->y; }
mp_obj_t py_kptmatch_w (mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->w; }
mp_obj_t py_kptmatch_h (mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->h; }
mp_obj_t py_kptmatch_count(mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->count; }
mp_obj_t py_kptmatch_theta(mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->theta; }
mp_obj_t py_kptmatch_match(mp_obj_t self_in) { return ((py_kptmatch_obj_t *) self_in)->match; }
mp_obj_t py_kptmatch_rect(mp_obj_t self_in) {
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_kptmatch_obj_t *) self_in)->x,
                                              ((py_kptmatch_obj_t *) self_in)->y,
                                              ((py_kptmatch_obj_t *) self_in)->w,
                                              ((py_kptmatch_obj_t *) self_in)->h});
}

static const mp_obj_fun_builtin_fixed_t py_kptmatch_cx_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_cx};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_cy_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_cy};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_x};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_y};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_w_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_w};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_h_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_h};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_count_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_count};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_theta_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_theta};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_match_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_match};
static const mp_obj_fun_builtin_fixed_t py_kptmatch_rect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_kptmatch_rect};

static const mp_rom_map_elem_t py_kptmatch_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cx)) << 2) | 2)), (&py_kptmatch_cx_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cy)) << 2) | 2)), (&py_kptmatch_cy_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_kptmatch_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_kptmatch_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_w)) << 2) | 2)), (&py_kptmatch_w_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_h)) << 2) | 2)), (&py_kptmatch_h_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_count)) << 2) | 2)), (&py_kptmatch_count_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_theta)) << 2) | 2)), (&py_kptmatch_theta_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_match)) << 2) | 2)), (&py_kptmatch_match_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rect)) << 2) | 2)), (&py_kptmatch_rect_obj) }
};

static const mp_obj_dict_t py_kptmatch_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_kptmatch_locals_dict_table) / sizeof((py_kptmatch_locals_dict_table)[0])), .alloc = (sizeof(py_kptmatch_locals_dict_table) / sizeof((py_kptmatch_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_kptmatch_locals_dict_table, }, };

static const mp_obj_type_t py_kptmatch_type = {
    { &mp_type_type },
    .name = MP_QSTR_kptmatch,
    .print = py_kptmatch_print,
    .subscr = py_kptmatch_subscr,
    .locals_dict = (mp_obj_t) &py_kptmatch_locals_dict
};





typedef struct _py_image_obj_t {
    mp_obj_base_t base;
    image_t _cobj;
} py_image_obj_t;

void *py_image_cobj(mp_obj_t img_obj)
{
    do { __typeof__ (img_obj) _a = (img_obj); __typeof__ (&py_image_type) _b = (&py_image_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);
    return &((py_image_obj_t *)img_obj)->_cobj;
}

static void py_image_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_image_obj_t *self = self_in;
    switch(self->_cobj.bpp) {
        case IMAGE_BPP_BINARY: {
            mp_printf(print, "{\"w\":%d, \"h\":%d, \"type\"=\"binary\", \"size\":%d}",
                      self->_cobj.w, self->_cobj.h,
                      ((self->_cobj.w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * self->_cobj.h);
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            mp_printf(print, "{\"w\":%d, \"h\":%d, \"type\"=\"grayscale\", \"size\":%d}",
                      self->_cobj.w, self->_cobj.h,
                      (self->_cobj.w * self->_cobj.h) * sizeof(uint8_t));
            break;
        }
        case IMAGE_BPP_RGB565: {
            mp_printf(print, "{\"w\":%d, \"h\":%d, \"type\"=\"rgb565\", \"size\":%d}",
                      self->_cobj.w, self->_cobj.h,
                      (self->_cobj.w * self->_cobj.h) * sizeof(uint16_t));
            break;
        }
        default: {
            if((self->_cobj.data[0] == 0xFE) && (self->_cobj.data[self->_cobj.bpp-1] == 0xFE)) {
                print->print_strn(print->data, (const char *) self->_cobj.data, self->_cobj.bpp);
            } else {
                mp_printf(print, "{\"w\":%d, \"h\":%d, \"type\"=\"jpeg\", \"size\":%d}",
                          self->_cobj.w, self->_cobj.h,
                          self->_cobj.bpp);
            }
            break;
        }
    }
}

static mp_obj_t py_image_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    py_image_obj_t *self = self_in;
    if (value == (((mp_obj_t)(void*)0))) {
    } else if (value == (((mp_obj_t)(void*)4))) {
        switch (self->_cobj.bpp) {
            case IMAGE_BPP_BINARY: {
                if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
                    mp_bound_slice_t slice;
                    if (!mp_seq_get_fast_slice_indexes(self->_cobj.w * self->_cobj.h, index, &slice)) {
                        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
                    }
                    mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 307 "omv/py/py_image.c" 3 4
                                                                                       ((void *)0)
# 307 "omv/py/py_image.c"
                                                                                           );
                    for (mp_uint_t i = 0; i < result->len; i++) {
                        result->items[i] = mp_obj_new_int(({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); (((uint32_t *) _image->data)[(((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1)))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }));
                    }
                    return result;
                }
                mp_uint_t i = mp_get_index(self->base.type, self->_cobj.w * self->_cobj.h, index, 
# 313 "omv/py/py_image.c" 3 4
                                                                                                 0
# 313 "omv/py/py_image.c"
                                                                                                      );
                return mp_obj_new_int(({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ (i % self->_cobj.w) _x = (i % self->_cobj.w); __typeof__ (i / self->_cobj.w) _y = (i / self->_cobj.w); (((uint32_t *) _image->data)[(((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1)))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }));
            }
            case IMAGE_BPP_BAYER:
            case IMAGE_BPP_GRAYSCALE: {
                if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
                    mp_bound_slice_t slice;
                    if (!mp_seq_get_fast_slice_indexes(self->_cobj.w * self->_cobj.h, index, &slice)) {
                        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
                    }
                    mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 323 "omv/py/py_image.c" 3 4
                                                                                       ((void *)0)
# 323 "omv/py/py_image.c"
                                                                                           );
                    for (mp_uint_t i = 0; i < result->len; i++) {
                        uint8_t p = ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); ((uint8_t *) _image->data)[(_image->w * _y) + _x]; });
                        result->items[i] = mp_obj_new_int(p);
                    }
                    return result;
                }
                mp_uint_t i = mp_get_index(self->base.type, self->_cobj.w * self->_cobj.h, index, 
# 330 "omv/py/py_image.c" 3 4
                                                                                                 0
# 330 "omv/py/py_image.c"
                                                                                                      );
                uint8_t p = ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ (i % self->_cobj.w) _x = (i % self->_cobj.w); __typeof__ (i / self->_cobj.w) _y = (i / self->_cobj.w); ((uint8_t *) _image->data)[(_image->w * _y) + _x]; });
                return mp_obj_new_int(p);
            }
            case IMAGE_BPP_RGB565: {
                if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
                    mp_bound_slice_t slice;
                    if (!mp_seq_get_fast_slice_indexes(self->_cobj.w * self->_cobj.h, index, &slice)) {
                        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
                    }
                    mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 340 "omv/py/py_image.c" 3 4
                                                                                       ((void *)0)
# 340 "omv/py/py_image.c"
                                                                                           );
                    for (mp_uint_t i = 0; i < result->len; i++) {
                        uint16_t p = ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); ((uint16_t *) _image->data)[(_image->w * _y) + _x]; });
                        result->items[i] = mp_obj_new_tuple(3, (mp_obj_t []) {mp_obj_new_int(rb528_table[(((p) >> 3) & 0x1F)]),
                                                                              mp_obj_new_int(g628_table[({ __typeof__ (p) _pixel = (p); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]),
                                                                              mp_obj_new_int(rb528_table[(((p) >> 8) & 0x1F)])});
                    }
                    return result;
                }
                mp_uint_t i = mp_get_index(self->base.type, self->_cobj.w * self->_cobj.h, index, 
# 349 "omv/py/py_image.c" 3 4
                                                                                                 0
# 349 "omv/py/py_image.c"
                                                                                                      );
                uint16_t p = ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ (i % self->_cobj.w) _x = (i % self->_cobj.w); __typeof__ (i / self->_cobj.w) _y = (i / self->_cobj.w); ((uint16_t *) _image->data)[(_image->w * _y) + _x]; });
                return mp_obj_new_tuple(3, (mp_obj_t []) {mp_obj_new_int(rb528_table[(((p) >> 3) & 0x1F)]),
                                                          mp_obj_new_int(g628_table[({ __typeof__ (p) _pixel = (p); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]),
                                                          mp_obj_new_int(rb528_table[(((p) >> 8) & 0x1F)])});
            }
            default: {
                if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
                    mp_bound_slice_t slice;
                    if (!mp_seq_get_fast_slice_indexes(self->_cobj.bpp, index, &slice)) {
                        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
                    }
                    mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 361 "omv/py/py_image.c" 3 4
                                                                                       ((void *)0)
# 361 "omv/py/py_image.c"
                                                                                           );
                    for (mp_uint_t i = 0; i < result->len; i++) {
                        result->items[i] = mp_obj_new_int(self->_cobj.data[slice.start + i]);
                    }
                    return result;
                }
                mp_uint_t i = mp_get_index(self->base.type, self->_cobj.bpp, index, 
# 367 "omv/py/py_image.c" 3 4
                                                                                   0
# 367 "omv/py/py_image.c"
                                                                                        );
                return mp_obj_new_int(self->_cobj.data[i]);
            }
        }
    } else {
        switch (self->_cobj.bpp) {
            case IMAGE_BPP_BINARY: {
                if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
                    mp_bound_slice_t slice;
                    if (!mp_seq_get_fast_slice_indexes(self->_cobj.w * self->_cobj.h, index, &slice)) {
                        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
                    }
                    if ((MP_OBJ_IS_OBJ(value) && (((mp_obj_base_t*)((void*)value))->type == (&mp_type_list)))) {
                        mp_uint_t value_l_len;
                        mp_obj_t *value_l;
                        mp_obj_get_array(value, &value_l_len, &value_l);
                        do { if ((value_l_len == (slice.stop - slice.start)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "cannot grow or shrink image"))); } while (0); } } while(0);
                        for (mp_uint_t i = 0; i < (slice.stop - slice.start); i++) {
                            ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); __typeof__ (mp_obj_get_int(value_l[i])) _v = (mp_obj_get_int(value_l[i])); size_t _i = (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))); size_t _j = _x & ((sizeof(uint32_t) * 8) - 1); ((uint32_t *) _image->data)[_i] = (((uint32_t *) _image->data)[_i] & (~(1 << _j))) | ((_v & 1) << _j); });
                        }
                    } else {
                        mp_int_t v = mp_obj_get_int(value);
                        for (mp_uint_t i = 0; i < (slice.stop - slice.start); i++) {
                            ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); __typeof__ (v) _v = (v); size_t _i = (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))); size_t _j = _x & ((sizeof(uint32_t) * 8) - 1); ((uint32_t *) _image->data)[_i] = (((uint32_t *) _image->data)[_i] & (~(1 << _j))) | ((_v & 1) << _j); });
                        }
                    }
                    return (((mp_obj_t)&mp_const_none_obj));
                }
                mp_uint_t i = mp_get_index(self->base.type, self->_cobj.w * self->_cobj.h, index, 
# 395 "omv/py/py_image.c" 3 4
                                                                                                 0
# 395 "omv/py/py_image.c"
                                                                                                      );
                ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ (i % self->_cobj.w) _x = (i % self->_cobj.w); __typeof__ (i / self->_cobj.w) _y = (i / self->_cobj.w); __typeof__ (mp_obj_get_int(value)) _v = (mp_obj_get_int(value)); size_t _i = (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))); size_t _j = _x & ((sizeof(uint32_t) * 8) - 1); ((uint32_t *) _image->data)[_i] = (((uint32_t *) _image->data)[_i] & (~(1 << _j))) | ((_v & 1) << _j); });
                return (((mp_obj_t)&mp_const_none_obj));
            }
            case IMAGE_BPP_BAYER:
            case IMAGE_BPP_GRAYSCALE: {
                if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
                    mp_bound_slice_t slice;
                    if (!mp_seq_get_fast_slice_indexes(self->_cobj.w * self->_cobj.h, index, &slice)) {
                        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
                    }
                    if ((MP_OBJ_IS_OBJ(value) && (((mp_obj_base_t*)((void*)value))->type == (&mp_type_list)))) {
                        mp_uint_t value_l_len;
                        mp_obj_t *value_l;
                        mp_obj_get_array(value, &value_l_len, &value_l);
                        do { if ((value_l_len == (slice.stop - slice.start)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "cannot grow or shrink image"))); } while (0); } } while(0);
                        for (mp_uint_t i = 0; i < (slice.stop - slice.start); i++) {
                            uint8_t p = mp_obj_get_int(value_l[i]);
                            ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); __typeof__ (p) _v = (p); ((uint8_t *) _image->data)[(_image->w * _y) + _x] = _v; });
                        }
                    } else {
                        uint8_t p = mp_obj_get_int(value);
                        for (mp_uint_t i = 0; i < (slice.stop - slice.start); i++) {
                            ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); __typeof__ (p) _v = (p); ((uint8_t *) _image->data)[(_image->w * _y) + _x] = _v; });
                        }
                    }
                    return (((mp_obj_t)&mp_const_none_obj));
                }
                mp_uint_t i = mp_get_index(self->base.type, self->_cobj.w * self->_cobj.h, index, 
# 423 "omv/py/py_image.c" 3 4
                                                                                                 0
# 423 "omv/py/py_image.c"
                                                                                                      );
                uint8_t p = mp_obj_get_int(value);
                ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ (i % self->_cobj.w) _x = (i % self->_cobj.w); __typeof__ (i / self->_cobj.w) _y = (i / self->_cobj.w); __typeof__ (p) _v = (p); ((uint8_t *) _image->data)[(_image->w * _y) + _x] = _v; });
                return (((mp_obj_t)&mp_const_none_obj));
            }
            case IMAGE_BPP_RGB565: {
                if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
                    mp_bound_slice_t slice;
                    if (!mp_seq_get_fast_slice_indexes(self->_cobj.w * self->_cobj.h, index, &slice)) {
                        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
                    }
                    if ((MP_OBJ_IS_OBJ(value) && (((mp_obj_base_t*)((void*)value))->type == (&mp_type_list)))) {
                        mp_uint_t value_l_len;
                        mp_obj_t *value_l;
                        mp_obj_get_array(value, &value_l_len, &value_l);
                        do { if ((value_l_len == (slice.stop - slice.start)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "cannot grow or shrink image"))); } while (0); } } while(0);
                        for (mp_uint_t i = 0; i < (slice.stop - slice.start); i++) {
                            mp_obj_t *value_2;
                            mp_obj_get_array_fixed_n(value_l[i], 3, &value_2);
                            uint16_t p = ({ __typeof__ (rb825_table[mp_obj_get_int(value_2[0])]) _r5 = (rb825_table[mp_obj_get_int(value_2[0])]); __typeof__ (g826_table[mp_obj_get_int(value_2[1])]) _g6 = (g826_table[mp_obj_get_int(value_2[1])]); __typeof__ (rb825_table[mp_obj_get_int(value_2[2])]) _b5 = (rb825_table[mp_obj_get_int(value_2[2])]); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
                            ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); __typeof__ (p) _v = (p); ((uint16_t *) _image->data)[(_image->w * _y) + _x] = _v; });
                        }
                    } else {
                        mp_obj_t *value_2;
                        mp_obj_get_array_fixed_n(value, 3, &value_2);
                        uint16_t p = ({ __typeof__ (rb825_table[mp_obj_get_int(value_2[0])]) _r5 = (rb825_table[mp_obj_get_int(value_2[0])]); __typeof__ (g826_table[mp_obj_get_int(value_2[1])]) _g6 = (g826_table[mp_obj_get_int(value_2[1])]); __typeof__ (rb825_table[mp_obj_get_int(value_2[2])]) _b5 = (rb825_table[mp_obj_get_int(value_2[2])]); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
                        for (mp_uint_t i = 0; i < (slice.stop - slice.start); i++) {
                            ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ ((slice.start + i) % self->_cobj.w) _x = ((slice.start + i) % self->_cobj.w); __typeof__ ((slice.start + i) / self->_cobj.w) _y = ((slice.start + i) / self->_cobj.w); __typeof__ (p) _v = (p); ((uint16_t *) _image->data)[(_image->w * _y) + _x] = _v; });
                        }
                    }
                    return (((mp_obj_t)&mp_const_none_obj));
                }
                mp_uint_t i = mp_get_index(self->base.type, self->_cobj.w * self->_cobj.h, index, 
# 455 "omv/py/py_image.c" 3 4
                                                                                                 0
# 455 "omv/py/py_image.c"
                                                                                                      );
                mp_obj_t *value_2;
                mp_obj_get_array_fixed_n(value, 3, &value_2);
                uint16_t p = ({ __typeof__ (rb825_table[mp_obj_get_int(value_2[0])]) _r5 = (rb825_table[mp_obj_get_int(value_2[0])]); __typeof__ (g826_table[mp_obj_get_int(value_2[1])]) _g6 = (g826_table[mp_obj_get_int(value_2[1])]); __typeof__ (rb825_table[mp_obj_get_int(value_2[2])]) _b5 = (rb825_table[mp_obj_get_int(value_2[2])]); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
                ({ __typeof__ (&(self->_cobj)) _image = (&(self->_cobj)); __typeof__ (i % self->_cobj.w) _x = (i % self->_cobj.w); __typeof__ (i / self->_cobj.w) _y = (i / self->_cobj.w); __typeof__ (p) _v = (p); ((uint16_t *) _image->data)[(_image->w * _y) + _x] = _v; });
                return (((mp_obj_t)&mp_const_none_obj));
            }
            default: {
                if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
                    mp_bound_slice_t slice;
                    if (!mp_seq_get_fast_slice_indexes(self->_cobj.bpp, index, &slice)) {
                        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
                    }
                    if ((MP_OBJ_IS_OBJ(value) && (((mp_obj_base_t*)((void*)value))->type == (&mp_type_list)))) {
                        mp_uint_t value_l_len;
                        mp_obj_t *value_l;
                        mp_obj_get_array(value, &value_l_len, &value_l);
                        do { if ((value_l_len == (slice.stop - slice.start)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "cannot grow or shrink image"))); } while (0); } } while(0);
                        for (mp_uint_t i = 0; i < (slice.stop - slice.start); i++) {
                            self->_cobj.data[slice.start + i] = mp_obj_get_int(value_l[i]);
                        }
                    } else {
                        mp_int_t v = mp_obj_get_int(value);
                        for (mp_uint_t i = 0; i < (slice.stop - slice.start); i++) {
                            self->_cobj.data[slice.start + i] = v;
                        }
                    }
                    return (((mp_obj_t)&mp_const_none_obj));
                }
                mp_uint_t i = mp_get_index(self->base.type, self->_cobj.bpp, index, 
# 484 "omv/py/py_image.c" 3 4
                                                                                   0
# 484 "omv/py/py_image.c"
                                                                                        );
                self->_cobj.data[i] = mp_obj_get_int(value);
                return (((mp_obj_t)&mp_const_none_obj));
            }
        }
    }
    return (((mp_obj_t)(void*)0));
}

static mp_int_t py_image_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags)
{
    py_image_obj_t *self = self_in;
    if (flags == (1)) {
        bufinfo->buf = self->_cobj.data;
        bufinfo->len = image_size(&self->_cobj);
        bufinfo->typecode = 'b';
        return 0;
    } else {
        bufinfo->buf = 
# 502 "omv/py/py_image.c" 3 4
                      ((void *)0)
# 502 "omv/py/py_image.c"
                          ;
        bufinfo->len = 0;
        bufinfo->typecode = -1;
        return 1;
    }
}





static mp_obj_t py_image_width(mp_obj_t img_obj)
{
    return mp_obj_new_int(((image_t *) py_image_cobj(img_obj))->w);
}
static const mp_obj_fun_builtin_fixed_t py_image_width_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_width};

static mp_obj_t py_image_height(mp_obj_t img_obj)
{
    return mp_obj_new_int(((image_t *) py_image_cobj(img_obj))->h);
}
static const mp_obj_fun_builtin_fixed_t py_image_height_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_height};

static mp_obj_t py_image_format(mp_obj_t img_obj)
{
    switch (((image_t *) py_image_cobj(img_obj))->bpp) {
        case IMAGE_BPP_BINARY: return mp_obj_new_int(PIXFORMAT_BINARY);
        case IMAGE_BPP_GRAYSCALE: return mp_obj_new_int(PIXFORMAT_GRAYSCALE);
        case IMAGE_BPP_RGB565: return mp_obj_new_int(PIXFORMAT_RGB565);
        case IMAGE_BPP_BAYER: return mp_obj_new_int(PIXFORMAT_BAYER);
        default: return mp_obj_new_int(PIXFORMAT_JPEG);
    }
}
static const mp_obj_fun_builtin_fixed_t py_image_format_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_format};

static mp_obj_t py_image_size(mp_obj_t img_obj)
{
    return mp_obj_new_int(image_size((image_t *) py_image_cobj(img_obj)));
}
static const mp_obj_fun_builtin_fixed_t py_image_size_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_size};

static mp_obj_t py_image_get_pixel(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable_bayer(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 2, &arg_vec);
    int arg_x = mp_obj_get_int(arg_vec[0]);
    int arg_y = mp_obj_get_int(arg_vec[1]);

    
# 552 "omv/py/py_image.c" 3 4
   _Bool 
# 552 "omv/py/py_image.c"
        arg_rgbtuple =
        py_helper_keyword_int(n_args, args, offset, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgbtuple)) << 2) | 2)), arg_img->bpp == IMAGE_BPP_RGB565);

    if ((!({ __typeof__ (arg_img) _img = (arg_img); __typeof__ (arg_x) _x = (arg_x); (0<=_x)&&(_x<_img->w); })) || (!({ __typeof__ (arg_img) _img = (arg_img); __typeof__ (arg_y) _y = (arg_y); (0<=_y)&&(_y<_img->h); }))) {
        return (((mp_obj_t)&mp_const_none_obj));
    }

    switch (arg_img->bpp) {
            case IMAGE_BPP_BINARY: {
            if (arg_rgbtuple) {
                int pixel = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); (((uint32_t *) _image->data)[(((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1)))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; });
                mp_obj_t pixel_tuple[3];
                pixel_tuple[0] = mp_obj_new_int(rb528_table[(((imlib_yuv_to_rgb((pixel) ? 127 : -128 + 128, 0, 0)) >> 3) & 0x1F)]);
                pixel_tuple[1] = mp_obj_new_int(g628_table[({ __typeof__ (imlib_yuv_to_rgb((pixel) ? 127 : -128 + 128, 0, 0)) _pixel = (imlib_yuv_to_rgb((pixel) ? 127 : -128 + 128, 0, 0)); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]);
                pixel_tuple[2] = mp_obj_new_int(rb528_table[(((imlib_yuv_to_rgb((pixel) ? 127 : -128 + 128, 0, 0)) >> 8) & 0x1F)]);
                return mp_obj_new_tuple(3, pixel_tuple);
            } else {
                return mp_obj_new_int(({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); (((uint32_t *) _image->data)[(((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1)))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }));
            }
            }
            case IMAGE_BPP_GRAYSCALE: {
            if (arg_rgbtuple) {
                int pixel = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); ((uint8_t *) _image->data)[(_image->w * _y) + _x]; });
                mp_obj_t pixel_tuple[3];
                pixel_tuple[0] = mp_obj_new_int(rb528_table[(((imlib_yuv_to_rgb((pixel) - 128 + 128, 0, 0)) >> 3) & 0x1F)]);
                pixel_tuple[1] = mp_obj_new_int(g628_table[({ __typeof__ (imlib_yuv_to_rgb((pixel) - 128 + 128, 0, 0)) _pixel = (imlib_yuv_to_rgb((pixel) - 128 + 128, 0, 0)); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]);
                pixel_tuple[2] = mp_obj_new_int(rb528_table[(((imlib_yuv_to_rgb((pixel) - 128 + 128, 0, 0)) >> 8) & 0x1F)]);
                return mp_obj_new_tuple(3, pixel_tuple);
            } else {
                return mp_obj_new_int(({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); ((uint8_t *) _image->data)[(_image->w * _y) + _x]; }));
            }
            }
            case IMAGE_BPP_RGB565: {
            if (arg_rgbtuple) {
                int pixel = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); ((uint16_t *) _image->data)[(_image->w * _y) + _x]; });
                mp_obj_t pixel_tuple[3];
                pixel_tuple[0] = mp_obj_new_int(rb528_table[(((pixel) >> 3) & 0x1F)]);
                pixel_tuple[1] = mp_obj_new_int(g628_table[({ __typeof__ (pixel) _pixel = (pixel); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]);
                pixel_tuple[2] = mp_obj_new_int(rb528_table[(((pixel) >> 8) & 0x1F)]);
                return mp_obj_new_tuple(3, pixel_tuple);
            } else {
                return mp_obj_new_int(({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); ((uint16_t *) _image->data)[(_image->w * _y) + _x]; }));
            }
            }
        case IMAGE_BPP_BAYER:
            if (arg_rgbtuple) {
                int pixel = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); ((uint8_t *) _image->data)[(_image->w * _y) + _x]; });
                mp_obj_t pixel_tuple[3];
                pixel_tuple[0] = mp_obj_new_int(rb528_table[(((imlib_yuv_to_rgb((pixel) - 128 + 128, 0, 0)) >> 3) & 0x1F)]);
                pixel_tuple[1] = mp_obj_new_int(g628_table[({ __typeof__ (imlib_yuv_to_rgb((pixel) - 128 + 128, 0, 0)) _pixel = (imlib_yuv_to_rgb((pixel) - 128 + 128, 0, 0)); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]);
                pixel_tuple[2] = mp_obj_new_int(rb528_table[(((imlib_yuv_to_rgb((pixel) - 128 + 128, 0, 0)) >> 8) & 0x1F)]);
                return mp_obj_new_tuple(3, pixel_tuple);
            } else {
                return mp_obj_new_int(({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); ((uint8_t *) _image->data)[(_image->w * _y) + _x]; }));
            }
        default: return (((mp_obj_t)&mp_const_none_obj));
    }
}
static const mp_obj_fun_builtin_var_t py_image_get_pixel_obj = {{&mp_type_fun_builtin_var}, 
# 610 "omv/py/py_image.c" 3 4
      1
# 610 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_get_pixel};

static mp_obj_t py_image_set_pixel(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable_bayer(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 2, &arg_vec);
    int arg_x = mp_obj_get_int(arg_vec[0]);
    int arg_y = mp_obj_get_int(arg_vec[1]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset, kw_args, -1);

    if ((!({ __typeof__ (arg_img) _img = (arg_img); __typeof__ (arg_x) _x = (arg_x); (0<=_x)&&(_x<_img->w); })) || (!({ __typeof__ (arg_img) _img = (arg_img); __typeof__ (arg_y) _y = (arg_y); (0<=_y)&&(_y<_img->h); }))) {
        return args[0];
    }

    switch (arg_img->bpp) {
        case IMAGE_BPP_BINARY: {
            ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); __typeof__ (arg_c) _v = (arg_c); size_t _i = (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))); size_t _j = _x & ((sizeof(uint32_t) * 8) - 1); ((uint32_t *) _image->data)[_i] = (((uint32_t *) _image->data)[_i] & (~(1 << _j))) | ((_v & 1) << _j); });
            return args[0];
        }
        case IMAGE_BPP_GRAYSCALE: {
            ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); __typeof__ (arg_c) _v = (arg_c); ((uint8_t *) _image->data)[(_image->w * _y) + _x] = _v; });
            return args[0];
        }
        case IMAGE_BPP_RGB565: {
            ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); __typeof__ (arg_c) _v = (arg_c); ((uint16_t *) _image->data)[(_image->w * _y) + _x] = _v; });
            return args[0];
        }
        case IMAGE_BPP_BAYER: {
            ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (arg_x) _x = (arg_x); __typeof__ (arg_y) _y = (arg_y); __typeof__ (arg_c) _v = (arg_c); ((uint8_t *) _image->data)[(_image->w * _y) + _x] = _v; });
            return args[0];
        }
        default: return args[0];
    }
}
static const mp_obj_fun_builtin_var_t py_image_set_pixel_obj = {{&mp_type_fun_builtin_var}, 
# 648 "omv/py/py_image.c" 3 4
      1
# 648 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_set_pixel};


static mp_obj_t py_image_mean_pool(mp_obj_t img_obj, mp_obj_t x_div_obj, mp_obj_t y_div_obj)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(img_obj);

    int arg_x_div = mp_obj_get_int(x_div_obj);
    do { if ((arg_x_div >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width divisor must be greater than >= 1"))); } while (0); } } while(0);
    do { if ((arg_x_div <= arg_img->w) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width divisor must be less than <= img width"))); } while (0); } } while(0);
    int arg_y_div = mp_obj_get_int(y_div_obj);
    do { if ((arg_y_div >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height divisor must be greater than >= 1"))); } while (0); } } while(0);
    do { if ((arg_y_div <= arg_img->h) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height divisor must be less than <= img height"))); } while (0); } } while(0);

    image_t out_img;
    out_img.w = arg_img->w / arg_x_div;
    out_img.h = arg_img->h / arg_y_div;
    out_img.bpp = arg_img->bpp;
    out_img.pixels = arg_img->pixels;
    do { if ((image_size(&out_img) <= image_size(arg_img)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't pool in place!"))); } while (0); } } while(0);

    imlib_mean_pool(arg_img, &out_img, arg_x_div, arg_y_div);
    arg_img->w = out_img.w;
    arg_img->h = out_img.h;

    if ((fb_framebuffer)->pixels == arg_img->data) {
        (fb_framebuffer)->w = out_img.w;
        (fb_framebuffer)->h = out_img.h;
        }

    return img_obj;
}
static const mp_obj_fun_builtin_fixed_t py_image_mean_pool_obj = {{&mp_type_fun_builtin_3}, .fun._3 = py_image_mean_pool};

static mp_obj_t py_image_mean_pooled(mp_obj_t img_obj, mp_obj_t x_div_obj, mp_obj_t y_div_obj)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(img_obj);

    int arg_x_div = mp_obj_get_int(x_div_obj);
    do { if ((arg_x_div >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width divisor must be greater than >= 1"))); } while (0); } } while(0);
    do { if ((arg_x_div <= arg_img->w) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width divisor must be less than <= img width"))); } while (0); } } while(0);
    int arg_y_div = mp_obj_get_int(y_div_obj);
    do { if ((arg_y_div >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height divisor must be greater than >= 1"))); } while (0); } } while(0);
    do { if ((arg_y_div <= arg_img->h) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height divisor must be less than <= img height"))); } while (0); } } while(0);

    image_t out_img;
    out_img.w = arg_img->w / arg_x_div;
    out_img.h = arg_img->h / arg_y_div;
    out_img.bpp = arg_img->bpp;
    out_img.pixels = xalloc(image_size(&out_img));

    imlib_mean_pool(arg_img, &out_img, arg_x_div, arg_y_div);
    return py_image_from_struct(&out_img);
}
static const mp_obj_fun_builtin_fixed_t py_image_mean_pooled_obj = {{&mp_type_fun_builtin_3}, .fun._3 = py_image_mean_pooled};



static mp_obj_t py_image_midpoint_pool(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    int arg_x_div = mp_obj_get_int(args[1]);
    do { if ((arg_x_div >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width divisor must be greater than >= 1"))); } while (0); } } while(0);
    do { if ((arg_x_div <= arg_img->w) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width divisor must be less than <= img width"))); } while (0); } } while(0);
    int arg_y_div = mp_obj_get_int(args[2]);
    do { if ((arg_y_div >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height divisor must be greater than >= 1"))); } while (0); } } while(0);
    do { if ((arg_y_div <= arg_img->h) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height divisor must be less than <= img height"))); } while (0); } } while(0);

    int arg_bias = py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bias)) << 2) | 2)), 0.5) * 256;
    do { if (((0 <= arg_bias) && (arg_bias <= 256)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0 <= bias <= 1!"))); } while (0); } } while(0);

    image_t out_img;
    out_img.w = arg_img->w / arg_x_div;
    out_img.h = arg_img->h / arg_y_div;
    out_img.bpp = arg_img->bpp;
    out_img.pixels = arg_img->pixels;
    do { if ((image_size(&out_img) <= image_size(arg_img)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't pool in place!"))); } while (0); } } while(0);

    imlib_midpoint_pool(arg_img, &out_img, arg_x_div, arg_y_div, arg_bias);
    arg_img->w = out_img.w;
    arg_img->h = out_img.h;

    if ((fb_framebuffer)->pixels == arg_img->data) {
        (fb_framebuffer)->w = out_img.w;
        (fb_framebuffer)->h = out_img.h;
    }

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_midpoint_pool_obj = {{&mp_type_fun_builtin_var}, 
# 738 "omv/py/py_image.c" 3 4
      1
# 738 "omv/py/py_image.c"
      , 3, (0xffff), .fun.kw = py_image_midpoint_pool};

static mp_obj_t py_image_midpoint_pooled(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    int arg_x_div = mp_obj_get_int(args[1]);
    do { if ((arg_x_div >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width divisor must be greater than >= 1"))); } while (0); } } while(0);
    do { if ((arg_x_div <= arg_img->w) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width divisor must be less than <= img width"))); } while (0); } } while(0);
    int arg_y_div = mp_obj_get_int(args[2]);
    do { if ((arg_y_div >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height divisor must be greater than >= 1"))); } while (0); } } while(0);
    do { if ((arg_y_div <= arg_img->h) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height divisor must be less than <= img height"))); } while (0); } } while(0);

    int arg_bias = py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bias)) << 2) | 2)), 0.5) * 256;
    do { if (((0 <= arg_bias) && (arg_bias <= 256)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0 <= bias <= 1!"))); } while (0); } } while(0);

    image_t out_img;
    out_img.w = arg_img->w / arg_x_div;
    out_img.h = arg_img->h / arg_y_div;
    out_img.bpp = arg_img->bpp;
    out_img.pixels = xalloc(image_size(&out_img));

    imlib_midpoint_pool(arg_img, &out_img, arg_x_div, arg_y_div, arg_bias);
    return py_image_from_struct(&out_img);
}

static const mp_obj_fun_builtin_var_t py_image_midpoint_pooled_obj = {{&mp_type_fun_builtin_var}, 
# 764 "omv/py/py_image.c" 3 4
      1
# 764 "omv/py/py_image.c"
      , 3, (0xffff), .fun.kw = py_image_midpoint_pooled};


static mp_obj_t py_image_to_bitmap(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    
# 770 "omv/py/py_image.c" 3 4
   _Bool 
# 770 "omv/py/py_image.c"
        copy = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_copy)) << 2) | 2)), 
# 770 "omv/py/py_image.c" 3 4
                                                                                              0
# 770 "omv/py/py_image.c"
                                                                                                   );
    int channel = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_channel)) << 2) | 2)), -1);

    image_t out;
    out.w = arg_img->w;
    out.h = arg_img->h;
    out.bpp = IMAGE_BPP_BINARY;
    out.data = copy ? xalloc(image_size(&out)) : arg_img->data;

    switch(arg_img->bpp) {
        case IMAGE_BPP_BINARY: {
            if (copy) memcpy(out.data, arg_img->data, image_size(&out));
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            do { if (((out.w >= (sizeof(uint32_t)/sizeof(uint8_t))) || copy) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to bitmap in place!"))); } while (0); } } while(0)
                                                                   ;
            fb_alloc_mark();
            uint32_t *out_row_ptr = fb_alloc(((((&out)->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * sizeof(uint32_t)));
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint8_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (((({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; })) > (((255 - 0) / 2) + 0))) _v = (((({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; })) > (((255 - 0) / 2) + 0))); size_t _i = _x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1)))))); size_t _j = _x & ((sizeof(uint32_t) * 8) - 1); _row_ptr[_i] = (_row_ptr[_i] & (~(1 << _j))) | ((_v & 1) << _j); })
                                                                                              ;
                }
                memcpy(({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); }),
                       out_row_ptr, ((((&out)->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * sizeof(uint32_t)));
            }
            fb_alloc_free_till_mark();
            break;
        }
        case IMAGE_BPP_RGB565: {
            do { if (((out.w >= (sizeof(uint32_t)/sizeof(uint16_t))) || copy) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to bitmap in place!"))); } while (0); } } while(0)
                                                                   ;
            fb_alloc_mark();
            uint32_t *out_row_ptr = fb_alloc(((((&out)->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * sizeof(uint32_t)));
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint16_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    int pixel = ({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; });
                    switch (channel) {
                        case 0: {
                            pixel = (((pixel) >> 3) & 0x1F) > (((31 - 0) / 2) + 0);
                            break;
                        }
                        case 1: {
                            pixel = ({ __typeof__ (pixel) _pixel = (pixel); ((_pixel & 0x07) << 3) | (_pixel >> 13); }) > (((63 - 0) / 2) + 0);
                            break;
                        }
                        case 2: {
                            pixel = (((pixel) >> 8) & 0x1F) > (((31 - 0) / 2) + 0);
                            break;
                        }
                        default: {
                            pixel = (yuv_table[(pixel) * 3] > (((127 - -128) / 2) + -128));
                            break;
                        }
                    }
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (pixel) _v = (pixel); size_t _i = _x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1)))))); size_t _j = _x & ((sizeof(uint32_t) * 8) - 1); _row_ptr[_i] = (_row_ptr[_i] & (~(1 << _j))) | ((_v & 1) << _j); });
                }
                memcpy(({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); }),
                       out_row_ptr, ((((&out)->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * sizeof(uint32_t)));
            }
            fb_alloc_free_till_mark();
            break;
        }
        default: {
            break;
        }
    }

    if (!copy) {
        arg_img->bpp = IMAGE_BPP_BINARY;

        if (((fb_framebuffer)->pixels == out.data)) {
        (fb_framebuffer)->bpp = out.bpp;
    }
    }

    return py_image_from_struct(&out);
}
static const mp_obj_fun_builtin_var_t py_image_to_bitmap_obj = {{&mp_type_fun_builtin_var}, 
# 851 "omv/py/py_image.c" 3 4
      1
# 851 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_to_bitmap};

static mp_obj_t py_image_to_grayscale(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    
# 856 "omv/py/py_image.c" 3 4
   _Bool 
# 856 "omv/py/py_image.c"
        copy = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_copy)) << 2) | 2)), 
# 856 "omv/py/py_image.c" 3 4
                                                                                              0
# 856 "omv/py/py_image.c"
                                                                                                   );
    int channel = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_channel)) << 2) | 2)), -1);

    image_t out;
    out.w = arg_img->w;
    out.h = arg_img->h;
    out.bpp = IMAGE_BPP_GRAYSCALE;
    out.data = copy ? xalloc(image_size(&out)) : arg_img->data;

    switch(arg_img->bpp) {
        case IMAGE_BPP_BINARY: {
            if (copy || ((fb_framebuffer)->pixels != out.data)) {
            do { if (((out.w == 1) || copy) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to grayscale in place!"))); } while (0); } } while(0)
                                                                      ;
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint32_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); });
                uint8_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (((({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; })) * 255)) _v = (((({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; })) * 255)); _row_ptr[_x] = _v; })
                                                                                           ;
                }
            }
            } else {
                image_t temp;
                memcpy(&temp, arg_img, sizeof(image_t));
                fb_alloc_mark();
                temp.data = fb_alloc(image_size(&temp));
                memcpy(temp.data, arg_img->data, image_size(&temp));

                (fb_framebuffer)->w = 0;
                (fb_framebuffer)->h = 0;
                (fb_framebuffer)->bpp = 0;
                do { if (((image_size(&out) <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to grayscale in place!"))); } while (0); } } while(0);
                (fb_framebuffer)->w = out.w;
                (fb_framebuffer)->h = out.h;
                (fb_framebuffer)->bpp = out.bpp;

                for (int y = 0, yy = out.h; y < yy; y++) {
                    uint32_t *row_ptr = ({ __typeof__ (&temp) _image = (&temp); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); });
                    uint8_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                    for (int x = 0, xx = out.w; x < xx; x++) {
                        ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (((({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; })) * 255)) _v = (((({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; })) * 255)); _row_ptr[_x] = _v; })
                                                                                               ;
                    }
                }

                fb_alloc_free_till_mark();
            }
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            if (copy) memcpy(out.data, arg_img->data, image_size(&out));
            break;
        }
        case IMAGE_BPP_RGB565: {
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint16_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                uint8_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    int pixel = ({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; });
                    switch (channel) {
                        case 0: {
                            pixel = rb528_table[(((pixel) >> 3) & 0x1F)];
                            break;
                        }
                        case 1: {
                            pixel = g628_table[({ __typeof__ (pixel) _pixel = (pixel); ((_pixel & 0x07) << 3) | (_pixel >> 13); })];
                            break;
                        }
                        case 2: {
                            pixel = rb528_table[(((pixel) >> 8) & 0x1F)];
                            break;
                        }
                        default: {
                            pixel = (yuv_table[(pixel) * 3] + 128);
                            break;
                        }
                    }
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (pixel) _v = (pixel); _row_ptr[_x] = _v; });
                }
            }
            break;
        }
        default: {
            break;
        }
    }

    if (!copy) {
        arg_img->bpp = IMAGE_BPP_GRAYSCALE;

        if (((fb_framebuffer)->pixels == out.data)) {
        (fb_framebuffer)->bpp = out.bpp;
    }
    }

    return py_image_from_struct(&out);
}
static const mp_obj_fun_builtin_var_t py_image_to_grayscale_obj = {{&mp_type_fun_builtin_var}, 
# 954 "omv/py/py_image.c" 3 4
      1
# 954 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_to_grayscale};

static mp_obj_t py_image_to_rgb565(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    
# 959 "omv/py/py_image.c" 3 4
   _Bool 
# 959 "omv/py/py_image.c"
        copy = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_copy)) << 2) | 2)), 
# 959 "omv/py/py_image.c" 3 4
                                                                                              0
# 959 "omv/py/py_image.c"
                                                                                                   );
    int channel = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_channel)) << 2) | 2)), -1);

    image_t out;
    out.w = arg_img->w;
    out.h = arg_img->h;
    out.bpp = IMAGE_BPP_RGB565;
    out.data = copy ? xalloc(image_size(&out)) : arg_img->data;

    switch(arg_img->bpp) {
        case IMAGE_BPP_BINARY: {
            if (copy || ((fb_framebuffer)->pixels != out.data)) {
            do { if (((out.w == 1) || copy) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to grayscale in place!"))); } while (0); } } while(0)
                                                       ;
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint32_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); });
                uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (imlib_yuv_to_rgb(({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }) * 255, 0, 0)) _v = (imlib_yuv_to_rgb(({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }) * 255, 0, 0)); _row_ptr[_x] = _v; })
                                                                                                              ;
                }
            }
            } else {
                image_t temp;
                memcpy(&temp, arg_img, sizeof(image_t));
                fb_alloc_mark();
                temp.data = fb_alloc(image_size(&temp));
                memcpy(temp.data, arg_img->data, image_size(&temp));

                (fb_framebuffer)->w = 0;
                (fb_framebuffer)->h = 0;
                (fb_framebuffer)->bpp = 0;
                do { if (((image_size(&out) <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to grayscale in place!"))); } while (0); } } while(0);
                (fb_framebuffer)->w = out.w;
                (fb_framebuffer)->h = out.h;
                (fb_framebuffer)->bpp = out.bpp;

                for (int y = 0, yy = out.h; y < yy; y++) {
                    uint32_t *row_ptr = ({ __typeof__ (&temp) _image = (&temp); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); });
                    uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                    for (int x = 0, xx = out.w; x < xx; x++) {
                        ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (imlib_yuv_to_rgb(({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }) * 255, 0, 0)) _v = (imlib_yuv_to_rgb(({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }) * 255, 0, 0)); _row_ptr[_x] = _v; })
                                                                                                                  ;
                    }
                }

                fb_alloc_free_till_mark();
            }
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            if (copy || ((fb_framebuffer)->pixels != out.data)) {
            do { if ((copy) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to rgb565 in place!"))); } while (0); } } while(0)
                                                    ;
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint8_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (imlib_yuv_to_rgb(({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; }), 0, 0)) _v = (imlib_yuv_to_rgb(({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; }), 0, 0)); _row_ptr[_x] = _v; })
                                                                                           ;
                }
            }
            } else {
                image_t temp;
                memcpy(&temp, arg_img, sizeof(image_t));
                fb_alloc_mark();
                temp.data = fb_alloc(image_size(&temp));
                memcpy(temp.data, arg_img->data, image_size(&temp));

                (fb_framebuffer)->w = 0;
                (fb_framebuffer)->h = 0;
                (fb_framebuffer)->bpp = 0;
                do { if (((image_size(&out) <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to grayscale in place!"))); } while (0); } } while(0);
                (fb_framebuffer)->w = out.w;
                (fb_framebuffer)->h = out.h;
                (fb_framebuffer)->bpp = out.bpp;

                for (int y = 0, yy = out.h; y < yy; y++) {
                    uint8_t *row_ptr = ({ __typeof__ (&temp) _image = (&temp); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                    uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                    for (int x = 0, xx = out.w; x < xx; x++) {
                        ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (imlib_yuv_to_rgb(({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; }), 0, 0)) _v = (imlib_yuv_to_rgb(({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; }), 0, 0)); _row_ptr[_x] = _v; })
                                                                                               ;
                    }
                }

                fb_alloc_free_till_mark();
            }
            break;
        }
        case IMAGE_BPP_RGB565: {
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint16_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    int pixel = ({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; });
                    switch (channel) {
                        case 0: {
                            pixel = ({ __typeof__ ((((pixel) >> 3) & 0x1F)) _r5 = ((((pixel) >> 3) & 0x1F)); __typeof__ (0) _g6 = (0); __typeof__ (0) _b5 = (0); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
                            break;
                        }
                        case 1: {
                            pixel = ({ __typeof__ (0) _r5 = (0); __typeof__ (({ __typeof__ (pixel) _pixel = (pixel); ((_pixel & 0x07) << 3) | (_pixel >> 13); })) _g6 = (({ __typeof__ (pixel) _pixel = (pixel); ((_pixel & 0x07) << 3) | (_pixel >> 13); })); __typeof__ (0) _b5 = (0); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
                            break;
                        }
                        case 2: {
                            pixel = ({ __typeof__ (0) _r5 = (0); __typeof__ (0) _g6 = (0); __typeof__ ((((pixel) >> 8) & 0x1F)) _b5 = ((((pixel) >> 8) & 0x1F)); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
                            break;
                        }
                        default: {
                            break;
                        }
                    }
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (pixel) _v = (pixel); _row_ptr[_x] = _v; });
                }
            }
            break;
        }
        default: {
            break;
        }
    }

    if (!copy) {
        arg_img->bpp = IMAGE_BPP_RGB565;

        if (((fb_framebuffer)->pixels == out.data)) {
        (fb_framebuffer)->bpp = out.bpp;
    }
    }

    return py_image_from_struct(&out);
}
static const mp_obj_fun_builtin_var_t py_image_to_rgb565_obj = {{&mp_type_fun_builtin_var}, 
# 1092 "omv/py/py_image.c" 3 4
      1
# 1092 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_to_rgb565};

static mp_obj_t py_image_to_rainbow(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    
# 1097 "omv/py/py_image.c" 3 4
   _Bool 
# 1097 "omv/py/py_image.c"
        copy = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_copy)) << 2) | 2)), 
# 1097 "omv/py/py_image.c" 3 4
                                                                                              0
# 1097 "omv/py/py_image.c"
                                                                                                   );
    int channel = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_channel)) << 2) | 2)), -1);
    int palette = py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_color_palette)) << 2) | 2)), COLOR_PALETTE_RAINBOW);
    const uint16_t *color_palette = 
# 1100 "omv/py/py_image.c" 3 4
                                   ((void *)0)
# 1100 "omv/py/py_image.c"
                                       ;

    if (palette == COLOR_PALETTE_RAINBOW) {
        color_palette = rainbow_table;
    } else if (palette == COLOR_PALETTE_IRONBOW) {
        color_palette = ironbow_table;
    } else {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_ValueError, "Invalid color palette!"))); } while (0);
    }

    image_t out;
    out.w = arg_img->w;
    out.h = arg_img->h;
    out.bpp = IMAGE_BPP_RGB565;
    out.data = copy ? xalloc(image_size(&out)) : arg_img->data;

    switch(arg_img->bpp) {
        case IMAGE_BPP_BINARY: {
            if (copy || ((fb_framebuffer)->pixels != out.data)) {
            do { if (((out.w == 1) || copy) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to rainbow in place!"))); } while (0); } } while(0)
                                                     ;
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint32_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); });
                uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (color_palette[({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }) * 255]) _v = (color_palette[({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }) * 255]); _row_ptr[_x] = _v; })
                                                                                                         ;
                    }
                }
            } else {
                image_t temp;
                memcpy(&temp, arg_img, sizeof(image_t));
                fb_alloc_mark();
                temp.data = fb_alloc(image_size(&temp));
                memcpy(temp.data, arg_img->data, image_size(&temp));

                (fb_framebuffer)->w = 0;
                (fb_framebuffer)->h = 0;
                (fb_framebuffer)->bpp = 0;
                do { if (((image_size(&out) <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to rainbow in place!"))); } while (0); } } while(0);
                (fb_framebuffer)->w = out.w;
                (fb_framebuffer)->h = out.h;
                (fb_framebuffer)->bpp = out.bpp;

                for (int y = 0, yy = out.h; y < yy; y++) {
                    uint32_t *row_ptr = ({ __typeof__ (&temp) _image = (&temp); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); });
                    uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                    for (int x = 0, xx = out.w; x < xx; x++) {
                        ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (color_palette[({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }) * 255]) _v = (color_palette[({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; }) * 255]); _row_ptr[_x] = _v; })
                                                                                                         ;
                }
            }

                fb_alloc_free_till_mark();
            }
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            if (copy || ((fb_framebuffer)->pixels != out.data)) {
            do { if ((copy) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to rainbow in place!"))); } while (0); } } while(0)
                                                     ;
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint8_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (color_palette[({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; })]) _v = (color_palette[({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; })]); _row_ptr[_x] = _v; })
                                                                                      ;
                    }
                }
            } else {
                image_t temp;
                memcpy(&temp, arg_img, sizeof(image_t));
                fb_alloc_mark();
                temp.data = fb_alloc(image_size(&temp));
                memcpy(temp.data, arg_img->data, image_size(&temp));

                (fb_framebuffer)->w = 0;
                (fb_framebuffer)->h = 0;
                (fb_framebuffer)->bpp = 0;
                do { if (((image_size(&out) <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to rainbow in place!"))); } while (0); } } while(0);
                (fb_framebuffer)->w = out.w;
                (fb_framebuffer)->h = out.h;
                (fb_framebuffer)->bpp = out.bpp;

                for (int y = 0, yy = out.h; y < yy; y++) {
                    uint8_t *row_ptr = ({ __typeof__ (&temp) _image = (&temp); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                    uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                    for (int x = 0, xx = out.w; x < xx; x++) {
                        ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (color_palette[({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; })]) _v = (color_palette[({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; })]); _row_ptr[_x] = _v; })
                                                                                      ;
                }
            }

                fb_alloc_free_till_mark();
            }
            break;
        }
        case IMAGE_BPP_RGB565: {
            for (int y = 0, yy = out.h; y < yy; y++) {
                uint16_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                uint16_t *out_row_ptr = ({ __typeof__ (&out) _image = (&out); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = out.w; x < xx; x++) {
                    int pixel = ({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (x) _x = (x); _row_ptr[_x]; });
                    switch (channel) {
                        case 0: {
                            pixel = color_palette[rb528_table[(((pixel) >> 3) & 0x1F)]];
                            break;
                        }
                        case 1: {
                            pixel = color_palette[g628_table[({ __typeof__ (pixel) _pixel = (pixel); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]];
                            break;
                        }
                        case 2: {
                            pixel = color_palette[rb528_table[(((pixel) >> 8) & 0x1F)]];
                            break;
                        }
                        default: {
                            pixel = color_palette[(yuv_table[(pixel) * 3] + 128)];
                            break;
                        }
                    }
                    ({ __typeof__ (out_row_ptr) _row_ptr = (out_row_ptr); __typeof__ (x) _x = (x); __typeof__ (pixel) _v = (pixel); _row_ptr[_x] = _v; });
                }
            }
            break;
        }
        default: {
            break;
        }
    }

    if (!copy) {
        arg_img->bpp = IMAGE_BPP_RGB565;

        if ((fb_framebuffer)->pixels == out.data) {
        (fb_framebuffer)->bpp = out.bpp;
    }
    }

    return py_image_from_struct(&out);
}
static const mp_obj_fun_builtin_var_t py_image_to_rainbow_obj = {{&mp_type_fun_builtin_var}, 
# 1241 "omv/py/py_image.c" 3 4
      1
# 1241 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_to_rainbow};

static mp_obj_t py_image_compress(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable_bayer(args[0]);
    int arg_q = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_quality)) << 2) | 2)), 50);
    do { if (((1 <= arg_q) && (arg_q <= 100)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 1 <= quality <= 100!"))); } while (0); } } while(0);

    uint32_t size;
    fb_alloc_mark();
    uint8_t *buffer = fb_alloc_all(&size);
    image_t out = { .w=arg_img->w, .h=arg_img->h, .bpp=size, .data=buffer };
    do { if ((jpeg_compress(arg_img, &out, arg_q, 
# 1253 "omv/py/py_image.c" 3 4
   0
# 1253 "omv/py/py_image.c"
   )) == 1) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Out of Memory!"))); } while (0); } } while(0);
    do { if ((out.bpp <= image_size(arg_img)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't compress in place!"))); } while (0); } } while(0);
    memcpy(arg_img->data, out.data, out.bpp);
    arg_img->bpp = out.bpp;
    fb_alloc_free_till_mark();

    if ((fb_framebuffer)->pixels == arg_img->data) {
        (fb_framebuffer)->bpp = arg_img->bpp;
    }

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_compress_obj = {{&mp_type_fun_builtin_var}, 
# 1265 "omv/py/py_image.c" 3 4
      1
# 1265 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_compress};

static mp_obj_t py_image_compress_for_ide(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable_bayer(args[0]);
    int arg_q = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_quality)) << 2) | 2)), 50);
    do { if (((1 <= arg_q) && (arg_q <= 100)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 1 <= quality <= 100!"))); } while (0); } } while(0);

    uint32_t size;
    fb_alloc_mark();
    uint8_t *buffer = fb_alloc_all(&size);
    image_t out = { .w=arg_img->w, .h=arg_img->h, .bpp=size, .data=buffer };
    do { if ((jpeg_compress(arg_img, &out, arg_q, 
# 1277 "omv/py/py_image.c" 3 4
   0
# 1277 "omv/py/py_image.c"
   )) == 1) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Out of Memory!"))); } while (0); } } while(0);
    do { if ((((((out.bpp * 8) + 5) / 6) + 2) <= image_size(arg_img)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't compress in place!"))); } while (0); } } while(0);
    uint8_t *ptr = arg_img->data;

    *ptr++ = 0xFE;

    for(int i = 0, j = (out.bpp / 3) * 3; i < j; i += 3) {
        int x = 0;
        x |= out.data[i + 0] << 0;
        x |= out.data[i + 1] << 8;
        x |= out.data[i + 2] << 16;
        *ptr++ = 0x80 | ((x >> 0) & 0x3F);
        *ptr++ = 0x80 | ((x >> 6) & 0x3F);
        *ptr++ = 0x80 | ((x >> 12) & 0x3F);
        *ptr++ = 0x80 | ((x >> 18) & 0x3F);
    }

    if((out.bpp % 3) == 2) {
        int x = 0;
        x |= out.data[out.bpp - 2] << 0;
        x |= out.data[out.bpp - 1] << 8;
        *ptr++ = 0x80 | ((x >> 0) & 0x3F);
        *ptr++ = 0x80 | ((x >> 6) & 0x3F);
        *ptr++ = 0x80 | ((x >> 12) & 0x3F);
    }

    if((out.bpp % 3) == 1) {
        int x = 0;
        x |= out.data[out.bpp - 1] << 0;
        *ptr++ = 0x80 | ((x >> 0) & 0x3F);
        *ptr++ = 0x80 | ((x >> 6) & 0x3F);
    }

    *ptr++ = 0xFE;

    out.bpp = (((out.bpp * 8) + 5) / 6) + 2;
    arg_img->bpp = out.bpp;
    fb_alloc_free_till_mark();

    if ((fb_framebuffer)->pixels == arg_img->data) {
        (fb_framebuffer)->bpp = arg_img->bpp;
    }

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_compress_for_ide_obj = {{&mp_type_fun_builtin_var}, 
# 1322 "omv/py/py_image.c" 3 4
      1
# 1322 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_compress_for_ide};

static mp_obj_t py_image_compressed(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable_bayer(args[0]);
    int arg_q = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_quality)) << 2) | 2)), 50);
    do { if (((1 <= arg_q) && (arg_q <= 100)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 1 <= quality <= 100!"))); } while (0); } } while(0);

    uint32_t size;
    fb_alloc_mark();
    uint8_t *buffer = fb_alloc_all(&size);
    image_t out = { .w=arg_img->w, .h=arg_img->h, .bpp=size, .data=buffer };
    do { if ((jpeg_compress(arg_img, &out, arg_q, 
# 1334 "omv/py/py_image.c" 3 4
   0
# 1334 "omv/py/py_image.c"
   )) == 1) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Out of Memory!"))); } while (0); } } while(0);
    uint8_t *temp = xalloc(out.bpp);
    memcpy(temp, out.data, out.bpp);
    out.data = temp;
    fb_alloc_free_till_mark();

    return py_image_from_struct(&out);
}
static const mp_obj_fun_builtin_var_t py_image_compressed_obj = {{&mp_type_fun_builtin_var}, 
# 1342 "omv/py/py_image.c" 3 4
      1
# 1342 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_compressed};

static mp_obj_t py_image_compressed_for_ide(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable_bayer(args[0]);
    int arg_q = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_quality)) << 2) | 2)), 50);
    do { if (((1 <= arg_q) && (arg_q <= 100)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 1 <= quality <= 100!"))); } while (0); } } while(0);

    uint32_t size;
    fb_alloc_mark();
    uint8_t *buffer = fb_alloc_all(&size);
    image_t out = { .w=arg_img->w, .h=arg_img->h, .bpp=size, .data=buffer };
    do { if ((jpeg_compress(arg_img, &out, arg_q, 
# 1354 "omv/py/py_image.c" 3 4
   0
# 1354 "omv/py/py_image.c"
   )) == 1) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Out of Memory!"))); } while (0); } } while(0);
    uint8_t *temp = xalloc((((out.bpp * 8) + 5) / 6) + 2);
    uint8_t *ptr = temp;

    *ptr++ = 0xFE;

    for(int i = 0, j = (out.bpp / 3) * 3; i < j; i += 3) {
        int x = 0;
        x |= out.data[i + 0] << 0;
        x |= out.data[i + 1] << 8;
        x |= out.data[i + 2] << 16;
        *ptr++ = 0x80 | ((x >> 0) & 0x3F);
        *ptr++ = 0x80 | ((x >> 6) & 0x3F);
        *ptr++ = 0x80 | ((x >> 12) & 0x3F);
        *ptr++ = 0x80 | ((x >> 18) & 0x3F);
    }

    if((out.bpp % 3) == 2) {
        int x = 0;
        x |= out.data[out.bpp - 2] << 0;
        x |= out.data[out.bpp - 1] << 8;
        *ptr++ = 0x80 | ((x >> 0) & 0x3F);
        *ptr++ = 0x80 | ((x >> 6) & 0x3F);
        *ptr++ = 0x80 | ((x >> 12) & 0x0F);
    }

    if((out.bpp % 3) == 1) {
        int x = 0;
        x |= out.data[out.bpp - 1] << 0;
        *ptr++ = 0x80 | ((x >> 0) & 0x3F);
        *ptr++ = 0x80 | ((x >> 6) & 0x03);
    }

    *ptr++ = 0xFE;

    out.bpp = (((out.bpp * 8) + 5) / 6) + 2;
    out.data = temp;
    fb_alloc_free_till_mark();

    return py_image_from_struct(&out);
}
static const mp_obj_fun_builtin_var_t py_image_compressed_for_ide_obj = {{&mp_type_fun_builtin_var}, 
# 1395 "omv/py/py_image.c" 3 4
      1
# 1395 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_compressed_for_ide};

static mp_obj_t py_image_copy_int(uint n_args, const mp_obj_t *args, mp_map_t *kw_args, 
# 1397 "omv/py/py_image.c" 3 4
                                                                                       _Bool 
# 1397 "omv/py/py_image.c"
                                                                                            mode)
{


    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    float arg_x_scale =
        py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_scale)) << 2) | 2)), 1.0f);
    do { if (((0.0f <= arg_x_scale)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0.0 <= x_scale!"))); } while (0); } } while(0);

    float arg_y_scale =
        py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_scale)) << 2) | 2)), 1.0f);
    do { if (((0.0f <= arg_y_scale)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0.0 <= y_scale!"))); } while (0); } } while(0);

    mp_obj_t copy_to_fb_obj = py_helper_keyword_object(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(mode ? MP_QSTR_copy : MP_QSTR_copy_to_fb)) << 2) | 2)));
    
# 1415 "omv/py/py_image.c" 3 4
   _Bool 
# 1415 "omv/py/py_image.c"
        copy_to_fb = 
# 1415 "omv/py/py_image.c" 3 4
                     0
# 1415 "omv/py/py_image.c"
                          ;
    image_t *arg_other = mode ? arg_img : 
# 1416 "omv/py/py_image.c" 3 4
                                         ((void *)0)
# 1416 "omv/py/py_image.c"
                                             ;

    if (copy_to_fb_obj) {
        if (mp_obj_is_integer(copy_to_fb_obj)) {
            if (!mode) {
                copy_to_fb = mp_obj_get_int(copy_to_fb_obj);
            } else if (mp_obj_get_int(copy_to_fb_obj)) {
                arg_other = 
# 1423 "omv/py/py_image.c" 3 4
                           ((void *)0)
# 1423 "omv/py/py_image.c"
                               ;
            }
        } else {
            arg_other = py_helper_arg_to_image_mutable(copy_to_fb_obj);
        }
    }

    if (copy_to_fb) {
        fb_update_jpeg_buffer();
    }

    image_t image;
    image.w = fast_floorf(roi.w * arg_x_scale);
    do { if ((image.w >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Output image width is 0!"))); } while (0); } } while(0);
    image.h = fast_floorf(roi.h * arg_y_scale);
    do { if ((image.h >= 1) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Output image height is 0!"))); } while (0); } } while(0);
    image.bpp = arg_img->bpp;
    image.data = 
# 1440 "omv/py/py_image.c" 3 4
                ((void *)0)
# 1440 "omv/py/py_image.c"
                    ;

    if (copy_to_fb) {
        (fb_framebuffer)->w = 0;
        (fb_framebuffer)->h = 0;
        (fb_framebuffer)->bpp = 0;
        do { if (((image_size(&image) <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "The new image won't fit in the main frame buffer!"))); } while (0); } } while(0);
       (fb_framebuffer)->w = image.w;
       (fb_framebuffer)->h = image.h;
       (fb_framebuffer)->bpp = image.bpp;
       image.data = (fb_framebuffer)->pixels;
    } else if (arg_other) {
        do { if (((image_size(&image) <= image_size(arg_other))) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "The new image won't fit in the target frame buffer!"))); } while (0); } } while(0);
        image.data = arg_other->data;
    } else {
       image.data = xalloc(image_size(&image));
    }

    
# 1458 "omv/py/py_image.c" 3 4
   _Bool 
# 1458 "omv/py/py_image.c"
        in_place = arg_img->data == image.data;
    image_t temp;

    if (in_place) {
        memcpy(&temp, arg_img, sizeof(image_t));
        fb_alloc_mark();
        temp.data = fb_alloc(image_size(&temp));
        memcpy(temp.data, arg_img->data, image_size(&temp));
        arg_img = &temp;
        if (copy_to_fb) {
            (fb_framebuffer)->w = 0;
            (fb_framebuffer)->h = 0;
            (fb_framebuffer)->bpp = 0;
            do { if (((image_size(&image) <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "The new image won't fit in the main frame buffer!"))); } while (0); } } while(0);
            (fb_framebuffer)->w = image.w;
            (fb_framebuffer)->h = image.h;
            (fb_framebuffer)->bpp = image.bpp;
        }
    }

    float over_xscale = ({ __typeof__ (1.0) _a = (1.0); __typeof__ (arg_x_scale) _b = (arg_x_scale); _b ? (_a / _b) : 0; }), over_yscale = ({ __typeof__ (1.0f) _a = (1.0f); __typeof__ (arg_y_scale) _b = (arg_y_scale); _b ? (_a / _b) : 0; });

    switch(arg_img->bpp) {
        case IMAGE_BPP_BINARY: {
            for (int y = 0, yy = image.h; y < yy; y++) {
                uint32_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (fast_floorf(y * over_yscale) + roi.y) _y = (fast_floorf(y * over_yscale) + roi.y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); });
                uint32_t *row_ptr_2 = ({ __typeof__ (&image) _image = (&image); __typeof__ (y) _y = (y); ((uint32_t *) _image->data) + (((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y); });
                for (int x = 0, xx = image.w; x < xx; x++) {
                    ({ __typeof__ (row_ptr_2) _row_ptr = (row_ptr_2); __typeof__ (x) _x = (x); __typeof__ (({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (fast_floorf(x * over_xscale) + roi.x) _x = (fast_floorf(x * over_xscale) + roi.x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; })) _v = (({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (fast_floorf(x * over_xscale) + roi.x) _x = (fast_floorf(x * over_xscale) + roi.x); (_row_ptr[_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; })); size_t _i = _x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1)))))); size_t _j = _x & ((sizeof(uint32_t) * 8) - 1); _row_ptr[_i] = (_row_ptr[_i] & (~(1 << _j))) | ((_v & 1) << _j); })
                                                                                                   ;
    }
        }
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            for (int y = 0, yy = image.h; y < yy; y++) {
                uint8_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (fast_floorf(y * over_yscale) + roi.y) _y = (fast_floorf(y * over_yscale) + roi.y); ((uint8_t *) _image->data) + (_image->w * _y); });
                uint8_t *row_ptr_2 = ({ __typeof__ (&image) _image = (&image); __typeof__ (y) _y = (y); ((uint8_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = image.w; x < xx; x++) {
                    ({ __typeof__ (row_ptr_2) _row_ptr = (row_ptr_2); __typeof__ (x) _x = (x); __typeof__ (({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (fast_floorf(x * over_xscale) + roi.x) _x = (fast_floorf(x * over_xscale) + roi.x); _row_ptr[_x]; })) _v = (({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (fast_floorf(x * over_xscale) + roi.x) _x = (fast_floorf(x * over_xscale) + roi.x); _row_ptr[_x]; })); _row_ptr[_x] = _v; })
                                                                                                      ;
                }
            }
            break;
    }
        case IMAGE_BPP_RGB565: {
            for (int y = 0, yy = image.h; y < yy; y++) {
                uint16_t *row_ptr = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (fast_floorf(y * over_yscale) + roi.y) _y = (fast_floorf(y * over_yscale) + roi.y); ((uint16_t *) _image->data) + (_image->w * _y); });
                uint16_t *row_ptr_2 = ({ __typeof__ (&image) _image = (&image); __typeof__ (y) _y = (y); ((uint16_t *) _image->data) + (_image->w * _y); });
                for (int x = 0, xx = image.w; x < xx; x++) {
                    ({ __typeof__ (row_ptr_2) _row_ptr = (row_ptr_2); __typeof__ (x) _x = (x); __typeof__ (({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (fast_floorf(x * over_xscale) + roi.x) _x = (fast_floorf(x * over_xscale) + roi.x); _row_ptr[_x]; })) _v = (({ __typeof__ (row_ptr) _row_ptr = (row_ptr); __typeof__ (fast_floorf(x * over_xscale) + roi.x) _x = (fast_floorf(x * over_xscale) + roi.x); _row_ptr[_x]; })); _row_ptr[_x] = _v; })
                                                                                                   ;
                }
                }
            break;
            }
        default: {
            break;
        }
                }

    if (in_place) {
        fb_alloc_free_till_mark();
            }

    if ((fb_framebuffer)->pixels == image.data) {
        (fb_framebuffer)->w = image.w;
        (fb_framebuffer)->h = image.h;
        (fb_framebuffer)->bpp = image.bpp;
    }

    if (copy_to_fb) {
        image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

        if ((fb_framebuffer)->pixels == arg_img->data) {
            arg_img->w = image.w;
            arg_img->h = image.h;
            arg_img->bpp = image.bpp;
        }
    } else {
        if (arg_other) {
            arg_other->w = image.w;
            arg_other->h = image.h;
            arg_other->bpp = image.bpp;
        }
    }

    return py_image_from_struct(&image);
}

static mp_obj_t py_image_copy(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    return py_image_copy_int(n_args, args, kw_args, 
# 1550 "omv/py/py_image.c" 3 4
                                                   0
# 1550 "omv/py/py_image.c"
                                                        );
}
static const mp_obj_fun_builtin_var_t py_image_copy_obj = {{&mp_type_fun_builtin_var}, 
# 1552 "omv/py/py_image.c" 3 4
      1
# 1552 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_copy};

static mp_obj_t py_image_crop(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    return py_image_copy_int(n_args, args, kw_args, 
# 1556 "omv/py/py_image.c" 3 4
                                                   1
# 1556 "omv/py/py_image.c"
                                                       );
}
static const mp_obj_fun_builtin_var_t py_image_crop_obj = {{&mp_type_fun_builtin_var}, 
# 1558 "omv/py/py_image.c" 3 4
      1
# 1558 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_crop};

static mp_obj_t py_image_save(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_image_cobj(args[0]);
    const char *path = mp_obj_str_get_str(args[1]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 2, kw_args, &roi);

    int arg_q = py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_quality)) << 2) | 2)), 50);
    do { if (((1 <= arg_q) && (arg_q <= 100)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 1 <= quality <= 100!"))); } while (0); } } while(0);

    fb_alloc_mark();
    imlib_save_image(arg_img, path, &roi, arg_q);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_save_obj = {{&mp_type_fun_builtin_var}, 
# 1576 "omv/py/py_image.c" 3 4
      1
# 1576 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_save};





static mp_obj_t py_image_clear(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable_bayer(args[0]);

    image_t *arg_msk =
            py_helper_keyword_to_image_mutable_mask(n_args, args, 1, kw_args);

    if (!arg_msk) {
    memset(arg_img->data, 0, image_size(arg_img));
    } else {
        imlib_zero(arg_img, arg_msk, 
# 1592 "omv/py/py_image.c" 3 4
                                    0
# 1592 "omv/py/py_image.c"
                                         );
    }

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_clear_obj = {{&mp_type_fun_builtin_var}, 
# 1597 "omv/py/py_image.c" 3 4
      1
# 1597 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_clear};

static mp_obj_t py_image_draw_line(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 4, &arg_vec);
    int arg_x0 = mp_obj_get_int(arg_vec[0]);
    int arg_y0 = mp_obj_get_int(arg_vec[1]);
    int arg_x1 = mp_obj_get_int(arg_vec[2]);
    int arg_y1 = mp_obj_get_int(arg_vec[3]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset + 0, kw_args, -1);
    int arg_thickness =
        py_helper_keyword_int(n_args, args, offset + 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_thickness)) << 2) | 2)), 1);

    imlib_draw_line(arg_img, arg_x0, arg_y0, arg_x1, arg_y1, arg_c, arg_thickness);
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_line_obj = {{&mp_type_fun_builtin_var}, 
# 1618 "omv/py/py_image.c" 3 4
      1
# 1618 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_line};

static mp_obj_t py_image_draw_rectangle(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 4, &arg_vec);
    int arg_rx = mp_obj_get_int(arg_vec[0]);
    int arg_ry = mp_obj_get_int(arg_vec[1]);
    int arg_rw = mp_obj_get_int(arg_vec[2]);
    int arg_rh = mp_obj_get_int(arg_vec[3]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset + 0, kw_args, -1);
    int arg_thickness =
        py_helper_keyword_int(n_args, args, offset + 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_thickness)) << 2) | 2)), 1);
    
# 1635 "omv/py/py_image.c" 3 4
   _Bool 
# 1635 "omv/py/py_image.c"
        arg_fill =
        py_helper_keyword_int(n_args, args, offset + 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_fill)) << 2) | 2)), 
# 1636 "omv/py/py_image.c" 3 4
                                                                                               0
# 1636 "omv/py/py_image.c"
                                                                                                    );

    imlib_draw_rectangle(arg_img, arg_rx, arg_ry, arg_rw, arg_rh, arg_c, arg_thickness, arg_fill);
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_rectangle_obj = {{&mp_type_fun_builtin_var}, 
# 1641 "omv/py/py_image.c" 3 4
      1
# 1641 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_rectangle};

static mp_obj_t py_image_draw_circle(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 3, &arg_vec);
    int arg_cx = mp_obj_get_int(arg_vec[0]);
    int arg_cy = mp_obj_get_int(arg_vec[1]);
    int arg_cr = mp_obj_get_int(arg_vec[2]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset + 0, kw_args, -1);
    int arg_thickness =
        py_helper_keyword_int(n_args, args, offset + 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_thickness)) << 2) | 2)), 1);
    
# 1657 "omv/py/py_image.c" 3 4
   _Bool 
# 1657 "omv/py/py_image.c"
        arg_fill =
        py_helper_keyword_int(n_args, args, offset + 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_fill)) << 2) | 2)), 
# 1658 "omv/py/py_image.c" 3 4
                                                                                               0
# 1658 "omv/py/py_image.c"
                                                                                                    );

    imlib_draw_circle(arg_img, arg_cx, arg_cy, arg_cr, arg_c, arg_thickness, arg_fill);
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_circle_obj = {{&mp_type_fun_builtin_var}, 
# 1663 "omv/py/py_image.c" 3 4
      1
# 1663 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_circle};

static mp_obj_t py_image_draw_ellipse(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 5, &arg_vec);
    int arg_cx = mp_obj_get_int(arg_vec[0]);
    int arg_cy = mp_obj_get_int(arg_vec[1]);
    int arg_rx = mp_obj_get_int(arg_vec[2]);
    int arg_ry = mp_obj_get_int(arg_vec[3]);
    int arg_r = mp_obj_get_int(arg_vec[4]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset + 1, kw_args, -1);
    int arg_thickness =
        py_helper_keyword_int(n_args, args, offset + 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_thickness)) << 2) | 2)), 1);
    
# 1681 "omv/py/py_image.c" 3 4
   _Bool 
# 1681 "omv/py/py_image.c"
        arg_fill =
        py_helper_keyword_int(n_args, args, offset + 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_fill)) << 2) | 2)), 
# 1682 "omv/py/py_image.c" 3 4
                                                                                               0
# 1682 "omv/py/py_image.c"
                                                                                                    );

    imlib_draw_ellipse(arg_img, arg_cx, arg_cy, arg_rx, arg_ry, arg_r, arg_c, arg_thickness, arg_fill);
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_ellipse_obj = {{&mp_type_fun_builtin_var}, 
# 1687 "omv/py/py_image.c" 3 4
      1
# 1687 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_ellipse};

static mp_obj_t py_image_draw_string(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 3, &arg_vec);
    int arg_x_off = mp_obj_get_int(arg_vec[0]);
    int arg_y_off = mp_obj_get_int(arg_vec[1]);
    const char *arg_str = mp_obj_str_get_str(arg_vec[2]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset + 0, kw_args, -1);
    float arg_scale =
        py_helper_keyword_float(n_args, args, offset + 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_scale)) << 2) | 2)), 1.0);
    do { if ((0 < arg_scale) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0 < scale!"))); } while (0); } } while(0);
    int arg_x_spacing =
        py_helper_keyword_int(n_args, args, offset + 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_spacing)) << 2) | 2)), 0);
    int arg_y_spacing =
        py_helper_keyword_int(n_args, args, offset + 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_spacing)) << 2) | 2)), 0);
    
# 1708 "omv/py/py_image.c" 3 4
   _Bool 
# 1708 "omv/py/py_image.c"
        arg_mono_space =
        py_helper_keyword_int(n_args, args, offset + 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mono_space)) << 2) | 2)), 
# 1709 "omv/py/py_image.c" 3 4
                                                                                                     1
# 1709 "omv/py/py_image.c"
                                                                                                         );
    int arg_char_rotation =
        py_helper_keyword_int(n_args, args, offset + 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_char_rotation)) << 2) | 2)), 0);
    int arg_char_hmirror =
        py_helper_keyword_int(n_args, args, offset + 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_char_hmirror)) << 2) | 2)), 
# 1713 "omv/py/py_image.c" 3 4
                                                                                                       0
# 1713 "omv/py/py_image.c"
                                                                                                            );
    int arg_char_vflip =
        py_helper_keyword_int(n_args, args, offset + 7, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_char_vflip)) << 2) | 2)), 
# 1715 "omv/py/py_image.c" 3 4
                                                                                                     0
# 1715 "omv/py/py_image.c"
                                                                                                          );
    int arg_string_rotation =
        py_helper_keyword_int(n_args, args, offset + 8, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_string_rotation)) << 2) | 2)), 0);
    int arg_string_hmirror =
        py_helper_keyword_int(n_args, args, offset + 9, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_string_hmirror)) << 2) | 2)), 
# 1719 "omv/py/py_image.c" 3 4
                                                                                                         0
# 1719 "omv/py/py_image.c"
                                                                                                              );
    int arg_string_vflip =
        py_helper_keyword_int(n_args, args, offset + 10, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_string_vflip)) << 2) | 2)), 
# 1721 "omv/py/py_image.c" 3 4
                                                                                                        0
# 1721 "omv/py/py_image.c"
                                                                                                             );

    imlib_draw_string(arg_img, arg_x_off, arg_y_off, arg_str,
                      arg_c, arg_scale, arg_x_spacing, arg_y_spacing, arg_mono_space,
                      arg_char_rotation, arg_char_hmirror, arg_char_vflip,
                      arg_string_rotation, arg_string_hmirror, arg_string_vflip);
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_string_obj = {{&mp_type_fun_builtin_var}, 
# 1729 "omv/py/py_image.c" 3 4
      1
# 1729 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_string};

static mp_obj_t py_image_draw_cross(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 2, &arg_vec);
    int arg_x = mp_obj_get_int(arg_vec[0]);
    int arg_y = mp_obj_get_int(arg_vec[1]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset + 0, kw_args, -1);
    int arg_s =
        py_helper_keyword_int(n_args, args, offset + 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), 5);
    int arg_thickness =
        py_helper_keyword_int(n_args, args, offset + 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_thickness)) << 2) | 2)), 1);

    imlib_draw_line(arg_img, arg_x - arg_s, arg_y , arg_x + arg_s, arg_y , arg_c, arg_thickness);
    imlib_draw_line(arg_img, arg_x , arg_y - arg_s, arg_x , arg_y + arg_s, arg_c, arg_thickness);
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_cross_obj = {{&mp_type_fun_builtin_var}, 
# 1751 "omv/py/py_image.c" 3 4
      1
# 1751 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_cross};

static mp_obj_t py_image_draw_arrow(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 4, &arg_vec);
    int arg_x0 = mp_obj_get_int(arg_vec[0]);
    int arg_y0 = mp_obj_get_int(arg_vec[1]);
    int arg_x1 = mp_obj_get_int(arg_vec[2]);
    int arg_y1 = mp_obj_get_int(arg_vec[3]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset + 0, kw_args, -1);
    int arg_s =
        py_helper_keyword_int(n_args, args, offset + 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), 10);
    int arg_thickness =
        py_helper_keyword_int(n_args, args, offset + 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_thickness)) << 2) | 2)), 1);

    int dx = (arg_x1 - arg_x0);
    int dy = (arg_y1 - arg_y0);
    float length = fast_sqrtf((dx * dx) + (dy * dy));

    float ux = ({ __typeof__ (dx) _a = (dx); __typeof__ (length) _b = (length); _b ? (_a / _b) : 0; });
    float uy = ({ __typeof__ (dy) _a = (dy); __typeof__ (length) _b = (length); _b ? (_a / _b) : 0; });
    float vx = -uy;
    float vy = ux;

    int a0x = fast_roundf(arg_x1 - (arg_s * ux) + (arg_s * vx * 0.5));
    int a0y = fast_roundf(arg_y1 - (arg_s * uy) + (arg_s * vy * 0.5));
    int a1x = fast_roundf(arg_x1 - (arg_s * ux) - (arg_s * vx * 0.5));
    int a1y = fast_roundf(arg_y1 - (arg_s * uy) - (arg_s * vy * 0.5));

    imlib_draw_line(arg_img, arg_x0, arg_y0, arg_x1, arg_y1, arg_c, arg_thickness);
    imlib_draw_line(arg_img, arg_x1, arg_y1, a0x, a0y, arg_c, arg_thickness);
    imlib_draw_line(arg_img, arg_x1, arg_y1, a1x, a1y, arg_c, arg_thickness);
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_arrow_obj = {{&mp_type_fun_builtin_var}, 
# 1790 "omv/py/py_image.c" 3 4
      1
# 1790 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_arrow};

static mp_obj_t py_image_draw_edges(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    mp_obj_t *corners, *p0, *p1, *p2, *p3;
    mp_obj_get_array_fixed_n(args[1], 4, &corners);
    mp_obj_get_array_fixed_n(corners[0], 2, &p0);
    mp_obj_get_array_fixed_n(corners[1], 2, &p1);
    mp_obj_get_array_fixed_n(corners[2], 2, &p2);
    mp_obj_get_array_fixed_n(corners[3], 2, &p3);

    int x0, y0, x1, y1, x2, y2, x3, y3;
    x0 = mp_obj_get_int(p0[0]);
    y0 = mp_obj_get_int(p0[1]);
    x1 = mp_obj_get_int(p1[0]);
    y1 = mp_obj_get_int(p1[1]);
    x2 = mp_obj_get_int(p2[0]);
    y2 = mp_obj_get_int(p2[1]);
    x3 = mp_obj_get_int(p3[0]);
    y3 = mp_obj_get_int(p3[1]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, 2, kw_args, -1);
    int arg_s =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), 0);
    int arg_thickness =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_thickness)) << 2) | 2)), 1);
    
# 1819 "omv/py/py_image.c" 3 4
   _Bool 
# 1819 "omv/py/py_image.c"
        arg_fill =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_fill)) << 2) | 2)), 
# 1820 "omv/py/py_image.c" 3 4
                                                                                      0
# 1820 "omv/py/py_image.c"
                                                                                           );

    imlib_draw_line(arg_img, x0, y0, x1, y1, arg_c, arg_thickness);
    imlib_draw_line(arg_img, x1, y1, x2, y2, arg_c, arg_thickness);
    imlib_draw_line(arg_img, x2, y2, x3, y3, arg_c, arg_thickness);
    imlib_draw_line(arg_img, x3, y3, x0, y0, arg_c, arg_thickness);

    if (arg_s >= 1) {
        imlib_draw_circle(arg_img, x0, y0, arg_s, arg_c, arg_thickness, arg_fill);
        imlib_draw_circle(arg_img, x1, y1, arg_s, arg_c, arg_thickness, arg_fill);
        imlib_draw_circle(arg_img, x2, y2, arg_s, arg_c, arg_thickness, arg_fill);
        imlib_draw_circle(arg_img, x3, y3, arg_s, arg_c, arg_thickness, arg_fill);
    }

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_edges_obj = {{&mp_type_fun_builtin_var}, 
# 1836 "omv/py/py_image.c" 3 4
      1
# 1836 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_edges};

static mp_obj_t py_image_draw_image(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    image_t *arg_other =
        py_helper_arg_to_image_mutable(args[1]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 2, 2, &arg_vec);
    int arg_cx = mp_obj_get_int(arg_vec[0]);
    int arg_cy = mp_obj_get_int(arg_vec[1]);

    float arg_x_scale =
        py_helper_keyword_float(n_args, args, offset + 0, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_scale)) << 2) | 2)), 1.0f);
    do { if (((0.0f <= arg_x_scale)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0.0 <= x_scale!"))); } while (0); } } while(0);
    float arg_y_scale =
        py_helper_keyword_float(n_args, args, offset + 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_scale)) << 2) | 2)), 1.0f);
    do { if (((0.0f <= arg_y_scale)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0.0 <= y_scale!"))); } while (0); } } while(0);
    float arg_alpha =
        py_helper_keyword_int(n_args, args, offset + 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_alpha)) << 2) | 2)), 256) / 256.0f;
    do { if (((0 <= arg_alpha) && (arg_alpha <= 1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0 <= alpha <= 256!"))); } while (0); } } while(0);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, offset + 3, kw_args);

    imlib_draw_image(arg_img, arg_other, arg_cx, arg_cy, arg_x_scale, arg_y_scale, arg_alpha, arg_msk);
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_image_obj = {{&mp_type_fun_builtin_var}, 
# 1865 "omv/py/py_image.c" 3 4
      1
# 1865 "omv/py/py_image.c"
      , 3, (0xffff), .fun.kw = py_image_draw_image};

static mp_obj_t py_image_draw_keypoints(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, 2, kw_args, -1);
    int arg_s =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), 10);
    int arg_thickness =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_thickness)) << 2) | 2)), 1);
    
# 1877 "omv/py/py_image.c" 3 4
   _Bool 
# 1877 "omv/py/py_image.c"
        arg_fill =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_fill)) << 2) | 2)), 
# 1878 "omv/py/py_image.c" 3 4
                                                                                      0
# 1878 "omv/py/py_image.c"
                                                                                           );

    if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_tuple))) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_list)))) {
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(args[1], &len, &items);
        for (size_t i = 0; i < len; i++) {
            mp_obj_t *tuple;
            mp_obj_get_array_fixed_n(items[i], 3, &tuple);
            int cx = mp_obj_get_int(tuple[0]);
            int cy = mp_obj_get_int(tuple[1]);
            int angle = mp_obj_get_int(tuple[2]) % 360;
            int si = sin_table[angle] * arg_s;
            int co = cos_table[angle] * arg_s;
            imlib_draw_line(arg_img, cx, cy, cx + co, cy + si, arg_c, arg_thickness);
            imlib_draw_circle(arg_img, cx, cy, (arg_s - 2) / 2, arg_c, arg_thickness, arg_fill);
        }
    } else {

        py_kp_obj_t *kpts_obj = py_kpts_obj(args[1]);
    for (int i = 0, ii = array_length(kpts_obj->kpts); i < ii; i++) {
        kp_t *kp = array_at(kpts_obj->kpts, i);
        int cx = kp->x;
        int cy = kp->y;
            int angle = kp->angle % 360;
            int si = sin_table[angle] * arg_s;
            int co = cos_table[angle] * arg_s;
        imlib_draw_line(arg_img, cx, cy, cx + co, cy + si, arg_c, arg_thickness);
        imlib_draw_circle(arg_img, cx, cy, (arg_s - 2) / 2, arg_c, arg_thickness, arg_fill);
    }



    }

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_draw_keypoints_obj = {{&mp_type_fun_builtin_var}, 
# 1915 "omv/py/py_image.c" 3 4
      1
# 1915 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_draw_keypoints};

static mp_obj_t py_image_mask_rectangle(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    int arg_rx;
    int arg_ry;
    int arg_rw;
    int arg_rh;

    if (n_args > 1) {
        const mp_obj_t *arg_vec;
        py_helper_consume_array(n_args, args, 1, 4, &arg_vec);
        arg_rx = mp_obj_get_int(arg_vec[0]);
        arg_ry = mp_obj_get_int(arg_vec[1]);
        arg_rw = mp_obj_get_int(arg_vec[2]);
        arg_rh = mp_obj_get_int(arg_vec[3]);
    } else {
        arg_rx = arg_img->w / 4;
        arg_ry = arg_img->h / 4;
        arg_rw = arg_img->w / 2;
        arg_rh = arg_img->h / 2;
    }

    fb_alloc_mark();
    image_t temp;
    temp.w = arg_img->w;
    temp.h = arg_img->h;
    temp.bpp = IMAGE_BPP_BINARY;
    temp.data = fb_alloc0(image_size(&temp));

    imlib_draw_rectangle(&temp, arg_rx, arg_ry, arg_rw, arg_rh, -1, 0, 
# 1946 "omv/py/py_image.c" 3 4
                                                                      1
# 1946 "omv/py/py_image.c"
                                                                          );
    imlib_zero(arg_img, &temp, 
# 1947 "omv/py/py_image.c" 3 4
                              1
# 1947 "omv/py/py_image.c"
                                  );

    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_mask_rectangle_obj = {{&mp_type_fun_builtin_var}, 
# 1952 "omv/py/py_image.c" 3 4
      1
# 1952 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_mask_rectangle};

static mp_obj_t py_image_mask_circle(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    int arg_cx;
    int arg_cy;
    int arg_cr;

    if (n_args > 1) {
        const mp_obj_t *arg_vec;
        py_helper_consume_array(n_args, args, 1, 3, &arg_vec);
        arg_cx = mp_obj_get_int(arg_vec[0]);
        arg_cy = mp_obj_get_int(arg_vec[1]);
        arg_cr = mp_obj_get_int(arg_vec[2]);
    } else {
        arg_cx = arg_img->w / 2;
        arg_cy = arg_img->h / 2;
        arg_cr = ({ __typeof__ (arg_img->w) _a = (arg_img->w); __typeof__ (arg_img->h) _b = (arg_img->h); _a < _b ? _a : _b; }) / 2;
    }

    fb_alloc_mark();
    image_t temp;
    temp.w = arg_img->w;
    temp.h = arg_img->h;
    temp.bpp = IMAGE_BPP_BINARY;
    temp.data = fb_alloc0(image_size(&temp));

    imlib_draw_circle(&temp, arg_cx, arg_cy, arg_cr, -1, 0, 
# 1980 "omv/py/py_image.c" 3 4
                                                           1
# 1980 "omv/py/py_image.c"
                                                               );
    imlib_zero(arg_img, &temp, 
# 1981 "omv/py/py_image.c" 3 4
                              1
# 1981 "omv/py/py_image.c"
                                  );

    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_mask_circle_obj = {{&mp_type_fun_builtin_var}, 
# 1986 "omv/py/py_image.c" 3 4
      1
# 1986 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_mask_circle};

static mp_obj_t py_image_mask_ellipse(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    int arg_cx;
    int arg_cy;
    int arg_rx;
    int arg_ry;
    int arg_r;

    if (n_args > 1) {
        const mp_obj_t *arg_vec;
        py_helper_consume_array(n_args, args, 1, 5, &arg_vec);
        arg_cx = mp_obj_get_int(arg_vec[0]);
        arg_cy = mp_obj_get_int(arg_vec[1]);
        arg_rx = mp_obj_get_int(arg_vec[2]);
        arg_ry = mp_obj_get_int(arg_vec[3]);
        arg_r = mp_obj_get_int(arg_vec[4]);
    } else {
        arg_cx = arg_img->w / 2;
        arg_cy = arg_img->h / 2;
        arg_rx = arg_img->w / 2;
        arg_ry = arg_img->h / 2;
        arg_r = 0;
    }

    fb_alloc_mark();
    image_t temp;
    temp.w = arg_img->w;
    temp.h = arg_img->h;
    temp.bpp = IMAGE_BPP_BINARY;
    temp.data = fb_alloc0(image_size(&temp));

    imlib_draw_ellipse(&temp, arg_cx, arg_cy, arg_rx, arg_ry, arg_r, -1, 0, 
# 2020 "omv/py/py_image.c" 3 4
                                                                           1
# 2020 "omv/py/py_image.c"
                                                                               );
    imlib_zero(arg_img, &temp, 
# 2021 "omv/py/py_image.c" 3 4
                              1
# 2021 "omv/py/py_image.c"
                                  );

    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_mask_ellipse_obj = {{&mp_type_fun_builtin_var}, 
# 2026 "omv/py/py_image.c" 3 4
      1
# 2026 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_mask_ellipse};


static mp_obj_t py_image_flood_fill(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    const mp_obj_t *arg_vec;
    uint offset = py_helper_consume_array(n_args, args, 1, 2, &arg_vec);
    int arg_x_off = mp_obj_get_int(arg_vec[0]);
    int arg_y_off = mp_obj_get_int(arg_vec[1]);

    float arg_seed_threshold =
        py_helper_keyword_float(n_args, args, offset + 0, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_seed_threshold)) << 2) | 2)), 0.05);
    do { if (((0.0f <= arg_seed_threshold) && (arg_seed_threshold <= 1.0f)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0.0 <= seed_threshold <= 1.0!"))); } while (0); } } while(0)
                                                              ;
    float arg_floating_threshold =
        py_helper_keyword_float(n_args, args, offset + 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_floating_threshold)) << 2) | 2)), 0.05);
    do { if (((0.0f <= arg_floating_threshold) && (arg_floating_threshold <= 1.0f)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0.0 <= floating_threshold <= 1.0!"))); } while (0); } } while(0)
                                                                  ;
    int arg_c =
        py_helper_keyword_color(arg_img, n_args, args, offset + 2, kw_args, -1);
    
# 2048 "omv/py/py_image.c" 3 4
   _Bool 
# 2048 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_float(n_args, args, offset + 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2049 "omv/py/py_image.c" 3 4
                                                                                                   0
# 2049 "omv/py/py_image.c"
                                                                                                        );
    
# 2050 "omv/py/py_image.c" 3 4
   _Bool 
# 2050 "omv/py/py_image.c"
        clear_background =
        py_helper_keyword_float(n_args, args, offset + 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_clear_background)) << 2) | 2)), 
# 2051 "omv/py/py_image.c" 3 4
                                                                                                             0
# 2051 "omv/py/py_image.c"
                                                                                                                  );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, offset + 5, kw_args);

    fb_alloc_mark();
    imlib_flood_fill(arg_img, arg_x_off, arg_y_off,
                     arg_seed_threshold, arg_floating_threshold,
                     arg_c, arg_invert, clear_background, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_flood_fill_obj = {{&mp_type_fun_builtin_var}, 
# 2062 "omv/py/py_image.c" 3 4
      1
# 2062 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_flood_fill};







static mp_obj_t py_image_binary(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    list_t arg_thresholds;
    list_init(&arg_thresholds, sizeof(color_thresholds_list_lnk_data_t));
    py_helper_arg_to_thresholds(args[1], &arg_thresholds);

    
# 2078 "omv/py/py_image.c" 3 4
   _Bool 
# 2078 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2079 "omv/py/py_image.c" 3 4
                                                                                        0
# 2079 "omv/py/py_image.c"
                                                                                             );
    
# 2080 "omv/py/py_image.c" 3 4
   _Bool 
# 2080 "omv/py/py_image.c"
        arg_zero =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_zero)) << 2) | 2)), 
# 2081 "omv/py/py_image.c" 3 4
                                                                                      0
# 2081 "omv/py/py_image.c"
                                                                                           );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 4, kw_args);
    
# 2084 "omv/py/py_image.c" 3 4
   _Bool 
# 2084 "omv/py/py_image.c"
        arg_to_bitmap =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_to_bitmap)) << 2) | 2)), 
# 2085 "omv/py/py_image.c" 3 4
                                                                                           0
# 2085 "omv/py/py_image.c"
                                                                                                );
    
# 2086 "omv/py/py_image.c" 3 4
   _Bool 
# 2086 "omv/py/py_image.c"
        arg_copy =
        py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_copy)) << 2) | 2)), 
# 2087 "omv/py/py_image.c" 3 4
                                                                                      0
# 2087 "omv/py/py_image.c"
                                                                                           );

    if (arg_to_bitmap && (!arg_copy)) {
        switch(arg_img->bpp) {
            case IMAGE_BPP_GRAYSCALE: {
                do { if (((arg_img->w >= (sizeof(uint32_t)/sizeof(uint8_t)))) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to bitmap in place!"))); } while (0); } } while(0)
                                                           ;
                break;
            }
            case IMAGE_BPP_RGB565: {
                do { if (((arg_img->w >= (sizeof(uint32_t)/sizeof(uint16_t)))) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Can't convert to bitmap in place!"))); } while (0); } } while(0)
                                                                       ;
                break;
            }
            default: {
                break;
            }
        }
    }

    image_t out;
    out.w = arg_img->w;
    out.h = arg_img->h;
    out.bpp = arg_to_bitmap ? IMAGE_BPP_BINARY : arg_img->bpp;
    out.data = arg_copy ? xalloc(image_size(&out)) : arg_img->data;

    fb_alloc_mark();
    imlib_binary(&out, arg_img, &arg_thresholds, arg_invert, arg_zero, arg_msk);
    fb_alloc_free_till_mark();
    list_free(&arg_thresholds);

    if (arg_to_bitmap && (!arg_copy)) {
        arg_img->bpp = IMAGE_BPP_BINARY;

        if (((fb_framebuffer)->pixels == out.data)) {
        (fb_framebuffer)->bpp = out.bpp;
    }
    }

    return py_image_from_struct(&out);
}
static const mp_obj_fun_builtin_var_t py_image_binary_obj = {{&mp_type_fun_builtin_var}, 
# 2128 "omv/py/py_image.c" 3 4
      1
# 2128 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_binary};

static mp_obj_t py_image_invert(mp_obj_t img_obj)
{
    imlib_invert(py_helper_arg_to_image_mutable(img_obj));
    return img_obj;
}
static const mp_obj_fun_builtin_fixed_t py_image_invert_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_invert};

static mp_obj_t py_image_b_and(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_b_and(arg_img, mp_obj_str_get_str(args[1]), 
# 2147 "omv/py/py_image.c" 3 4
                                                         ((void *)0)
# 2147 "omv/py/py_image.c"
                                                             , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_b_and(arg_img, 
# 2149 "omv/py/py_image.c" 3 4
                            ((void *)0)
# 2149 "omv/py/py_image.c"
                                , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_b_and(arg_img, 
# 2151 "omv/py/py_image.c" 3 4
                            ((void *)0)
# 2151 "omv/py/py_image.c"
                                , 
# 2151 "omv/py/py_image.c" 3 4
                                  ((void *)0)
# 2151 "omv/py/py_image.c"
                                      ,
                  py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2152 "omv/py/py_image.c" 3 4
                                                                   ((void *)0)
# 2152 "omv/py/py_image.c"
                                                                       , 0),
                    arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_b_and_obj = {{&mp_type_fun_builtin_var}, 
# 2160 "omv/py/py_image.c" 3 4
      1
# 2160 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_b_and};

static mp_obj_t py_image_b_nand(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_b_nand(arg_img, mp_obj_str_get_str(args[1]), 
# 2172 "omv/py/py_image.c" 3 4
                                                          ((void *)0)
# 2172 "omv/py/py_image.c"
                                                              , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_b_nand(arg_img, 
# 2174 "omv/py/py_image.c" 3 4
                             ((void *)0)
# 2174 "omv/py/py_image.c"
                                 , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_b_nand(arg_img, 
# 2176 "omv/py/py_image.c" 3 4
                             ((void *)0)
# 2176 "omv/py/py_image.c"
                                 , 
# 2176 "omv/py/py_image.c" 3 4
                                   ((void *)0)
# 2176 "omv/py/py_image.c"
                                       ,
                     py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2177 "omv/py/py_image.c" 3 4
                                                                      ((void *)0)
# 2177 "omv/py/py_image.c"
                                                                          , 0),
                     arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_b_nand_obj = {{&mp_type_fun_builtin_var}, 
# 2185 "omv/py/py_image.c" 3 4
      1
# 2185 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_b_nand};

static mp_obj_t py_image_b_or(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_b_or(arg_img, mp_obj_str_get_str(args[1]), 
# 2197 "omv/py/py_image.c" 3 4
                                                        ((void *)0)
# 2197 "omv/py/py_image.c"
                                                            , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_b_or(arg_img, 
# 2199 "omv/py/py_image.c" 3 4
                           ((void *)0)
# 2199 "omv/py/py_image.c"
                               , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_b_or(arg_img, 
# 2201 "omv/py/py_image.c" 3 4
                           ((void *)0)
# 2201 "omv/py/py_image.c"
                               , 
# 2201 "omv/py/py_image.c" 3 4
                                 ((void *)0)
# 2201 "omv/py/py_image.c"
                                     ,
                   py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2202 "omv/py/py_image.c" 3 4
                                                                    ((void *)0)
# 2202 "omv/py/py_image.c"
                                                                        , 0),
                   arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_b_or_obj = {{&mp_type_fun_builtin_var}, 
# 2210 "omv/py/py_image.c" 3 4
      1
# 2210 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_b_or};

static mp_obj_t py_image_b_nor(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_b_nor(arg_img, mp_obj_str_get_str(args[1]), 
# 2222 "omv/py/py_image.c" 3 4
                                                         ((void *)0)
# 2222 "omv/py/py_image.c"
                                                             , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_b_nor(arg_img, 
# 2224 "omv/py/py_image.c" 3 4
                            ((void *)0)
# 2224 "omv/py/py_image.c"
                                , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_b_nor(arg_img, 
# 2226 "omv/py/py_image.c" 3 4
                            ((void *)0)
# 2226 "omv/py/py_image.c"
                                , 
# 2226 "omv/py/py_image.c" 3 4
                                  ((void *)0)
# 2226 "omv/py/py_image.c"
                                      ,
                    py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2227 "omv/py/py_image.c" 3 4
                                                                     ((void *)0)
# 2227 "omv/py/py_image.c"
                                                                         , 0),
                    arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_b_nor_obj = {{&mp_type_fun_builtin_var}, 
# 2235 "omv/py/py_image.c" 3 4
      1
# 2235 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_b_nor};

static mp_obj_t py_image_b_xor(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_b_xor(arg_img, mp_obj_str_get_str(args[1]), 
# 2247 "omv/py/py_image.c" 3 4
                                                         ((void *)0)
# 2247 "omv/py/py_image.c"
                                                             , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_b_xor(arg_img, 
# 2249 "omv/py/py_image.c" 3 4
                            ((void *)0)
# 2249 "omv/py/py_image.c"
                                , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_b_xor(arg_img, 
# 2251 "omv/py/py_image.c" 3 4
                            ((void *)0)
# 2251 "omv/py/py_image.c"
                                , 
# 2251 "omv/py/py_image.c" 3 4
                                  ((void *)0)
# 2251 "omv/py/py_image.c"
                                      ,
                    py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2252 "omv/py/py_image.c" 3 4
                                                                     ((void *)0)
# 2252 "omv/py/py_image.c"
                                                                         , 0),
                    arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_b_xor_obj = {{&mp_type_fun_builtin_var}, 
# 2260 "omv/py/py_image.c" 3 4
      1
# 2260 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_b_xor};

static mp_obj_t py_image_b_xnor(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_b_xnor(arg_img, mp_obj_str_get_str(args[1]), 
# 2272 "omv/py/py_image.c" 3 4
                                                          ((void *)0)
# 2272 "omv/py/py_image.c"
                                                              , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_b_xnor(arg_img, 
# 2274 "omv/py/py_image.c" 3 4
                             ((void *)0)
# 2274 "omv/py/py_image.c"
                                 , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_b_xnor(arg_img, 
# 2276 "omv/py/py_image.c" 3 4
                             ((void *)0)
# 2276 "omv/py/py_image.c"
                                 , 
# 2276 "omv/py/py_image.c" 3 4
                                   ((void *)0)
# 2276 "omv/py/py_image.c"
                                       ,
                     py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2277 "omv/py/py_image.c" 3 4
                                                                      ((void *)0)
# 2277 "omv/py/py_image.c"
                                                                          , 0),
                     arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_b_xnor_obj = {{&mp_type_fun_builtin_var}, 
# 2285 "omv/py/py_image.c" 3 4
      1
# 2285 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_b_xnor};

static mp_obj_t py_image_erode(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    int arg_threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)),
            py_helper_ksize_to_n(arg_ksize) - 1);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();
    imlib_erode(py_helper_arg_to_image_mutable(args[0]), arg_ksize, arg_threshold, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_erode_obj = {{&mp_type_fun_builtin_var}, 
# 2302 "omv/py/py_image.c" 3 4
      1
# 2302 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_erode};

static mp_obj_t py_image_dilate(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    int arg_threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)),
            0);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();
    imlib_dilate(py_helper_arg_to_image_mutable(args[0]), arg_ksize, arg_threshold, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_dilate_obj = {{&mp_type_fun_builtin_var}, 
# 2319 "omv/py/py_image.c" 3 4
      1
# 2319 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_dilate};

static mp_obj_t py_image_open(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    int arg_threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 0);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();
    imlib_open(py_helper_arg_to_image_mutable(args[0]), arg_ksize, arg_threshold, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_open_obj = {{&mp_type_fun_builtin_var}, 
# 2335 "omv/py/py_image.c" 3 4
      1
# 2335 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_open};

static mp_obj_t py_image_close(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    int arg_threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 0);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();
    imlib_close(py_helper_arg_to_image_mutable(args[0]), arg_ksize, arg_threshold, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_close_obj = {{&mp_type_fun_builtin_var}, 
# 2351 "omv/py/py_image.c" 3 4
      1
# 2351 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_close};







static mp_obj_t py_image_top_hat(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    int arg_threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 0);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();
    imlib_top_hat(py_helper_arg_to_image_mutable(args[0]), arg_ksize, arg_threshold, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_top_hat_obj = {{&mp_type_fun_builtin_var}, 
# 2373 "omv/py/py_image.c" 3 4
      1
# 2373 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_top_hat};

static mp_obj_t py_image_black_hat(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    int arg_threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 0);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();
    imlib_black_hat(py_helper_arg_to_image_mutable(args[0]), arg_ksize, arg_threshold, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_black_hat_obj = {{&mp_type_fun_builtin_var}, 
# 2389 "omv/py/py_image.c" 3 4
      1
# 2389 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_black_hat};

static mp_obj_t py_image_gamma_corr(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    float arg_gamma =
        py_helper_keyword_float(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_gamma)) << 2) | 2)), 1.0f);
    float arg_contrast =
        py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_contrast)) << 2) | 2)), 1.0f);
    float arg_brightness =
        py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_brightness)) << 2) | 2)), 0.0f);

    fb_alloc_mark();
    imlib_gamma_corr(arg_img, arg_gamma, arg_contrast, arg_brightness);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_gamma_corr_obj = {{&mp_type_fun_builtin_var}, 
# 2407 "omv/py/py_image.c" 3 4
      1
# 2407 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_gamma_corr};

static mp_obj_t py_image_negate(mp_obj_t img_obj)
{
    imlib_negate(py_helper_arg_to_image_mutable(img_obj));
    return img_obj;
}
static const mp_obj_fun_builtin_fixed_t py_image_negate_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_negate};

static mp_obj_t py_image_replace(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    
# 2420 "omv/py/py_image.c" 3 4
   _Bool 
# 2420 "omv/py/py_image.c"
        arg_hmirror =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_hmirror)) << 2) | 2)), 
# 2421 "omv/py/py_image.c" 3 4
                                                                                         0
# 2421 "omv/py/py_image.c"
                                                                                              );
    
# 2422 "omv/py/py_image.c" 3 4
   _Bool 
# 2422 "omv/py/py_image.c"
        arg_vflip =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_vflip)) << 2) | 2)), 
# 2423 "omv/py/py_image.c" 3 4
                                                                                       0
# 2423 "omv/py/py_image.c"
                                                                                            );
    
# 2424 "omv/py/py_image.c" 3 4
   _Bool 
# 2424 "omv/py/py_image.c"
        arg_transpose =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_transpose)) << 2) | 2)), 
# 2425 "omv/py/py_image.c" 3 4
                                                                                           0
# 2425 "omv/py/py_image.c"
                                                                                                );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 5, kw_args);

    if (arg_transpose) {
        size_t size0 = image_size(arg_img);
        int w = arg_img->w;
        int h = arg_img->h;
        arg_img->w = h;
        arg_img->h = w;
        size_t size1 = image_size(arg_img);
        arg_img->w = w;
        arg_img->h = h;
        do { if ((size1 <= size0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Unable to transpose the image because it would grow in size!"))); } while (0); } } while(0)
                                                                                          ;
    }

    fb_alloc_mark();

    mp_obj_t arg_1 = (n_args > 1) ? args[1] : args[0];

    if ((MP_OBJ_IS_QSTR(arg_1) || (MP_OBJ_IS_OBJ(arg_1) && (((mp_obj_base_t*)((void*)arg_1))->type == (&mp_type_str))))) {
        imlib_replace(arg_img, mp_obj_str_get_str(arg_1), 
# 2447 "omv/py/py_image.c" 3 4
                                                         ((void *)0)
# 2447 "omv/py/py_image.c"
                                                             , 0,
                      arg_hmirror, arg_vflip, arg_transpose, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(arg_1) && (((mp_obj_base_t*)((void*)arg_1))->type == (&py_image_type)))) {
        imlib_replace(arg_img, 
# 2450 "omv/py/py_image.c" 3 4
                              ((void *)0)
# 2450 "omv/py/py_image.c"
                                  , py_helper_arg_to_image_mutable(arg_1), 0,
                      arg_hmirror, arg_vflip, arg_transpose, arg_msk);
    } else {
        imlib_replace(arg_img, 
# 2453 "omv/py/py_image.c" 3 4
                              ((void *)0)
# 2453 "omv/py/py_image.c"
                                  , 
# 2453 "omv/py/py_image.c" 3 4
                                    ((void *)0)
# 2453 "omv/py/py_image.c"
                                        ,
                      py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2454 "omv/py/py_image.c" 3 4
                                                                       ((void *)0)
# 2454 "omv/py/py_image.c"
                                                                           , 0),
                      arg_hmirror, arg_vflip, arg_transpose, arg_msk);
    }

    fb_alloc_free_till_mark();

    if ((fb_framebuffer)->pixels == arg_img->data) {
        (fb_framebuffer)->w = arg_img->w;
        (fb_framebuffer)->h = arg_img->h;
    }

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_replace_obj = {{&mp_type_fun_builtin_var}, 
# 2467 "omv/py/py_image.c" 3 4
      1
# 2467 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_replace};

static mp_obj_t py_image_add(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_add(arg_img, mp_obj_str_get_str(args[1]), 
# 2479 "omv/py/py_image.c" 3 4
                                                       ((void *)0)
# 2479 "omv/py/py_image.c"
                                                           , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_add(arg_img, 
# 2481 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2481 "omv/py/py_image.c"
                              , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_add(arg_img, 
# 2483 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2483 "omv/py/py_image.c"
                              , 
# 2483 "omv/py/py_image.c" 3 4
                                ((void *)0)
# 2483 "omv/py/py_image.c"
                                    ,
                  py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2484 "omv/py/py_image.c" 3 4
                                                                   ((void *)0)
# 2484 "omv/py/py_image.c"
                                                                       , 0),
                  arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_add_obj = {{&mp_type_fun_builtin_var}, 
# 2492 "omv/py/py_image.c" 3 4
      1
# 2492 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_add};

static mp_obj_t py_image_sub(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    
# 2498 "omv/py/py_image.c" 3 4
   _Bool 
# 2498 "omv/py/py_image.c"
        arg_reverse =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_reverse)) << 2) | 2)), 
# 2499 "omv/py/py_image.c" 3 4
                                                                                         0
# 2499 "omv/py/py_image.c"
                                                                                              );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_sub(arg_img, mp_obj_str_get_str(args[1]), 
# 2506 "omv/py/py_image.c" 3 4
                                                       ((void *)0)
# 2506 "omv/py/py_image.c"
                                                           , 0, arg_reverse, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_sub(arg_img, 
# 2508 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2508 "omv/py/py_image.c"
                              , py_helper_arg_to_image_mutable(args[1]), 0, arg_reverse, arg_msk);
    } else {
        imlib_sub(arg_img, 
# 2510 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2510 "omv/py/py_image.c"
                              , 
# 2510 "omv/py/py_image.c" 3 4
                                ((void *)0)
# 2510 "omv/py/py_image.c"
                                    ,
                  py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2511 "omv/py/py_image.c" 3 4
                                                                   ((void *)0)
# 2511 "omv/py/py_image.c"
                                                                       , 0),
                  arg_reverse, arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_sub_obj = {{&mp_type_fun_builtin_var}, 
# 2519 "omv/py/py_image.c" 3 4
      1
# 2519 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_sub};

static mp_obj_t py_image_mul(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    
# 2525 "omv/py/py_image.c" 3 4
   _Bool 
# 2525 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2526 "omv/py/py_image.c" 3 4
                                                                                        0
# 2526 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_mul(arg_img, mp_obj_str_get_str(args[1]), 
# 2533 "omv/py/py_image.c" 3 4
                                                       ((void *)0)
# 2533 "omv/py/py_image.c"
                                                           , 0, arg_invert, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_mul(arg_img, 
# 2535 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2535 "omv/py/py_image.c"
                              , py_helper_arg_to_image_mutable(args[1]), 0, arg_invert, arg_msk);
    } else {
        imlib_mul(arg_img, 
# 2537 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2537 "omv/py/py_image.c"
                              , 
# 2537 "omv/py/py_image.c" 3 4
                                ((void *)0)
# 2537 "omv/py/py_image.c"
                                    ,
                  py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2538 "omv/py/py_image.c" 3 4
                                                                   ((void *)0)
# 2538 "omv/py/py_image.c"
                                                                       , 0),
                  arg_invert, arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_mul_obj = {{&mp_type_fun_builtin_var}, 
# 2546 "omv/py/py_image.c" 3 4
      1
# 2546 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_mul};

static mp_obj_t py_image_div(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    
# 2552 "omv/py/py_image.c" 3 4
   _Bool 
# 2552 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2553 "omv/py/py_image.c" 3 4
                                                                                        0
# 2553 "omv/py/py_image.c"
                                                                                             );
    
# 2554 "omv/py/py_image.c" 3 4
   _Bool 
# 2554 "omv/py/py_image.c"
        arg_mod =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mod)) << 2) | 2)), 
# 2555 "omv/py/py_image.c" 3 4
                                                                                     0
# 2555 "omv/py/py_image.c"
                                                                                          );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 4, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_div(arg_img, mp_obj_str_get_str(args[1]), 
# 2562 "omv/py/py_image.c" 3 4
                                                       ((void *)0)
# 2562 "omv/py/py_image.c"
                                                           , 0,
                  arg_invert, arg_mod, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_div(arg_img, 
# 2565 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2565 "omv/py/py_image.c"
                              , py_helper_arg_to_image_mutable(args[1]), 0,
                  arg_invert, arg_mod, arg_msk);
    } else {
        imlib_div(arg_img, 
# 2568 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2568 "omv/py/py_image.c"
                              , 
# 2568 "omv/py/py_image.c" 3 4
                                ((void *)0)
# 2568 "omv/py/py_image.c"
                                    ,
                  py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2569 "omv/py/py_image.c" 3 4
                                                                   ((void *)0)
# 2569 "omv/py/py_image.c"
                                                                       , 0),
                  arg_invert, arg_mod, arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_div_obj = {{&mp_type_fun_builtin_var}, 
# 2577 "omv/py/py_image.c" 3 4
      1
# 2577 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_div};

static mp_obj_t py_image_min(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_min(arg_img, mp_obj_str_get_str(args[1]), 
# 2589 "omv/py/py_image.c" 3 4
                                                       ((void *)0)
# 2589 "omv/py/py_image.c"
                                                           , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_min(arg_img, 
# 2591 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2591 "omv/py/py_image.c"
                              , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_min(arg_img, 
# 2593 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2593 "omv/py/py_image.c"
                              , 
# 2593 "omv/py/py_image.c" 3 4
                                ((void *)0)
# 2593 "omv/py/py_image.c"
                                    ,
                  py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2594 "omv/py/py_image.c" 3 4
                                                                   ((void *)0)
# 2594 "omv/py/py_image.c"
                                                                       , 0),
                  arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_min_obj = {{&mp_type_fun_builtin_var}, 
# 2602 "omv/py/py_image.c" 3 4
      1
# 2602 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_min};

static mp_obj_t py_image_max(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_max(arg_img, mp_obj_str_get_str(args[1]), 
# 2614 "omv/py/py_image.c" 3 4
                                                       ((void *)0)
# 2614 "omv/py/py_image.c"
                                                           , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_max(arg_img, 
# 2616 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2616 "omv/py/py_image.c"
                              , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_max(arg_img, 
# 2618 "omv/py/py_image.c" 3 4
                          ((void *)0)
# 2618 "omv/py/py_image.c"
                              , 
# 2618 "omv/py/py_image.c" 3 4
                                ((void *)0)
# 2618 "omv/py/py_image.c"
                                    ,
                  py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2619 "omv/py/py_image.c" 3 4
                                                                   ((void *)0)
# 2619 "omv/py/py_image.c"
                                                                       , 0),
                  arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_max_obj = {{&mp_type_fun_builtin_var}, 
# 2627 "omv/py/py_image.c" 3 4
      1
# 2627 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_max};

static mp_obj_t py_image_difference(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 2, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_difference(arg_img, mp_obj_str_get_str(args[1]), 
# 2639 "omv/py/py_image.c" 3 4
                                                              ((void *)0)
# 2639 "omv/py/py_image.c"
                                                                  , 0, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_difference(arg_img, 
# 2641 "omv/py/py_image.c" 3 4
                                 ((void *)0)
# 2641 "omv/py/py_image.c"
                                     , py_helper_arg_to_image_mutable(args[1]), 0, arg_msk);
    } else {
        imlib_difference(arg_img, 
# 2643 "omv/py/py_image.c" 3 4
                                 ((void *)0)
# 2643 "omv/py/py_image.c"
                                     , 
# 2643 "omv/py/py_image.c" 3 4
                                       ((void *)0)
# 2643 "omv/py/py_image.c"
                                           ,
                         py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2644 "omv/py/py_image.c" 3 4
                                                                          ((void *)0)
# 2644 "omv/py/py_image.c"
                                                                              , 0),
                         arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_difference_obj = {{&mp_type_fun_builtin_var}, 
# 2652 "omv/py/py_image.c" 3 4
      1
# 2652 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_difference};

static mp_obj_t py_image_blend(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    float arg_alpha =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_alpha)) << 2) | 2)), 128) / 256.0f;
    do { if (((0 <= arg_alpha) && (arg_alpha <= 1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0 <= alpha <= 256!"))); } while (0); } } while(0);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_blend(arg_img, mp_obj_str_get_str(args[1]), 
# 2667 "omv/py/py_image.c" 3 4
                                                         ((void *)0)
# 2667 "omv/py/py_image.c"
                                                             , 0, arg_alpha, arg_msk);
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_blend(arg_img, 
# 2669 "omv/py/py_image.c" 3 4
                            ((void *)0)
# 2669 "omv/py/py_image.c"
                                , py_helper_arg_to_image_mutable(args[1]), 0, arg_alpha, arg_msk);
    } else {
        imlib_blend(arg_img, 
# 2671 "omv/py/py_image.c" 3 4
                            ((void *)0)
# 2671 "omv/py/py_image.c"
                                , 
# 2671 "omv/py/py_image.c" 3 4
                                  ((void *)0)
# 2671 "omv/py/py_image.c"
                                      ,
                    py_helper_keyword_color(arg_img, n_args, args, 1, 
# 2672 "omv/py/py_image.c" 3 4
                                                                     ((void *)0)
# 2672 "omv/py/py_image.c"
                                                                         , 0),
                    arg_alpha, arg_msk);
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_blend_obj = {{&mp_type_fun_builtin_var}, 
# 2680 "omv/py/py_image.c" 3 4
      1
# 2680 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_blend};






static mp_obj_t py_image_histeq(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    
# 2691 "omv/py/py_image.c" 3 4
   _Bool 
# 2691 "omv/py/py_image.c"
        arg_adaptive =
        py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_adaptive)) << 2) | 2)), 
# 2692 "omv/py/py_image.c" 3 4
                                                                                          0
# 2692 "omv/py/py_image.c"
                                                                                               );
    float arg_clip_limit =
        py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_clip_limit)) << 2) | 2)), -1);
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();
    if (arg_adaptive) imlib_clahe_histeq(arg_img, arg_clip_limit, arg_msk); else imlib_histeq(arg_img, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_histeq_obj = {{&mp_type_fun_builtin_var}, 
# 2703 "omv/py/py_image.c" 3 4
      1
# 2703 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_histeq};


static mp_obj_t py_image_mean(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    
# 2712 "omv/py/py_image.c" 3 4
   _Bool 
# 2712 "omv/py/py_image.c"
        arg_threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 
# 2713 "omv/py/py_image.c" 3 4
                                                                                           0
# 2713 "omv/py/py_image.c"
                                                                                                );
    int arg_offset =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_offset)) << 2) | 2)), 0);
    
# 2716 "omv/py/py_image.c" 3 4
   _Bool 
# 2716 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2717 "omv/py/py_image.c" 3 4
                                                                                        0
# 2717 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 5, kw_args);

    fb_alloc_mark();
    imlib_mean_filter(arg_img, arg_ksize, arg_threshold, arg_offset, arg_invert, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_mean_obj = {{&mp_type_fun_builtin_var}, 
# 2726 "omv/py/py_image.c" 3 4
      1
# 2726 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_mean};



static mp_obj_t py_image_median(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    float arg_percentile =
        py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_percentile)) << 2) | 2)), 0.5f);
    do { if (((0 <= arg_percentile) && (arg_percentile <= 1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0 <= percentile <= 1!"))); } while (0); } } while(0);
    
# 2739 "omv/py/py_image.c" 3 4
   _Bool 
# 2739 "omv/py/py_image.c"
        arg_threshold =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 
# 2740 "omv/py/py_image.c" 3 4
                                                                                           0
# 2740 "omv/py/py_image.c"
                                                                                                );
    int arg_offset =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_offset)) << 2) | 2)), 0);
    
# 2743 "omv/py/py_image.c" 3 4
   _Bool 
# 2743 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2744 "omv/py/py_image.c" 3 4
                                                                                        0
# 2744 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 6, kw_args);

    fb_alloc_mark();
    imlib_median_filter(arg_img, arg_ksize, arg_percentile, arg_threshold, arg_offset, arg_invert, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_median_obj = {{&mp_type_fun_builtin_var}, 
# 2753 "omv/py/py_image.c" 3 4
      1
# 2753 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_median};



static mp_obj_t py_image_mode(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    
# 2763 "omv/py/py_image.c" 3 4
   _Bool 
# 2763 "omv/py/py_image.c"
        arg_threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 
# 2764 "omv/py/py_image.c" 3 4
                                                                                           0
# 2764 "omv/py/py_image.c"
                                                                                                );
    int arg_offset =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_offset)) << 2) | 2)), 0);
    
# 2767 "omv/py/py_image.c" 3 4
   _Bool 
# 2767 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2768 "omv/py/py_image.c" 3 4
                                                                                        0
# 2768 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 5, kw_args);

    fb_alloc_mark();
    imlib_mode_filter(arg_img, arg_ksize, arg_threshold, arg_offset, arg_invert, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_mode_obj = {{&mp_type_fun_builtin_var}, 
# 2777 "omv/py/py_image.c" 3 4
      1
# 2777 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_mode};



static mp_obj_t py_image_midpoint(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    float arg_bias =
        py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bias)) << 2) | 2)), 0.5f);
    do { if (((0 <= arg_bias) && (arg_bias <= 1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0 <= bias <= 1!"))); } while (0); } } while(0);
    
# 2790 "omv/py/py_image.c" 3 4
   _Bool 
# 2790 "omv/py/py_image.c"
        arg_threshold =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 
# 2791 "omv/py/py_image.c" 3 4
                                                                                           0
# 2791 "omv/py/py_image.c"
                                                                                                );
    int arg_offset =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_offset)) << 2) | 2)), 0);
    
# 2794 "omv/py/py_image.c" 3 4
   _Bool 
# 2794 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2795 "omv/py/py_image.c" 3 4
                                                                                        0
# 2795 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 6, kw_args);

    fb_alloc_mark();
    imlib_midpoint_filter(arg_img, arg_ksize, arg_bias, arg_threshold, arg_offset, arg_invert, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_midpoint_obj = {{&mp_type_fun_builtin_var}, 
# 2804 "omv/py/py_image.c" 3 4
      1
# 2804 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_midpoint};



static mp_obj_t py_image_morph(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);

    int n = py_helper_ksize_to_n(arg_ksize);

    mp_obj_t *krn;
    mp_obj_get_array_fixed_n(args[2], n, &krn);

    fb_alloc_mark();

    int *arg_krn = fb_alloc(n * sizeof(int));
    int arg_m = 0;

    for (int i = 0; i < n; i++) {
        arg_krn[i] = mp_obj_get_int(krn[i]);
        arg_m += arg_krn[i];
    }

    if (arg_m == 0) {
        arg_m = 1;
    }

    float arg_mul =
        py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mul)) << 2) | 2)), 1.0f / arg_m);
    float arg_add =
        py_helper_keyword_float(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_add)) << 2) | 2)), 0.0f);
    
# 2838 "omv/py/py_image.c" 3 4
   _Bool 
# 2838 "omv/py/py_image.c"
        arg_threshold =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 
# 2839 "omv/py/py_image.c" 3 4
                                                                                           0
# 2839 "omv/py/py_image.c"
                                                                                                );
    int arg_offset =
        py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_offset)) << 2) | 2)), 0);
    
# 2842 "omv/py/py_image.c" 3 4
   _Bool 
# 2842 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 7, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2843 "omv/py/py_image.c" 3 4
                                                                                        0
# 2843 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 8, kw_args);

    imlib_morph(arg_img, arg_ksize, arg_krn, arg_mul, arg_add, arg_threshold, arg_offset, arg_invert, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_morph_obj = {{&mp_type_fun_builtin_var}, 
# 2851 "omv/py/py_image.c" 3 4
      1
# 2851 "omv/py/py_image.c"
      , 3, (0xffff), .fun.kw = py_image_morph};



static mp_obj_t py_image_gaussian(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);

    int k_2 = arg_ksize * 2;
    int n = k_2 + 1;

    fb_alloc_mark();

    int *pascal = fb_alloc(n * sizeof(int));
    pascal[0] = 1;

    for (int i = 0; i < k_2; i++) {
        pascal[i + 1] = (pascal[i] * (k_2 - i)) / (i + 1);
    }

    int *arg_krn = fb_alloc(n * n * sizeof(int));
    int arg_m = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int temp = pascal[i] * pascal[j];
            arg_krn[(i * n) + j] = temp;
            arg_m += temp;
        }
    }

    if (py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_unsharp)) << 2) | 2)), 
# 2885 "omv/py/py_image.c" 3 4
                                                                                         0
# 2885 "omv/py/py_image.c"
                                                                                              )) {
        arg_krn[((n/2)*n)+(n/2)] -= arg_m * 2;
        arg_m = -arg_m;
    }

    float arg_mul =
        py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mul)) << 2) | 2)), 1.0f / arg_m);
    float arg_add =
        py_helper_keyword_float(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_add)) << 2) | 2)), 0.0f);
    
# 2894 "omv/py/py_image.c" 3 4
   _Bool 
# 2894 "omv/py/py_image.c"
        arg_threshold =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 
# 2895 "omv/py/py_image.c" 3 4
                                                                                           0
# 2895 "omv/py/py_image.c"
                                                                                                );
    int arg_offset =
        py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_offset)) << 2) | 2)), 0);
    
# 2898 "omv/py/py_image.c" 3 4
   _Bool 
# 2898 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 7, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2899 "omv/py/py_image.c" 3 4
                                                                                        0
# 2899 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 8, kw_args);

    imlib_morph(arg_img, arg_ksize, arg_krn, arg_mul, arg_add, arg_threshold, arg_offset, arg_invert, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_gaussian_obj = {{&mp_type_fun_builtin_var}, 
# 2907 "omv/py/py_image.c" 3 4
      1
# 2907 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_gaussian};



static mp_obj_t py_image_laplacian(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);

    int k_2 = arg_ksize * 2;
    int n = k_2 + 1;

    fb_alloc_mark();

    int *pascal = fb_alloc(n * sizeof(int));
    pascal[0] = 1;

    for (int i = 0; i < k_2; i++) {
        pascal[i + 1] = (pascal[i] * (k_2 - i)) / (i + 1);
    }

    int *arg_krn = fb_alloc(n * n * sizeof(int));
    int arg_m = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int temp = pascal[i] * pascal[j];
            arg_krn[(i * n) + j] = -temp;
            arg_m += temp;
        }
    }

    arg_krn[((n/2)*n)+(n/2)] += arg_m;
    arg_m = arg_krn[((n/2)*n)+(n/2)];

    if (py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_sharpen)) << 2) | 2)), 
# 2944 "omv/py/py_image.c" 3 4
                                                                                         0
# 2944 "omv/py/py_image.c"
                                                                                              )) {
        arg_krn[((n/2)*n)+(n/2)] += arg_m;
    }

    float arg_mul =
        py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mul)) << 2) | 2)), 1.0f / arg_m);
    float arg_add =
        py_helper_keyword_float(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_add)) << 2) | 2)), 0.0f);
    
# 2952 "omv/py/py_image.c" 3 4
   _Bool 
# 2952 "omv/py/py_image.c"
        arg_threshold =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 
# 2953 "omv/py/py_image.c" 3 4
                                                                                           0
# 2953 "omv/py/py_image.c"
                                                                                                );
    int arg_offset =
        py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_offset)) << 2) | 2)), 0);
    
# 2956 "omv/py/py_image.c" 3 4
   _Bool 
# 2956 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 7, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2957 "omv/py/py_image.c" 3 4
                                                                                        0
# 2957 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 8, kw_args);

    imlib_morph(arg_img, arg_ksize, arg_krn, arg_mul, arg_add, arg_threshold, arg_offset, arg_invert, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_laplacian_obj = {{&mp_type_fun_builtin_var}, 
# 2965 "omv/py/py_image.c" 3 4
      1
# 2965 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_laplacian};


static mp_obj_t py_image_bilateral(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    int arg_ksize =
        py_helper_arg_to_ksize(args[1]);
    float arg_color_sigma =
        py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_color_sigma)) << 2) | 2)), 0.1);
    float arg_space_sigma =
        py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_space_sigma)) << 2) | 2)), 1);
    
# 2978 "omv/py/py_image.c" 3 4
   _Bool 
# 2978 "omv/py/py_image.c"
        arg_threshold =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 
# 2979 "omv/py/py_image.c" 3 4
                                                                                           0
# 2979 "omv/py/py_image.c"
                                                                                                );
    int arg_offset =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_offset)) << 2) | 2)), 0);
    
# 2982 "omv/py/py_image.c" 3 4
   _Bool 
# 2982 "omv/py/py_image.c"
        arg_invert =
        py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 2983 "omv/py/py_image.c" 3 4
                                                                                        0
# 2983 "omv/py/py_image.c"
                                                                                             );
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 7, kw_args);

    fb_alloc_mark();
    imlib_bilateral_filter(arg_img, arg_ksize, arg_color_sigma, arg_space_sigma, arg_threshold, arg_offset, arg_invert, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_bilateral_obj = {{&mp_type_fun_builtin_var}, 
# 2992 "omv/py/py_image.c" 3 4
      1
# 2992 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_bilateral};



static mp_obj_t py_image_cartoon(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    float arg_seed_threshold =
        py_helper_keyword_float(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_seed_threshold)) << 2) | 2)), 0.05);
    do { if (((0.0f <= arg_seed_threshold) && (arg_seed_threshold <= 1.0f)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0.0 <= seed_threshold <= 1.0!"))); } while (0); } } while(0)
                                                              ;
    float arg_floating_threshold =
        py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_floating_threshold)) << 2) | 2)), 0.05);
    do { if (((0.0f <= arg_floating_threshold) && (arg_floating_threshold <= 1.0f)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Error: 0.0 <= floating_threshold <= 1.0!"))); } while (0); } } while(0)
                                                                  ;
    image_t *arg_msk =
        py_helper_keyword_to_image_mutable_mask(n_args, args, 3, kw_args);

    fb_alloc_mark();
    imlib_cartoon_filter(arg_img, arg_seed_threshold, arg_floating_threshold, arg_msk);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_cartoon_obj = {{&mp_type_fun_builtin_var}, 
# 3016 "omv/py/py_image.c" 3 4
      1
# 3016 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_cartoon};






static mp_obj_t py_image_remove_shadows(uint n_args, const mp_obj_t *args)
{
    image_t *arg_img =
        py_helper_arg_to_image_color(args[0]);

    fb_alloc_mark();

    if (n_args < 2) {
        imlib_remove_shadows(arg_img, 
# 3031 "omv/py/py_image.c" 3 4
                                     ((void *)0)
# 3031 "omv/py/py_image.c"
                                         , 
# 3031 "omv/py/py_image.c" 3 4
                                           ((void *)0)
# 3031 "omv/py/py_image.c"
                                               , 0, 
# 3031 "omv/py/py_image.c" 3 4
                                                    1
# 3031 "omv/py/py_image.c"
                                                        );
    } else if ((MP_OBJ_IS_QSTR(args[1]) || (MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&mp_type_str))))) {
        imlib_remove_shadows(arg_img, mp_obj_str_get_str(args[1]), 
# 3033 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 3033 "omv/py/py_image.c"
                                                                      , 0, 
# 3033 "omv/py/py_image.c" 3 4
                                                                           0
# 3033 "omv/py/py_image.c"
                                                                                );
    } else if ((MP_OBJ_IS_OBJ(args[1]) && (((mp_obj_base_t*)((void*)args[1]))->type == (&py_image_type)))) {
        imlib_remove_shadows(arg_img, 
# 3035 "omv/py/py_image.c" 3 4
                                     ((void *)0)
# 3035 "omv/py/py_image.c"
                                         , py_helper_arg_to_image_color(args[1]), 0, 
# 3035 "omv/py/py_image.c" 3 4
                                                                                     0
# 3035 "omv/py/py_image.c"
                                                                                          );
    } else {
        imlib_remove_shadows(arg_img, 
# 3037 "omv/py/py_image.c" 3 4
                                     ((void *)0)
# 3037 "omv/py/py_image.c"
                                         , 
# 3037 "omv/py/py_image.c" 3 4
                                           ((void *)0)
# 3037 "omv/py/py_image.c"
                                               ,
                             py_helper_keyword_color(arg_img, n_args, args, 1, 
# 3038 "omv/py/py_image.c" 3 4
                                                                              ((void *)0)
# 3038 "omv/py/py_image.c"
                                                                                  , 0),
                             
# 3039 "omv/py/py_image.c" 3 4
                            0
# 3039 "omv/py/py_image.c"
                                 );
    }

    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_remove_shadows_obj = {{&mp_type_fun_builtin_var}, 
# 3046 "omv/py/py_image.c" 3 4
      0
# 3046 "omv/py/py_image.c"
      , 1, 2, .fun.var = py_image_remove_shadows};



static mp_obj_t py_image_chrominvar(mp_obj_t img_obj)
{
        fb_alloc_mark();
    imlib_chrominvar(py_helper_arg_to_image_color(img_obj));
        fb_alloc_free_till_mark();
    return img_obj;
}
static const mp_obj_fun_builtin_fixed_t py_image_chrominvar_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_chrominvar};



static mp_obj_t py_image_illuminvar(mp_obj_t img_obj)
{
        fb_alloc_mark();
    imlib_illuminvar(py_helper_arg_to_image_color(img_obj));
        fb_alloc_free_till_mark();
    return img_obj;
}
static const mp_obj_fun_builtin_fixed_t py_image_illuminvar_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_illuminvar};







static mp_obj_t py_image_linpolar(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    
# 3080 "omv/py/py_image.c" 3 4
   _Bool 
# 3080 "omv/py/py_image.c"
        arg_reverse =
        py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_reverse)) << 2) | 2)), 
# 3081 "omv/py/py_image.c" 3 4
                                                                                         0
# 3081 "omv/py/py_image.c"
                                                                                              );

    fb_alloc_mark();
    imlib_logpolar(arg_img, 
# 3084 "omv/py/py_image.c" 3 4
                           1
# 3084 "omv/py/py_image.c"
                               , arg_reverse);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_linpolar_obj = {{&mp_type_fun_builtin_var}, 
# 3088 "omv/py/py_image.c" 3 4
      1
# 3088 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_linpolar};



static mp_obj_t py_image_logpolar(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    
# 3096 "omv/py/py_image.c" 3 4
   _Bool 
# 3096 "omv/py/py_image.c"
        arg_reverse =
        py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_reverse)) << 2) | 2)), 
# 3097 "omv/py/py_image.c" 3 4
                                                                                         0
# 3097 "omv/py/py_image.c"
                                                                                              );

    fb_alloc_mark();
    imlib_logpolar(arg_img, 
# 3100 "omv/py/py_image.c" 3 4
                           0
# 3100 "omv/py/py_image.c"
                                , arg_reverse);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_logpolar_obj = {{&mp_type_fun_builtin_var}, 
# 3104 "omv/py/py_image.c" 3 4
      1
# 3104 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_logpolar};


static mp_obj_t py_image_lens_corr(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    float arg_strength =
        py_helper_keyword_float(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_strength)) << 2) | 2)), 1.8);
    do { if ((arg_strength > 0.0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Strength must be > 0!"))); } while (0); } } while(0);
    float arg_zoom =
        py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_zoom)) << 2) | 2)), 1.0);
    do { if ((arg_zoom > 0.0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Zoom must be > 0!"))); } while (0); } } while(0);

    fb_alloc_mark();
    imlib_lens_corr(arg_img, arg_strength, arg_zoom);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_lens_corr_obj = {{&mp_type_fun_builtin_var}, 
# 3123 "omv/py/py_image.c" 3 4
      1
# 3123 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_lens_corr};


static mp_obj_t py_image_rotation_corr(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img =
        py_helper_arg_to_image_mutable(args[0]);
    float arg_x_rotation =
        (((py_helper_keyword_float(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_rotation)) << 2) | 2)), 0.0))*3.141592654f)/180);
    float arg_y_rotation =
        (((py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_rotation)) << 2) | 2)), 0.0))*3.141592654f)/180);
    float arg_z_rotation =
        (((py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_z_rotation)) << 2) | 2)), 0.0))*3.141592654f)/180);
    float arg_x_translation =
        py_helper_keyword_float(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_translation)) << 2) | 2)), 0.0);
    float arg_y_translation =
        py_helper_keyword_float(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_translation)) << 2) | 2)), 0.0);
    float arg_zoom =
        py_helper_keyword_float(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_zoom)) << 2) | 2)), 1.0);
    do { if ((arg_zoom > 0.0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Zoom must be > 0!"))); } while (0); } } while(0);

    fb_alloc_mark();
    imlib_rotation_corr(arg_img,
                        arg_x_rotation, arg_y_rotation, arg_z_rotation,
                        arg_x_translation, arg_y_translation,
                        arg_zoom);
    fb_alloc_free_till_mark();
    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_rotation_corr_obj = {{&mp_type_fun_builtin_var}, 
# 3152 "omv/py/py_image.c" 3 4
      1
# 3152 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_rotation_corr};
# 3162 "omv/py/py_image.c"
typedef struct py_similarity_obj {
    mp_obj_base_t base;
    mp_obj_t avg, std, min, max;
} py_similarity_obj_t;

static void py_similarity_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_similarity_obj_t *self = self_in;
    mp_printf(print,
              "{\"mean\":%f, \"stdev\":%f, \"min\":%f, \"max\":%f}",
              (double) mp_obj_get_float(self->avg),
              (double) mp_obj_get_float(self->std),
              (double) mp_obj_get_float(self->min),
              (double) mp_obj_get_float(self->max));
}

static mp_obj_t py_similarity_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_similarity_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(4, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 3187 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 3187 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->avg) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 4, index, 
# 3191 "omv/py/py_image.c" 3 4
                                                                            0
# 3191 "omv/py/py_image.c"
                                                                                 )) {
            case 0: return self->avg;
            case 1: return self->std;
            case 2: return self->min;
            case 3: return self->max;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_similarity_mean(mp_obj_t self_in) { return ((py_similarity_obj_t *) self_in)->avg; }
mp_obj_t py_similarity_stdev(mp_obj_t self_in) { return ((py_similarity_obj_t *) self_in)->std; }
mp_obj_t py_similarity_min(mp_obj_t self_in) { return ((py_similarity_obj_t *) self_in)->min; }
mp_obj_t py_similarity_max(mp_obj_t self_in) { return ((py_similarity_obj_t *) self_in)->max; }

static const mp_obj_fun_builtin_fixed_t py_similarity_mean_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_similarity_mean};
static const mp_obj_fun_builtin_fixed_t py_similarity_stdev_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_similarity_stdev};
static const mp_obj_fun_builtin_fixed_t py_similarity_min_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_similarity_min};
static const mp_obj_fun_builtin_fixed_t py_similarity_max_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_similarity_max};

static const mp_rom_map_elem_t py_similarity_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mean)) << 2) | 2)), (&py_similarity_mean_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_stdev)) << 2) | 2)), (&py_similarity_stdev_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_min)) << 2) | 2)), (&py_similarity_min_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_max)) << 2) | 2)), (&py_similarity_max_obj) }
};

static const mp_obj_dict_t py_similarity_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_similarity_locals_dict_table) / sizeof((py_similarity_locals_dict_table)[0])), .alloc = (sizeof(py_similarity_locals_dict_table) / sizeof((py_similarity_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_similarity_locals_dict_table, }, };

static const mp_obj_type_t py_similarity_type = {
    { &mp_type_type },
    .name = MP_QSTR_similarity,
    .print = py_similarity_print,
    .subscr = py_similarity_subscr,
    .locals_dict = (mp_obj_t) &py_similarity_locals_dict
};

static mp_obj_t py_image_get_similarity(mp_obj_t img_obj, mp_obj_t other_obj)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(img_obj);
    float avg, std, min, max;

        fb_alloc_mark();

    if ((MP_OBJ_IS_QSTR(other_obj) || (MP_OBJ_IS_OBJ(other_obj) && (((mp_obj_base_t*)((void*)other_obj))->type == (&mp_type_str))))) {
        imlib_get_similarity(arg_img, mp_obj_str_get_str(other_obj), 
# 3236 "omv/py/py_image.c" 3 4
                                                                    ((void *)0)
# 3236 "omv/py/py_image.c"
                                                                        , 0, &avg, &std, &min, &max);
    } else if ((MP_OBJ_IS_OBJ(other_obj) && (((mp_obj_base_t*)((void*)other_obj))->type == (&py_image_type)))) {
        imlib_get_similarity(arg_img, 
# 3238 "omv/py/py_image.c" 3 4
                                     ((void *)0)
# 3238 "omv/py/py_image.c"
                                         , py_helper_arg_to_image_mutable(other_obj), 0, &avg, &std, &min, &max);
    } else {
        imlib_get_similarity(arg_img, 
# 3240 "omv/py/py_image.c" 3 4
                                     ((void *)0)
# 3240 "omv/py/py_image.c"
                                         , 
# 3240 "omv/py/py_image.c" 3 4
                                           ((void *)0)
# 3240 "omv/py/py_image.c"
                                               ,
                             py_helper_keyword_color(arg_img, 1, &other_obj, 0, 
# 3241 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 3241 "omv/py/py_image.c"
                                                                                   , 0),
                             &avg, &std, &min, &max);
    }

    fb_alloc_free_till_mark();

    py_similarity_obj_t *o = (((py_similarity_obj_t*)(m_malloc(sizeof(py_similarity_obj_t) * (1)))));
    o->base.type = &py_similarity_type;
    o->avg = mp_obj_new_float(avg);
    o->std = mp_obj_new_float(std);
    o->min = mp_obj_new_float(min);
    o->max = mp_obj_new_float(max);
    return o;
}
static const mp_obj_fun_builtin_fixed_t py_image_get_similarity_obj = {{&mp_type_fun_builtin_2}, .fun._2 = py_image_get_similarity};




typedef struct py_statistics_obj {
    mp_obj_base_t base;
    image_bpp_t bpp;
    mp_obj_t LMean, LMedian, LMode, LSTDev, LMin, LMax, LLQ, LUQ,
        AMean, AMedian, AMode, ASTDev, AMin, AMax, ALQ, AUQ,
        BMean, BMedian, BMode, BSTDev, BMin, BMax, BLQ, BUQ;
} py_statistics_obj_t;

static void py_statistics_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_statistics_obj_t *self = self_in;
    switch(self->bpp) {
        case IMAGE_BPP_BINARY: {
            mp_printf(print, "{\"mean\":%d, \"median\":%d, \"mode\":%d, \"stdev\":%d, \"min\":%d, \"max\":%d, \"lq\":%d, \"uq\":%d}",
                      mp_obj_get_int(self->LMean),
                      mp_obj_get_int(self->LMedian),
                      mp_obj_get_int(self->LMode),
                      mp_obj_get_int(self->LSTDev),
                      mp_obj_get_int(self->LMin),
                      mp_obj_get_int(self->LMax),
                      mp_obj_get_int(self->LLQ),
                      mp_obj_get_int(self->LUQ));
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            mp_printf(print, "{\"mean\":%d, \"median\":%d, \"mode\":%d, \"stdev\":%d, \"min\":%d, \"max\":%d, \"lq\":%d, \"uq\":%d}",
                      mp_obj_get_int(self->LMean),
                      mp_obj_get_int(self->LMedian),
                      mp_obj_get_int(self->LMode),
                      mp_obj_get_int(self->LSTDev),
                      mp_obj_get_int(self->LMin),
                      mp_obj_get_int(self->LMax),
                      mp_obj_get_int(self->LLQ),
                      mp_obj_get_int(self->LUQ));
            break;
        }
        case IMAGE_BPP_RGB565: {
            mp_printf(print, "{\"l_mean\":%d, \"l_median\":%d, \"l_mode\":%d, \"l_stdev\":%d, \"l_min\":%d, \"l_max\":%d, \"l_lq\":%d, \"l_uq\":%d,"
                             " \"a_mean\":%d, \"a_median\":%d, \"a_mode\":%d, \"a_stdev\":%d, \"a_min\":%d, \"a_max\":%d, \"a_lq\":%d, \"a_uq\":%d,"
                             " \"b_mean\":%d, \"b_median\":%d, \"b_mode\":%d, \"b_stdev\":%d, \"b_min\":%d, \"b_max\":%d, \"b_lq\":%d, \"b_uq\":%d}",
                      mp_obj_get_int(self->LMean),
                      mp_obj_get_int(self->LMedian),
                      mp_obj_get_int(self->LMode),
                      mp_obj_get_int(self->LSTDev),
                      mp_obj_get_int(self->LMin),
                      mp_obj_get_int(self->LMax),
                      mp_obj_get_int(self->LLQ),
                      mp_obj_get_int(self->LUQ),
                      mp_obj_get_int(self->AMean),
                      mp_obj_get_int(self->AMedian),
                      mp_obj_get_int(self->AMode),
                      mp_obj_get_int(self->ASTDev),
                      mp_obj_get_int(self->AMin),
                      mp_obj_get_int(self->AMax),
                      mp_obj_get_int(self->ALQ),
                      mp_obj_get_int(self->AUQ),
                      mp_obj_get_int(self->BMean),
                      mp_obj_get_int(self->BMedian),
                      mp_obj_get_int(self->BMode),
                      mp_obj_get_int(self->BSTDev),
                      mp_obj_get_int(self->BMin),
                      mp_obj_get_int(self->BMax),
                      mp_obj_get_int(self->BLQ),
                      mp_obj_get_int(self->BUQ));
            break;
        }
        default: {
            mp_printf(print, "{}");
            break;
        }
    }
}

static mp_obj_t py_statistics_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_statistics_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(24, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 3342 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 3342 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->LMean) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 24, index, 
# 3346 "omv/py/py_image.c" 3 4
                                                                            0
# 3346 "omv/py/py_image.c"
                                                                                 )) {
            case 0: return self->LMean;
            case 1: return self->LMedian;
            case 2: return self->LMode;
            case 3: return self->LSTDev;
            case 4: return self->LMin;
            case 5: return self->LMax;
            case 6: return self->LLQ;
            case 7: return self->LUQ;
            case 8: return self->AMean;
            case 9: return self->AMedian;
            case 10: return self->AMode;
            case 11: return self->ASTDev;
            case 12: return self->AMin;
            case 13: return self->AMax;
            case 14: return self->ALQ;
            case 15: return self->AUQ;
            case 16: return self->BMean;
            case 17: return self->BMedian;
            case 18: return self->BMode;
            case 19: return self->BSTDev;
            case 20: return self->BMin;
            case 21: return self->BMax;
            case 22: return self->BLQ;
            case 23: return self->BUQ;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_statistics_mean(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMean; }
mp_obj_t py_statistics_median(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMedian; }
mp_obj_t py_statistics_mode(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMode; }
mp_obj_t py_statistics_stdev(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LSTDev; }
mp_obj_t py_statistics_min(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMin; }
mp_obj_t py_statistics_max(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMax; }
mp_obj_t py_statistics_lq(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LLQ; }
mp_obj_t py_statistics_uq(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LUQ; }
mp_obj_t py_statistics_l_mean(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMean; }
mp_obj_t py_statistics_l_median(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMedian; }
mp_obj_t py_statistics_l_mode(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMode; }
mp_obj_t py_statistics_l_stdev(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LSTDev; }
mp_obj_t py_statistics_l_min(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMin; }
mp_obj_t py_statistics_l_max(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LMax; }
mp_obj_t py_statistics_l_lq(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LLQ; }
mp_obj_t py_statistics_l_uq(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->LUQ; }
mp_obj_t py_statistics_a_mean(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->AMean; }
mp_obj_t py_statistics_a_median(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->AMedian; }
mp_obj_t py_statistics_a_mode(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->AMode; }
mp_obj_t py_statistics_a_stdev(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->ASTDev; }
mp_obj_t py_statistics_a_min(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->AMin; }
mp_obj_t py_statistics_a_max(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->AMax; }
mp_obj_t py_statistics_a_lq(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->ALQ; }
mp_obj_t py_statistics_a_uq(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->AUQ; }
mp_obj_t py_statistics_b_mean(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->BMean; }
mp_obj_t py_statistics_b_median(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->BMedian; }
mp_obj_t py_statistics_b_mode(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->BMode; }
mp_obj_t py_statistics_b_stdev(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->BSTDev; }
mp_obj_t py_statistics_b_min(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->BMin; }
mp_obj_t py_statistics_b_max(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->BMax; }
mp_obj_t py_statistics_b_lq(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->BLQ; }
mp_obj_t py_statistics_b_uq(mp_obj_t self_in) { return ((py_statistics_obj_t *) self_in)->BUQ; }

static const mp_obj_fun_builtin_fixed_t py_statistics_mean_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_mean};
static const mp_obj_fun_builtin_fixed_t py_statistics_median_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_median};
static const mp_obj_fun_builtin_fixed_t py_statistics_mode_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_mode};
static const mp_obj_fun_builtin_fixed_t py_statistics_stdev_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_stdev};
static const mp_obj_fun_builtin_fixed_t py_statistics_min_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_min};
static const mp_obj_fun_builtin_fixed_t py_statistics_max_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_max};
static const mp_obj_fun_builtin_fixed_t py_statistics_lq_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_lq};
static const mp_obj_fun_builtin_fixed_t py_statistics_uq_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_uq};
static const mp_obj_fun_builtin_fixed_t py_statistics_l_mean_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_l_mean};
static const mp_obj_fun_builtin_fixed_t py_statistics_l_median_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_l_median};
static const mp_obj_fun_builtin_fixed_t py_statistics_l_mode_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_l_mode};
static const mp_obj_fun_builtin_fixed_t py_statistics_l_stdev_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_l_stdev};
static const mp_obj_fun_builtin_fixed_t py_statistics_l_min_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_l_min};
static const mp_obj_fun_builtin_fixed_t py_statistics_l_max_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_l_max};
static const mp_obj_fun_builtin_fixed_t py_statistics_l_lq_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_l_lq};
static const mp_obj_fun_builtin_fixed_t py_statistics_l_uq_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_l_uq};
static const mp_obj_fun_builtin_fixed_t py_statistics_a_mean_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_a_mean};
static const mp_obj_fun_builtin_fixed_t py_statistics_a_median_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_a_median};
static const mp_obj_fun_builtin_fixed_t py_statistics_a_mode_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_a_mode};
static const mp_obj_fun_builtin_fixed_t py_statistics_a_stdev_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_a_stdev};
static const mp_obj_fun_builtin_fixed_t py_statistics_a_min_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_a_min};
static const mp_obj_fun_builtin_fixed_t py_statistics_a_max_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_a_max};
static const mp_obj_fun_builtin_fixed_t py_statistics_a_lq_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_a_lq};
static const mp_obj_fun_builtin_fixed_t py_statistics_a_uq_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_a_uq};
static const mp_obj_fun_builtin_fixed_t py_statistics_b_mean_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_b_mean};
static const mp_obj_fun_builtin_fixed_t py_statistics_b_median_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_b_median};
static const mp_obj_fun_builtin_fixed_t py_statistics_b_mode_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_b_mode};
static const mp_obj_fun_builtin_fixed_t py_statistics_b_stdev_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_b_stdev};
static const mp_obj_fun_builtin_fixed_t py_statistics_b_min_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_b_min};
static const mp_obj_fun_builtin_fixed_t py_statistics_b_max_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_b_max};
static const mp_obj_fun_builtin_fixed_t py_statistics_b_lq_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_b_lq};
static const mp_obj_fun_builtin_fixed_t py_statistics_b_uq_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_statistics_b_uq};

static const mp_rom_map_elem_t py_statistics_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mean)) << 2) | 2)), (&py_statistics_mean_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_median)) << 2) | 2)), (&py_statistics_median_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mode)) << 2) | 2)), (&py_statistics_mode_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_stdev)) << 2) | 2)), (&py_statistics_stdev_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_min)) << 2) | 2)), (&py_statistics_min_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_max)) << 2) | 2)), (&py_statistics_max_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_lq)) << 2) | 2)), (&py_statistics_lq_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_uq)) << 2) | 2)), (&py_statistics_uq_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_mean)) << 2) | 2)), (&py_statistics_l_mean_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_median)) << 2) | 2)), (&py_statistics_l_median_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_mode)) << 2) | 2)), (&py_statistics_l_mode_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_stdev)) << 2) | 2)), (&py_statistics_l_stdev_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_min)) << 2) | 2)), (&py_statistics_l_min_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_max)) << 2) | 2)), (&py_statistics_l_max_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_lq)) << 2) | 2)), (&py_statistics_l_lq_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_uq)) << 2) | 2)), (&py_statistics_l_uq_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_mean)) << 2) | 2)), (&py_statistics_a_mean_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_median)) << 2) | 2)), (&py_statistics_a_median_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_mode)) << 2) | 2)), (&py_statistics_a_mode_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_stdev)) << 2) | 2)), (&py_statistics_a_stdev_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_min)) << 2) | 2)), (&py_statistics_a_min_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_max)) << 2) | 2)), (&py_statistics_a_max_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_lq)) << 2) | 2)), (&py_statistics_a_lq_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_uq)) << 2) | 2)), (&py_statistics_a_uq_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_mean)) << 2) | 2)), (&py_statistics_b_mean_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_median)) << 2) | 2)), (&py_statistics_b_median_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_mode)) << 2) | 2)), (&py_statistics_b_mode_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_stdev)) << 2) | 2)), (&py_statistics_b_stdev_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_min)) << 2) | 2)), (&py_statistics_b_min_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_max)) << 2) | 2)), (&py_statistics_b_max_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_lq)) << 2) | 2)), (&py_statistics_b_lq_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_uq)) << 2) | 2)), (&py_statistics_b_uq_obj) }
};

static const mp_obj_dict_t py_statistics_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_statistics_locals_dict_table) / sizeof((py_statistics_locals_dict_table)[0])), .alloc = (sizeof(py_statistics_locals_dict_table) / sizeof((py_statistics_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_statistics_locals_dict_table, }, };

static const mp_obj_type_t py_statistics_type = {
    { &mp_type_type },
    .name = MP_QSTR_statistics,
    .print = py_statistics_print,
    .subscr = py_statistics_subscr,
    .locals_dict = (mp_obj_t) &py_statistics_locals_dict
};



typedef struct py_percentile_obj {
    mp_obj_base_t base;
    image_bpp_t bpp;
    mp_obj_t LValue, AValue, BValue;
} py_percentile_obj_t;

static void py_percentile_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_percentile_obj_t *self = self_in;
    switch(self->bpp) {
        case IMAGE_BPP_BINARY: {
            mp_printf(print, "{\"value\":%d}",
                      mp_obj_get_int(self->LValue));
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            mp_printf(print, "{\"value\":%d}",
                      mp_obj_get_int(self->LValue));
            break;
        }
        case IMAGE_BPP_RGB565: {
            mp_printf(print, "{\"l_value:%d\", \"a_value\":%d, \"b_value\":%d}",
                      mp_obj_get_int(self->LValue),
                      mp_obj_get_int(self->AValue),
                      mp_obj_get_int(self->BValue));
            break;
        }
        default: {
            mp_printf(print, "{}");
            break;
        }
    }
}

static mp_obj_t py_percentile_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_percentile_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(3, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 3532 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 3532 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->LValue) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 3, index, 
# 3536 "omv/py/py_image.c" 3 4
                                                                            0
# 3536 "omv/py/py_image.c"
                                                                                 )) {
            case 0: return self->LValue;
            case 1: return self->AValue;
            case 2: return self->BValue;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_percentile_value(mp_obj_t self_in) { return ((py_percentile_obj_t *) self_in)->LValue; }
mp_obj_t py_percentile_l_value(mp_obj_t self_in) { return ((py_percentile_obj_t *) self_in)->LValue; }
mp_obj_t py_percentile_a_value(mp_obj_t self_in) { return ((py_percentile_obj_t *) self_in)->AValue; }
mp_obj_t py_percentile_b_value(mp_obj_t self_in) { return ((py_percentile_obj_t *) self_in)->BValue; }

static const mp_obj_fun_builtin_fixed_t py_percentile_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_percentile_value};
static const mp_obj_fun_builtin_fixed_t py_percentile_l_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_percentile_l_value};
static const mp_obj_fun_builtin_fixed_t py_percentile_a_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_percentile_a_value};
static const mp_obj_fun_builtin_fixed_t py_percentile_b_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_percentile_b_value};

static const mp_rom_map_elem_t py_percentile_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_value)) << 2) | 2)), (&py_percentile_value_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_value)) << 2) | 2)), (&py_percentile_l_value_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_value)) << 2) | 2)), (&py_percentile_a_value_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_value)) << 2) | 2)), (&py_percentile_b_value_obj) }
};

static const mp_obj_dict_t py_percentile_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_percentile_locals_dict_table) / sizeof((py_percentile_locals_dict_table)[0])), .alloc = (sizeof(py_percentile_locals_dict_table) / sizeof((py_percentile_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_percentile_locals_dict_table, }, };

static const mp_obj_type_t py_percentile_type = {
    { &mp_type_type },
    .name = MP_QSTR_percentile,
    .print = py_percentile_print,
    .subscr = py_percentile_subscr,
    .locals_dict = (mp_obj_t) &py_percentile_locals_dict
};



typedef struct py_threshold_obj {
    mp_obj_base_t base;
    image_bpp_t bpp;
    mp_obj_t LValue, AValue, BValue;
} py_threshold_obj_t;

static void py_threshold_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_threshold_obj_t *self = self_in;
    switch(self->bpp) {
        case IMAGE_BPP_BINARY: {
            mp_printf(print, "{\"value\":%d}",
                      mp_obj_get_int(self->LValue));
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            mp_printf(print, "{\"value\":%d}",
                      mp_obj_get_int(self->LValue));
            break;
        }
        case IMAGE_BPP_RGB565: {
            mp_printf(print, "{\"l_value\":%d, \"a_value\":%d, \"b_value\":%d}",
                      mp_obj_get_int(self->LValue),
                      mp_obj_get_int(self->AValue),
                      mp_obj_get_int(self->BValue));
            break;
        }
        default: {
            mp_printf(print, "{}");
            break;
        }
    }
}

static mp_obj_t py_threshold_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_threshold_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(3, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 3617 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 3617 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->LValue) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 3, index, 
# 3621 "omv/py/py_image.c" 3 4
                                                                           0
# 3621 "omv/py/py_image.c"
                                                                                )) {
            case 0: return self->LValue;
            case 1: return self->AValue;
            case 2: return self->BValue;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_threshold_value(mp_obj_t self_in) { return ((py_threshold_obj_t *) self_in)->LValue; }
mp_obj_t py_threshold_l_value(mp_obj_t self_in) { return ((py_threshold_obj_t *) self_in)->LValue; }
mp_obj_t py_threshold_a_value(mp_obj_t self_in) { return ((py_threshold_obj_t *) self_in)->AValue; }
mp_obj_t py_threshold_b_value(mp_obj_t self_in) { return ((py_threshold_obj_t *) self_in)->BValue; }

static const mp_obj_fun_builtin_fixed_t py_threshold_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_threshold_value};
static const mp_obj_fun_builtin_fixed_t py_threshold_l_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_threshold_l_value};
static const mp_obj_fun_builtin_fixed_t py_threshold_a_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_threshold_a_value};
static const mp_obj_fun_builtin_fixed_t py_threshold_b_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_threshold_b_value};

static const mp_rom_map_elem_t py_threshold_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_value)) << 2) | 2)), (&py_threshold_value_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_value)) << 2) | 2)), (&py_threshold_l_value_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_value)) << 2) | 2)), (&py_threshold_a_value_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_value)) << 2) | 2)), (&py_threshold_b_value_obj) }
};

static const mp_obj_dict_t py_threshold_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_threshold_locals_dict_table) / sizeof((py_threshold_locals_dict_table)[0])), .alloc = (sizeof(py_threshold_locals_dict_table) / sizeof((py_threshold_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_threshold_locals_dict_table, }, };

static const mp_obj_type_t py_threshold_type = {
    { &mp_type_type },
    .name = MP_QSTR_threshold,
    .print = py_threshold_print,
    .subscr = py_threshold_subscr,
    .locals_dict = (mp_obj_t) &py_threshold_locals_dict
};



typedef struct py_histogram_obj {
    mp_obj_base_t base;
    image_bpp_t bpp;
    mp_obj_t LBins, ABins, BBins;
} py_histogram_obj_t;

static void py_histogram_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_histogram_obj_t *self = self_in;
    switch(self->bpp) {
        case IMAGE_BPP_BINARY: {
            mp_printf(print, "{\"bins\":");
            mp_obj_print_helper(print, self->LBins, kind);
            mp_printf(print, "}");
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            mp_printf(print, "{\"bins\":");
            mp_obj_print_helper(print, self->LBins, kind);
            mp_printf(print, "}");
            break;
        }
        case IMAGE_BPP_RGB565: {
            mp_printf(print, "{\"l_bins\":");
            mp_obj_print_helper(print, self->LBins, kind);
            mp_printf(print, ", \"a_bins\":");
            mp_obj_print_helper(print, self->ABins, kind);
            mp_printf(print, ", \"b_bins\":");
            mp_obj_print_helper(print, self->BBins, kind);
            mp_printf(print, "}");
            break;
        }
        default: {
            mp_printf(print, "{}");
            break;
        }
    }
}

static mp_obj_t py_histogram_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_histogram_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(3, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 3707 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 3707 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->LBins) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 3, index, 
# 3711 "omv/py/py_image.c" 3 4
                                                                           0
# 3711 "omv/py/py_image.c"
                                                                                )) {
            case 0: return self->LBins;
            case 1: return self->ABins;
            case 2: return self->BBins;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_histogram_bins(mp_obj_t self_in) { return ((py_histogram_obj_t *) self_in)->LBins; }
mp_obj_t py_histogram_l_bins(mp_obj_t self_in) { return ((py_histogram_obj_t *) self_in)->LBins; }
mp_obj_t py_histogram_a_bins(mp_obj_t self_in) { return ((py_histogram_obj_t *) self_in)->ABins; }
mp_obj_t py_histogram_b_bins(mp_obj_t self_in) { return ((py_histogram_obj_t *) self_in)->BBins; }

mp_obj_t py_histogram_get_percentile(mp_obj_t self_in, mp_obj_t percentile)
{
    histogram_t hist;
    hist.LBinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->LBins)->len;
    hist.ABinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->ABins)->len;
    hist.BBinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->BBins)->len;
    fb_alloc_mark();
    hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
    hist.ABins = fb_alloc(hist.ABinCount * sizeof(float));
    hist.BBins = fb_alloc(hist.BBinCount * sizeof(float));

    for (int i = 0; i < hist.LBinCount; i++) {
        hist.LBins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->LBins)->items[i]);
    }

    for (int i = 0; i < hist.ABinCount; i++) {
        hist.ABins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->ABins)->items[i]);
    }

    for (int i = 0; i < hist.BBinCount; i++) {
        hist.BBins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->BBins)->items[i]);
    }

    percentile_t p;
    imlib_get_percentile(&p, ((py_histogram_obj_t *) self_in)->bpp, &hist, mp_obj_get_float(percentile));
    fb_alloc_free_till_mark();

    py_percentile_obj_t *o = (((py_percentile_obj_t*)(m_malloc(sizeof(py_percentile_obj_t) * (1)))));
    o->base.type = &py_percentile_type;
    o->bpp = ((py_histogram_obj_t *) self_in)->bpp;

    o->LValue = mp_obj_new_int(p.LValue);
    o->AValue = mp_obj_new_int(p.AValue);
    o->BValue = mp_obj_new_int(p.BValue);

    return o;
}

mp_obj_t py_histogram_get_threshold(mp_obj_t self_in)
{
    histogram_t hist;
    hist.LBinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->LBins)->len;
    hist.ABinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->ABins)->len;
    hist.BBinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->BBins)->len;
    fb_alloc_mark();
    hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
    hist.ABins = fb_alloc(hist.ABinCount * sizeof(float));
    hist.BBins = fb_alloc(hist.BBinCount * sizeof(float));

    for (int i = 0; i < hist.LBinCount; i++) {
        hist.LBins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->LBins)->items[i]);
    }

    for (int i = 0; i < hist.ABinCount; i++) {
        hist.ABins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->ABins)->items[i]);
    }

    for (int i = 0; i < hist.BBinCount; i++) {
        hist.BBins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->BBins)->items[i]);
    }

    threshold_t t;
    imlib_get_threshold(&t, ((py_histogram_obj_t *) self_in)->bpp, &hist);
    fb_alloc_free_till_mark();

    py_threshold_obj_t *o = (((py_threshold_obj_t*)(m_malloc(sizeof(py_threshold_obj_t) * (1)))));
    o->base.type = &py_threshold_type;
    o->bpp = ((py_threshold_obj_t *) self_in)->bpp;

    o->LValue = mp_obj_new_int(t.LValue);
    o->AValue = mp_obj_new_int(t.AValue);
    o->BValue = mp_obj_new_int(t.BValue);

    return o;
}

mp_obj_t py_histogram_get_statistics(mp_obj_t self_in)
{
    histogram_t hist;
    hist.LBinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->LBins)->len;
    hist.ABinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->ABins)->len;
    hist.BBinCount = ((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->BBins)->len;
    fb_alloc_mark();
    hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
    hist.ABins = fb_alloc(hist.ABinCount * sizeof(float));
    hist.BBins = fb_alloc(hist.BBinCount * sizeof(float));

    for (int i = 0; i < hist.LBinCount; i++) {
        hist.LBins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->LBins)->items[i]);
    }

    for (int i = 0; i < hist.ABinCount; i++) {
        hist.ABins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->ABins)->items[i]);
    }

    for (int i = 0; i < hist.BBinCount; i++) {
        hist.BBins[i] = mp_obj_get_float(((mp_obj_list_t *) ((py_histogram_obj_t *) self_in)->BBins)->items[i]);
    }

    statistics_t stats;
    imlib_get_statistics(&stats, ((py_histogram_obj_t *) self_in)->bpp, &hist);
    fb_alloc_free_till_mark();

    py_statistics_obj_t *o = (((py_statistics_obj_t*)(m_malloc(sizeof(py_statistics_obj_t) * (1)))));
    o->base.type = &py_statistics_type;
    o->bpp = ((py_histogram_obj_t *) self_in)->bpp;

    o->LMean = mp_obj_new_int(stats.LMean);
    o->LMedian = mp_obj_new_int(stats.LMedian);
    o->LMode= mp_obj_new_int(stats.LMode);
    o->LSTDev = mp_obj_new_int(stats.LSTDev);
    o->LMin = mp_obj_new_int(stats.LMin);
    o->LMax = mp_obj_new_int(stats.LMax);
    o->LLQ = mp_obj_new_int(stats.LLQ);
    o->LUQ = mp_obj_new_int(stats.LUQ);
    o->AMean = mp_obj_new_int(stats.AMean);
    o->AMedian = mp_obj_new_int(stats.AMedian);
    o->AMode= mp_obj_new_int(stats.AMode);
    o->ASTDev = mp_obj_new_int(stats.ASTDev);
    o->AMin = mp_obj_new_int(stats.AMin);
    o->AMax = mp_obj_new_int(stats.AMax);
    o->ALQ = mp_obj_new_int(stats.ALQ);
    o->AUQ = mp_obj_new_int(stats.AUQ);
    o->BMean = mp_obj_new_int(stats.BMean);
    o->BMedian = mp_obj_new_int(stats.BMedian);
    o->BMode= mp_obj_new_int(stats.BMode);
    o->BSTDev = mp_obj_new_int(stats.BSTDev);
    o->BMin = mp_obj_new_int(stats.BMin);
    o->BMax = mp_obj_new_int(stats.BMax);
    o->BLQ = mp_obj_new_int(stats.BLQ);
    o->BUQ = mp_obj_new_int(stats.BUQ);

    return o;
}

static const mp_obj_fun_builtin_fixed_t py_histogram_bins_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_histogram_bins};
static const mp_obj_fun_builtin_fixed_t py_histogram_l_bins_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_histogram_l_bins};
static const mp_obj_fun_builtin_fixed_t py_histogram_a_bins_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_histogram_a_bins};
static const mp_obj_fun_builtin_fixed_t py_histogram_b_bins_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_histogram_b_bins};
static const mp_obj_fun_builtin_fixed_t py_histogram_get_percentile_obj = {{&mp_type_fun_builtin_2}, .fun._2 = py_histogram_get_percentile};
static const mp_obj_fun_builtin_fixed_t py_histogram_get_threshold_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_histogram_get_threshold};
static const mp_obj_fun_builtin_fixed_t py_histogram_get_statistics_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_histogram_get_statistics};

static const mp_rom_map_elem_t py_histogram_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)), (&py_histogram_bins_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_bins)) << 2) | 2)), (&py_histogram_l_bins_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_bins)) << 2) | 2)), (&py_histogram_a_bins_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_bins)) << 2) | 2)), (&py_histogram_b_bins_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_percentile)) << 2) | 2)), (&py_histogram_get_percentile_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_threshold)) << 2) | 2)), (&py_histogram_get_threshold_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_stats)) << 2) | 2)), (&py_histogram_get_statistics_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_statistics)) << 2) | 2)), (&py_histogram_get_statistics_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_statistics)) << 2) | 2)), (&py_histogram_get_statistics_obj) }
};

static const mp_obj_dict_t py_histogram_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_histogram_locals_dict_table) / sizeof((py_histogram_locals_dict_table)[0])), .alloc = (sizeof(py_histogram_locals_dict_table) / sizeof((py_histogram_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_histogram_locals_dict_table, }, };

static const mp_obj_type_t py_histogram_type = {
    { &mp_type_type },
    .name = MP_QSTR_histogram,
    .print = py_histogram_print,
    .subscr = py_histogram_subscr,
    .locals_dict = (mp_obj_t) &py_histogram_locals_dict
};

static mp_obj_t py_image_get_histogram(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    list_t thresholds;
    list_init(&thresholds, sizeof(color_thresholds_list_lnk_data_t));
    py_helper_keyword_thresholds(n_args, args, 1, kw_args, &thresholds);
    
# 3897 "omv/py/py_image.c" 3 4
   _Bool 
# 3897 "omv/py/py_image.c"
        invert = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 3897 "omv/py/py_image.c" 3 4
                                                                                                  0
# 3897 "omv/py/py_image.c"
                                                                                                       );

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 3, kw_args, &roi);

    histogram_t hist;
    switch(arg_img->bpp) {
        case IMAGE_BPP_BINARY: {
            int bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                             (1 -0 +1));
            do { if ((bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.LBinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_bins)) << 2) | 2)), bins);
            do { if ((hist.LBinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "l_bins must be >= 2"))); } while (0); } } while(0);
            hist.ABinCount = 0;
            hist.BBinCount = 0;
            fb_alloc_mark();
            hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
            hist.ABins = 
# 3914 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 3914 "omv/py/py_image.c"
                            ;
            hist.BBins = 
# 3915 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 3915 "omv/py/py_image.c"
                            ;
            imlib_get_histogram(&hist, arg_img, &roi, &thresholds, invert);
            list_free(&thresholds);
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            int bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                             (255 -0 +1));
            do { if ((bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.LBinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_bins)) << 2) | 2)), bins);
            do { if ((hist.LBinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "l_bins must be >= 2"))); } while (0); } } while(0);
            hist.ABinCount = 0;
            hist.BBinCount = 0;
            fb_alloc_mark();
            hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
            hist.ABins = 
# 3930 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 3930 "omv/py/py_image.c"
                            ;
            hist.BBins = 
# 3931 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 3931 "omv/py/py_image.c"
                            ;
            imlib_get_histogram(&hist, arg_img, &roi, &thresholds, invert);
            list_free(&thresholds);
            break;
        }
        case IMAGE_BPP_RGB565: {
            int l_bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                               (100 -0 +1));
            do { if ((l_bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.LBinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_bins)) << 2) | 2)), l_bins);
            do { if ((hist.LBinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "l_bins must be >= 2"))); } while (0); } } while(0);
            int a_bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                               (127 - -128 +1));
            do { if ((a_bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.ABinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_bins)) << 2) | 2)), a_bins);
            do { if ((hist.ABinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "a_bins must be >= 2"))); } while (0); } } while(0);
            int b_bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                               (127 - -128 +1));
            do { if ((b_bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.BBinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_bins)) << 2) | 2)), b_bins);
            do { if ((hist.BBinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "b_bins must be >= 2"))); } while (0); } } while(0);
            fb_alloc_mark();
            hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
            hist.ABins = fb_alloc(hist.ABinCount * sizeof(float));
            hist.BBins = fb_alloc(hist.BBinCount * sizeof(float));
            imlib_get_histogram(&hist, arg_img, &roi, &thresholds, invert);
            list_free(&thresholds);
            break;
        }
        default: {
            return (((mp_obj_t)(void*)0));
        }
    }

    py_histogram_obj_t *o = (((py_histogram_obj_t*)(m_malloc(sizeof(py_histogram_obj_t) * (1)))));
    o->base.type = &py_histogram_type;
    o->bpp = arg_img->bpp;

    o->LBins = mp_obj_new_list(hist.LBinCount, 
# 3969 "omv/py/py_image.c" 3 4
                                              ((void *)0)
# 3969 "omv/py/py_image.c"
                                                  );
    o->ABins = mp_obj_new_list(hist.ABinCount, 
# 3970 "omv/py/py_image.c" 3 4
                                              ((void *)0)
# 3970 "omv/py/py_image.c"
                                                  );
    o->BBins = mp_obj_new_list(hist.BBinCount, 
# 3971 "omv/py/py_image.c" 3 4
                                              ((void *)0)
# 3971 "omv/py/py_image.c"
                                                  );

    for (int i = 0; i < hist.LBinCount; i++) {
        ((mp_obj_list_t *) o->LBins)->items[i] = mp_obj_new_float(hist.LBins[i]);
    }

    for (int i = 0; i < hist.ABinCount; i++) {
        ((mp_obj_list_t *) o->ABins)->items[i] = mp_obj_new_float(hist.ABins[i]);
    }

    for (int i = 0; i < hist.BBinCount; i++) {
        ((mp_obj_list_t *) o->BBins)->items[i] = mp_obj_new_float(hist.BBins[i]);
    }

    fb_alloc_free_till_mark();

    return o;
}
static const mp_obj_fun_builtin_var_t py_image_get_histogram_obj = {{&mp_type_fun_builtin_var}, 
# 3989 "omv/py/py_image.c" 3 4
      1
# 3989 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_get_histogram};

static mp_obj_t py_image_get_statistics(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    list_t thresholds;
    list_init(&thresholds, sizeof(color_thresholds_list_lnk_data_t));
    py_helper_keyword_thresholds(n_args, args, 1, kw_args, &thresholds);
    
# 3998 "omv/py/py_image.c" 3 4
   _Bool 
# 3998 "omv/py/py_image.c"
        invert = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 3998 "omv/py/py_image.c" 3 4
                                                                                                  0
# 3998 "omv/py/py_image.c"
                                                                                                       );

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 3, kw_args, &roi);

    histogram_t hist;
    switch(arg_img->bpp) {
        case IMAGE_BPP_BINARY: {
            int bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                             (1 -0 +1));
            do { if ((bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.LBinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_bins)) << 2) | 2)), bins);
            do { if ((hist.LBinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "l_bins must be >= 2"))); } while (0); } } while(0);
            hist.ABinCount = 0;
            hist.BBinCount = 0;
            fb_alloc_mark();
            hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
            hist.ABins = 
# 4015 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 4015 "omv/py/py_image.c"
                            ;
            hist.BBins = 
# 4016 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 4016 "omv/py/py_image.c"
                            ;
            imlib_get_histogram(&hist, arg_img, &roi, &thresholds, invert);
            list_free(&thresholds);
            break;
        }
        case IMAGE_BPP_GRAYSCALE: {
            int bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                             (255 -0 +1));
            do { if ((bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.LBinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_bins)) << 2) | 2)), bins);
            do { if ((hist.LBinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "l_bins must be >= 2"))); } while (0); } } while(0);
            hist.ABinCount = 0;
            hist.BBinCount = 0;
            fb_alloc_mark();
            hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
            hist.ABins = 
# 4031 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 4031 "omv/py/py_image.c"
                            ;
            hist.BBins = 
# 4032 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 4032 "omv/py/py_image.c"
                            ;
            imlib_get_histogram(&hist, arg_img, &roi, &thresholds, invert);
            list_free(&thresholds);
            break;
        }
        case IMAGE_BPP_RGB565: {
            int l_bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                               (100 -0 +1));
            do { if ((l_bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.LBinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_l_bins)) << 2) | 2)), l_bins);
            do { if ((hist.LBinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "l_bins must be >= 2"))); } while (0); } } while(0);
            int a_bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                               (127 - -128 +1));
            do { if ((a_bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.ABinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a_bins)) << 2) | 2)), a_bins);
            do { if ((hist.ABinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "a_bins must be >= 2"))); } while (0); } } while(0);
            int b_bins = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bins)) << 2) | 2)),
                                               (127 - -128 +1));
            do { if ((b_bins >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "bins must be >= 2"))); } while (0); } } while(0);
            hist.BBinCount = py_helper_keyword_int(n_args, args, n_args, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_bins)) << 2) | 2)), b_bins);
            do { if ((hist.BBinCount >= 2) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "b_bins must be >= 2"))); } while (0); } } while(0);
            fb_alloc_mark();
            hist.LBins = fb_alloc(hist.LBinCount * sizeof(float));
            hist.ABins = fb_alloc(hist.ABinCount * sizeof(float));
            hist.BBins = fb_alloc(hist.BBinCount * sizeof(float));
            imlib_get_histogram(&hist, arg_img, &roi, &thresholds, invert);
            list_free(&thresholds);
            break;
        }
        default: {
            return (((mp_obj_t)(void*)0));
        }
    }

    statistics_t stats;
    imlib_get_statistics(&stats, arg_img->bpp, &hist);
    fb_alloc_free_till_mark();

    py_statistics_obj_t *o = (((py_statistics_obj_t*)(m_malloc(sizeof(py_statistics_obj_t) * (1)))));
    o->base.type = &py_statistics_type;
    o->bpp = arg_img->bpp;

    o->LMean = mp_obj_new_int(stats.LMean);
    o->LMedian = mp_obj_new_int(stats.LMedian);
    o->LMode= mp_obj_new_int(stats.LMode);
    o->LSTDev = mp_obj_new_int(stats.LSTDev);
    o->LMin = mp_obj_new_int(stats.LMin);
    o->LMax = mp_obj_new_int(stats.LMax);
    o->LLQ = mp_obj_new_int(stats.LLQ);
    o->LUQ = mp_obj_new_int(stats.LUQ);
    o->AMean = mp_obj_new_int(stats.AMean);
    o->AMedian = mp_obj_new_int(stats.AMedian);
    o->AMode= mp_obj_new_int(stats.AMode);
    o->ASTDev = mp_obj_new_int(stats.ASTDev);
    o->AMin = mp_obj_new_int(stats.AMin);
    o->AMax = mp_obj_new_int(stats.AMax);
    o->ALQ = mp_obj_new_int(stats.ALQ);
    o->AUQ = mp_obj_new_int(stats.AUQ);
    o->BMean = mp_obj_new_int(stats.BMean);
    o->BMedian = mp_obj_new_int(stats.BMedian);
    o->BMode= mp_obj_new_int(stats.BMode);
    o->BSTDev = mp_obj_new_int(stats.BSTDev);
    o->BMin = mp_obj_new_int(stats.BMin);
    o->BMax = mp_obj_new_int(stats.BMax);
    o->BLQ = mp_obj_new_int(stats.BLQ);
    o->BUQ = mp_obj_new_int(stats.BUQ);

    return o;
}
static const mp_obj_fun_builtin_var_t py_image_get_statistics_obj = {{&mp_type_fun_builtin_var}, 
# 4101 "omv/py/py_image.c" 3 4
      1
# 4101 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_get_statistics};



typedef struct py_line_obj {
    mp_obj_base_t base;
    mp_obj_t x1, y1, x2, y2, length, magnitude, theta, rho;
} py_line_obj_t;

static void py_line_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_line_obj_t *self = self_in;
    mp_printf(print,
              "{\"x1\":%d, \"y1\":%d, \"x2\":%d, \"y2\":%d, \"length\":%d, \"magnitude\":%d, \"theta\":%d, \"rho\":%d}",
              mp_obj_get_int(self->x1),
              mp_obj_get_int(self->y1),
              mp_obj_get_int(self->x2),
              mp_obj_get_int(self->y2),
              mp_obj_get_int(self->length),
              mp_obj_get_int(self->magnitude),
              mp_obj_get_int(self->theta),
              mp_obj_get_int(self->rho));
}

static mp_obj_t py_line_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_line_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(8, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 4134 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 4134 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x1) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 8, index, 
# 4138 "omv/py/py_image.c" 3 4
                                                                      0
# 4138 "omv/py/py_image.c"
                                                                           )) {
            case 0: return self->x1;
            case 1: return self->y1;
            case 2: return self->x2;
            case 3: return self->y2;
            case 4: return self->length;
            case 5: return self->magnitude;
            case 6: return self->theta;
            case 7: return self->rho;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_line_line(mp_obj_t self_in)
{
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_line_obj_t *) self_in)->x1,
                                              ((py_line_obj_t *) self_in)->y1,
                                              ((py_line_obj_t *) self_in)->x2,
                                              ((py_line_obj_t *) self_in)->y2});
}

mp_obj_t py_line_x1(mp_obj_t self_in) { return ((py_line_obj_t *) self_in)->x1; }
mp_obj_t py_line_y1(mp_obj_t self_in) { return ((py_line_obj_t *) self_in)->y1; }
mp_obj_t py_line_x2(mp_obj_t self_in) { return ((py_line_obj_t *) self_in)->x2; }
mp_obj_t py_line_y2(mp_obj_t self_in) { return ((py_line_obj_t *) self_in)->y2; }
mp_obj_t py_line_length(mp_obj_t self_in) { return ((py_line_obj_t *) self_in)->length; }
mp_obj_t py_line_magnitude(mp_obj_t self_in) { return ((py_line_obj_t *) self_in)->magnitude; }
mp_obj_t py_line_theta(mp_obj_t self_in) { return ((py_line_obj_t *) self_in)->theta; }
mp_obj_t py_line_rho(mp_obj_t self_in) { return ((py_line_obj_t *) self_in)->rho; }

static const mp_obj_fun_builtin_fixed_t py_line_line_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_line};
static const mp_obj_fun_builtin_fixed_t py_line_x1_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_x1};
static const mp_obj_fun_builtin_fixed_t py_line_y1_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_y1};
static const mp_obj_fun_builtin_fixed_t py_line_x2_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_x2};
static const mp_obj_fun_builtin_fixed_t py_line_y2_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_y2};
static const mp_obj_fun_builtin_fixed_t py_line_length_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_length};
static const mp_obj_fun_builtin_fixed_t py_line_magnitude_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_magnitude};
static const mp_obj_fun_builtin_fixed_t py_line_theta_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_theta};
static const mp_obj_fun_builtin_fixed_t py_line_rho_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_line_rho};

static const mp_rom_map_elem_t py_line_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_line)) << 2) | 2)), (&py_line_line_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x1)) << 2) | 2)), (&py_line_x1_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y1)) << 2) | 2)), (&py_line_y1_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x2)) << 2) | 2)), (&py_line_x2_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y2)) << 2) | 2)), (&py_line_y2_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_length)) << 2) | 2)), (&py_line_length_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_magnitude)) << 2) | 2)), (&py_line_magnitude_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_theta)) << 2) | 2)), (&py_line_theta_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rho)) << 2) | 2)), (&py_line_rho_obj) }
};

static const mp_obj_dict_t py_line_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_line_locals_dict_table) / sizeof((py_line_locals_dict_table)[0])), .alloc = (sizeof(py_line_locals_dict_table) / sizeof((py_line_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_line_locals_dict_table, }, };

static const mp_obj_type_t py_line_type = {
    { &mp_type_type },
    .name = MP_QSTR_line,
    .print = py_line_print,
    .subscr = py_line_subscr,
    .locals_dict = (mp_obj_t) &py_line_locals_dict
};

static mp_obj_t py_image_get_regression(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    list_t thresholds;
    list_init(&thresholds, sizeof(color_thresholds_list_lnk_data_t));
    py_helper_arg_to_thresholds(args[1], &thresholds);
    if (!list_size(&thresholds)) return (((mp_obj_t)&mp_const_none_obj));
    
# 4209 "omv/py/py_image.c" 3 4
   _Bool 
# 4209 "omv/py/py_image.c"
        invert = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 4209 "omv/py/py_image.c" 3 4
                                                                                                  0
# 4209 "omv/py/py_image.c"
                                                                                                       );

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 3, kw_args, &roi);

    unsigned int x_stride = py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_stride)) << 2) | 2)), 2);
    do { if ((x_stride > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "x_stride must not be zero."))); } while (0); } } while(0);
    unsigned int y_stride = py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_stride)) << 2) | 2)), 1);
    do { if ((y_stride > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "y_stride must not be zero."))); } while (0); } } while(0);
    unsigned int area_threshold = py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_area_threshold)) << 2) | 2)), 10);
    unsigned int pixels_threshold = py_helper_keyword_int(n_args, args, 7, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_pixels_threshold)) << 2) | 2)), 10);
    
# 4220 "omv/py/py_image.c" 3 4
   _Bool 
# 4220 "omv/py/py_image.c"
        robust = py_helper_keyword_int(n_args, args, 8, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_robust)) << 2) | 2)), 
# 4220 "omv/py/py_image.c" 3 4
                                                                                                  0
# 4220 "omv/py/py_image.c"
                                                                                                       );

    find_lines_list_lnk_data_t out;
    fb_alloc_mark();
    
# 4224 "omv/py/py_image.c" 3 4
   _Bool 
# 4224 "omv/py/py_image.c"
        result = imlib_get_regression(&out, arg_img, &roi, x_stride, y_stride, &thresholds, invert, area_threshold, pixels_threshold, robust);
    fb_alloc_free_till_mark();
    list_free(&thresholds);
    if (!result) {
        return (((mp_obj_t)&mp_const_none_obj));
    }

    py_line_obj_t *o = (((py_line_obj_t*)(m_malloc(sizeof(py_line_obj_t) * (1)))));
    o->base.type = &py_line_type;
    o->x1 = mp_obj_new_int(out.line.x1);
    o->y1 = mp_obj_new_int(out.line.y1);
    o->x2 = mp_obj_new_int(out.line.x2);
    o->y2 = mp_obj_new_int(out.line.y2);
    int x_diff = out.line.x2 - out.line.x1;
    int y_diff = out.line.y2 - out.line.y1;
    o->length = mp_obj_new_int(fast_roundf(fast_sqrtf((x_diff * x_diff) + (y_diff * y_diff))));
    o->magnitude = mp_obj_new_int(out.magnitude);
    o->theta = mp_obj_new_int(out.theta);
    o->rho = mp_obj_new_int(out.rho);

    return o;
}
static const mp_obj_fun_builtin_var_t py_image_get_regression_obj = {{&mp_type_fun_builtin_var}, 
# 4246 "omv/py/py_image.c" 3 4
      1
# 4246 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_get_regression};







typedef struct py_blob_obj {
    mp_obj_base_t base;
    mp_obj_t corners;
    mp_obj_t min_corners;
    mp_obj_t x, y, w, h, pixels, cx, cy, rotation, code, count, perimeter, roundness;
    mp_obj_t x_hist_bins;
    mp_obj_t y_hist_bins;
} py_blob_obj_t;

static void py_blob_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_blob_obj_t *self = self_in;
    mp_printf(print,
              "{\"x\":%d, \"y\":%d, \"w\":%d, \"h\":%d,"
              " \"pixels\":%d, \"cx\":%d, \"cy\":%d, \"rotation\":%f, \"code\":%d, \"count\":%d,"
              " \"perimeter\":%d, \"roundness:%f\"}",
              mp_obj_get_int(self->x),
              mp_obj_get_int(self->y),
              mp_obj_get_int(self->w),
              mp_obj_get_int(self->h),
              mp_obj_get_int(self->pixels),
              fast_roundf(mp_obj_get_float(self->cx)),
              fast_roundf(mp_obj_get_float(self->cy)),
              (double) mp_obj_get_float(self->rotation),
              mp_obj_get_int(self->code),
              mp_obj_get_int(self->count),
              mp_obj_get_int(self->perimeter),
              (double) mp_obj_get_float(self->roundness));
}

static mp_obj_t py_blob_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_blob_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(12, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 4293 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 4293 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 12, index, 
# 4297 "omv/py/py_image.c" 3 4
                                                                      0
# 4297 "omv/py/py_image.c"
                                                                           )) {
            case 0: return self->x;
            case 1: return self->y;
            case 2: return self->w;
            case 3: return self->h;
            case 4: return self->pixels;
            case 5: return mp_obj_new_int(fast_roundf(mp_obj_get_float(self->cx)));
            case 6: return mp_obj_new_int(fast_roundf(mp_obj_get_float(self->cy)));
            case 7: return self->rotation;
            case 8: return self->code;
            case 9: return self->count;
            case 10: return self->perimeter;
            case 11: return self->roundness;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_blob_corners(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->corners; }
mp_obj_t py_blob_min_corners(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->min_corners; }
mp_obj_t py_blob_rect(mp_obj_t self_in)
{
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_blob_obj_t *) self_in)->x,
                                              ((py_blob_obj_t *) self_in)->y,
                                              ((py_blob_obj_t *) self_in)->w,
                                              ((py_blob_obj_t *) self_in)->h});
}

mp_obj_t py_blob_x(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->x; }
mp_obj_t py_blob_y(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->y; }
mp_obj_t py_blob_w(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->w; }
mp_obj_t py_blob_h(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->h; }
mp_obj_t py_blob_pixels(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->pixels; }
mp_obj_t py_blob_cx(mp_obj_t self_in) { return mp_obj_new_int(fast_roundf(mp_obj_get_float(((py_blob_obj_t *) self_in)->cx))); }
mp_obj_t py_blob_cxf(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->cx; }
mp_obj_t py_blob_cy(mp_obj_t self_in) { return mp_obj_new_int(fast_roundf(mp_obj_get_float(((py_blob_obj_t *) self_in)->cy))); }
mp_obj_t py_blob_cyf(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->cy; }
mp_obj_t py_blob_rotation(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->rotation; }
mp_obj_t py_blob_rotation_deg(mp_obj_t self_in) { return mp_obj_new_int((((mp_obj_get_float(((py_blob_obj_t *) self_in)->rotation))*180)/3.141592654f)); }
mp_obj_t py_blob_rotation_rad(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->rotation; }
mp_obj_t py_blob_code(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->code; }
mp_obj_t py_blob_count(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->count; }
mp_obj_t py_blob_perimeter(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->perimeter; }
mp_obj_t py_blob_roundness(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->roundness; }
mp_obj_t py_blob_elongation(mp_obj_t self_in) { return mp_obj_new_float(1 - mp_obj_get_float(((py_blob_obj_t *) self_in)->roundness)); }
mp_obj_t py_blob_area(mp_obj_t self_in) {
    return mp_obj_new_int(mp_obj_get_int(((py_blob_obj_t *) self_in)->w) * mp_obj_get_int(((py_blob_obj_t *) self_in)->h));
}
mp_obj_t py_blob_density(mp_obj_t self_in) {
    int area = mp_obj_get_int(((py_blob_obj_t *) self_in)->w) * mp_obj_get_int(((py_blob_obj_t *) self_in)->h);
    int pixels = mp_obj_get_int(((py_blob_obj_t *) self_in)->pixels);
    return mp_obj_new_float(({ __typeof__ (pixels) _a = (pixels); __typeof__ (((float) area)) _b = (((float) area)); _b ? (_a / _b) : 0; }));
}




mp_obj_t py_blob_compactness(mp_obj_t self_in) {
    int pixels = mp_obj_get_int(((py_blob_obj_t *) self_in)->pixels);
    float perimeter = mp_obj_get_int(((py_blob_obj_t *) self_in)->perimeter);
    return mp_obj_new_float(({ __typeof__ ((pixels * 4 * 3.141592654f)) _a = ((pixels * 4 * 3.141592654f)); __typeof__ ((perimeter * perimeter)) _b = ((perimeter * perimeter)); _b ? (_a / _b) : 0; }));
}
mp_obj_t py_blob_solidity(mp_obj_t self_in) {
    mp_obj_t *corners, *p0, *p1, *p2, *p3;
    mp_obj_get_array_fixed_n(((py_blob_obj_t *) self_in)->min_corners, 4, &corners);
    mp_obj_get_array_fixed_n(corners[0], 2, &p0);
    mp_obj_get_array_fixed_n(corners[1], 2, &p1);
    mp_obj_get_array_fixed_n(corners[2], 2, &p2);
    mp_obj_get_array_fixed_n(corners[3], 2, &p3);

    int x0, y0, x1, y1, x2, y2, x3, y3;
    x0 = mp_obj_get_int(p0[0]);
    y0 = mp_obj_get_int(p0[1]);
    x1 = mp_obj_get_int(p1[0]);
    y1 = mp_obj_get_int(p1[1]);
    x2 = mp_obj_get_int(p2[0]);
    y2 = mp_obj_get_int(p2[1]);
    x3 = mp_obj_get_int(p3[0]);
    y3 = mp_obj_get_int(p3[1]);


    float min_area = (((x0*y1)+(x1*y2)+(x2*y3)+(x3*y0))-((y0*x1)+(y1*x2)+(y2*x3)+(y3*x0)))/2.0f;
    int pixels = mp_obj_get_int(((py_blob_obj_t *) self_in)->pixels);
    return mp_obj_new_float(({ __typeof__ (({ __typeof__ (pixels) _a = (pixels); __typeof__ (min_area) _b = (min_area); _b ? (_a / _b) : 0; })) _a = (({ __typeof__ (pixels) _a = (pixels); __typeof__ (min_area) _b = (min_area); _b ? (_a / _b) : 0; })); __typeof__ (1) _b = (1); _a < _b ? _a : _b; }));
}
mp_obj_t py_blob_convexity(mp_obj_t self_in) {
    mp_obj_t *corners, *p0, *p1, *p2, *p3;
    mp_obj_get_array_fixed_n(((py_blob_obj_t *) self_in)->min_corners, 4, &corners);
    mp_obj_get_array_fixed_n(corners[0], 2, &p0);
    mp_obj_get_array_fixed_n(corners[1], 2, &p1);
    mp_obj_get_array_fixed_n(corners[2], 2, &p2);
    mp_obj_get_array_fixed_n(corners[3], 2, &p3);

    int x0, y0, x1, y1, x2, y2, x3, y3;
    x0 = mp_obj_get_int(p0[0]);
    y0 = mp_obj_get_int(p0[1]);
    x1 = mp_obj_get_int(p1[0]);
    y1 = mp_obj_get_int(p1[1]);
    x2 = mp_obj_get_int(p2[0]);
    y2 = mp_obj_get_int(p2[1]);
    x3 = mp_obj_get_int(p3[0]);
    y3 = mp_obj_get_int(p3[1]);

    float d0 = fast_sqrtf(((x0 - x1) * (x0 - x1)) + ((y0 - y1) * (y0 - y1)));
    float d1 = fast_sqrtf(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)));
    float d2 = fast_sqrtf(((x2 - x3) * (x2 - x3)) + ((y2 - y3) * (y2 - y3)));
    float d3 = fast_sqrtf(((x3 - x0) * (x3 - x0)) + ((y3 - y0) * (y3 - y0)));
    int perimeter = mp_obj_get_int(((py_blob_obj_t *) self_in)->perimeter);
    return mp_obj_new_float(({ __typeof__ (({ __typeof__ (d0 + d1 + d2 + d3) _a = (d0 + d1 + d2 + d3); __typeof__ (perimeter) _b = (perimeter); _b ? (_a / _b) : 0; })) _a = (({ __typeof__ (d0 + d1 + d2 + d3) _a = (d0 + d1 + d2 + d3); __typeof__ (perimeter) _b = (perimeter); _b ? (_a / _b) : 0; })); __typeof__ (1) _b = (1); _a < _b ? _a : _b; }));
}




mp_obj_t py_blob_x_hist_bins(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->x_hist_bins; }
mp_obj_t py_blob_y_hist_bins(mp_obj_t self_in) { return ((py_blob_obj_t *) self_in)->y_hist_bins; }
mp_obj_t py_blob_major_axis_line(mp_obj_t self_in) {
    mp_obj_t *corners, *p0, *p1, *p2, *p3;
    mp_obj_get_array_fixed_n(((py_blob_obj_t *) self_in)->min_corners, 4, &corners);
    mp_obj_get_array_fixed_n(corners[0], 2, &p0);
    mp_obj_get_array_fixed_n(corners[1], 2, &p1);
    mp_obj_get_array_fixed_n(corners[2], 2, &p2);
    mp_obj_get_array_fixed_n(corners[3], 2, &p3);

    int x0, y0, x1, y1, x2, y2, x3, y3;
    x0 = mp_obj_get_int(p0[0]);
    y0 = mp_obj_get_int(p0[1]);
    x1 = mp_obj_get_int(p1[0]);
    y1 = mp_obj_get_int(p1[1]);
    x2 = mp_obj_get_int(p2[0]);
    y2 = mp_obj_get_int(p2[1]);
    x3 = mp_obj_get_int(p3[0]);
    y3 = mp_obj_get_int(p3[1]);

    int m0x = (x0 + x1) / 2;
    int m0y = (y0 + y1) / 2;
    int m1x = (x1 + x2) / 2;
    int m1y = (y1 + y2) / 2;
    int m2x = (x2 + x3) / 2;
    int m2y = (y2 + y3) / 2;
    int m3x = (x3 + x0) / 2;
    int m3y = (y3 + y0) / 2;

    float l0 = fast_sqrtf(((m0x - m2x) * (m0x - m2x)) + ((m0y - m2y) * (m0y - m2y)));
    float l1 = fast_sqrtf(((m1x - m3x) * (m1x - m3x)) + ((m1y - m3y) * (m1y - m3y)));

    if (l0 >= l1) {
        return mp_obj_new_tuple(4, (mp_obj_t []) {mp_obj_new_int(m0x),
                                                  mp_obj_new_int(m0y),
                                                  mp_obj_new_int(m2x),
                                                  mp_obj_new_int(m2y)});
    } else {
        return mp_obj_new_tuple(4, (mp_obj_t []) {mp_obj_new_int(m1x),
                                                  mp_obj_new_int(m1y),
                                                  mp_obj_new_int(m3x),
                                                  mp_obj_new_int(m3y)});
    }
}
mp_obj_t py_blob_minor_axis_line(mp_obj_t self_in) {
    mp_obj_t *corners, *p0, *p1, *p2, *p3;
    mp_obj_get_array_fixed_n(((py_blob_obj_t *) self_in)->min_corners, 4, &corners);
    mp_obj_get_array_fixed_n(corners[0], 2, &p0);
    mp_obj_get_array_fixed_n(corners[1], 2, &p1);
    mp_obj_get_array_fixed_n(corners[2], 2, &p2);
    mp_obj_get_array_fixed_n(corners[3], 2, &p3);

    int x0, y0, x1, y1, x2, y2, x3, y3;
    x0 = mp_obj_get_int(p0[0]);
    y0 = mp_obj_get_int(p0[1]);
    x1 = mp_obj_get_int(p1[0]);
    y1 = mp_obj_get_int(p1[1]);
    x2 = mp_obj_get_int(p2[0]);
    y2 = mp_obj_get_int(p2[1]);
    x3 = mp_obj_get_int(p3[0]);
    y3 = mp_obj_get_int(p3[1]);

    int m0x = (x0 + x1) / 2;
    int m0y = (y0 + y1) / 2;
    int m1x = (x1 + x2) / 2;
    int m1y = (y1 + y2) / 2;
    int m2x = (x2 + x3) / 2;
    int m2y = (y2 + y3) / 2;
    int m3x = (x3 + x0) / 2;
    int m3y = (y3 + y0) / 2;

    float l0 = fast_sqrtf(((m0x - m2x) * (m0x - m2x)) + ((m0y - m2y) * (m0y - m2y)));
    float l1 = fast_sqrtf(((m1x - m3x) * (m1x - m3x)) + ((m1y - m3y) * (m1y - m3y)));

    if (l0 < l1) {
        return mp_obj_new_tuple(4, (mp_obj_t []) {mp_obj_new_int(m0x),
                                                  mp_obj_new_int(m0y),
                                                  mp_obj_new_int(m2x),
                                                  mp_obj_new_int(m2y)});
    } else {
        return mp_obj_new_tuple(4, (mp_obj_t []) {mp_obj_new_int(m1x),
                                                  mp_obj_new_int(m1y),
                                                  mp_obj_new_int(m3x),
                                                  mp_obj_new_int(m3y)});
    }
}
mp_obj_t py_blob_enclosing_circle(mp_obj_t self_in) {
    mp_obj_t *corners, *p0, *p1, *p2, *p3;
    mp_obj_get_array_fixed_n(((py_blob_obj_t *) self_in)->min_corners, 4, &corners);
    mp_obj_get_array_fixed_n(corners[0], 2, &p0);
    mp_obj_get_array_fixed_n(corners[1], 2, &p1);
    mp_obj_get_array_fixed_n(corners[2], 2, &p2);
    mp_obj_get_array_fixed_n(corners[3], 2, &p3);

    int x0, y0, x1, y1, x2, y2, x3, y3;
    x0 = mp_obj_get_int(p0[0]);
    y0 = mp_obj_get_int(p0[1]);
    x1 = mp_obj_get_int(p1[0]);
    y1 = mp_obj_get_int(p1[1]);
    x2 = mp_obj_get_int(p2[0]);
    y2 = mp_obj_get_int(p2[1]);
    x3 = mp_obj_get_int(p3[0]);
    y3 = mp_obj_get_int(p3[1]);

    int cx = (x0 + x1 + x2 + x3) / 4;
    int cy = (y0 + y1 + y2 + y3) / 4;

    float d0 = fast_sqrtf(((x0 - cx) * (x0 - cx)) + ((y0 - cy) * (y0 - cy)));
    float d1 = fast_sqrtf(((x1 - cx) * (x1 - cx)) + ((y1 - cy) * (y1 - cy)));
    float d2 = fast_sqrtf(((x2 - cx) * (x2 - cx)) + ((y2 - cy) * (y2 - cy)));
    float d3 = fast_sqrtf(((x3 - cx) * (x3 - cx)) + ((y3 - cy) * (y3 - cy)));
    float d = ({ __typeof__ (d0) _a = (d0); __typeof__ (({ __typeof__ (d1) _a = (d1); __typeof__ (({ __typeof__ (d2) _a = (d2); __typeof__ (d3) _b = (d3); _a > _b ? _a : _b; })) _b = (({ __typeof__ (d2) _a = (d2); __typeof__ (d3) _b = (d3); _a > _b ? _a : _b; })); _a > _b ? _a : _b; })) _b = (({ __typeof__ (d1) _a = (d1); __typeof__ (({ __typeof__ (d2) _a = (d2); __typeof__ (d3) _b = (d3); _a > _b ? _a : _b; })) _b = (({ __typeof__ (d2) _a = (d2); __typeof__ (d3) _b = (d3); _a > _b ? _a : _b; })); _a > _b ? _a : _b; })); _a > _b ? _a : _b; });

    return mp_obj_new_tuple(3, (mp_obj_t []) {mp_obj_new_int(cx),
                                              mp_obj_new_int(cy),
                                              mp_obj_new_int(fast_roundf(d))});
}
mp_obj_t py_blob_enclosed_ellipse(mp_obj_t self_in) {
    mp_obj_t *corners, *p0, *p1, *p2, *p3;
    mp_obj_get_array_fixed_n(((py_blob_obj_t *) self_in)->min_corners, 4, &corners);
    mp_obj_get_array_fixed_n(corners[0], 2, &p0);
    mp_obj_get_array_fixed_n(corners[1], 2, &p1);
    mp_obj_get_array_fixed_n(corners[2], 2, &p2);
    mp_obj_get_array_fixed_n(corners[3], 2, &p3);

    int x0, y0, x1, y1, x2, y2, x3, y3;
    x0 = mp_obj_get_int(p0[0]);
    y0 = mp_obj_get_int(p0[1]);
    x1 = mp_obj_get_int(p1[0]);
    y1 = mp_obj_get_int(p1[1]);
    x2 = mp_obj_get_int(p2[0]);
    y2 = mp_obj_get_int(p2[1]);
    x3 = mp_obj_get_int(p3[0]);
    y3 = mp_obj_get_int(p3[1]);

    int m0x = (x0 + x1) / 2;
    int m0y = (y0 + y1) / 2;
    int m1x = (x1 + x2) / 2;
    int m1y = (y1 + y2) / 2;
    int m2x = (x2 + x3) / 2;
    int m2y = (y2 + y3) / 2;
    int m3x = (x3 + x0) / 2;
    int m3y = (y3 + y0) / 2;

    int cx = (x0 + x1 + x2 + x3) / 4;
    int cy = (y0 + y1 + y2 + y3) / 4;

    float d0 = fast_sqrtf(((m0x - cx) * (m0x - cx)) + ((m0y - cy) * (m0y - cy)));
    float d1 = fast_sqrtf(((m1x - cx) * (m1x - cx)) + ((m1y - cy) * (m1y - cy)));
    float d2 = fast_sqrtf(((m2x - cx) * (m2x - cx)) + ((m2y - cy) * (m2y - cy)));
    float d3 = fast_sqrtf(((m3x - cx) * (m3x - cx)) + ((m3y - cy) * (m3y - cy)));
    float a = ({ __typeof__ (d0) _a = (d0); __typeof__ (d2) _b = (d2); _a < _b ? _a : _b; });
    float b = ({ __typeof__ (d1) _a = (d1); __typeof__ (d3) _b = (d3); _a < _b ? _a : _b; });

    float l0 = fast_sqrtf(((m0x - m2x) * (m0x - m2x)) + ((m0y - m2y) * (m0y - m2y)));
    float l1 = fast_sqrtf(((m1x - m3x) * (m1x - m3x)) + ((m1y - m3y) * (m1y - m3y)));

    float r;

    if (l0 >= l1) {
        r = (((fast_atan2f(m0y - m2y, m0x - m2x))*180)/3.141592654f);
    } else {
        r = (((fast_atan2f(m1y - m3y, m1x - m3x) + 
# 4573 "omv/py/py_image.c" 3
           1.57079632679489661923
# 4573 "omv/py/py_image.c"
           )*180)/3.141592654f);
    }

    return mp_obj_new_tuple(5, (mp_obj_t []) {mp_obj_new_int(cx),
                                              mp_obj_new_int(cy),
                                              mp_obj_new_int(a),
                                              mp_obj_new_int(b),
                                              mp_obj_new_int(r)});
}

static const mp_obj_fun_builtin_fixed_t py_blob_corners_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_corners};
static const mp_obj_fun_builtin_fixed_t py_blob_min_corners_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_min_corners};
static const mp_obj_fun_builtin_fixed_t py_blob_rect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_rect};
static const mp_obj_fun_builtin_fixed_t py_blob_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_x};
static const mp_obj_fun_builtin_fixed_t py_blob_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_y};
static const mp_obj_fun_builtin_fixed_t py_blob_w_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_w};
static const mp_obj_fun_builtin_fixed_t py_blob_h_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_h};
static const mp_obj_fun_builtin_fixed_t py_blob_pixels_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_pixels};
static const mp_obj_fun_builtin_fixed_t py_blob_cx_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_cx};
static const mp_obj_fun_builtin_fixed_t py_blob_cxf_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_cxf};
static const mp_obj_fun_builtin_fixed_t py_blob_cy_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_cy};
static const mp_obj_fun_builtin_fixed_t py_blob_cyf_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_cyf};
static const mp_obj_fun_builtin_fixed_t py_blob_rotation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_rotation};
static const mp_obj_fun_builtin_fixed_t py_blob_rotation_deg_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_rotation_deg};
static const mp_obj_fun_builtin_fixed_t py_blob_rotation_rad_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_rotation_rad};
static const mp_obj_fun_builtin_fixed_t py_blob_code_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_code};
static const mp_obj_fun_builtin_fixed_t py_blob_count_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_count};
static const mp_obj_fun_builtin_fixed_t py_blob_perimeter_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_perimeter};
static const mp_obj_fun_builtin_fixed_t py_blob_roundness_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_roundness};
static const mp_obj_fun_builtin_fixed_t py_blob_elongation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_elongation};
static const mp_obj_fun_builtin_fixed_t py_blob_area_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_area};
static const mp_obj_fun_builtin_fixed_t py_blob_density_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_density};
static const mp_obj_fun_builtin_fixed_t py_blob_compactness_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_compactness};
static const mp_obj_fun_builtin_fixed_t py_blob_solidity_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_solidity};
static const mp_obj_fun_builtin_fixed_t py_blob_convexity_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_convexity};
static const mp_obj_fun_builtin_fixed_t py_blob_x_hist_bins_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_x_hist_bins};
static const mp_obj_fun_builtin_fixed_t py_blob_y_hist_bins_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_y_hist_bins};
static const mp_obj_fun_builtin_fixed_t py_blob_major_axis_line_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_major_axis_line};
static const mp_obj_fun_builtin_fixed_t py_blob_minor_axis_line_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_minor_axis_line};
static const mp_obj_fun_builtin_fixed_t py_blob_enclosing_circle_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_enclosing_circle};
static const mp_obj_fun_builtin_fixed_t py_blob_enclosed_ellipse_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_blob_enclosed_ellipse};

static const mp_rom_map_elem_t py_blob_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_corners)) << 2) | 2)), (&py_blob_corners_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_min_corners)) << 2) | 2)), (&py_blob_min_corners_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rect)) << 2) | 2)), (&py_blob_rect_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_blob_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_blob_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_w)) << 2) | 2)), (&py_blob_w_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_h)) << 2) | 2)), (&py_blob_h_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_pixels)) << 2) | 2)), (&py_blob_pixels_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cx)) << 2) | 2)), (&py_blob_cx_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cxf)) << 2) | 2)), (&py_blob_cxf_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cy)) << 2) | 2)), (&py_blob_cy_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cyf)) << 2) | 2)), (&py_blob_cyf_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rotation)) << 2) | 2)), (&py_blob_rotation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rotation_deg)) << 2) | 2)), (&py_blob_rotation_deg_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rotation_rad)) << 2) | 2)), (&py_blob_rotation_rad_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_code)) << 2) | 2)), (&py_blob_code_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_count)) << 2) | 2)), (&py_blob_count_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_perimeter)) << 2) | 2)), (&py_blob_perimeter_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_roundness)) << 2) | 2)), (&py_blob_roundness_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_elongation)) << 2) | 2)), (&py_blob_elongation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_area)) << 2) | 2)), (&py_blob_area_obj) } ,
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_density)) << 2) | 2)), (&py_blob_density_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_extent)) << 2) | 2)), (&py_blob_density_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_compactness)) << 2) | 2)), (&py_blob_compactness_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_solidity)) << 2) | 2)), (&py_blob_solidity_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_convexity)) << 2) | 2)), (&py_blob_convexity_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_hist_bins)) << 2) | 2)), (&py_blob_x_hist_bins_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_hist_bins)) << 2) | 2)), (&py_blob_y_hist_bins_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_major_axis_line)) << 2) | 2)), (&py_blob_major_axis_line_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_minor_axis_line)) << 2) | 2)), (&py_blob_minor_axis_line_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_enclosing_circle)) << 2) | 2)), (&py_blob_enclosing_circle_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_enclosed_ellipse)) << 2) | 2)), (&py_blob_enclosed_ellipse_obj) }
};

static const mp_obj_dict_t py_blob_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_blob_locals_dict_table) / sizeof((py_blob_locals_dict_table)[0])), .alloc = (sizeof(py_blob_locals_dict_table) / sizeof((py_blob_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_blob_locals_dict_table, }, };

static const mp_obj_type_t py_blob_type = {
    { &mp_type_type },
    .name = MP_QSTR_blob,
    .print = py_blob_print,
    .subscr = py_blob_subscr,
    .locals_dict = (mp_obj_t) &py_blob_locals_dict
};

static 
# 4660 "omv/py/py_image.c" 3 4
      _Bool 
# 4660 "omv/py/py_image.c"
           py_image_find_blobs_threshold_cb(void *fun_obj, find_blobs_list_lnk_data_t *blob)
{
    py_blob_obj_t *o = (((py_blob_obj_t*)(m_malloc(sizeof(py_blob_obj_t) * (1)))));
    o->base.type = &py_blob_type;
    o->corners = mp_obj_new_tuple(4, (mp_obj_t [])
        {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob->corners[(20*0)/4].x),
                                            mp_obj_new_int(blob->corners[(20*0)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob->corners[(20*1)/4].x),
                                            mp_obj_new_int(blob->corners[(20*1)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob->corners[(20*2)/4].x),
                                            mp_obj_new_int(blob->corners[(20*2)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob->corners[(20*3)/4].x),
                                            mp_obj_new_int(blob->corners[(20*3)/4].y)})});
    point_t min_corners[4];
    point_min_area_rectangle(blob->corners, min_corners, 20);
    o->min_corners = mp_obj_new_tuple(4, (mp_obj_t [])
        {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_corners[0].x), mp_obj_new_int(min_corners[0].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_corners[1].x), mp_obj_new_int(min_corners[1].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_corners[2].x), mp_obj_new_int(min_corners[2].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_corners[3].x), mp_obj_new_int(min_corners[3].y)})});
    o->x = mp_obj_new_int(blob->rect.x);
    o->y = mp_obj_new_int(blob->rect.y);
    o->w = mp_obj_new_int(blob->rect.w);
    o->h = mp_obj_new_int(blob->rect.h);
    o->pixels = mp_obj_new_int(blob->pixels);
    o->cx = mp_obj_new_float(blob->centroid_x);
    o->cy = mp_obj_new_float(blob->centroid_y);
    o->rotation = mp_obj_new_float(blob->rotation);
    o->code = mp_obj_new_int(blob->code);
    o->count = mp_obj_new_int(blob->count);
    o->perimeter = mp_obj_new_int(blob->perimeter);
    o->roundness = mp_obj_new_float(blob->roundness);
    o->x_hist_bins = mp_obj_new_list(blob->x_hist_bins_count, 
# 4692 "omv/py/py_image.c" 3 4
                                                             ((void *)0)
# 4692 "omv/py/py_image.c"
                                                                 );
    o->y_hist_bins = mp_obj_new_list(blob->y_hist_bins_count, 
# 4693 "omv/py/py_image.c" 3 4
                                                             ((void *)0)
# 4693 "omv/py/py_image.c"
                                                                 );

    for (int i = 0; i < blob->x_hist_bins_count; i++) {
        ((mp_obj_list_t *) o->x_hist_bins)->items[i] = mp_obj_new_int(blob->x_hist_bins[i]);
    }

    for (int i = 0; i < blob->y_hist_bins_count; i++) {
        ((mp_obj_list_t *) o->y_hist_bins)->items[i] = mp_obj_new_int(blob->y_hist_bins[i]);
    }

    return mp_obj_is_true(mp_call_function_1(fun_obj, o));
}

static 
# 4706 "omv/py/py_image.c" 3 4
      _Bool 
# 4706 "omv/py/py_image.c"
           py_image_find_blobs_merge_cb(void *fun_obj, find_blobs_list_lnk_data_t *blob0, find_blobs_list_lnk_data_t *blob1)
{
    py_blob_obj_t *o0 = (((py_blob_obj_t*)(m_malloc(sizeof(py_blob_obj_t) * (1)))));
    o0->base.type = &py_blob_type;
    o0->corners = mp_obj_new_tuple(4, (mp_obj_t [])
        {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob0->corners[(20*0)/4].x),
                                            mp_obj_new_int(blob0->corners[(20*0)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob0->corners[(20*1)/4].x),
                                            mp_obj_new_int(blob0->corners[(20*1)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob0->corners[(20*2)/4].x),
                                            mp_obj_new_int(blob0->corners[(20*2)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob0->corners[(20*3)/4].x),
                                            mp_obj_new_int(blob0->corners[(20*3)/4].y)})});
    point_t min_area_rect_corners0[4];
    point_min_area_rectangle(blob0->corners, min_area_rect_corners0, 20);
    o0->min_corners = mp_obj_new_tuple(4, (mp_obj_t [])
        {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_area_rect_corners0[0].x), mp_obj_new_int(min_area_rect_corners0[0].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_area_rect_corners0[1].x), mp_obj_new_int(min_area_rect_corners0[1].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_area_rect_corners0[2].x), mp_obj_new_int(min_area_rect_corners0[2].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_area_rect_corners0[3].x), mp_obj_new_int(min_area_rect_corners0[3].y)})});
    o0->x = mp_obj_new_int(blob0->rect.x);
    o0->y = mp_obj_new_int(blob0->rect.y);
    o0->w = mp_obj_new_int(blob0->rect.w);
    o0->h = mp_obj_new_int(blob0->rect.h);
    o0->pixels = mp_obj_new_int(blob0->pixels);
    o0->cx = mp_obj_new_float(blob0->centroid_x);
    o0->cy = mp_obj_new_float(blob0->centroid_y);
    o0->rotation = mp_obj_new_float(blob0->rotation);
    o0->code = mp_obj_new_int(blob0->code);
    o0->count = mp_obj_new_int(blob0->count);
    o0->perimeter = mp_obj_new_int(blob0->perimeter);
    o0->roundness = mp_obj_new_float(blob0->roundness);
    o0->x_hist_bins = mp_obj_new_list(blob0->x_hist_bins_count, 
# 4738 "omv/py/py_image.c" 3 4
                                                               ((void *)0)
# 4738 "omv/py/py_image.c"
                                                                   );
    o0->y_hist_bins = mp_obj_new_list(blob0->y_hist_bins_count, 
# 4739 "omv/py/py_image.c" 3 4
                                                               ((void *)0)
# 4739 "omv/py/py_image.c"
                                                                   );

    for (int i = 0; i < blob0->x_hist_bins_count; i++) {
        ((mp_obj_list_t *) o0->x_hist_bins)->items[i] = mp_obj_new_int(blob0->x_hist_bins[i]);
    }

    for (int i = 0; i < blob0->y_hist_bins_count; i++) {
        ((mp_obj_list_t *) o0->y_hist_bins)->items[i] = mp_obj_new_int(blob0->y_hist_bins[i]);
    }

    py_blob_obj_t *o1 = (((py_blob_obj_t*)(m_malloc(sizeof(py_blob_obj_t) * (1)))));
    o1->base.type = &py_blob_type;
    o1->corners = mp_obj_new_tuple(4, (mp_obj_t [])
        {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob1->corners[(20*0)/4].x),
                                            mp_obj_new_int(blob1->corners[(20*0)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob1->corners[(20*1)/4].x),
                                            mp_obj_new_int(blob1->corners[(20*1)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob1->corners[(20*2)/4].x),
                                            mp_obj_new_int(blob1->corners[(20*2)/4].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(blob1->corners[(20*3)/4].x),
                                            mp_obj_new_int(blob1->corners[(20*3)/4].y)})});
    point_t min_area_rect_corners1[4];
    point_min_area_rectangle(blob1->corners, min_area_rect_corners1, 20);
    o1->min_corners = mp_obj_new_tuple(4, (mp_obj_t [])
        {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_area_rect_corners1[0].x), mp_obj_new_int(min_area_rect_corners1[0].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_area_rect_corners1[1].x), mp_obj_new_int(min_area_rect_corners1[1].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_area_rect_corners1[2].x), mp_obj_new_int(min_area_rect_corners1[2].y)}),
         mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_area_rect_corners1[3].x), mp_obj_new_int(min_area_rect_corners1[3].y)})});
    o1->x = mp_obj_new_int(blob1->rect.x);
    o1->y = mp_obj_new_int(blob1->rect.y);
    o1->w = mp_obj_new_int(blob1->rect.w);
    o1->h = mp_obj_new_int(blob1->rect.h);
    o1->pixels = mp_obj_new_int(blob1->pixels);
    o1->cx = mp_obj_new_float(blob1->centroid_x);
    o1->cy = mp_obj_new_float(blob1->centroid_y);
    o1->rotation = mp_obj_new_float(blob1->rotation);
    o1->code = mp_obj_new_int(blob1->code);
    o1->count = mp_obj_new_int(blob1->count);
    o1->perimeter = mp_obj_new_int(blob1->perimeter);
    o1->roundness = mp_obj_new_float(blob1->roundness);
    o1->x_hist_bins = mp_obj_new_list(blob1->x_hist_bins_count, 
# 4779 "omv/py/py_image.c" 3 4
                                                               ((void *)0)
# 4779 "omv/py/py_image.c"
                                                                   );
    o1->y_hist_bins = mp_obj_new_list(blob1->y_hist_bins_count, 
# 4780 "omv/py/py_image.c" 3 4
                                                               ((void *)0)
# 4780 "omv/py/py_image.c"
                                                                   );

    for (int i = 0; i < blob1->x_hist_bins_count; i++) {
        ((mp_obj_list_t *) o1->x_hist_bins)->items[i] = mp_obj_new_int(blob1->x_hist_bins[i]);
    }

    for (int i = 0; i < blob1->y_hist_bins_count; i++) {
        ((mp_obj_list_t *) o1->y_hist_bins)->items[i] = mp_obj_new_int(blob1->y_hist_bins[i]);
    }

    return mp_obj_is_true(mp_call_function_2(fun_obj, o0, o1));
}

static mp_obj_t py_image_find_blobs(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    list_t thresholds;
    list_init(&thresholds, sizeof(color_thresholds_list_lnk_data_t));
    py_helper_arg_to_thresholds(args[1], &thresholds);
    if (!list_size(&thresholds)) return mp_obj_new_list(0, 
# 4800 "omv/py/py_image.c" 3 4
                                                          ((void *)0)
# 4800 "omv/py/py_image.c"
                                                              );
    
# 4801 "omv/py/py_image.c" 3 4
   _Bool 
# 4801 "omv/py/py_image.c"
        invert = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), 
# 4801 "omv/py/py_image.c" 3 4
                                                                                                  0
# 4801 "omv/py/py_image.c"
                                                                                                       );

    rectangle_t roi;

 OverlaySwitch(2);

    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 3, kw_args, &roi);

    unsigned int x_stride =
        py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_stride)) << 2) | 2)), 2);
    do { if ((x_stride > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "x_stride must not be zero."))); } while (0); } } while(0);
    unsigned int y_stride =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_stride)) << 2) | 2)), 1);
    do { if ((y_stride > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "y_stride must not be zero."))); } while (0); } } while(0);
    unsigned int area_threshold =
        py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_area_threshold)) << 2) | 2)), 10);
    unsigned int pixels_threshold =
        py_helper_keyword_int(n_args, args, 7, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_pixels_threshold)) << 2) | 2)), 10);
    
# 4819 "omv/py/py_image.c" 3 4
   _Bool 
# 4819 "omv/py/py_image.c"
        merge =
        py_helper_keyword_int(n_args, args, 8, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_merge)) << 2) | 2)), 
# 4820 "omv/py/py_image.c" 3 4
                                                                                       0
# 4820 "omv/py/py_image.c"
                                                                                            );
    int margin =
        py_helper_keyword_int(n_args, args, 9, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_margin)) << 2) | 2)), 0);
    mp_obj_t threshold_cb =
        py_helper_keyword_object(n_args, args, 10, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold_cb)) << 2) | 2)));
    mp_obj_t merge_cb =
        py_helper_keyword_object(n_args, args, 11, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_merge_cb)) << 2) | 2)));
    unsigned int x_hist_bins_max =
        py_helper_keyword_int(n_args, args, 12, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_hist_bins_max)) << 2) | 2)), 0);
    unsigned int y_hist_bins_max =
        py_helper_keyword_int(n_args, args, 13, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_hist_bins_max)) << 2) | 2)), 0);

    list_t out;
    fb_alloc_mark();
    imlib_find_blobs(&out, arg_img, &roi, x_stride, y_stride, &thresholds, invert,
            area_threshold, pixels_threshold, merge, margin,
            py_image_find_blobs_threshold_cb, threshold_cb, py_image_find_blobs_merge_cb, merge_cb, x_hist_bins_max, y_hist_bins_max);
    fb_alloc_free_till_mark();
    list_free(&thresholds);

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 4840 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 4840 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_blobs_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_blob_obj_t *o = (((py_blob_obj_t*)(m_malloc(sizeof(py_blob_obj_t) * (1)))));
        o->base.type = &py_blob_type;
        o->corners = mp_obj_new_tuple(4, (mp_obj_t [])
            {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[(20*0)/4].x),
                                                mp_obj_new_int(lnk_data.corners[(20*0)/4].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[(20*1)/4].x),
                                                mp_obj_new_int(lnk_data.corners[(20*1)/4].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[(20*2)/4].x),
                                                mp_obj_new_int(lnk_data.corners[(20*2)/4].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[(20*3)/4].x),
                                                mp_obj_new_int(lnk_data.corners[(20*3)/4].y)})});
        point_t min_corners[4];
        point_min_area_rectangle(lnk_data.corners, min_corners, 20);
        o->min_corners = mp_obj_new_tuple(4, (mp_obj_t [])
            {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_corners[0].x), mp_obj_new_int(min_corners[0].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_corners[1].x), mp_obj_new_int(min_corners[1].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_corners[2].x), mp_obj_new_int(min_corners[2].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(min_corners[3].x), mp_obj_new_int(min_corners[3].y)})});
        o->x = mp_obj_new_int(lnk_data.rect.x);
        o->y = mp_obj_new_int(lnk_data.rect.y);
        o->w = mp_obj_new_int(lnk_data.rect.w);
        o->h = mp_obj_new_int(lnk_data.rect.h);
        o->pixels = mp_obj_new_int(lnk_data.pixels);
        o->cx = mp_obj_new_float(lnk_data.centroid_x);
        o->cy = mp_obj_new_float(lnk_data.centroid_y);
        o->rotation = mp_obj_new_float(lnk_data.rotation);
        o->code = mp_obj_new_int(lnk_data.code);
        o->count = mp_obj_new_int(lnk_data.count);
        o->perimeter = mp_obj_new_int(lnk_data.perimeter);
        o->roundness = mp_obj_new_float(lnk_data.roundness);
        o->x_hist_bins = mp_obj_new_list(lnk_data.x_hist_bins_count, 
# 4875 "omv/py/py_image.c" 3 4
                                                                    ((void *)0)
# 4875 "omv/py/py_image.c"
                                                                        );
        o->y_hist_bins = mp_obj_new_list(lnk_data.y_hist_bins_count, 
# 4876 "omv/py/py_image.c" 3 4
                                                                    ((void *)0)
# 4876 "omv/py/py_image.c"
                                                                        );

        for (int i = 0; i < lnk_data.x_hist_bins_count; i++) {
            ((mp_obj_list_t *) o->x_hist_bins)->items[i] = mp_obj_new_int(lnk_data.x_hist_bins[i]);
        }

        for (int i = 0; i < lnk_data.y_hist_bins_count; i++) {
            ((mp_obj_list_t *) o->y_hist_bins)->items[i] = mp_obj_new_int(lnk_data.y_hist_bins[i]);
        }

        objects_list->items[i] = o;
        if (lnk_data.x_hist_bins) xfree(lnk_data.x_hist_bins);
        if (lnk_data.y_hist_bins) xfree(lnk_data.y_hist_bins);
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_blobs_obj = {{&mp_type_fun_builtin_var}, 
# 4893 "omv/py/py_image.c" 3 4
      1
# 4893 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_find_blobs};


static mp_obj_t py_image_find_lines(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    unsigned int x_stride = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_stride)) << 2) | 2)), 2);
    do { if ((x_stride > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "x_stride must not be zero."))); } while (0); } } while(0);
    unsigned int y_stride = py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_stride)) << 2) | 2)), 1);
    do { if ((y_stride > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "y_stride must not be zero."))); } while (0); } } while(0);
    uint32_t threshold = py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 1000);
    unsigned int theta_margin = py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_theta_margin)) << 2) | 2)), 25);
    unsigned int rho_margin = py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rho_margin)) << 2) | 2)), 25);

    list_t out;
    fb_alloc_mark();
    imlib_find_lines(&out, arg_img, &roi, x_stride, y_stride, threshold, theta_margin, rho_margin);
    fb_alloc_free_till_mark();

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 4916 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 4916 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_lines_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_line_obj_t *o = (((py_line_obj_t*)(m_malloc(sizeof(py_line_obj_t) * (1)))));
        o->base.type = &py_line_type;
        o->x1 = mp_obj_new_int(lnk_data.line.x1);
        o->y1 = mp_obj_new_int(lnk_data.line.y1);
        o->x2 = mp_obj_new_int(lnk_data.line.x2);
        o->y2 = mp_obj_new_int(lnk_data.line.y2);
        int x_diff = lnk_data.line.x2 - lnk_data.line.x1;
        int y_diff = lnk_data.line.y2 - lnk_data.line.y1;
        o->length = mp_obj_new_int(fast_roundf(fast_sqrtf((x_diff * x_diff) + (y_diff * y_diff))));
        o->magnitude = mp_obj_new_int(lnk_data.magnitude);
        o->theta = mp_obj_new_int(lnk_data.theta);
        o->rho = mp_obj_new_int(lnk_data.rho);

        objects_list->items[i] = o;
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_lines_obj = {{&mp_type_fun_builtin_var}, 
# 4939 "omv/py/py_image.c" 3 4
      1
# 4939 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_lines};



static mp_obj_t py_image_find_line_segments(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    unsigned int merge_distance = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_merge_distance)) << 2) | 2)), 0);
    unsigned int max_theta_diff = py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_max_theta_diff)) << 2) | 2)), 15);

    list_t out;
    fb_alloc_mark();
    imlib_lsd_find_line_segments(&out, arg_img, &roi, merge_distance, max_theta_diff);
    fb_alloc_free_till_mark();

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 4958 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 4958 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_lines_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_line_obj_t *o = (((py_line_obj_t*)(m_malloc(sizeof(py_line_obj_t) * (1)))));
        o->base.type = &py_line_type;
        o->x1 = mp_obj_new_int(lnk_data.line.x1);
        o->y1 = mp_obj_new_int(lnk_data.line.y1);
        o->x2 = mp_obj_new_int(lnk_data.line.x2);
        o->y2 = mp_obj_new_int(lnk_data.line.y2);
        int x_diff = lnk_data.line.x2 - lnk_data.line.x1;
        int y_diff = lnk_data.line.y2 - lnk_data.line.y1;
        o->length = mp_obj_new_int(fast_roundf(fast_sqrtf((x_diff * x_diff) + (y_diff * y_diff))));
        o->magnitude = mp_obj_new_int(lnk_data.magnitude);
        o->theta = mp_obj_new_int(lnk_data.theta);
        o->rho = mp_obj_new_int(lnk_data.rho);

        objects_list->items[i] = o;
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_line_segments_obj = {{&mp_type_fun_builtin_var}, 
# 4981 "omv/py/py_image.c" 3 4
      1
# 4981 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_line_segments};





typedef struct py_circle_obj {
    mp_obj_base_t base;
    mp_obj_t x, y, r, magnitude;
} py_circle_obj_t;

static void py_circle_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_circle_obj_t *self = self_in;
    mp_printf(print,
              "{\"x\":%d, \"y\":%d, \"r\":%d, \"magnitude\":%d}",
              mp_obj_get_int(self->x),
              mp_obj_get_int(self->y),
              mp_obj_get_int(self->r),
              mp_obj_get_int(self->magnitude));
}

static mp_obj_t py_circle_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_circle_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(4, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 5012 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 5012 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 4, index, 
# 5016 "omv/py/py_image.c" 3 4
                                                                        0
# 5016 "omv/py/py_image.c"
                                                                             )) {
            case 0: return self->x;
            case 1: return self->y;
            case 2: return self->r;
            case 3: return self->magnitude;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_circle_circle(mp_obj_t self_in)
{
    return mp_obj_new_tuple(3, (mp_obj_t []) {((py_circle_obj_t *) self_in)->x,
                                              ((py_circle_obj_t *) self_in)->y,
                                              ((py_circle_obj_t *) self_in)->r});
}

mp_obj_t py_circle_x(mp_obj_t self_in) { return ((py_circle_obj_t *) self_in)->x; }
mp_obj_t py_circle_y(mp_obj_t self_in) { return ((py_circle_obj_t *) self_in)->y; }
mp_obj_t py_circle_r(mp_obj_t self_in) { return ((py_circle_obj_t *) self_in)->r; }
mp_obj_t py_circle_magnitude(mp_obj_t self_in) { return ((py_circle_obj_t *) self_in)->magnitude; }

static const mp_obj_fun_builtin_fixed_t py_circle_circle_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_circle_circle};
static const mp_obj_fun_builtin_fixed_t py_circle_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_circle_x};
static const mp_obj_fun_builtin_fixed_t py_circle_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_circle_y};
static const mp_obj_fun_builtin_fixed_t py_circle_r_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_circle_r};
static const mp_obj_fun_builtin_fixed_t py_circle_magnitude_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_circle_magnitude};

static const mp_rom_map_elem_t py_circle_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_circle)) << 2) | 2)), (&py_circle_circle_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_circle_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_circle_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_r)) << 2) | 2)), (&py_circle_r_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_magnitude)) << 2) | 2)), (&py_circle_magnitude_obj) }
};

static const mp_obj_dict_t py_circle_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_circle_locals_dict_table) / sizeof((py_circle_locals_dict_table)[0])), .alloc = (sizeof(py_circle_locals_dict_table) / sizeof((py_circle_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_circle_locals_dict_table, }, };

static const mp_obj_type_t py_circle_type = {
    { &mp_type_type },
    .name = MP_QSTR_circle,
    .print = py_circle_print,
    .subscr = py_circle_subscr,
    .locals_dict = (mp_obj_t) &py_circle_locals_dict
};

static mp_obj_t py_image_find_circles(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    unsigned int x_stride = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_stride)) << 2) | 2)), 2);
    do { if ((x_stride > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "x_stride must not be zero."))); } while (0); } } while(0);
    unsigned int y_stride = py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_stride)) << 2) | 2)), 1);
    do { if ((y_stride > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "y_stride must not be zero."))); } while (0); } } while(0);
    uint32_t threshold = py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 2000);
    unsigned int x_margin = py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_margin)) << 2) | 2)), 10);
    unsigned int y_margin = py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_margin)) << 2) | 2)), 10);
    unsigned int r_margin = py_helper_keyword_int(n_args, args, 7, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_r_margin)) << 2) | 2)), 10);
    unsigned int r_min = ({ __typeof__ (py_helper_keyword_int(n_args, args, 8, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_r_min)) << 2) | 2)), 2)) _a = (py_helper_keyword_int(n_args, args, 8, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_r_min)) << 2) | 2)), 2)); __typeof__ (2) _b = (2); _a > _b ? _a : _b; })
                  ;
    unsigned int r_max = ({ __typeof__ (py_helper_keyword_int(n_args, args, 9, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_r_max)) << 2) | 2)), ({ __typeof__ ((roi.w / 2)) _a = ((roi.w / 2)); __typeof__ ((roi.h / 2)) _b = ((roi.h / 2)); _a < _b ? _a : _b; }))) _a = (py_helper_keyword_int(n_args, args, 9, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_r_max)) << 2) | 2)), ({ __typeof__ ((roi.w / 2)) _a = ((roi.w / 2)); __typeof__ ((roi.h / 2)) _b = ((roi.h / 2)); _a < _b ? _a : _b; }))); __typeof__ (({ __typeof__ ((roi.w / 2)) _a = ((roi.w / 2)); __typeof__ ((roi.h / 2)) _b = ((roi.h / 2)); _a < _b ? _a : _b; })) _b = (({ __typeof__ ((roi.w / 2)) _a = ((roi.w / 2)); __typeof__ ((roi.h / 2)) _b = ((roi.h / 2)); _a < _b ? _a : _b; })); _a < _b ? _a : _b; })
                                                                                ;
    unsigned int r_step = py_helper_keyword_int(n_args, args, 10, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_r_step)) << 2) | 2)), 2);

    list_t out;
    fb_alloc_mark();
    imlib_find_circles(&out, arg_img, &roi, x_stride, y_stride, threshold, x_margin, y_margin, r_margin,
                       r_min, r_max, r_step);
    fb_alloc_free_till_mark();

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 5089 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 5089 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_circles_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_circle_obj_t *o = (((py_circle_obj_t*)(m_malloc(sizeof(py_circle_obj_t) * (1)))));
        o->base.type = &py_circle_type;
        o->x = mp_obj_new_int(lnk_data.p.x);
        o->y = mp_obj_new_int(lnk_data.p.y);
        o->r = mp_obj_new_int(lnk_data.r);
        o->magnitude = mp_obj_new_int(lnk_data.magnitude);

        objects_list->items[i] = o;
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_circles_obj = {{&mp_type_fun_builtin_var}, 
# 5106 "omv/py/py_image.c" 3 4
      1
# 5106 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_circles};





typedef struct py_rect_obj {
    mp_obj_base_t base;
    mp_obj_t corners;
    mp_obj_t x, y, w, h, magnitude;
} py_rect_obj_t;

static void py_rect_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_rect_obj_t *self = self_in;
    mp_printf(print,
              "{\"x\":%d, \"y\":%d, \"w\":%d, \"h\":%d, \"magnitude\":%d}",
              mp_obj_get_int(self->x),
              mp_obj_get_int(self->y),
              mp_obj_get_int(self->w),
              mp_obj_get_int(self->h),
              mp_obj_get_int(self->magnitude));
}

static mp_obj_t py_rect_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_rect_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(5, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 5139 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 5139 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 5, index, 
# 5143 "omv/py/py_image.c" 3 4
                                                                      0
# 5143 "omv/py/py_image.c"
                                                                           )) {
            case 0: return self->x;
            case 1: return self->y;
            case 2: return self->w;
            case 3: return self->h;
            case 4: return self->magnitude;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_rect_corners(mp_obj_t self_in) { return ((py_rect_obj_t *) self_in)->corners; }
mp_obj_t py_rect_rect(mp_obj_t self_in)
{
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_rect_obj_t *) self_in)->x,
                                              ((py_rect_obj_t *) self_in)->y,
                                              ((py_rect_obj_t *) self_in)->w,
                                              ((py_rect_obj_t *) self_in)->h});
}

mp_obj_t py_rect_x(mp_obj_t self_in) { return ((py_rect_obj_t *) self_in)->x; }
mp_obj_t py_rect_y(mp_obj_t self_in) { return ((py_rect_obj_t *) self_in)->y; }
mp_obj_t py_rect_w(mp_obj_t self_in) { return ((py_rect_obj_t *) self_in)->w; }
mp_obj_t py_rect_h(mp_obj_t self_in) { return ((py_rect_obj_t *) self_in)->h; }
mp_obj_t py_rect_magnitude(mp_obj_t self_in) { return ((py_rect_obj_t *) self_in)->magnitude; }

static const mp_obj_fun_builtin_fixed_t py_rect_corners_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_rect_corners};
static const mp_obj_fun_builtin_fixed_t py_rect_rect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_rect_rect};
static const mp_obj_fun_builtin_fixed_t py_rect_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_rect_x};
static const mp_obj_fun_builtin_fixed_t py_rect_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_rect_y};
static const mp_obj_fun_builtin_fixed_t py_rect_w_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_rect_w};
static const mp_obj_fun_builtin_fixed_t py_rect_h_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_rect_h};
static const mp_obj_fun_builtin_fixed_t py_rect_magnitude_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_rect_magnitude};

static const mp_rom_map_elem_t py_rect_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_corners)) << 2) | 2)), (&py_rect_corners_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rect)) << 2) | 2)), (&py_rect_rect_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_rect_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_rect_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_w)) << 2) | 2)), (&py_rect_w_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_h)) << 2) | 2)), (&py_rect_h_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_magnitude)) << 2) | 2)), (&py_rect_magnitude_obj) }
};

static const mp_obj_dict_t py_rect_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_rect_locals_dict_table) / sizeof((py_rect_locals_dict_table)[0])), .alloc = (sizeof(py_rect_locals_dict_table) / sizeof((py_rect_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_rect_locals_dict_table, }, };

static const mp_obj_type_t py_rect_type = {
    { &mp_type_type },
    .name = MP_QSTR_rect,
    .print = py_rect_print,
    .subscr = py_rect_subscr,
    .locals_dict = (mp_obj_t) &py_rect_locals_dict
};

static mp_obj_t py_image_find_rects(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    uint32_t threshold = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 1000);

    list_t out;
    fb_alloc_mark();
    imlib_find_rects(&out, arg_img, &roi, threshold);
    fb_alloc_free_till_mark();

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 5211 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 5211 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_rects_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_rect_obj_t *o = (((py_rect_obj_t*)(m_malloc(sizeof(py_rect_obj_t) * (1)))));
        o->base.type = &py_rect_type;
        o->corners = mp_obj_new_tuple(4, (mp_obj_t [])
            {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[0].x), mp_obj_new_int(lnk_data.corners[0].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[1].x), mp_obj_new_int(lnk_data.corners[1].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[2].x), mp_obj_new_int(lnk_data.corners[2].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[3].x), mp_obj_new_int(lnk_data.corners[3].y)})});
        o->x = mp_obj_new_int(lnk_data.rect.x);
        o->y = mp_obj_new_int(lnk_data.rect.y);
        o->w = mp_obj_new_int(lnk_data.rect.w);
        o->h = mp_obj_new_int(lnk_data.rect.h);
        o->magnitude = mp_obj_new_int(lnk_data.magnitude);

        objects_list->items[i] = o;
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_rects_obj = {{&mp_type_fun_builtin_var}, 
# 5234 "omv/py/py_image.c" 3 4
      1
# 5234 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_rects};





typedef struct py_qrcode_obj {
    mp_obj_base_t base;
    mp_obj_t corners;
    mp_obj_t x, y, w, h, payload, version, ecc_level, mask, data_type, eci;
} py_qrcode_obj_t;

static void py_qrcode_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_qrcode_obj_t *self = self_in;
    mp_printf(print,
              "{\"x\":%d, \"y\":%d, \"w\":%d, \"h\":%d, \"payload\":\"%s\","
              " \"version\":%d, \"ecc_level\":%d, \"mask\":%d, \"data_type\":%d, \"eci\":%d}",
              mp_obj_get_int(self->x),
              mp_obj_get_int(self->y),
              mp_obj_get_int(self->w),
              mp_obj_get_int(self->h),
              mp_obj_str_get_str(self->payload),
              mp_obj_get_int(self->version),
              mp_obj_get_int(self->ecc_level),
              mp_obj_get_int(self->mask),
              mp_obj_get_int(self->data_type),
              mp_obj_get_int(self->eci));
}

static mp_obj_t py_qrcode_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_qrcode_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(10, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 5273 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 5273 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 10, index, 
# 5277 "omv/py/py_image.c" 3 4
                                                                        0
# 5277 "omv/py/py_image.c"
                                                                             )) {
            case 0: return self->x;
            case 1: return self->y;
            case 2: return self->w;
            case 3: return self->h;
            case 4: return self->payload;
            case 5: return self->version;
            case 6: return self->ecc_level;
            case 7: return self->mask;
            case 8: return self->data_type;
            case 9: return self->eci;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_qrcode_corners(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->corners; }
mp_obj_t py_qrcode_rect(mp_obj_t self_in)
{
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_qrcode_obj_t *) self_in)->x,
                                              ((py_qrcode_obj_t *) self_in)->y,
                                              ((py_qrcode_obj_t *) self_in)->w,
                                              ((py_qrcode_obj_t *) self_in)->h});
}

mp_obj_t py_qrcode_x(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->x; }
mp_obj_t py_qrcode_y(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->y; }
mp_obj_t py_qrcode_w(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->w; }
mp_obj_t py_qrcode_h(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->h; }
mp_obj_t py_qrcode_payload(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->payload; }
mp_obj_t py_qrcode_version(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->version; }
mp_obj_t py_qrcode_ecc_level(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->ecc_level; }
mp_obj_t py_qrcode_mask(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->mask; }
mp_obj_t py_qrcode_data_type(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->data_type; }
mp_obj_t py_qrcode_eci(mp_obj_t self_in) { return ((py_qrcode_obj_t *) self_in)->eci; }
mp_obj_t py_qrcode_is_numeric(mp_obj_t self_in) { return mp_obj_new_bool(mp_obj_get_int(((py_qrcode_obj_t *) self_in)->data_type) == 1); }
mp_obj_t py_qrcode_is_alphanumeric(mp_obj_t self_in) { return mp_obj_new_bool(mp_obj_get_int(((py_qrcode_obj_t *) self_in)->data_type) == 2); }
mp_obj_t py_qrcode_is_binary(mp_obj_t self_in) { return mp_obj_new_bool(mp_obj_get_int(((py_qrcode_obj_t *) self_in)->data_type) == 4); }
mp_obj_t py_qrcode_is_kanji(mp_obj_t self_in) { return mp_obj_new_bool(mp_obj_get_int(((py_qrcode_obj_t *) self_in)->data_type) == 8); }

static const mp_obj_fun_builtin_fixed_t py_qrcode_corners_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_corners};
static const mp_obj_fun_builtin_fixed_t py_qrcode_rect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_rect};
static const mp_obj_fun_builtin_fixed_t py_qrcode_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_x};
static const mp_obj_fun_builtin_fixed_t py_qrcode_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_y};
static const mp_obj_fun_builtin_fixed_t py_qrcode_w_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_w};
static const mp_obj_fun_builtin_fixed_t py_qrcode_h_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_h};
static const mp_obj_fun_builtin_fixed_t py_qrcode_payload_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_payload};
static const mp_obj_fun_builtin_fixed_t py_qrcode_version_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_version};
static const mp_obj_fun_builtin_fixed_t py_qrcode_ecc_level_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_ecc_level};
static const mp_obj_fun_builtin_fixed_t py_qrcode_mask_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_mask};
static const mp_obj_fun_builtin_fixed_t py_qrcode_data_type_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_data_type};
static const mp_obj_fun_builtin_fixed_t py_qrcode_eci_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_eci};
static const mp_obj_fun_builtin_fixed_t py_qrcode_is_numeric_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_is_numeric};
static const mp_obj_fun_builtin_fixed_t py_qrcode_is_alphanumeric_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_is_alphanumeric};
static const mp_obj_fun_builtin_fixed_t py_qrcode_is_binary_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_is_binary};
static const mp_obj_fun_builtin_fixed_t py_qrcode_is_kanji_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_qrcode_is_kanji};

static const mp_rom_map_elem_t py_qrcode_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_corners)) << 2) | 2)), (&py_qrcode_corners_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rect)) << 2) | 2)), (&py_qrcode_rect_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_qrcode_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_qrcode_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_w)) << 2) | 2)), (&py_qrcode_w_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_h)) << 2) | 2)), (&py_qrcode_h_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_payload)) << 2) | 2)), (&py_qrcode_payload_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_version)) << 2) | 2)), (&py_qrcode_version_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_ecc_level)) << 2) | 2)), (&py_qrcode_ecc_level_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_mask)) << 2) | 2)), (&py_qrcode_mask_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_data_type)) << 2) | 2)), (&py_qrcode_data_type_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_eci)) << 2) | 2)), (&py_qrcode_eci_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_is_numeric)) << 2) | 2)), (&py_qrcode_is_numeric_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_is_alphanumeric)) << 2) | 2)), (&py_qrcode_is_alphanumeric_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_is_binary)) << 2) | 2)), (&py_qrcode_is_binary_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_is_kanji)) << 2) | 2)), (&py_qrcode_is_kanji_obj) }
};

static const mp_obj_dict_t py_qrcode_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_qrcode_locals_dict_table) / sizeof((py_qrcode_locals_dict_table)[0])), .alloc = (sizeof(py_qrcode_locals_dict_table) / sizeof((py_qrcode_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_qrcode_locals_dict_table, }, };

static const mp_obj_type_t py_qrcode_type = {
    { &mp_type_type },
    .name = MP_QSTR_qrcode,
    .print = py_qrcode_print,
    .subscr = py_qrcode_subscr,
    .locals_dict = (mp_obj_t) &py_qrcode_locals_dict
};

static mp_obj_t py_image_find_qrcodes(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    list_t out;
    fb_alloc_mark();
    imlib_find_qrcodes(&out, arg_img, &roi);
    fb_alloc_free_till_mark();

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 5375 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 5375 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_qrcodes_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_qrcode_obj_t *o = (((py_qrcode_obj_t*)(m_malloc(sizeof(py_qrcode_obj_t) * (1)))));
        o->base.type = &py_qrcode_type;
        o->corners = mp_obj_new_tuple(4, (mp_obj_t [])
            {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[0].x), mp_obj_new_int(lnk_data.corners[0].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[1].x), mp_obj_new_int(lnk_data.corners[1].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[2].x), mp_obj_new_int(lnk_data.corners[2].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[3].x), mp_obj_new_int(lnk_data.corners[3].y)})});
        o->x = mp_obj_new_int(lnk_data.rect.x);
        o->y = mp_obj_new_int(lnk_data.rect.y);
        o->w = mp_obj_new_int(lnk_data.rect.w);
        o->h = mp_obj_new_int(lnk_data.rect.h);
        o->payload = mp_obj_new_str(lnk_data.payload, lnk_data.payload_len, 
# 5391 "omv/py/py_image.c" 3 4
                                                                           0
# 5391 "omv/py/py_image.c"
                                                                                );
        o->version = mp_obj_new_int(lnk_data.version);
        o->ecc_level = mp_obj_new_int(lnk_data.ecc_level);
        o->mask = mp_obj_new_int(lnk_data.mask);
        o->data_type = mp_obj_new_int(lnk_data.data_type);
        o->eci = mp_obj_new_int(lnk_data.eci);

        objects_list->items[i] = o;
        xfree(lnk_data.payload);
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_qrcodes_obj = {{&mp_type_fun_builtin_var}, 
# 5404 "omv/py/py_image.c" 3 4
      1
# 5404 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_qrcodes};





typedef struct py_apriltag_obj {
    mp_obj_base_t base;
    mp_obj_t corners;
    mp_obj_t x, y, w, h, id, family, cx, cy, rotation, decision_margin, hamming, goodness;
    mp_obj_t x_translation, y_translation, z_translation;
    mp_obj_t x_rotation, y_rotation, z_rotation;
} py_apriltag_obj_t;

static void py_apriltag_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_apriltag_obj_t *self = self_in;
    mp_printf(print,
              "{\"x\":%d, \"y\":%d, \"w\":%d, \"h\":%d, \"id\":%d,"
              " \"family\":%d, \"cx\":%d, \"cy\":%d, \"rotation\":%f, \"decision_margin\":%f, \"hamming\":%d, \"goodness\":%f,"
              " \"x_translation\":%f, \"y_translation\":%f, \"z_translation\":%f,"
              " \"x_rotation\":%f, \"y_rotation\":%f, \"z_rotation\":%f}",
              mp_obj_get_int(self->x),
              mp_obj_get_int(self->y),
              mp_obj_get_int(self->w),
              mp_obj_get_int(self->h),
              mp_obj_get_int(self->id),
              mp_obj_get_int(self->family),
              mp_obj_get_int(self->cx),
              mp_obj_get_int(self->cy),
              (double) mp_obj_get_float(self->rotation),
              (double) mp_obj_get_float(self->decision_margin),
              mp_obj_get_int(self->hamming),
              (double) mp_obj_get_float(self->goodness),
              (double) mp_obj_get_float(self->x_translation),
              (double) mp_obj_get_float(self->y_translation),
              (double) mp_obj_get_float(self->z_translation),
              (double) mp_obj_get_float(self->x_rotation),
              (double) mp_obj_get_float(self->y_rotation),
              (double) mp_obj_get_float(self->z_rotation));
}

static mp_obj_t py_apriltag_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_apriltag_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(18, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 5455 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 5455 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 18, index, 
# 5459 "omv/py/py_image.c" 3 4
                                                                          0
# 5459 "omv/py/py_image.c"
                                                                               )) {
            case 0: return self->x;
            case 1: return self->y;
            case 2: return self->w;
            case 3: return self->h;
            case 4: return self->id;
            case 5: return self->family;
            case 6: return self->cx;
            case 7: return self->cy;
            case 8: return self->rotation;
            case 9: return self->decision_margin;
            case 10: return self->hamming;
            case 11: return self->goodness;
            case 12: return self->x_translation;
            case 13: return self->y_translation;
            case 14: return self->z_translation;
            case 15: return self->x_rotation;
            case 16: return self->y_rotation;
            case 17: return self->z_rotation;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_apriltag_corners(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->corners; }
mp_obj_t py_apriltag_rect(mp_obj_t self_in)
{
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_apriltag_obj_t *) self_in)->x,
                                              ((py_apriltag_obj_t *) self_in)->y,
                                              ((py_apriltag_obj_t *) self_in)->w,
                                              ((py_apriltag_obj_t *) self_in)->h});
}

mp_obj_t py_apriltag_x(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->x; }
mp_obj_t py_apriltag_y(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->y; }
mp_obj_t py_apriltag_w(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->w; }
mp_obj_t py_apriltag_h(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->h; }
mp_obj_t py_apriltag_id(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->id; }
mp_obj_t py_apriltag_family(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->family; }
mp_obj_t py_apriltag_cx(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->cx; }
mp_obj_t py_apriltag_cy(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->cy; }
mp_obj_t py_apriltag_rotation(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->rotation; }
mp_obj_t py_apriltag_decision_margin(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->decision_margin; }
mp_obj_t py_apriltag_hamming(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->hamming; }
mp_obj_t py_apriltag_goodness(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->goodness; }
mp_obj_t py_apriltag_x_translation(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->x_translation; }
mp_obj_t py_apriltag_y_translation(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->y_translation; }
mp_obj_t py_apriltag_z_translation(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->z_translation; }
mp_obj_t py_apriltag_x_rotation(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->x_rotation; }
mp_obj_t py_apriltag_y_rotation(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->y_rotation; }
mp_obj_t py_apriltag_z_rotation(mp_obj_t self_in) { return ((py_apriltag_obj_t *) self_in)->z_rotation; }

static const mp_obj_fun_builtin_fixed_t py_apriltag_corners_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_corners};
static const mp_obj_fun_builtin_fixed_t py_apriltag_rect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_rect};
static const mp_obj_fun_builtin_fixed_t py_apriltag_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_x};
static const mp_obj_fun_builtin_fixed_t py_apriltag_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_y};
static const mp_obj_fun_builtin_fixed_t py_apriltag_w_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_w};
static const mp_obj_fun_builtin_fixed_t py_apriltag_h_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_h};
static const mp_obj_fun_builtin_fixed_t py_apriltag_id_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_id};
static const mp_obj_fun_builtin_fixed_t py_apriltag_family_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_family};
static const mp_obj_fun_builtin_fixed_t py_apriltag_cx_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_cx};
static const mp_obj_fun_builtin_fixed_t py_apriltag_cy_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_cy};
static const mp_obj_fun_builtin_fixed_t py_apriltag_rotation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_rotation};
static const mp_obj_fun_builtin_fixed_t py_apriltag_decision_margin_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_decision_margin};
static const mp_obj_fun_builtin_fixed_t py_apriltag_hamming_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_hamming};
static const mp_obj_fun_builtin_fixed_t py_apriltag_goodness_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_goodness};
static const mp_obj_fun_builtin_fixed_t py_apriltag_x_translation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_x_translation};
static const mp_obj_fun_builtin_fixed_t py_apriltag_y_translation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_y_translation};
static const mp_obj_fun_builtin_fixed_t py_apriltag_z_translation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_z_translation};
static const mp_obj_fun_builtin_fixed_t py_apriltag_x_rotation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_x_rotation};
static const mp_obj_fun_builtin_fixed_t py_apriltag_y_rotation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_y_rotation};
static const mp_obj_fun_builtin_fixed_t py_apriltag_z_rotation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_apriltag_z_rotation};

static const mp_rom_map_elem_t py_apriltag_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_corners)) << 2) | 2)), (&py_apriltag_corners_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rect)) << 2) | 2)), (&py_apriltag_rect_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_apriltag_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_apriltag_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_w)) << 2) | 2)), (&py_apriltag_w_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_h)) << 2) | 2)), (&py_apriltag_h_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_id)) << 2) | 2)), (&py_apriltag_id_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_family)) << 2) | 2)), (&py_apriltag_family_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cx)) << 2) | 2)), (&py_apriltag_cx_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cy)) << 2) | 2)), (&py_apriltag_cy_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rotation)) << 2) | 2)), (&py_apriltag_rotation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_decision_margin)) << 2) | 2)), (&py_apriltag_decision_margin_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_hamming)) << 2) | 2)), (&py_apriltag_hamming_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_goodness)) << 2) | 2)), (&py_apriltag_goodness_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_translation)) << 2) | 2)), (&py_apriltag_x_translation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_translation)) << 2) | 2)), (&py_apriltag_y_translation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_z_translation)) << 2) | 2)), (&py_apriltag_z_translation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_rotation)) << 2) | 2)), (&py_apriltag_x_rotation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_rotation)) << 2) | 2)), (&py_apriltag_y_rotation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_z_rotation)) << 2) | 2)), (&py_apriltag_z_rotation_obj) }
};

static const mp_obj_dict_t py_apriltag_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_apriltag_locals_dict_table) / sizeof((py_apriltag_locals_dict_table)[0])), .alloc = (sizeof(py_apriltag_locals_dict_table) / sizeof((py_apriltag_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_apriltag_locals_dict_table, }, };

static const mp_obj_type_t py_apriltag_type = {
    { &mp_type_type },
    .name = MP_QSTR_apriltag,
    .print = py_apriltag_print,
    .subscr = py_apriltag_subscr,
    .locals_dict = (mp_obj_t) &py_apriltag_locals_dict
};

static mp_obj_t py_image_find_apriltags(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);
    do { if (((roi.w * roi.h) < 65536) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "The maximum supported resolution for find_apriltags() is < 64K pixels."))); } while (0); } } while(0);
    if ((roi.w < 4) || (roi.h < 4)) {
        return mp_obj_new_list(0, 
# 5573 "omv/py/py_image.c" 3 4
                                 ((void *)0)
# 5573 "omv/py/py_image.c"
                                     );
    }

    apriltag_families_t families = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_families)) << 2) | 2)), TAG36H11);

    float fx = py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_fx)) << 2) | 2)), (2.8 / 3.984) * arg_img->w);

    float fy = py_helper_keyword_float(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_fy)) << 2) | 2)), (2.8 / 2.952) * arg_img->h);

    float cx = py_helper_keyword_float(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cx)) << 2) | 2)), arg_img->w * 0.5);

    float cy = py_helper_keyword_float(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_cy)) << 2) | 2)), arg_img->h * 0.5);

    list_t out;
    fb_alloc_mark();
    imlib_find_apriltags(&out, arg_img, &roi, families, fx, fy, cx, cy);
    fb_alloc_free_till_mark();

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 5591 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 5591 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_apriltags_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_apriltag_obj_t *o = (((py_apriltag_obj_t*)(m_malloc(sizeof(py_apriltag_obj_t) * (1)))));
        o->base.type = &py_apriltag_type;
        o->corners = mp_obj_new_tuple(4, (mp_obj_t [])
            {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[0].x), mp_obj_new_int(lnk_data.corners[0].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[1].x), mp_obj_new_int(lnk_data.corners[1].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[2].x), mp_obj_new_int(lnk_data.corners[2].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[3].x), mp_obj_new_int(lnk_data.corners[3].y)})});
        o->x = mp_obj_new_int(lnk_data.rect.x);
        o->y = mp_obj_new_int(lnk_data.rect.y);
        o->w = mp_obj_new_int(lnk_data.rect.w);
        o->h = mp_obj_new_int(lnk_data.rect.h);
        o->id = mp_obj_new_int(lnk_data.id);
        o->family = mp_obj_new_int(lnk_data.family);
        o->cx = mp_obj_new_int(lnk_data.centroid.x);
        o->cy = mp_obj_new_int(lnk_data.centroid.y);
        o->rotation = mp_obj_new_float(lnk_data.z_rotation);
        o->decision_margin = mp_obj_new_float(lnk_data.decision_margin);
        o->hamming = mp_obj_new_int(lnk_data.hamming);
        o->goodness = mp_obj_new_float(lnk_data.goodness);
        o->x_translation = mp_obj_new_float(lnk_data.x_translation);
        o->y_translation = mp_obj_new_float(lnk_data.y_translation);
        o->z_translation = mp_obj_new_float(lnk_data.z_translation);
        o->x_rotation = mp_obj_new_float(lnk_data.x_rotation);
        o->y_rotation = mp_obj_new_float(lnk_data.y_rotation);
        o->z_rotation = mp_obj_new_float(lnk_data.z_rotation);

        objects_list->items[i] = o;
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_apriltags_obj = {{&mp_type_fun_builtin_var}, 
# 5627 "omv/py/py_image.c" 3 4
      1
# 5627 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_apriltags};





typedef struct py_datamatrix_obj {
    mp_obj_base_t base;
    mp_obj_t corners;
    mp_obj_t x, y, w, h, payload, rotation, rows, columns, capacity, padding;
} py_datamatrix_obj_t;

static void py_datamatrix_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_datamatrix_obj_t *self = self_in;
    mp_printf(print,
              "{\"x\":%d, \"y\":%d, \"w\":%d, \"h\":%d, \"payload\":\"%s\","
              " \"rotation\":%f, \"rows\":%d, \"columns\":%d, \"capacity\":%d, \"padding\":%d}",
              mp_obj_get_int(self->x),
              mp_obj_get_int(self->y),
              mp_obj_get_int(self->w),
              mp_obj_get_int(self->h),
              mp_obj_str_get_str(self->payload),
              (double) mp_obj_get_float(self->rotation),
              mp_obj_get_int(self->rows),
              mp_obj_get_int(self->columns),
              mp_obj_get_int(self->capacity),
              mp_obj_get_int(self->padding));
}

static mp_obj_t py_datamatrix_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_datamatrix_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(10, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 5666 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 5666 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 10, index, 
# 5670 "omv/py/py_image.c" 3 4
                                                                            0
# 5670 "omv/py/py_image.c"
                                                                                 )) {
            case 0: return self->x;
            case 1: return self->y;
            case 2: return self->w;
            case 3: return self->h;
            case 4: return self->payload;
            case 5: return self->rotation;
            case 6: return self->rows;
            case 7: return self->columns;
            case 8: return self->capacity;
            case 9: return self->padding;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_datamatrix_corners(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->corners; }
mp_obj_t py_datamatrix_rect(mp_obj_t self_in)
{
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_datamatrix_obj_t *) self_in)->x,
                                              ((py_datamatrix_obj_t *) self_in)->y,
                                              ((py_datamatrix_obj_t *) self_in)->w,
                                              ((py_datamatrix_obj_t *) self_in)->h});
}

mp_obj_t py_datamatrix_x(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->x; }
mp_obj_t py_datamatrix_y(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->y; }
mp_obj_t py_datamatrix_w(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->w; }
mp_obj_t py_datamatrix_h(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->h; }
mp_obj_t py_datamatrix_payload(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->payload; }
mp_obj_t py_datamatrix_rotation(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->rotation; }
mp_obj_t py_datamatrix_rows(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->rows; }
mp_obj_t py_datamatrix_columns(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->columns; }
mp_obj_t py_datamatrix_capacity(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->capacity; }
mp_obj_t py_datamatrix_padding(mp_obj_t self_in) { return ((py_datamatrix_obj_t *) self_in)->padding; }

static const mp_obj_fun_builtin_fixed_t py_datamatrix_corners_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_corners};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_rect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_rect};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_x};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_y};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_w_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_w};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_h_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_h};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_payload_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_payload};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_rotation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_rotation};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_rows_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_rows};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_columns_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_columns};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_capacity_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_capacity};
static const mp_obj_fun_builtin_fixed_t py_datamatrix_padding_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_datamatrix_padding};

static const mp_rom_map_elem_t py_datamatrix_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_corners)) << 2) | 2)), (&py_datamatrix_corners_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rect)) << 2) | 2)), (&py_datamatrix_rect_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_datamatrix_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_datamatrix_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_w)) << 2) | 2)), (&py_datamatrix_w_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_h)) << 2) | 2)), (&py_datamatrix_h_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_payload)) << 2) | 2)), (&py_datamatrix_payload_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rotation)) << 2) | 2)), (&py_datamatrix_rotation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rows)) << 2) | 2)), (&py_datamatrix_rows_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_columns)) << 2) | 2)), (&py_datamatrix_columns_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_capacity)) << 2) | 2)), (&py_datamatrix_capacity_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_padding)) << 2) | 2)), (&py_datamatrix_padding_obj) }
};

static const mp_obj_dict_t py_datamatrix_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_datamatrix_locals_dict_table) / sizeof((py_datamatrix_locals_dict_table)[0])), .alloc = (sizeof(py_datamatrix_locals_dict_table) / sizeof((py_datamatrix_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_datamatrix_locals_dict_table, }, };

static const mp_obj_type_t py_datamatrix_type = {
    { &mp_type_type },
    .name = MP_QSTR_datamatrix,
    .print = py_datamatrix_print,
    .subscr = py_datamatrix_subscr,
    .locals_dict = (mp_obj_t) &py_datamatrix_locals_dict
};

static mp_obj_t py_image_find_datamatrices(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    int effort = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_effort)) << 2) | 2)), 200);

    list_t out;
    fb_alloc_mark();
    imlib_find_datamatrices(&out, arg_img, &roi, effort);
    fb_alloc_free_till_mark();

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 5758 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 5758 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_datamatrices_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_datamatrix_obj_t *o = (((py_datamatrix_obj_t*)(m_malloc(sizeof(py_datamatrix_obj_t) * (1)))));
        o->base.type = &py_datamatrix_type;
        o->corners = mp_obj_new_tuple(4, (mp_obj_t [])
            {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[0].x), mp_obj_new_int(lnk_data.corners[0].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[1].x), mp_obj_new_int(lnk_data.corners[1].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[2].x), mp_obj_new_int(lnk_data.corners[2].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[3].x), mp_obj_new_int(lnk_data.corners[3].y)})});
        o->x = mp_obj_new_int(lnk_data.rect.x);
        o->y = mp_obj_new_int(lnk_data.rect.y);
        o->w = mp_obj_new_int(lnk_data.rect.w);
        o->h = mp_obj_new_int(lnk_data.rect.h);
        o->payload = mp_obj_new_str(lnk_data.payload, lnk_data.payload_len, 
# 5774 "omv/py/py_image.c" 3 4
                                                                           0
# 5774 "omv/py/py_image.c"
                                                                                );
        o->rotation = mp_obj_new_float((((lnk_data.rotation)*3.141592654f)/180));
        o->rows = mp_obj_new_int(lnk_data.rows);
        o->columns = mp_obj_new_int(lnk_data.columns);
        o->capacity = mp_obj_new_int(lnk_data.capacity);
        o->padding = mp_obj_new_int(lnk_data.padding);

        objects_list->items[i] = o;
        xfree(lnk_data.payload);
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_datamatrices_obj = {{&mp_type_fun_builtin_var}, 
# 5787 "omv/py/py_image.c" 3 4
      1
# 5787 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_datamatrices};





typedef struct py_barcode_obj {
    mp_obj_base_t base;
    mp_obj_t corners;
    mp_obj_t x, y, w, h, payload, type, rotation, quality;
} py_barcode_obj_t;

static void py_barcode_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_barcode_obj_t *self = self_in;
    mp_printf(print,
              "{\"x\":%d, \"y\":%d, \"w\":%d, \"h\":%d, \"payload\":\"%s\","
              " \"type\":%d, \"rotation\":%f, \"quality\":%d}",
              mp_obj_get_int(self->x),
              mp_obj_get_int(self->y),
              mp_obj_get_int(self->w),
              mp_obj_get_int(self->h),
              mp_obj_str_get_str(self->payload),
              mp_obj_get_int(self->type),
              (double) mp_obj_get_float(self->rotation),
              mp_obj_get_int(self->quality));
}

static mp_obj_t py_barcode_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_barcode_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(8, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 5824 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 5824 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 8, index, 
# 5828 "omv/py/py_image.c" 3 4
                                                                         0
# 5828 "omv/py/py_image.c"
                                                                              )) {
            case 0: return self->x;
            case 1: return self->y;
            case 2: return self->w;
            case 3: return self->h;
            case 4: return self->payload;
            case 5: return self->type;
            case 6: return self->rotation;
            case 7: return self->quality;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_barcode_corners(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->corners; }
mp_obj_t py_barcode_rect(mp_obj_t self_in)
{
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_barcode_obj_t *) self_in)->x,
                                              ((py_barcode_obj_t *) self_in)->y,
                                              ((py_barcode_obj_t *) self_in)->w,
                                              ((py_barcode_obj_t *) self_in)->h});
}

mp_obj_t py_barcode_x(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->x; }
mp_obj_t py_barcode_y(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->y; }
mp_obj_t py_barcode_w(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->w; }
mp_obj_t py_barcode_h(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->h; }
mp_obj_t py_barcode_payload_fun(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->payload; }
mp_obj_t py_barcode_type_fun(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->type; }
mp_obj_t py_barcode_rotation_fun(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->rotation; }
mp_obj_t py_barcode_quality_fun(mp_obj_t self_in) { return ((py_barcode_obj_t *) self_in)->quality; }

static const mp_obj_fun_builtin_fixed_t py_barcode_corners_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_corners};
static const mp_obj_fun_builtin_fixed_t py_barcode_rect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_rect};
static const mp_obj_fun_builtin_fixed_t py_barcode_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_x};
static const mp_obj_fun_builtin_fixed_t py_barcode_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_y};
static const mp_obj_fun_builtin_fixed_t py_barcode_w_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_w};
static const mp_obj_fun_builtin_fixed_t py_barcode_h_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_h};
static const mp_obj_fun_builtin_fixed_t py_barcode_payload_fun_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_payload_fun};
static const mp_obj_fun_builtin_fixed_t py_barcode_type_fun_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_type_fun};
static const mp_obj_fun_builtin_fixed_t py_barcode_rotation_fun_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_rotation_fun};
static const mp_obj_fun_builtin_fixed_t py_barcode_quality_fun_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_barcode_quality_fun};

static const mp_rom_map_elem_t py_barcode_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_corners)) << 2) | 2)), (&py_barcode_corners_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rect)) << 2) | 2)), (&py_barcode_rect_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_barcode_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_barcode_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_w)) << 2) | 2)), (&py_barcode_w_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_h)) << 2) | 2)), (&py_barcode_h_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_payload)) << 2) | 2)), (&py_barcode_payload_fun_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_type)) << 2) | 2)), (&py_barcode_type_fun_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rotation)) << 2) | 2)), (&py_barcode_rotation_fun_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_quality)) << 2) | 2)), (&py_barcode_quality_fun_obj) }
};

static const mp_obj_dict_t py_barcode_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_barcode_locals_dict_table) / sizeof((py_barcode_locals_dict_table)[0])), .alloc = (sizeof(py_barcode_locals_dict_table) / sizeof((py_barcode_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_barcode_locals_dict_table, }, };

static const mp_obj_type_t py_barcode_type = {
    { &mp_type_type },
    .name = MP_QSTR_barcode,
    .print = py_barcode_print,
    .subscr = py_barcode_subscr,
    .locals_dict = (mp_obj_t) &py_barcode_locals_dict
};

static mp_obj_t py_image_find_barcodes(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    list_t out;
    fb_alloc_mark();
    imlib_find_barcodes(&out, arg_img, &roi);
    fb_alloc_free_till_mark();

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 5906 "omv/py/py_image.c" 3 4
                                                                  ((void *)0)
# 5906 "omv/py/py_image.c"
                                                                      );
    for (size_t i = 0; list_size(&out); i++) {
        find_barcodes_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_barcode_obj_t *o = (((py_barcode_obj_t*)(m_malloc(sizeof(py_barcode_obj_t) * (1)))));
        o->base.type = &py_barcode_type;
        o->corners = mp_obj_new_tuple(4, (mp_obj_t [])
            {mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[0].x), mp_obj_new_int(lnk_data.corners[0].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[1].x), mp_obj_new_int(lnk_data.corners[1].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[2].x), mp_obj_new_int(lnk_data.corners[2].y)}),
             mp_obj_new_tuple(2, (mp_obj_t []) {mp_obj_new_int(lnk_data.corners[3].x), mp_obj_new_int(lnk_data.corners[3].y)})});
        o->x = mp_obj_new_int(lnk_data.rect.x);
        o->y = mp_obj_new_int(lnk_data.rect.y);
        o->w = mp_obj_new_int(lnk_data.rect.w);
        o->h = mp_obj_new_int(lnk_data.rect.h);
        o->payload = mp_obj_new_str(lnk_data.payload, lnk_data.payload_len, 
# 5922 "omv/py/py_image.c" 3 4
                                                                           0
# 5922 "omv/py/py_image.c"
                                                                                );
        o->type = mp_obj_new_int(lnk_data.type);
        o->rotation = mp_obj_new_float((((lnk_data.rotation)*3.141592654f)/180));
        o->quality = mp_obj_new_int(lnk_data.quality);

        objects_list->items[i] = o;
        xfree(lnk_data.payload);
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_barcodes_obj = {{&mp_type_fun_builtin_var}, 
# 5933 "omv/py/py_image.c" 3 4
      1
# 5933 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_barcodes};





typedef struct py_displacement_obj {
    mp_obj_base_t base;
    mp_obj_t x_translation, y_translation, rotation, scale, response;
} py_displacement_obj_t;

static void py_displacement_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_displacement_obj_t *self = self_in;
    mp_printf(print,
              "{\"x_translation\":%f, \"y_translation\":%f, \"rotation\":%f, \"scale\":%f, \"response\":%f}",
              (double) mp_obj_get_float(self->x_translation),
              (double) mp_obj_get_float(self->y_translation),
              (double) mp_obj_get_float(self->rotation),
              (double) mp_obj_get_float(self->scale),
              (double) mp_obj_get_float(self->response));
}

static mp_obj_t py_displacement_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_displacement_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(5, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 5965 "omv/py/py_image.c" 3 4
                                                                               ((void *)0)
# 5965 "omv/py/py_image.c"
                                                                                   );
            memcpy(result->items, &(self->x_translation) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 5, index, 
# 5969 "omv/py/py_image.c" 3 4
                                                                              0
# 5969 "omv/py/py_image.c"
                                                                                   )) {
            case 0: return self->x_translation;
            case 1: return self->y_translation;
            case 2: return self->rotation;
            case 3: return self->scale;
            case 4: return self->response;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_displacement_x_translation(mp_obj_t self_in) { return ((py_displacement_obj_t *) self_in)->x_translation; }
mp_obj_t py_displacement_y_translation(mp_obj_t self_in) { return ((py_displacement_obj_t *) self_in)->y_translation; }
mp_obj_t py_displacement_rotation(mp_obj_t self_in) { return ((py_displacement_obj_t *) self_in)->rotation; }
mp_obj_t py_displacement_scale(mp_obj_t self_in) { return ((py_displacement_obj_t *) self_in)->scale; }
mp_obj_t py_displacement_response(mp_obj_t self_in) { return ((py_displacement_obj_t *) self_in)->response; }

static const mp_obj_fun_builtin_fixed_t py_displacement_x_translation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_displacement_x_translation};
static const mp_obj_fun_builtin_fixed_t py_displacement_y_translation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_displacement_y_translation};
static const mp_obj_fun_builtin_fixed_t py_displacement_rotation_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_displacement_rotation};
static const mp_obj_fun_builtin_fixed_t py_displacement_scale_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_displacement_scale};
static const mp_obj_fun_builtin_fixed_t py_displacement_response_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_displacement_response};

static const mp_rom_map_elem_t py_displacement_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_translation)) << 2) | 2)), (&py_displacement_x_translation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_translation)) << 2) | 2)), (&py_displacement_y_translation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rotation)) << 2) | 2)), (&py_displacement_rotation_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_scale)) << 2) | 2)), (&py_displacement_scale_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_response)) << 2) | 2)), (&py_displacement_response_obj) }
};

static const mp_obj_dict_t py_displacement_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_displacement_locals_dict_table) / sizeof((py_displacement_locals_dict_table)[0])), .alloc = (sizeof(py_displacement_locals_dict_table) / sizeof((py_displacement_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_displacement_locals_dict_table, }, };

static const mp_obj_type_t py_displacement_type = {
    { &mp_type_type },
    .name = MP_QSTR_displacement,
    .print = py_displacement_print,
    .subscr = py_displacement_subscr,
    .locals_dict = (mp_obj_t) &py_displacement_locals_dict
};

static mp_obj_t py_image_find_displacement(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    image_t *arg_template_img = py_helper_arg_to_image_mutable(args[1]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 2, kw_args, &roi);

    rectangle_t template_roi;
    py_helper_keyword_rectangle(arg_template_img, n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_template_roi)) << 2) | 2)), &template_roi);

    do { if (((roi.w != template_roi.w) || (roi.h != template_roi.h)) == 1) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "ROI(w,h) != TEMPLATE_ROI(w,h)"))); } while (0); } } while(0);

    
# 6023 "omv/py/py_image.c" 3 4
   _Bool 
# 6023 "omv/py/py_image.c"
        logpolar = py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_logpolar)) << 2) | 2)), 
# 6023 "omv/py/py_image.c" 3 4
                                                                                                      0
# 6023 "omv/py/py_image.c"
                                                                                                           );
    
# 6024 "omv/py/py_image.c" 3 4
   _Bool 
# 6024 "omv/py/py_image.c"
        fix_rotation_scale = py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_fix_rotation_scale)) << 2) | 2)), 
# 6024 "omv/py/py_image.c" 3 4
                                                                                                                          0
# 6024 "omv/py/py_image.c"
                                                                                                                               );

    float x, y, r, s, response;
    fb_alloc_mark();
    imlib_phasecorrelate(arg_img, arg_template_img, &roi, &template_roi, logpolar, fix_rotation_scale, &x, &y, &r, &s, &response);
    fb_alloc_free_till_mark();

    py_displacement_obj_t *o = (((py_displacement_obj_t*)(m_malloc(sizeof(py_displacement_obj_t) * (1)))));
    o->base.type = &py_displacement_type;
    o->x_translation = mp_obj_new_float(x);
    o->y_translation = mp_obj_new_float(y);
    o->rotation = mp_obj_new_float(r);
    o->scale = mp_obj_new_float(s);
    o->response = mp_obj_new_float(response);

    return o;
}
static const mp_obj_fun_builtin_var_t py_image_find_displacement_obj = {{&mp_type_fun_builtin_var}, 
# 6041 "omv/py/py_image.c" 3 4
      1
# 6041 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_find_displacement};



static mp_obj_t py_image_find_template(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_grayscale(args[0]);
    image_t *arg_template = py_helper_arg_to_image_grayscale(args[1]);
    float arg_thresh = mp_obj_get_float(args[2]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 3, kw_args, &roi);


    do { if (((roi.w >= arg_template->w && roi.h >= arg_template->h)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Region of interest is smaller than template!"))); } while (0); } } while(0)
                                                           ;


    do { if ((((roi.x + roi.w) <= arg_img->w && (roi.y + roi.h) <= arg_img->h)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Region of interest is bigger than image!"))); } while (0); } } while(0)
                                                       ;

    int step = py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_step)) << 2) | 2)), 2);
    int search = py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_search)) << 2) | 2)), SEARCH_EX);


    rectangle_t r;
    float corr;
    fb_alloc_mark();
    if (search == SEARCH_DS) {
        corr = imlib_template_match_ds(arg_img, arg_template, &r);
    } else {
        corr = imlib_template_match_ex(arg_img, arg_template, &roi, step, &r);
    }
    fb_alloc_free_till_mark();

    if (corr > arg_thresh) {
        mp_obj_t rec_obj[4] = {
            mp_obj_new_int(r.x),
            mp_obj_new_int(r.y),
            mp_obj_new_int(r.w),
            mp_obj_new_int(r.h)
        };
        return mp_obj_new_tuple(4, rec_obj);
    }
    return (((mp_obj_t)&mp_const_none_obj));
}
static const mp_obj_fun_builtin_var_t py_image_find_template_obj = {{&mp_type_fun_builtin_var}, 
# 6087 "omv/py/py_image.c" 3 4
      1
# 6087 "omv/py/py_image.c"
      , 3, (0xffff), .fun.kw = py_image_find_template};


static mp_obj_t py_image_find_features(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);
    cascade_t *cascade = py_cascade_cobj(args[1]);
    cascade->threshold = py_helper_keyword_float(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 0.5f);
    cascade->scale_factor = py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_scale_factor)) << 2) | 2)), 1.5f);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 4, kw_args, &roi);
 OverlaySwitch(3);

    do { if (((roi.w > cascade->window.w && roi.h > cascade->window.h)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Region of interest is smaller than detector window!"))); } while (0); } } while(0)
                                                                  ;


    fb_alloc_mark();
    array_t *objects_array = imlib_detect_objects(arg_img, cascade, &roi);
    fb_alloc_free_till_mark();


    mp_obj_t objects_list = mp_obj_new_list(0, 
# 6110 "omv/py/py_image.c" 3 4
                                              ((void *)0)
# 6110 "omv/py/py_image.c"
                                                  );
    for (int i=0; i<array_length(objects_array); i++) {
        rectangle_t *r = array_at(objects_array, i);
        mp_obj_t rec_obj[4] = {
            mp_obj_new_int(r->x),
            mp_obj_new_int(r->y),
            mp_obj_new_int(r->w),
            mp_obj_new_int(r->h),
        };
        mp_obj_list_append(objects_list, mp_obj_new_tuple(4, rec_obj));
    }
    array_free(objects_array);
    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_image_find_features_obj = {{&mp_type_fun_builtin_var}, 
# 6124 "omv/py/py_image.c" 3 4
      1
# 6124 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_find_features};

static mp_obj_t py_image_find_eye(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_grayscale(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    point_t iris;
    imlib_find_iris(arg_img, &iris, &roi);

    mp_obj_t eye_obj[2] = {
        mp_obj_new_int(iris.x),
        mp_obj_new_int(iris.y),
    };

    return mp_obj_new_tuple(2, eye_obj);
}
static const mp_obj_fun_builtin_var_t py_image_find_eye_obj = {{&mp_type_fun_builtin_var}, 
# 6143 "omv/py/py_image.c" 3 4
      1
# 6143 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_find_eye};


static mp_obj_t py_image_find_lbp(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_grayscale(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    py_lbp_obj_t *lbp_obj = (((py_lbp_obj_t*)(m_malloc(sizeof(py_lbp_obj_t) * (1)))));
    lbp_obj->base.type = &py_lbp_type;
    lbp_obj->hist = imlib_lbp_desc(arg_img, &roi);
    return lbp_obj;
}
static const mp_obj_fun_builtin_var_t py_image_find_lbp_obj = {{&mp_type_fun_builtin_var}, 
# 6158 "omv/py/py_image.c" 3 4
      1
# 6158 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_find_lbp};



static mp_obj_t py_image_find_keypoints(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_mutable(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    int threshold =
        py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 20);
    
# 6171 "omv/py/py_image.c" 3 4
   _Bool 
# 6171 "omv/py/py_image.c"
        normalized =
        py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_normalized)) << 2) | 2)), 
# 6172 "omv/py/py_image.c" 3 4
                                                                                            0
# 6172 "omv/py/py_image.c"
                                                                                                 );
    float scale_factor =
        py_helper_keyword_float(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_scale_factor)) << 2) | 2)), 1.5f);
    int max_keypoints =
        py_helper_keyword_int(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_max_keypoints)) << 2) | 2)), 100);
    corner_detector_t corner_detector =
        py_helper_keyword_int(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_corner_detector)) << 2) | 2)), CORNER_AGAST);







    fb_alloc_mark();
    array_t *kpts = orb_find_keypoints(arg_img, normalized, threshold, scale_factor, max_keypoints, corner_detector, &roi);
    fb_alloc_free_till_mark();

    if (array_length(kpts)) {
        py_kp_obj_t *kp_obj = (((py_kp_obj_t*)(m_malloc(sizeof(py_kp_obj_t) * (1)))));
        kp_obj->base.type = &py_kp_type;
        kp_obj->kpts = kpts;
        kp_obj->threshold = threshold;
        kp_obj->normalized = normalized;
        return kp_obj;
    }
    return (((mp_obj_t)&mp_const_none_obj));
}
static const mp_obj_fun_builtin_var_t py_image_find_keypoints_obj = {{&mp_type_fun_builtin_var}, 
# 6200 "omv/py/py_image.c" 3 4
      1
# 6200 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_keypoints};



static mp_obj_t py_image_find_edges(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_grayscale(args[0]);
    edge_detector_t edge_type = mp_obj_get_int(args[1]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 2, kw_args, &roi);

    int thresh[2] = {100, 200};
    mp_obj_t thresh_obj = py_helper_keyword_object(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)));

    if (thresh_obj) {
        mp_obj_t *thresh_array;
        mp_obj_get_array_fixed_n(thresh_obj, 2, &thresh_array);
        thresh[0] = mp_obj_get_int(thresh_array[0]);
        thresh[1] = mp_obj_get_int(thresh_array[1]);
    }

    switch (edge_type) {
        case EDGE_SIMPLE: {
            fb_alloc_mark();
            imlib_edge_simple(arg_img, &roi, thresh[0], thresh[1]);
            fb_alloc_free_till_mark();
            break;
        }
        case EDGE_CANNY: {
            fb_alloc_mark();
            imlib_edge_canny(arg_img, &roi, thresh[0], thresh[1]);
            fb_alloc_free_till_mark();
            break;
        }

    }

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_find_edges_obj = {{&mp_type_fun_builtin_var}, 
# 6240 "omv/py/py_image.c" 3 4
      1
# 6240 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_find_edges};



static mp_obj_t py_image_find_hog(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *arg_img = py_helper_arg_to_image_grayscale(args[0]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 1, kw_args, &roi);

    int size = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), 8);

    fb_alloc_mark();
    imlib_find_hog(arg_img, &roi, size);
    fb_alloc_free_till_mark();

    return args[0];
}
static const mp_obj_fun_builtin_var_t py_image_find_hog_obj = {{&mp_type_fun_builtin_var}, 
# 6259 "omv/py/py_image.c" 3 4
      1
# 6259 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_find_hog};



static mp_obj_t py_image_selective_search(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    image_t *img = py_helper_arg_to_image_mutable(args[0]);
    int t = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 500);
    int s = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), 20);
    float a1 = py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a1)) << 2) | 2)), 1.0f);
    float a2 = py_helper_keyword_float(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a1)) << 2) | 2)), 1.0f);
    float a3 = py_helper_keyword_float(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_a1)) << 2) | 2)), 1.0f);
    array_t *proposals_array = imlib_selective_search(img, t, s, a1, a2, a3);


    mp_obj_t proposals_list = mp_obj_new_list(0, 
# 6274 "omv/py/py_image.c" 3 4
                                                ((void *)0)
# 6274 "omv/py/py_image.c"
                                                    );
    for (int i=0; i<array_length(proposals_array); i++) {
        rectangle_t *r = array_at(proposals_array, i);
        mp_obj_t rec_obj[4] = {
            mp_obj_new_int(r->x),
            mp_obj_new_int(r->y),
            mp_obj_new_int(r->w),
            mp_obj_new_int(r->h),
        };
        mp_obj_list_append(proposals_list, mp_obj_new_tuple(4, rec_obj));
    }

    array_free(proposals_array);
    return proposals_list;
}
static const mp_obj_fun_builtin_var_t py_image_selective_search_obj = {{&mp_type_fun_builtin_var}, 
# 6289 "omv/py/py_image.c" 3 4
      1
# 6289 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_selective_search};


static const mp_rom_map_elem_t locals_dict_table[] = {

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_width)) << 2) | 2)), (&py_image_width_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_height)) << 2) | 2)), (&py_image_height_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_format)) << 2) | 2)), (&py_image_format_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), (&py_image_size_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_pixel)) << 2) | 2)), (&py_image_get_pixel_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_set_pixel)) << 2) | 2)), (&py_image_set_pixel_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_mean_pool)) << 2) | 2)), (&py_image_mean_pool_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_mean_pooled)) << 2) | 2)), (&py_image_mean_pooled_obj)},





    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_midpoint_pool)) << 2) | 2)), (&py_image_midpoint_pool_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_midpoint_pooled)) << 2) | 2)), (&py_image_midpoint_pooled_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_to_bitmap)) << 2) | 2)), (&py_image_to_bitmap_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_to_grayscale)) << 2) | 2)), (&py_image_to_grayscale_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_to_rgb565)) << 2) | 2)), (&py_image_to_rgb565_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_to_rainbow)) << 2) | 2)), (&py_image_to_rainbow_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_compress)) << 2) | 2)), (&py_image_compress_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_compress_for_ide)) << 2) | 2)), (&py_image_compress_for_ide_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_compressed)) << 2) | 2)), (&py_image_compressed_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_compressed_for_ide)) << 2) | 2)), (&py_image_compressed_for_ide_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_copy)) << 2) | 2)), (&py_image_copy_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_crop)) << 2) | 2)), (&py_image_crop_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_scale)) << 2) | 2)), (&py_image_crop_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_save)) << 2) | 2)), (&py_image_save_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_clear)) << 2) | 2)), (&py_image_clear_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_line)) << 2) | 2)), (&py_image_draw_line_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_rectangle)) << 2) | 2)), (&py_image_draw_rectangle_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_circle)) << 2) | 2)), (&py_image_draw_circle_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_ellipse)) << 2) | 2)), (&py_image_draw_ellipse_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_string)) << 2) | 2)), (&py_image_draw_string_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_cross)) << 2) | 2)), (&py_image_draw_cross_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_arrow)) << 2) | 2)), (&py_image_draw_arrow_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_edges)) << 2) | 2)), (&py_image_draw_edges_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_image)) << 2) | 2)), (&py_image_draw_image_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_flood_fill)) << 2) | 2)), (&py_image_flood_fill_obj)},



    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_draw_keypoints)) << 2) | 2)), (&py_image_draw_keypoints_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_mask_rectangle)) << 2) | 2)), (&py_image_mask_rectangle_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_mask_circle)) << 2) | 2)), (&py_image_mask_circle_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_mask_ellipse)) << 2) | 2)), (&py_image_mask_ellipse_obj)},


    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_binary)) << 2) | 2)), (&py_image_binary_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_invert)) << 2) | 2)), (&py_image_invert_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_and)) << 2) | 2)), (&py_image_b_and_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_and)) << 2) | 2)), (&py_image_b_and_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_nand)) << 2) | 2)), (&py_image_b_nand_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_nand)) << 2) | 2)), (&py_image_b_nand_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_or)) << 2) | 2)), (&py_image_b_or_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_or)) << 2) | 2)), (&py_image_b_or_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_nor)) << 2) | 2)), (&py_image_b_nor_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_nor)) << 2) | 2)), (&py_image_b_nor_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_xor)) << 2) | 2)), (&py_image_b_xor_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_xor)) << 2) | 2)), (&py_image_b_xor_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_xnor)) << 2) | 2)), (&py_image_b_xnor_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_b_xnor)) << 2) | 2)), (&py_image_b_xnor_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_erode)) << 2) | 2)), (&py_image_erode_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_dilate)) << 2) | 2)), (&py_image_dilate_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_open)) << 2) | 2)), (&py_image_open_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_close)) << 2) | 2)), (&py_image_close_obj)},
# 6387 "omv/py/py_image.c"
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_top_hat)) << 2) | 2)), (&py_image_top_hat_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_black_hat)) << 2) | 2)), (&py_image_black_hat_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_gamma_corr)) << 2) | 2)), (&py_image_gamma_corr_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_negate)) << 2) | 2)), (&py_image_negate_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_assign)) << 2) | 2)), (&py_image_replace_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_replace)) << 2) | 2)), (&py_image_replace_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_set)) << 2) | 2)), (&py_image_replace_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_add)) << 2) | 2)), (&py_image_add_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_sub)) << 2) | 2)), (&py_image_sub_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_mul)) << 2) | 2)), (&py_image_mul_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_div)) << 2) | 2)), (&py_image_div_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_min)) << 2) | 2)), (&py_image_min_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_max)) << 2) | 2)), (&py_image_max_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_difference)) << 2) | 2)), (&py_image_difference_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_blend)) << 2) | 2)), (&py_image_blend_obj)},
# 6420 "omv/py/py_image.c"
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_histeq)) << 2) | 2)), (&py_image_histeq_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_mean)) << 2) | 2)), (&py_image_mean_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_median)) << 2) | 2)), (&py_image_median_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_mode)) << 2) | 2)), (&py_image_mode_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_midpoint)) << 2) | 2)), (&py_image_midpoint_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_morph)) << 2) | 2)), (&py_image_morph_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_blur)) << 2) | 2)), (&py_image_gaussian_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_gaussian)) << 2) | 2)), (&py_image_gaussian_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_gaussian_blur)) << 2) | 2)), (&py_image_gaussian_obj)},






    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_laplacian)) << 2) | 2)), (&py_image_laplacian_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_bilateral)) << 2) | 2)), (&py_image_bilateral_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_cartoon)) << 2) | 2)), (&py_image_cartoon_obj)},





    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_remove_shadows)) << 2) | 2)), (&py_image_remove_shadows_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_chrominvar)) << 2) | 2)), (&py_image_chrominvar_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_illuminvar)) << 2) | 2)), (&py_image_illuminvar_obj)},





    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_linpolar)) << 2) | 2)), (&py_image_linpolar_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_logpolar)) << 2) | 2)), (&py_image_logpolar_obj)},



    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_lens_corr)) << 2) | 2)), (&py_image_lens_corr_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_rotation_corr)) << 2) | 2)), (&py_image_rotation_corr_obj)},





    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_similarity)) << 2) | 2)), (&py_image_get_similarity_obj)},



    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_hist)) << 2) | 2)), (&py_image_get_histogram_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_histogram)) << 2) | 2)), (&py_image_get_histogram_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_histogram)) << 2) | 2)), (&py_image_get_histogram_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_stats)) << 2) | 2)), (&py_image_get_statistics_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_statistics)) << 2) | 2)), (&py_image_get_statistics_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_statistics)) << 2) | 2)), (&py_image_get_statistics_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_get_regression)) << 2) | 2)), (&py_image_get_regression_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_blobs)) << 2) | 2)), (&py_image_find_blobs_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_lines)) << 2) | 2)), (&py_image_find_lines_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_line_segments)) << 2) | 2)), (&py_image_find_line_segments_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_circles)) << 2) | 2)), (&py_image_find_circles_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_rects)) << 2) | 2)), (&py_image_find_rects_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_qrcodes)) << 2) | 2)), (&py_image_find_qrcodes_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_apriltags)) << 2) | 2)), (&py_image_find_apriltags_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_datamatrices)) << 2) | 2)), (&py_image_find_datamatrices_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_barcodes)) << 2) | 2)), (&py_image_find_barcodes_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_displacement)) << 2) | 2)), (&py_image_find_displacement_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_template)) << 2) | 2)), (&py_image_find_template_obj)},



    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_features)) << 2) | 2)), (&py_image_find_features_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_eye)) << 2) | 2)), (&py_image_find_eye_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_lbp)) << 2) | 2)), (&py_image_find_lbp_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_keypoints)) << 2) | 2)), (&py_image_find_keypoints_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_edges)) << 2) | 2)), (&py_image_find_edges_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_find_hog)) << 2) | 2)), (&py_image_find_hog_obj)},




    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_selective_search)) << 2) | 2)), (&py_image_selective_search_obj)},



};
static const mp_obj_dict_t locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(locals_dict_table) / sizeof((locals_dict_table)[0])), .alloc = (sizeof(locals_dict_table) / sizeof((locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)locals_dict_table, }, };

static const mp_obj_type_t py_image_type = {
    { &mp_type_type },
    .name = MP_QSTR_Image,
    .print = py_image_print,
    .buffer_p = { .get_buffer = py_image_get_buffer },
    .subscr = py_image_subscr,
    .locals_dict = (mp_obj_t) &locals_dict
};


typedef struct py_imagewriter_obj {
    mp_obj_base_t base;
    FIL fp;
    uint32_t ms;
} py_imagewriter_obj_t;

static void py_imagewriter_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_imagewriter_obj_t *self = self_in;
    mp_printf(print, "{\"size\":%d}", ((&self->fp)->obj.objsize));
}

mp_obj_t py_imagewriter_size(mp_obj_t self_in)
{
    return mp_obj_new_int(((&((py_imagewriter_obj_t *) self_in)->fp)->obj.objsize));
}

mp_obj_t py_imagewriter_add_frame(mp_obj_t self_in, mp_obj_t img_obj)
{


    FIL *fp = &((py_imagewriter_obj_t *) self_in)->fp;
    do { __typeof__ (img_obj) _a = (img_obj); __typeof__ (&py_image_type) _b = (&py_image_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);
    image_t *arg_img = &((py_image_obj_t *) img_obj)->_cobj;

    uint32_t ms = systick_current_millis();
    write_long(fp, ms - ((py_imagewriter_obj_t *) self_in)->ms);
    ((py_imagewriter_obj_t *) self_in)->ms = ms;

    write_long(fp, arg_img->w);
    write_long(fp, arg_img->h);
    write_long(fp, arg_img->bpp);

    uint32_t size = image_size(arg_img);

    write_data(fp, arg_img->data, size);
    if (size % 16) write_data(fp, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 16 - (size % 16));
    return self_in;
}

mp_obj_t py_imagewriter_close(mp_obj_t self_in)
{
    file_close(&((py_imagewriter_obj_t *) self_in)->fp);
    return self_in;
}

static const mp_obj_fun_builtin_fixed_t py_imagewriter_size_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_imagewriter_size};
static const mp_obj_fun_builtin_fixed_t py_imagewriter_add_frame_obj = {{&mp_type_fun_builtin_2}, .fun._2 = py_imagewriter_add_frame};
static const mp_obj_fun_builtin_fixed_t py_imagewriter_close_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_imagewriter_close};

static const mp_rom_map_elem_t py_imagewriter_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), (&py_imagewriter_size_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_add_frame)) << 2) | 2)), (&py_imagewriter_add_frame_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_close)) << 2) | 2)), (&py_imagewriter_close_obj) }
};

static const mp_obj_dict_t py_imagewriter_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_imagewriter_locals_dict_table) / sizeof((py_imagewriter_locals_dict_table)[0])), .alloc = (sizeof(py_imagewriter_locals_dict_table) / sizeof((py_imagewriter_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_imagewriter_locals_dict_table, }, };

static const mp_obj_type_t py_imagewriter_type = {
    { &mp_type_type },
    .name = MP_QSTR_imagewriter,
    .print = py_imagewriter_print,
    .locals_dict = (mp_obj_t) &py_imagewriter_locals_dict
};

mp_obj_t py_image_imagewriter(mp_obj_t path)
{
    py_imagewriter_obj_t *obj = (((py_imagewriter_obj_t*)(m_malloc(sizeof(py_imagewriter_obj_t) * (1)))));
    obj->base.type = &py_imagewriter_type;
    file_write_open(&obj->fp, mp_obj_str_get_str(path));

    write_long(&obj->fp, *((uint32_t *) "OMV "));
    write_long(&obj->fp, *((uint32_t *) "IMG "));
    write_long(&obj->fp, *((uint32_t *) "STR "));
    write_long(&obj->fp, *((uint32_t *) "V1.0"));

    obj->ms = systick_current_millis();
    return obj;
}
static const mp_obj_fun_builtin_fixed_t py_image_imagewriter_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_imagewriter};


typedef struct py_imagereader_obj {
    mp_obj_base_t base;
    FIL fp;
    uint32_t ms;
} py_imagereader_obj_t;

static void py_imagereader_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_imagereader_obj_t *self = self_in;
    mp_printf(print, "{\"size\":%d}", ((&self->fp)->obj.objsize));
}

mp_obj_t py_imagereader_size(mp_obj_t self_in)
{
    return mp_obj_new_int(((&((py_imagereader_obj_t *) self_in)->fp)->obj.objsize));
}

mp_obj_t py_imagereader_next_frame(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{


    mp_obj_t copy_to_fb_obj = py_helper_keyword_object(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_copy_to_fb)) << 2) | 2)));
    
# 6712 "omv/py/py_image.c" 3 4
   _Bool 
# 6712 "omv/py/py_image.c"
        copy_to_fb = 
# 6712 "omv/py/py_image.c" 3 4
                     1
# 6712 "omv/py/py_image.c"
                         ;
    image_t *arg_other = 
# 6713 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 6713 "omv/py/py_image.c"
                            ;

    if (copy_to_fb_obj) {
        if (mp_obj_is_integer(copy_to_fb_obj)) {
            copy_to_fb = mp_obj_get_int(copy_to_fb_obj);
        } else {
            arg_other = py_helper_arg_to_image_mutable(copy_to_fb_obj);
        }
    }

    if (copy_to_fb) {
        fb_update_jpeg_buffer();
    }

    FIL *fp = &((py_imagereader_obj_t *) args[0])->fp;

    if (((int)((fp)->fptr == (fp)->obj.objsize))) {
        if (!py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_loop)) << 2) | 2)), 
# 6730 "omv/py/py_image.c" 3 4
                                                                                           1
# 6730 "omv/py/py_image.c"
                                                                                               )) {
            return (((mp_obj_t)&mp_const_none_obj));
        }

        file_seek(fp, 16);

        if (((int)((fp)->fptr == (fp)->obj.objsize))) {
            return (((mp_obj_t)&mp_const_none_obj));
        }
    }

    uint32_t ms_tmp;
    read_long(fp, &ms_tmp);

    uint32_t ms;
    for (ms = systick_current_millis();
         ((ms - ((py_imagewriter_obj_t *) args[0])->ms) < ms_tmp);
         ms = systick_current_millis()) {
        HAL_WFI();
    }

    ((py_imagewriter_obj_t *) args[0])->ms = ms;

    image_t image = {0};

    read_long(fp, (uint32_t *) &image.w);
    read_long(fp, (uint32_t *) &image.h);
    read_long(fp, (uint32_t *) &image.bpp);

    uint32_t size = image_size(&image);

    if (copy_to_fb) {
        (fb_framebuffer)->w = 0;
        (fb_framebuffer)->h = 0;
        (fb_framebuffer)->bpp = 0;
        do { if (((size <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "The new image won't fit in the main frame buffer!"))); } while (0); } } while(0);
        (fb_framebuffer)->w = image.w;
        (fb_framebuffer)->h = image.h;
        (fb_framebuffer)->bpp = image.bpp;
        image.data = (fb_framebuffer)->pixels;
    } else if (arg_other) {
        do { if (((size <= image_size(arg_other))) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "The new image won't fit in the target frame buffer!"))); } while (0); } } while(0);
        image.data = arg_other->data;
    } else {
        image.data = xalloc(size);
    }

    char ignore[15];
    read_data(fp, image.data, size);
    if (size % 16) read_data(fp, ignore, 16 - (size % 16));

    if ((fb_framebuffer)->pixels == image.data) {
        (fb_framebuffer)->w = image.w;
        (fb_framebuffer)->h = image.h;
        (fb_framebuffer)->bpp = image.bpp;
    }

    if (arg_other) {
        arg_other->w = image.w;
        arg_other->h = image.h;
        arg_other->bpp = image.bpp;
    }

    return py_image_from_struct(&image);
}

mp_obj_t py_imagereader_close(mp_obj_t self_in)
{
    file_close(&((py_imagereader_obj_t *) self_in)->fp);
    return self_in;
}

static const mp_obj_fun_builtin_fixed_t py_imagereader_size_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_imagereader_size};
static const mp_obj_fun_builtin_var_t py_imagereader_next_frame_obj = {{&mp_type_fun_builtin_var}, 
# 6803 "omv/py/py_image.c" 3 4
      1
# 6803 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_imagereader_next_frame};
static const mp_obj_fun_builtin_fixed_t py_imagereader_close_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_imagereader_close};

static const mp_rom_map_elem_t py_imagereader_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_size)) << 2) | 2)), (&py_imagereader_size_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_next_frame)) << 2) | 2)), (&py_imagereader_next_frame_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_close)) << 2) | 2)), (&py_imagereader_close_obj) }
};

static const mp_obj_dict_t py_imagereader_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_imagereader_locals_dict_table) / sizeof((py_imagereader_locals_dict_table)[0])), .alloc = (sizeof(py_imagereader_locals_dict_table) / sizeof((py_imagereader_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_imagereader_locals_dict_table, }, };

static const mp_obj_type_t py_imagereader_type = {
    { &mp_type_type },
    .name = MP_QSTR_imagereader,
    .print = py_imagereader_print,
    .locals_dict = (mp_obj_t) &py_imagereader_locals_dict
};

mp_obj_t py_image_imagereader(mp_obj_t path)
{
    py_imagereader_obj_t *obj = (((py_imagereader_obj_t*)(m_malloc(sizeof(py_imagereader_obj_t) * (1)))));
    obj->base.type = &py_imagereader_type;
    file_read_open(&obj->fp, mp_obj_str_get_str(path));

    read_long_expect(&obj->fp, *((uint32_t *) "OMV "));
    read_long_expect(&obj->fp, *((uint32_t *) "IMG "));
    read_long_expect(&obj->fp, *((uint32_t *) "STR "));
    read_long_expect(&obj->fp, *((uint32_t *) "V1.0"));

    obj->ms = systick_current_millis();
    return obj;
}
static const mp_obj_fun_builtin_fixed_t py_image_imagereader_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_imagereader};

mp_obj_t py_image_binary_to_grayscale(mp_obj_t arg)
{
    int8_t b = mp_obj_get_int(arg) & 1;
    return mp_obj_new_int(((b) * 255));
}
static const mp_obj_fun_builtin_fixed_t py_image_binary_to_grayscale_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_binary_to_grayscale};

mp_obj_t py_image_binary_to_rgb(mp_obj_t arg)
{
    int8_t b = mp_obj_get_int(arg) & 1;
    uint16_t rgb565 = imlib_yuv_to_rgb((b) ? 127 : -128 + 128, 0, 0);
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(rb528_table[(((rgb565) >> 3) & 0x1F)]),
             mp_obj_new_int(g628_table[({ __typeof__ (rgb565) _pixel = (rgb565); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]),
             mp_obj_new_int(rb528_table[(((rgb565) >> 8) & 0x1F)])});
}
static const mp_obj_fun_builtin_fixed_t py_image_binary_to_rgb_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_binary_to_rgb};

mp_obj_t py_image_binary_to_lab(mp_obj_t arg)
{
    int8_t b = mp_obj_get_int(arg) & 1;
    uint16_t rgb565 = imlib_yuv_to_rgb((b) ? 127 : -128 + 128, 0, 0);
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(lab_table[(rgb565) * 3]),
             mp_obj_new_int(lab_table[((rgb565) * 3) + 1]),
             mp_obj_new_int(lab_table[((rgb565) * 3) + 2])});
}
static const mp_obj_fun_builtin_fixed_t py_image_binary_to_lab_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_binary_to_lab};

mp_obj_t py_image_binary_to_yuv(mp_obj_t arg)
{
    int8_t b = mp_obj_get_int(arg) & 1;
    uint16_t rgb565 = imlib_yuv_to_rgb((b) ? 127 : -128 + 128, 0, 0);
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(yuv_table[(rgb565) * 3]),
             mp_obj_new_int(yuv_table[((rgb565) * 3) + 1]),
             mp_obj_new_int(yuv_table[((rgb565) * 3) + 2])});
}
static const mp_obj_fun_builtin_fixed_t py_image_binary_to_yuv_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_binary_to_yuv};

mp_obj_t py_image_grayscale_to_binary(mp_obj_t arg)
{
    int8_t g = mp_obj_get_int(arg) & 255;
    return mp_obj_new_int(((g) > (((255 - 0) / 2) + 0)));
}
static const mp_obj_fun_builtin_fixed_t py_image_grayscale_to_binary_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_grayscale_to_binary};

mp_obj_t py_image_grayscale_to_rgb(mp_obj_t arg)
{
    int8_t g = mp_obj_get_int(arg) & 255;
    uint16_t rgb565 = imlib_yuv_to_rgb((g) - 128 + 128, 0, 0);
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(rb528_table[(((rgb565) >> 3) & 0x1F)]),
             mp_obj_new_int(g628_table[({ __typeof__ (rgb565) _pixel = (rgb565); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]),
             mp_obj_new_int(rb528_table[(((rgb565) >> 8) & 0x1F)])});
}
static const mp_obj_fun_builtin_fixed_t py_image_grayscale_to_rgb_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_grayscale_to_rgb};

mp_obj_t py_image_grayscale_to_lab(mp_obj_t arg)
{
    int8_t g = mp_obj_get_int(arg) & 255;
    uint16_t rgb565 = imlib_yuv_to_rgb((g) - 128 + 128, 0, 0);

 OverlaySwitch(2);

    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(lab_table[(rgb565) * 3]),
             mp_obj_new_int(lab_table[((rgb565) * 3) + 1]),
             mp_obj_new_int(lab_table[((rgb565) * 3) + 2])});
}
static const mp_obj_fun_builtin_fixed_t py_image_grayscale_to_lab_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_grayscale_to_lab};

mp_obj_t py_image_grayscale_to_yuv(mp_obj_t arg)
{
    int8_t g = mp_obj_get_int(arg) & 255;
    uint16_t rgb565 = imlib_yuv_to_rgb((g) - 128 + 128, 0, 0);

 OverlaySwitch(1);

    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(yuv_table[(rgb565) * 3]),
             mp_obj_new_int(yuv_table[((rgb565) * 3) + 1]),
             mp_obj_new_int(yuv_table[((rgb565) * 3) + 2])});
}
static const mp_obj_fun_builtin_fixed_t py_image_grayscale_to_yuv_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_image_grayscale_to_yuv};

mp_obj_t py_image_rgb_to_binary(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    uint8_t r = mp_obj_get_int(arg_vec[0]) & 255;
    uint8_t g = mp_obj_get_int(arg_vec[1]) & 255;
    uint8_t b = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = ({ __typeof__ (rb825_table[r]) _r5 = (rb825_table[r]); __typeof__ (g826_table[g]) _g6 = (g826_table[g]); __typeof__ (rb825_table[b]) _b5 = (rb825_table[b]); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
    return mp_obj_new_int((yuv_table[(rgb565) * 3] > (((127 - -128) / 2) + -128)));
}
static const mp_obj_fun_builtin_var_t py_image_rgb_to_binary_obj = {{&mp_type_fun_builtin_var}, 
# 6933 "omv/py/py_image.c" 3 4
      1
# 6933 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_rgb_to_binary};

mp_obj_t py_image_rgb_to_grayscale(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    uint8_t r = mp_obj_get_int(arg_vec[0]) & 255;
    uint8_t g = mp_obj_get_int(arg_vec[1]) & 255;
    uint8_t b = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = ({ __typeof__ (rb825_table[r]) _r5 = (rb825_table[r]); __typeof__ (g826_table[g]) _g6 = (g826_table[g]); __typeof__ (rb825_table[b]) _b5 = (rb825_table[b]); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
    return mp_obj_new_int((yuv_table[(rgb565) * 3] + 128));
}
static const mp_obj_fun_builtin_var_t py_image_rgb_to_grayscale_obj = {{&mp_type_fun_builtin_var}, 
# 6945 "omv/py/py_image.c" 3 4
      1
# 6945 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_rgb_to_grayscale};

mp_obj_t py_image_rgb_to_lab(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    uint8_t r = mp_obj_get_int(arg_vec[0]) & 255;
    uint8_t g = mp_obj_get_int(arg_vec[1]) & 255;
    uint8_t b = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = ({ __typeof__ (rb825_table[r]) _r5 = (rb825_table[r]); __typeof__ (g826_table[g]) _g6 = (g826_table[g]); __typeof__ (rb825_table[b]) _b5 = (rb825_table[b]); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(lab_table[(rgb565) * 3]),
             mp_obj_new_int(lab_table[((rgb565) * 3) + 1]),
             mp_obj_new_int(lab_table[((rgb565) * 3) + 2])});
}
static const mp_obj_fun_builtin_var_t py_image_rgb_to_lab_obj = {{&mp_type_fun_builtin_var}, 
# 6960 "omv/py/py_image.c" 3 4
      1
# 6960 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_rgb_to_lab};

mp_obj_t py_image_rgb_to_yuv(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    uint8_t r = mp_obj_get_int(arg_vec[0]) & 255;
    uint8_t g = mp_obj_get_int(arg_vec[1]) & 255;
    uint8_t b = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = ({ __typeof__ (rb825_table[r]) _r5 = (rb825_table[r]); __typeof__ (g826_table[g]) _g6 = (g826_table[g]); __typeof__ (rb825_table[b]) _b5 = (rb825_table[b]); (_r5 << 3) | (_g6 >> 3) | ((_g6 & 0x7) << 13) | (_b5 << 8); });
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(yuv_table[(rgb565) * 3]),
             mp_obj_new_int(yuv_table[((rgb565) * 3) + 1]),
             mp_obj_new_int(yuv_table[((rgb565) * 3) + 2])});
}
static const mp_obj_fun_builtin_var_t py_image_rgb_to_yuv_obj = {{&mp_type_fun_builtin_var}, 
# 6975 "omv/py/py_image.c" 3 4
      1
# 6975 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_rgb_to_yuv};

mp_obj_t py_image_lab_to_binary(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    int8_t l = (mp_obj_get_int(arg_vec[0]) & 255) % 100;
    int8_t a = mp_obj_get_int(arg_vec[1]) & 255;
    int8_t b = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = imlib_lab_to_rgb(l, a, b);
    return mp_obj_new_int((yuv_table[(rgb565) * 3] > (((127 - -128) / 2) + -128)));
}
static const mp_obj_fun_builtin_var_t py_image_lab_to_binary_obj = {{&mp_type_fun_builtin_var}, 
# 6987 "omv/py/py_image.c" 3 4
      1
# 6987 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_lab_to_binary};

mp_obj_t py_image_lab_to_grayscale(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    int8_t l = (mp_obj_get_int(arg_vec[0]) & 255) % 100;
    int8_t a = mp_obj_get_int(arg_vec[1]) & 255;
    int8_t b = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = imlib_lab_to_rgb(l, a, b);
    return mp_obj_new_int((yuv_table[(rgb565) * 3] + 128));
}
static const mp_obj_fun_builtin_var_t py_image_lab_to_grayscale_obj = {{&mp_type_fun_builtin_var}, 
# 6999 "omv/py/py_image.c" 3 4
      1
# 6999 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_lab_to_grayscale};

mp_obj_t py_image_lab_to_rgb(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    int8_t l = (mp_obj_get_int(arg_vec[0]) & 255) % 100;
    int8_t a = mp_obj_get_int(arg_vec[1]) & 255;
    int8_t b = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = imlib_lab_to_rgb(l, a, b);
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(rb528_table[(((rgb565) >> 3) & 0x1F)]),
             mp_obj_new_int(g628_table[({ __typeof__ (rgb565) _pixel = (rgb565); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]),
             mp_obj_new_int(rb528_table[(((rgb565) >> 8) & 0x1F)])});
}
static const mp_obj_fun_builtin_var_t py_image_lab_to_rgb_obj = {{&mp_type_fun_builtin_var}, 
# 7014 "omv/py/py_image.c" 3 4
      1
# 7014 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_lab_to_rgb};

mp_obj_t py_image_lab_to_yuv(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    int8_t l = (mp_obj_get_int(arg_vec[0]) & 255) % 100;
    int8_t a = mp_obj_get_int(arg_vec[1]) & 255;
    int8_t b = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = imlib_lab_to_rgb(l, a, b);
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(yuv_table[(rgb565) * 3]),
             mp_obj_new_int(yuv_table[((rgb565) * 3) + 1]),
             mp_obj_new_int(yuv_table[((rgb565) * 3) + 2])});
}
static const mp_obj_fun_builtin_var_t py_image_lab_to_yuv_obj = {{&mp_type_fun_builtin_var}, 
# 7029 "omv/py/py_image.c" 3 4
      1
# 7029 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_lab_to_yuv};

mp_obj_t py_image_yuv_to_binary(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    int8_t y = (mp_obj_get_int(arg_vec[0]) & 255) - 128;
    int8_t u = mp_obj_get_int(arg_vec[1]) & 255;
    int8_t v = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = imlib_yuv_to_rgb(y + 128, u, v);
    return mp_obj_new_int((yuv_table[(rgb565) * 3] > (((127 - -128) / 2) + -128)));
}
static const mp_obj_fun_builtin_var_t py_image_yuv_to_binary_obj = {{&mp_type_fun_builtin_var}, 
# 7041 "omv/py/py_image.c" 3 4
      1
# 7041 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_yuv_to_binary};

mp_obj_t py_image_yuv_to_grayscale(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    int8_t y = (mp_obj_get_int(arg_vec[0]) & 255) - 128;
    int8_t u = mp_obj_get_int(arg_vec[1]) & 255;
    int8_t v = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = imlib_yuv_to_rgb(y + 128, u, v);
    return mp_obj_new_int((yuv_table[(rgb565) * 3] + 128));
}
static const mp_obj_fun_builtin_var_t py_image_yuv_to_grayscale_obj = {{&mp_type_fun_builtin_var}, 
# 7053 "omv/py/py_image.c" 3 4
      1
# 7053 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_yuv_to_grayscale};

mp_obj_t py_image_yuv_to_rgb(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    int8_t y = (mp_obj_get_int(arg_vec[0]) & 255) - 128;
    int8_t u = mp_obj_get_int(arg_vec[1]) & 255;
    int8_t v = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = imlib_yuv_to_rgb(y + 128, u, v);
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(rb528_table[(((rgb565) >> 3) & 0x1F)]),
             mp_obj_new_int(g628_table[({ __typeof__ (rgb565) _pixel = (rgb565); ((_pixel & 0x07) << 3) | (_pixel >> 13); })]),
             mp_obj_new_int(rb528_table[(((rgb565) >> 8) & 0x1F)])});
}
static const mp_obj_fun_builtin_var_t py_image_yuv_to_rgb_obj = {{&mp_type_fun_builtin_var}, 
# 7068 "omv/py/py_image.c" 3 4
      1
# 7068 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_yuv_to_rgb};

mp_obj_t py_image_yuv_to_lab(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    const mp_obj_t *arg_vec;
    py_helper_consume_array(n_args, args, 0, 3, &arg_vec);
    int8_t y = (mp_obj_get_int(arg_vec[0]) & 255) - 128;
    int8_t u = mp_obj_get_int(arg_vec[1]) & 255;
    int8_t v = mp_obj_get_int(arg_vec[2]) & 255;
    uint16_t rgb565 = imlib_yuv_to_rgb(y + 128, u, v);
    return mp_obj_new_tuple(3, (mp_obj_t[3])
            {mp_obj_new_int(lab_table[(rgb565) * 3]),
             mp_obj_new_int(lab_table[((rgb565) * 3) + 1]),
             mp_obj_new_int(lab_table[((rgb565) * 3) + 2])});
}
static const mp_obj_fun_builtin_var_t py_image_yuv_to_lab_obj = {{&mp_type_fun_builtin_var}, 
# 7083 "omv/py/py_image.c" 3 4
      1
# 7083 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_yuv_to_lab};

mp_obj_t py_image(int w, int h, int bpp, void *pixels)
{
    py_image_obj_t *o = (((py_image_obj_t*)(m_malloc(sizeof(py_image_obj_t) * (1)))));
    o->base.type = &py_image_type;
    o->_cobj.w = w;
    o->_cobj.h = h;
    o->_cobj.bpp = bpp;
    o->_cobj.pixels = pixels;
    return o;
}

mp_obj_t py_image_from_struct(image_t *img)
{
    py_image_obj_t *o = (((py_image_obj_t*)(m_malloc(sizeof(py_image_obj_t) * (1)))));
    o->base.type = &py_image_type;
    o->_cobj = *img;
    return o;
}

mp_obj_t py_image_load_image(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{


    
# 7108 "omv/py/py_image.c" 3 4
   _Bool 
# 7108 "omv/py/py_image.c"
        mode = mp_obj_is_integer(args[0]);
    const char *path = mode ? 
# 7109 "omv/py/py_image.c" 3 4
                             ((void *)0) 
# 7109 "omv/py/py_image.c"
                                  : mp_obj_str_get_str(args[0]);

    mp_obj_t copy_to_fb_obj = py_helper_keyword_object(n_args, args, mode ? 3 : 1, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_copy_to_fb)) << 2) | 2)));
    
# 7112 "omv/py/py_image.c" 3 4
   _Bool 
# 7112 "omv/py/py_image.c"
        copy_to_fb = 
# 7112 "omv/py/py_image.c" 3 4
                     0
# 7112 "omv/py/py_image.c"
                          ;
    image_t *arg_other = 
# 7113 "omv/py/py_image.c" 3 4
                        ((void *)0)
# 7113 "omv/py/py_image.c"
                            ;

    if (copy_to_fb_obj) {
        if (mp_obj_is_integer(copy_to_fb_obj)) {
            copy_to_fb = mp_obj_get_int(copy_to_fb_obj);
        } else {
            arg_other = py_helper_arg_to_image_mutable(copy_to_fb_obj);
}
}

    if (copy_to_fb) {
        fb_update_jpeg_buffer();
}

    image_t image = {0};

    if (mode) {
        do { if ((n_args >= 3) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Expected width, height, and type"))); } while (0); } } while(0);

        image.w = mp_obj_get_int(args[0]);
        do { if ((image.w > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Width must be > 0"))); } while (0); } } while(0);

        image.h = mp_obj_get_int(args[1]);
        do { if ((image.h > 0) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Height must be > 0"))); } while (0); } } while(0);

        switch(mp_obj_get_int(args[2])) {
            case PIXFORMAT_BINARY:
                image.bpp = IMAGE_BPP_BINARY;
                break;
            case PIXFORMAT_GRAYSCALE:
                image.bpp = IMAGE_BPP_GRAYSCALE;
                break;
            case PIXFORMAT_RGB565:
                image.bpp = IMAGE_BPP_RGB565;
                break;
            default:
                do { if ((
# 7149 "omv/py/py_image.c" 3 4
               0
# 7149 "omv/py/py_image.c"
               ) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Unsupported type"))); } while (0); } } while(0);
                break;
        }
    } else {
        fb_alloc_mark();
       FIL fp;
       img_read_settings_t rs;
       imlib_read_geometry(&fp, &image, path, &rs);
       file_buffer_off(&fp);
       file_close(&fp);
    }

    if (copy_to_fb) {
        (fb_framebuffer)->w = 0;
        (fb_framebuffer)->h = 0;
        (fb_framebuffer)->bpp = 0;
        do { if (((image_size(&image) <= fb_avail())) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "The new image won't fit in the main frame buffer!"))); } while (0); } } while(0);
       (fb_framebuffer)->w = image.w;
       (fb_framebuffer)->h = image.h;
       (fb_framebuffer)->bpp = image.bpp;
       image.data = (fb_framebuffer)->pixels;
    } else if (arg_other) {
        do { if (((image_size(&image) <= image_size(arg_other))) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "The new image won't fit in the target frame buffer!"))); } while (0); } } while(0);
        image.data = arg_other->data;
    } else if (mode) {
        image.data = xalloc(image_size(&image));
    }

    if (mode) {
        memset(image.data, 0, image_size(&image));
    } else {
    imlib_load_image(&image, path);
        fb_alloc_free_till_mark();
    }

    if ((fb_framebuffer)->pixels == image.data) {
        (fb_framebuffer)->w = image.w;
        (fb_framebuffer)->h = image.h;
        (fb_framebuffer)->bpp = image.bpp;
    }

    if (arg_other) {
        arg_other->w = image.w;
        arg_other->h = image.h;
        arg_other->bpp = image.bpp;
    }

    return py_image_from_struct(&image);
}
static const mp_obj_fun_builtin_var_t py_image_load_image_obj = {{&mp_type_fun_builtin_var}, 
# 7198 "omv/py/py_image.c" 3 4
      1
# 7198 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_load_image};

mp_obj_t py_image_load_cascade(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    cascade_t cascade;
    const char *path = mp_obj_str_get_str(args[0]);
 OverlaySwitch(3);

    int res = imlib_load_cascade(&cascade, path);
    if (res != FR_OK) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, ffs_strerror(res)))); } while (0);
    }


    int stages = py_helper_keyword_int(n_args, args, 1, kw_args, ((mp_obj_t)((((mp_uint_t)(qstr_from_str("stages"))) << 2) | 2)), cascade.n_stages);

    if (stages > 0 && stages < cascade.n_stages) {
        cascade.n_stages = stages;
    }


    py_cascade_obj_t *o = (((py_cascade_obj_t*)(m_malloc(sizeof(py_cascade_obj_t) * (1)))));
    o->base.type = &py_cascade_type;
    o->_cobj = cascade;
    return o;
}
static const mp_obj_fun_builtin_var_t py_image_load_cascade_obj = {{&mp_type_fun_builtin_var}, 
# 7224 "omv/py/py_image.c" 3 4
      1
# 7224 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_load_cascade};


mp_obj_t py_image_load_descriptor(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    FIL fp;
    UINT bytes;
    FRESULT res;

    uint32_t desc_type;
    mp_obj_t desc = (((mp_obj_t)&mp_const_none_obj));
    const char *path = mp_obj_str_get_str(args[0]);

    if ((res = f_open_helper(&fp, path, 0x01|0x00)) == FR_OK) {

        res = f_read(&fp, &desc_type, sizeof(desc_type), &bytes);
        if (res != FR_OK || bytes != sizeof(desc_type)) {
            goto error;
        }


        switch (desc_type) {
            case DESC_LBP: {
                py_lbp_obj_t *lbp = (((py_lbp_obj_t*)(m_malloc(sizeof(py_lbp_obj_t) * (1)))));
                lbp->base.type = &py_lbp_type;

                res = imlib_lbp_desc_load(&fp, &lbp->hist);
                if (res == FR_OK) {
                    desc = lbp;
                }
                break;
            }

            case DESC_ORB: {
                array_t *kpts = 
# 7258 "omv/py/py_image.c" 3 4
                               ((void *)0)
# 7258 "omv/py/py_image.c"
                                   ;
                array_alloc(&kpts, xfree);

                res = orb_load_descriptor(&fp, kpts);
                if (res == FR_OK) {

                    py_kp_obj_t *kp_obj = (((py_kp_obj_t*)(m_malloc(sizeof(py_kp_obj_t) * (1)))));
                    kp_obj->base.type = &py_kp_type;
                    kp_obj->kpts = kpts;
                    kp_obj->threshold = 10;
                    kp_obj->normalized = 
# 7268 "omv/py/py_image.c" 3 4
                                        0
# 7268 "omv/py/py_image.c"
                                             ;
                    desc = kp_obj;
                }
                break;
            }
        }

        f_close(&fp);
    }

error:

    if (res != FR_OK) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, ffs_strerror(res)))); } while (0);
    }


    if (desc == (((mp_obj_t)&mp_const_none_obj))) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "Descriptor type is not supported"))); } while (0);
    }
    return desc;
}
static const mp_obj_fun_builtin_var_t py_image_load_descriptor_obj = {{&mp_type_fun_builtin_var}, 
# 7290 "omv/py/py_image.c" 3 4
      1
# 7290 "omv/py/py_image.c"
      , 1, (0xffff), .fun.kw = py_image_load_descriptor};

mp_obj_t py_image_save_descriptor(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    FIL fp;
    UINT bytes;
    FRESULT res;

    uint32_t desc_type;
    const char *path = mp_obj_str_get_str(args[1]);

    if ((res = f_open_helper(&fp, path, 0x02|0x08)) == FR_OK) {

        mp_obj_type_t *desc_obj_type = mp_obj_get_type(args[0]);
        if (desc_obj_type == &py_lbp_type) {
            desc_type = DESC_LBP;
        } else if (desc_obj_type == &py_kp_type) {
            desc_type = DESC_ORB;
        }


        res = f_write(&fp, &desc_type, sizeof(desc_type), &bytes);
        if (res != FR_OK || bytes != sizeof(desc_type)) {
            goto error;
        }


        switch (desc_type) {
            case DESC_LBP: {
                py_lbp_obj_t *lbp = ((py_lbp_obj_t*)args[0]);
                res = imlib_lbp_desc_save(&fp, lbp->hist);
                break;
            }

            case DESC_ORB: {
                py_kp_obj_t *kpts = ((py_kp_obj_t*)args[0]);
                res = orb_save_descriptor(&fp, kpts->kpts);
                break;
            }
        }

        f_close(&fp);
    }

error:

    if (res != FR_OK) {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, ffs_strerror(res)))); } while (0);
    }
    return (((mp_obj_t)&mp_const_true_obj));
}
static const mp_obj_fun_builtin_var_t py_image_save_descriptor_obj = {{&mp_type_fun_builtin_var}, 
# 7341 "omv/py/py_image.c" 3 4
      1
# 7341 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_save_descriptor};

static mp_obj_t py_image_match_descriptor(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    mp_obj_t match_obj = (((mp_obj_t)&mp_const_none_obj));
    mp_obj_type_t *desc1_type = mp_obj_get_type(args[0]);
    mp_obj_type_t *desc2_type = mp_obj_get_type(args[1]);
    do { if (((desc1_type == desc2_type)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Descriptors have different types!"))); } while (0); } } while(0);

    if (desc1_type == &py_lbp_type) {
        py_lbp_obj_t *lbp1 = ((py_lbp_obj_t*)args[0]);
        py_lbp_obj_t *lbp2 = ((py_lbp_obj_t*)args[1]);


        do { __typeof__ (lbp1) _a = (lbp1); __typeof__ (&py_lbp_type) _b = (&py_lbp_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);
        do { __typeof__ (lbp2) _a = (lbp2); __typeof__ (&py_lbp_type) _b = (&py_lbp_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);


        match_obj = mp_obj_new_int(imlib_lbp_desc_distance(lbp1->hist, lbp2->hist));
    } else if (desc1_type == &py_kp_type) {
        py_kp_obj_t *kpts1 = ((py_kp_obj_t*)args[0]);
        py_kp_obj_t *kpts2 = ((py_kp_obj_t*)args[1]);
        int threshold = py_helper_keyword_int(n_args, args, 2, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 85);
        int filter_outliers = py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_filter_outliers)) << 2) | 2)), 
# 7364 "omv/py/py_image.c" 3 4
                                                                                                                       0
# 7364 "omv/py/py_image.c"
                                                                                                                            );


        do { __typeof__ (kpts1) _a = (kpts1); __typeof__ (&py_kp_type) _b = (&py_kp_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);
        do { __typeof__ (kpts2) _a = (kpts2); __typeof__ (&py_kp_type) _b = (&py_kp_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);
        do { if (((threshold >=0 && threshold <= 100)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "Expected threshold between 0 and 100"))); } while (0); } } while(0);

        int theta = 0;
        int count = 0;
        point_t c = {0};
        rectangle_t r = {0};

        mp_obj_t match_list = mp_obj_new_list(0, 
# 7376 "omv/py/py_image.c" 3 4
                                                ((void *)0)
# 7376 "omv/py/py_image.c"
                                                    );

        if (array_length(kpts1->kpts) && array_length(kpts1->kpts)) {
            fb_alloc_mark();
            int *match = fb_alloc(array_length(kpts1->kpts) * sizeof(int) * 2);


            count = orb_match_keypoints(kpts1->kpts, kpts2->kpts, match, threshold, &r, &c, &theta);


            for (int i=0; i<count*2; i+=2) {
                mp_obj_t index_obj[2] = {
                    mp_obj_new_int(match[i+0]),
                    mp_obj_new_int(match[i+1]),
                };
                mp_obj_list_append(match_list, mp_obj_new_tuple(2, index_obj));
            }


            fb_alloc_free_till_mark();

            if (filter_outliers == 
# 7397 "omv/py/py_image.c" 3 4
                                  1
# 7397 "omv/py/py_image.c"
                                      ) {
                count = orb_filter_keypoints(kpts2->kpts, &r, &c);
            }
        }

        py_kptmatch_obj_t *o = (((py_kptmatch_obj_t*)(m_malloc(sizeof(py_kptmatch_obj_t) * (1)))));
        o->base.type = &py_kptmatch_type;
        o->cx = mp_obj_new_int(c.x);
        o->cy = mp_obj_new_int(c.y);
        o->x = mp_obj_new_int(r.x);
        o->y = mp_obj_new_int(r.y);
        o->w = mp_obj_new_int(r.w);
        o->h = mp_obj_new_int(r.h);
        o->count = mp_obj_new_int(count);
        o->theta = mp_obj_new_int(theta);
        o->match = match_list;
        match_obj = o;
    } else {
        do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "Descriptor type is not supported"))); } while (0);
    }

    return match_obj;
}
static const mp_obj_fun_builtin_var_t py_image_match_descriptor_obj = {{&mp_type_fun_builtin_var}, 
# 7420 "omv/py/py_image.c" 3 4
      1
# 7420 "omv/py/py_image.c"
      , 2, (0xffff), .fun.kw = py_image_match_descriptor};


int py_image_descriptor_from_roi(image_t *img, const char *path, rectangle_t *roi)
{
    FIL fp;
    FRESULT res = FR_OK;

    printf("Save Descriptor: ROI(%d %d %d %d)\n", roi->x, roi->y, roi->w, roi->h);
    array_t *kpts = orb_find_keypoints(img, 
# 7429 "omv/py/py_image.c" 3 4
                                           0
# 7429 "omv/py/py_image.c"
                                                , 20, 1.5f, 100, CORNER_AGAST, roi);
    printf("Save Descriptor: KPTS(%d)\n", array_length(kpts));

    if (array_length(kpts)) {
        if ((res = f_open_helper(&fp, path, 0x02|0x08)) == FR_OK) {
            res = orb_save_descriptor(&fp, kpts);
            f_close(&fp);
        }

        if (res != FR_OK) {
            do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, ffs_strerror(res)))); } while (0);
        }
    }
    return 0;
}

static const mp_rom_map_elem_t globals_dict_table[] = {
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR___name__)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(MP_QSTR_image)) << 2) | 2))},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_SEARCH_EX)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(SEARCH_EX)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_SEARCH_DS)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(SEARCH_DS)) << 1) | 1))},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_EDGE_CANNY)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(EDGE_CANNY)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_EDGE_SIMPLE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(EDGE_SIMPLE)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_CORNER_FAST)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(CORNER_FAST)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_CORNER_AGAST)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(CORNER_AGAST)) << 1) | 1))},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_TAG16H5)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(TAG16H5)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_TAG25H7)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(TAG25H7)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_TAG25H9)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(TAG25H9)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_TAG36H10)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(TAG36H10)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_TAG36H11)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(TAG36H11)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_ARTOOLKIT)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(ARTOOLKIT)) << 1) | 1))},


    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_EAN2)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_EAN2)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_EAN5)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_EAN5)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_EAN8)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_EAN8)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_UPCE)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_UPCE)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_ISBN10)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_ISBN10)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_UPCA)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_UPCA)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_EAN13)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_EAN13)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_ISBN13)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_ISBN13)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_I25)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_I25)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_DATABAR)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_DATABAR)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_DATABAR_EXP)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_DATABAR_EXP)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_CODABAR)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_CODABAR)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_CODE39)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_CODE39)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_PDF417)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_PDF417)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_CODE93)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_CODE93)) << 1) | 1))},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_CODE128)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(BARCODE_CODE128)) << 1) | 1))},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_ImageWriter)) << 2) | 2)), (&py_image_imagewriter_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_ImageReader)) << 2) | 2)), (&py_image_imagereader_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_binary_to_grayscale)) << 2) | 2)), (&py_image_binary_to_grayscale_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_binary_to_rgb)) << 2) | 2)), (&py_image_binary_to_rgb_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_binary_to_lab)) << 2) | 2)), (&py_image_binary_to_lab_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_binary_to_yuv)) << 2) | 2)), (&py_image_binary_to_yuv_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_grayscale_to_binary)) << 2) | 2)), (&py_image_grayscale_to_binary_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_grayscale_to_rgb)) << 2) | 2)), (&py_image_grayscale_to_rgb_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_grayscale_to_lab)) << 2) | 2)), (&py_image_grayscale_to_lab_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_grayscale_to_yuv)) << 2) | 2)), (&py_image_grayscale_to_yuv_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_to_binary)) << 2) | 2)), (&py_image_rgb_to_binary_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_to_grayscale)) << 2) | 2)), (&py_image_rgb_to_grayscale_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_to_lab)) << 2) | 2)), (&py_image_rgb_to_lab_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_rgb_to_yuv)) << 2) | 2)), (&py_image_rgb_to_yuv_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_lab_to_binary)) << 2) | 2)), (&py_image_lab_to_binary_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_lab_to_grayscale)) << 2) | 2)), (&py_image_lab_to_grayscale_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_lab_to_rgb)) << 2) | 2)), (&py_image_lab_to_rgb_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_lab_to_yuv)) << 2) | 2)), (&py_image_lab_to_yuv_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_yuv_to_binary)) << 2) | 2)), (&py_image_yuv_to_binary_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_yuv_to_grayscale)) << 2) | 2)), (&py_image_yuv_to_grayscale_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_yuv_to_rgb)) << 2) | 2)), (&py_image_yuv_to_rgb_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_yuv_to_lab)) << 2) | 2)), (&py_image_yuv_to_lab_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_Image)) << 2) | 2)), (&py_image_load_image_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_HaarCascade)) << 2) | 2)), (&py_image_load_cascade_obj)},

    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_load_descriptor)) << 2) | 2)), (&py_image_load_descriptor_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_save_descriptor)) << 2) | 2)), (&py_image_save_descriptor_obj)},
    {((mp_obj_t)((((mp_uint_t)(MP_QSTR_match_descriptor)) << 2) | 2)), (&py_image_match_descriptor_obj)}





};
static const mp_obj_dict_t globals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(globals_dict_table) / sizeof((globals_dict_table)[0])), .alloc = (sizeof(globals_dict_table) / sizeof((globals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)globals_dict_table, }, };

const mp_obj_module_t image_module = {
    .base = { &mp_type_module },
    .globals = (mp_obj_t) &globals_dict
};
# 1 "omv/py/py_nn.c"
# 1 "/media/sf_D/RTOS_MW/mpyrt_omv/ports/nxp_rt1050_60//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "omv/py/py_nn.c"




# 1 "./omv/py/mp.h" 1
# 11 "./omv/py/mp.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 1 3
# 29 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 1 3
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 1 3
# 14 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_newlib_version.h" 1 3
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/newlib.h" 2 3
# 16 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 1 3



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 5 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/features.h" 1 3
# 6 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/config.h" 2 3
# 17 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 2 3
# 30 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 1 3
# 43 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 1 3
# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3

# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 103 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 200 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 44 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 2 3

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 216 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 46 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/cdefs.h" 2 3
# 36 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 149 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 328 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 37 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 1 3 4
# 40 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3





typedef __gnuc_va_list va_list;
# 60 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 1 3
# 13 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/_ansi.h" 1 3
# 14 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 15 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 1 3
# 24 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_types.h" 1 3
# 25 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h" 1 3
# 33 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h" 3
struct __lock;
typedef struct __lock * _LOCK_T;






extern void __retarget_lock_init(_LOCK_T *lock);

extern void __retarget_lock_init_recursive(_LOCK_T *lock);

extern void __retarget_lock_close(_LOCK_T lock);

extern void __retarget_lock_close_recursive(_LOCK_T lock);

extern void __retarget_lock_acquire(_LOCK_T lock);

extern void __retarget_lock_acquire_recursive(_LOCK_T lock);

extern int __retarget_lock_try_acquire(_LOCK_T lock);

extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);


extern void __retarget_lock_release(_LOCK_T lock);

extern void __retarget_lock_release_recursive(_LOCK_T lock);
# 26 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 129 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef unsigned int __size_t;
# 145 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef signed int _ssize_t;
# 156 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 357 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 160 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;



typedef unsigned long __clock_t;


typedef long __time_t;


typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;


typedef __builtin_va_list __va_list;
# 16 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 38 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 117 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 181 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 319 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 569 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 766 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 61 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 1 3
# 28 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef int register_t;
# 62 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 63 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h" 1 3
# 20 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h" 3
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 65 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/endian.h" 1 3





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_endian.h" 1 3
# 7 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/endian.h" 2 3
# 68 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 1 3
# 25 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_sigset.h" 1 3
# 41 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_sigset.h" 3
typedef unsigned long __sigset_t;
# 26 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 1 3
# 35 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 3
typedef __suseconds_t suseconds_t;




typedef long time_t;
# 52 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timeval.h" 3
struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};
# 27 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 1 3
# 38 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timespec.h" 1 3
# 45 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 2 3
# 58 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 28 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 2 3



typedef __sigset_t sigset_t;
# 45 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3
typedef unsigned long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 71 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/select.h" 3


int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, struct timeval *__timeout)
                                                   ;

int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set)

                           ;



# 69 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3




typedef __uint32_t in_addr_t;




typedef __uint16_t in_port_t;
# 87 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;







typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;
# 135 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 173 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;
# 236 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 3
typedef __int64_t sbintime_t;


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_pthreadtypes.h" 1 3
# 240 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/types.h" 1 3
# 241 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/types.h" 2 3
# 62 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3




typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/stdio.h" 1 3
# 80 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 2 3
# 181 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
char * ctermid (char *);




FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *restrict, const char *restrict, FILE *restrict);
void setbuf (FILE *restrict, char *restrict);
int setvbuf (FILE *restrict, char *restrict, int, size_t);
int fprintf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *restrict, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *restrict, int, FILE *restrict);
int fputc (int, FILE *);
int fputs (const char *restrict, FILE *restrict);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite (const void * restrict , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *restrict, fpos_t *restrict);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *restrict _name, const char *restrict _type);
int sprintf (char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 257 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int snprintf (char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vsnprintf (char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vfscanf (FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsscanf (const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
# 284 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
# 339 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);


int pclose (FILE *);
FILE * popen (const char *, const char *);



void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);



int getw (FILE *);
int putw (int, FILE *);


int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 374 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int dprintf (int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *restrict, size_t, const char *restrict);


FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;



int renameat (int, const char *, int, const char *);






int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *restrict, size_t *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *restrict, int, FILE *restrict);
char * _fgets_unlocked_r (struct _reent *, char *restrict, int, FILE *restrict);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *restrict, size_t, const char *restrict);
FILE * _fopen_r (struct _reent *, const char *restrict, const char *restrict);
FILE * _freopen_r (struct _reent *, const char *restrict, const char *restrict, FILE *restrict);
int _fprintf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *restrict, FILE *restrict);
int _fputs_unlocked_r (struct _reent *, const char *restrict, FILE *restrict);
size_t _fread_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fread_unlocked_r (struct _reent *, void * restrict, size_t _size, size_t _n, FILE *restrict);
int _fscanf_r (struct _reent *, FILE *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fwrite_unlocked_r (struct _reent *, const void * restrict, size_t _size, size_t _n, FILE *restrict);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *restrict, const char *restrict, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *restrict, const char *restrict, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite_unlocked (const void * restrict , size_t _size, size_t _n, FILE *);
# 574 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 598 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
# 684 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3
static __inline__ int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 767 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdio.h" 3

# 12 "./omv/py/mp.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 1 3
# 17 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 18 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3


# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/xlocale.h" 1 3
# 9 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/xlocale.h" 3
struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3




void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * restrict, const void * restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);






char *strtok_r (char *restrict, const char *restrict, char **restrict);


int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);


void explicit_bzero (void *, size_t);
int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


int ffs (int);
char *index (const char *, int);


void * memccpy (void * restrict, const void * restrict, int, size_t);
# 86 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
char *rindex (const char *, int);


char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);


int strcasecmp (const char *, const char *);






char *strdup (const char *);

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t);

char *_strndup_r (struct _reent *, const char *, size_t);
# 121 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


int strncasecmp (const char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 192 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/string.h" 1 3
# 193 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/string.h" 2 3


# 13 "./omv/py/mp.h" 2
# 1 "../../py/mpconfig.h" 1
# 45 "../../py/mpconfig.h"
# 1 "./mpconfigport.h" 1
# 30 "./mpconfigport.h"
       







# 1 "mcusdk/drivers/fsl_common.h" 1
# 38 "mcusdk/drivers/fsl_common.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 39 "mcusdk/drivers/fsl_common.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdbool.h" 1 3 4
# 40 "mcusdk/drivers/fsl_common.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 1 3 4
# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint-gcc.h" 1 3 4
# 34 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint-gcc.h" 3 4
typedef signed char int8_t;


typedef short int int16_t;


typedef long int int32_t;


typedef long long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef long unsigned int uint32_t;


typedef long long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef long int int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef long unsigned int uint_least32_t;
typedef long long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long long unsigned int uint_fast64_t;




typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
# 12 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stdint.h" 2 3 4
# 41 "mcusdk/drivers/fsl_common.h" 2

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 1 3
# 10 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3





# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 17 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/stdlib.h" 1 3
# 21 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3

# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/alloca.h" 1 3
# 23 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 2 3
# 33 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3


typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar)



                                ;
void * calloc (size_t __nmemb, size_t __size) ;
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) ;
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size) ;
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *restrict, const char *restrict, size_t);
int _mbtowc_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *restrict, const char *restrict, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
size_t wcstombs (char *restrict, const wchar_t *restrict, size_t);
size_t _wcstombs_r (struct _reent *, char *restrict, const wchar_t *restrict, size_t, _mbstate_t *);


char * mkdtemp (char *);






int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void * realloc (void * __r, size_t __size) ;

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)))
     __attribute__((__alloc_size__(3)));
void * reallocf (void * __r, size_t __size);


char * realpath (const char *restrict path, char *restrict resolved_path);


int rpmatch (const char *response);




void srand (unsigned __seed);
double strtod (const char *restrict __n, char **restrict __end_PTR);
double _strtod_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR);

float strtof (const char *restrict __n, char **restrict __end_PTR);







long strtol (const char *restrict __n, char **restrict __end_PTR, int __base);
long _strtol_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long strtoul (const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
# 188 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void * __arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 221 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char *restrict __n, char **restrict __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long strtoull (const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int __attribute__((__nonnull__(1))) posix_memalign (void **, size_t, size_t);


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) ;
void * _calloc_r (struct _reent *, size_t, size_t) ;
void _free_r (struct _reent *, void *) ;
void * _realloc_r (struct _reent *, void *, size_t) ;
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 308 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
void qsort_r (void * __base, size_t __nmemb, size_t __size, void * __thunk, int (*_compar)(void *, const void *, const void *))
             __asm__ ("" "__bsd_qsort_r");
# 318 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *restrict, char **restrict);

extern long double strtold (const char *restrict, char **restrict);
# 335 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/stdlib.h" 3

# 43 "mcusdk/drivers/fsl_common.h" 2





# 1 "mcusdk/fsl_device_registers.h" 1
# 51 "mcusdk/fsl_device_registers.h"
# 1 "mcusdk/MIMXRT1052.h" 1
# 94 "mcusdk/MIMXRT1052.h"

# 94 "mcusdk/MIMXRT1052.h"
typedef enum IRQn {

  NotAvail_IRQn = -128,


  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,


  DMA0_DMA16_IRQn = 0,
  DMA1_DMA17_IRQn = 1,
  DMA2_DMA18_IRQn = 2,
  DMA3_DMA19_IRQn = 3,
  DMA4_DMA20_IRQn = 4,
  DMA5_DMA21_IRQn = 5,
  DMA6_DMA22_IRQn = 6,
  DMA7_DMA23_IRQn = 7,
  DMA8_DMA24_IRQn = 8,
  DMA9_DMA25_IRQn = 9,
  DMA10_DMA26_IRQn = 10,
  DMA11_DMA27_IRQn = 11,
  DMA12_DMA28_IRQn = 12,
  DMA13_DMA29_IRQn = 13,
  DMA14_DMA30_IRQn = 14,
  DMA15_DMA31_IRQn = 15,
  DMA_ERROR_IRQn = 16,
  CTI0_ERROR_IRQn = 17,
  CTI1_ERROR_IRQn = 18,
  CORE_IRQn = 19,
  LPUART1_IRQn = 20,
  LPUART2_IRQn = 21,
  LPUART3_IRQn = 22,
  LPUART4_IRQn = 23,
  LPUART5_IRQn = 24,
  LPUART6_IRQn = 25,
  LPUART7_IRQn = 26,
  LPUART8_IRQn = 27,
  LPI2C1_IRQn = 28,
  LPI2C2_IRQn = 29,
  LPI2C3_IRQn = 30,
  LPI2C4_IRQn = 31,
  LPSPI1_IRQn = 32,
  LPSPI2_IRQn = 33,
  LPSPI3_IRQn = 34,
  LPSPI4_IRQn = 35,
  CAN1_IRQn = 36,
  CAN2_IRQn = 37,
  FLEXRAM_IRQn = 38,
  KPP_IRQn = 39,
  TSC_DIG_IRQn = 40,
  GPR_IRQ_IRQn = 41,
  LCDIF_IRQn = 42,
  CSI_IRQn = 43,
  PXP_IRQn = 44,
  WDOG2_IRQn = 45,
  SNVS_HP_WRAPPER_IRQn = 46,
  SNVS_HP_WRAPPER_TZ_IRQn = 47,
  SNVS_LP_WRAPPER_IRQn = 48,
  CSU_IRQn = 49,
  DCP_IRQn = 50,
  DCP_VMI_IRQn = 51,
  Reserved68_IRQn = 52,
  TRNG_IRQn = 53,
  SJC_IRQn = 54,
  BEE_IRQn = 55,
  SAI1_IRQn = 56,
  SAI2_IRQn = 57,
  SAI3_RX_IRQn = 58,
  SAI3_TX_IRQn = 59,
  SPDIF_IRQn = 60,
  ANATOP_EVENT0_IRQn = 61,
  ANATOP_EVENT1_IRQn = 62,
  ANATOP_TAMP_LOW_HIGH_IRQn = 63,
  ANATOP_TEMP_PANIC_IRQn = 64,
  USB_PHY1_IRQn = 65,
  USB_PHY2_IRQn = 66,
  ADC1_IRQn = 67,
  ADC2_IRQn = 68,
  DCDC_IRQn = 69,
  Reserved86_IRQn = 70,
  Reserved87_IRQn = 71,
  GPIO1_INT0_IRQn = 72,
  GPIO1_INT1_IRQn = 73,
  GPIO1_INT2_IRQn = 74,
  GPIO1_INT3_IRQn = 75,
  GPIO1_INT4_IRQn = 76,
  GPIO1_INT5_IRQn = 77,
  GPIO1_INT6_IRQn = 78,
  GPIO1_INT7_IRQn = 79,
  GPIO1_Combined_0_15_IRQn = 80,
  GPIO1_Combined_16_31_IRQn = 81,
  GPIO2_Combined_0_15_IRQn = 82,
  GPIO2_Combined_16_31_IRQn = 83,
  GPIO3_Combined_0_15_IRQn = 84,
  GPIO3_Combined_16_31_IRQn = 85,
  GPIO4_Combined_0_15_IRQn = 86,
  GPIO4_Combined_16_31_IRQn = 87,
  GPIO5_Combined_0_15_IRQn = 88,
  GPIO5_Combined_16_31_IRQn = 89,
  FLEXIO1_IRQn = 90,
  FLEXIO2_IRQn = 91,
  WDOG1_IRQn = 92,
  RTWDOG_IRQn = 93,
  EWM_IRQn = 94,
  CCM_1_IRQn = 95,
  CCM_2_IRQn = 96,
  GPC_IRQn = 97,
  SRC_IRQn = 98,
  Reserved115_IRQn = 99,
  GPT1_IRQn = 100,
  GPT2_IRQn = 101,
  PWM1_0_IRQn = 102,
  PWM1_1_IRQn = 103,
  PWM1_2_IRQn = 104,
  PWM1_3_IRQn = 105,
  PWM1_FAULT_IRQn = 106,
  Reserved123_IRQn = 107,
  FLEXSPI_IRQn = 108,
  SEMC_IRQn = 109,
  USDHC1_IRQn = 110,
  USDHC2_IRQn = 111,
  USB_OTG2_IRQn = 112,
  USB_OTG1_IRQn = 113,
  ENET_IRQn = 114,
  ENET_1588_Timer_IRQn = 115,
  XBAR1_IRQ_0_1_IRQn = 116,
  XBAR1_IRQ_2_3_IRQn = 117,
  ADC_ETC_IRQ0_IRQn = 118,
  ADC_ETC_IRQ1_IRQn = 119,
  ADC_ETC_IRQ2_IRQn = 120,
  ADC_ETC_ERROR_IRQ_IRQn = 121,
  PIT_IRQn = 122,
  ACMP1_IRQn = 123,
  ACMP2_IRQn = 124,
  ACMP3_IRQn = 125,
  ACMP4_IRQn = 126,
  Reserved143_IRQn = 127,
  Reserved144_IRQn = 128,
  ENC1_IRQn = 129,
  ENC2_IRQn = 130,
  ENC3_IRQn = 131,
  ENC4_IRQn = 132,
  TMR1_IRQn = 133,
  TMR2_IRQn = 134,
  TMR3_IRQn = 135,
  TMR4_IRQn = 136,
  PWM2_0_IRQn = 137,
  PWM2_1_IRQn = 138,
  PWM2_2_IRQn = 139,
  PWM2_3_IRQn = 140,
  PWM2_FAULT_IRQn = 141,
  PWM3_0_IRQn = 142,
  PWM3_1_IRQn = 143,
  PWM3_2_IRQn = 144,
  PWM3_3_IRQn = 145,
  PWM3_FAULT_IRQn = 146,
  PWM4_0_IRQn = 147,
  PWM4_1_IRQn = 148,
  PWM4_2_IRQn = 149,
  PWM4_3_IRQn = 150,
  PWM4_FAULT_IRQn = 151,
  Reserved168_IRQn = 152,
  Reserved169_IRQn = 153,
  Reserved170_IRQn = 154,
  Reserved171_IRQn = 155,
  Reserved172_IRQn = 156,
  Reserved173_IRQn = 157,
  SJC_ARM_DEBUG_IRQn = 158,
  NMI_WAKEUP_IRQn = 159
} IRQn_Type;
# 294 "mcusdk/MIMXRT1052.h"
# 1 "../../lib/cmsis/inc/core_cm7.h" 1
# 63 "../../lib/cmsis/inc/core_cm7.h"
# 1 "../../lib/cmsis/inc/cmsis_version.h" 1
# 64 "../../lib/cmsis/inc/core_cm7.h" 2
# 162 "../../lib/cmsis/inc/core_cm7.h"
# 1 "../../lib/cmsis/inc/cmsis_compiler.h" 1
# 48 "../../lib/cmsis/inc/cmsis_compiler.h"
# 1 "../../lib/cmsis/inc/cmsis_gcc.h" 1
# 29 "../../lib/cmsis/inc/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 68 "../../lib/cmsis/inc/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 126 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 178 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 202 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 274 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 298 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 328 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 379 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}
# 409 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 436 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 488 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 513 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 554 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 704 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{






  uint32_t result;

  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  return(result);




}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{






  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");




}
# 820 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 854 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 873 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 888 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __REVSH(int32_t value)
{

  return (short)__builtin_bswap16(value);






}
# 908 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 930 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 950 "../../lib/cmsis/inc/cmsis_gcc.h"
  return(result);
}
# 973 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 995 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 1017 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 1034 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1051 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1068 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1132 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 1147 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 1169 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 1191 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 1206 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1218 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1230 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1432 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1752 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 1965 "../../lib/cmsis/inc/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 49 "../../lib/cmsis/inc/cmsis_compiler.h" 2
# 163 "../../lib/cmsis/inc/core_cm7.h" 2
# 274 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 313 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 331 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 386 "../../lib/cmsis/inc/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 421 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RSERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 455 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHPR[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t ID_PFR[2U];
  volatile const uint32_t ID_DFR;
  volatile const uint32_t ID_AFR;
  volatile const uint32_t ID_MFR[4U];
  volatile const uint32_t ID_ISAR[5U];
        uint32_t RESERVED0[1U];
  volatile const uint32_t CLIDR;
  volatile const uint32_t CTR;
  volatile const uint32_t CCSIDR;
  volatile uint32_t CSSELR;
  volatile uint32_t CPACR;
        uint32_t RESERVED3[93U];
  volatile uint32_t STIR;
        uint32_t RESERVED4[15U];
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
        uint32_t RESERVED5[1U];
  volatile uint32_t ICIALLU;
        uint32_t RESERVED6[1U];
  volatile uint32_t ICIMVAU;
  volatile uint32_t DCIMVAC;
  volatile uint32_t DCISW;
  volatile uint32_t DCCMVAU;
  volatile uint32_t DCCMVAC;
  volatile uint32_t DCCSW;
  volatile uint32_t DCCIMVAC;
  volatile uint32_t DCCISW;
        uint32_t RESERVED7[6U];
  volatile uint32_t ITCMCR;
  volatile uint32_t DTCMCR;
  volatile uint32_t AHBPCR;
  volatile uint32_t CACR;
  volatile uint32_t AHBSCR;
        uint32_t RESERVED8[1U];
  volatile uint32_t ABFSR;
} SCB_Type;
# 921 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 961 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 1013 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[29U];
  volatile uint32_t IWR;
  volatile const uint32_t IRR;
  volatile uint32_t IMCR;
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 1116 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
        uint32_t RESERVED3[981U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
} DWT_Type;
# 1266 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1425 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1521 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1630 "../../lib/cmsis/inc/core_cm7.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1854 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1885 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1902 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1921 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1940 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1959 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1974 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1991 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 2013 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
}
# 2035 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 4)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 4)));
  }
}
# 2060 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 2087 "../../lib/cmsis/inc/core_cm7.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 2110 "../../lib/cmsis/inc/core_cm7.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;
}
# 2125 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return vectors[(int32_t)IRQn + 16];
}






static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}







# 1 "../../lib/cmsis/inc/mpu_armv7.h" 1
# 107 "../../lib/cmsis/inc/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  __DSB();
  __ISB();
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

}



static inline void ARM_MPU_Disable(void)
{
  __DSB();
  __ISB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void orderedCpy(volatile uint32_t* dst, const uint32_t* 
# 173 "../../lib/cmsis/inc/mpu_armv7.h" 3
                                                                       restrict 
# 173 "../../lib/cmsis/inc/mpu_armv7.h"
                                                                                  src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    orderedCpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  orderedCpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 2158 "../../lib/cmsis/inc/core_cm7.h" 2
# 2177 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x220U)
  {
    return 2U;
  }
  else if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2218 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_EnableICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR |= (uint32_t)(1UL << 17U);
    __DSB();
    __ISB();

}






static inline void SCB_DisableICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR &= ~(uint32_t)(1UL << 17U);
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();

}






static inline void SCB_InvalidateICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();

}






static inline void SCB_EnableDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);
    __DSB();

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR |= (uint32_t)(1UL << 16U);

    __DSB();
    __ISB();

}






static inline void SCB_DisableDCache (void)
{

    register uint32_t ccsidr;
    register uint32_t sets;
    register uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR &= ~(uint32_t)(1UL << 16U);
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                       ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_InvalidateDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_CleanDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
   __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCSW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_CleanInvalidateDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                       ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}
# 2453 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCIMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2480 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2507 "../../lib/cmsis/inc/core_cm7.h"
static inline void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCIMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2553 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 4) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2583 "../../lib/cmsis/inc/core_cm7.h"
extern volatile int32_t ITM_RxBuffer;
# 2595 "../../lib/cmsis/inc/core_cm7.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2616 "../../lib/cmsis/inc/core_cm7.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2636 "../../lib/cmsis/inc/core_cm7.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 295 "mcusdk/MIMXRT1052.h" 2
# 1 "mcusdk/system_MIMXRT1052.h" 1
# 106 "mcusdk/system_MIMXRT1052.h"
extern uint32_t SystemCoreClock;
# 115 "mcusdk/system_MIMXRT1052.h"
void SystemInit (void);
# 124 "mcusdk/system_MIMXRT1052.h"
void SystemCoreClockUpdate (void);
# 296 "mcusdk/MIMXRT1052.h" 2
# 325 "mcusdk/MIMXRT1052.h"
typedef enum _dma_request_source
{
    kDmaRequestMuxFlexIO1Request0Request1 = 0|0x100U,
    kDmaRequestMuxFlexIO2Request0Request1 = 1|0x100U,
    kDmaRequestMuxLPUART1Tx = 2|0x100U,
    kDmaRequestMuxLPUART1Rx = 3|0x100U,
    kDmaRequestMuxLPUART3Tx = 4|0x100U,
    kDmaRequestMuxLPUART3Rx = 5|0x100U,
    kDmaRequestMuxLPUART5Tx = 6|0x100U,
    kDmaRequestMuxLPUART5Rx = 7|0x100U,
    kDmaRequestMuxLPUART7Tx = 8|0x100U,
    kDmaRequestMuxLPUART7Rx = 9|0x100U,
    kDmaRequestMuxCSI = 12|0x100U,
    kDmaRequestMuxLPSPI1Rx = 13|0x100U,
    kDmaRequestMuxLPSPI1Tx = 14|0x100U,
    kDmaRequestMuxLPSPI3Rx = 15|0x100U,
    kDmaRequestMuxLPSPI3Tx = 16|0x100U,
    kDmaRequestMuxLPI2C1 = 17|0x100U,
    kDmaRequestMuxLPI2C3 = 18|0x100U,
    kDmaRequestMuxSai1Rx = 19|0x100U,
    kDmaRequestMuxSai1Tx = 20|0x100U,
    kDmaRequestMuxSai2Rx = 21|0x100U,
    kDmaRequestMuxSai2Tx = 22|0x100U,
    kDmaRequestMuxADC_ETC = 23|0x100U,
    kDmaRequestMuxADC1 = 24|0x100U,
    kDmaRequestMuxACMP1 = 25|0x100U,
    kDmaRequestMuxACMP2 = 26|0x100U,
    kDmaRequestMuxFlexSPIRx = 28|0x100U,
    kDmaRequestMuxFlexSPITx = 29|0x100U,
    kDmaRequestMuxXBAR1Request0 = 30|0x100U,
    kDmaRequestMuxXBAR1Request1 = 31|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub0 = 32|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub1 = 33|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub2 = 34|0x100U,
    kDmaRequestMuxFlexPWM1CaptureSub3 = 35|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub0 = 36|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub1 = 37|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub2 = 38|0x100U,
    kDmaRequestMuxFlexPWM1ValueSub3 = 39|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub0 = 40|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub1 = 41|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub2 = 42|0x100U,
    kDmaRequestMuxFlexPWM3CaptureSub3 = 43|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub0 = 44|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub1 = 45|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub2 = 46|0x100U,
    kDmaRequestMuxFlexPWM3ValueSub3 = 47|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer0 = 48|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer1 = 49|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer2 = 50|0x100U,
    kDmaRequestMuxQTIMER1CaptTimer3 = 51|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer0Cmpld2Timer1 = 52|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer1Cmpld2Timer0 = 53|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer2Cmpld2Timer3 = 54|0x100U,
    kDmaRequestMuxQTIMER1Cmpld1Timer3Cmpld2Timer2 = 55|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer0Cmpld1Timer0Cmpld2Timer1 = 56|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer1Cmpld1Timer0Cmpld2Timer1 = 57|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer2Cmpld1Timer0Cmpld2Timer1 = 58|0x100U,
    kDmaRequestMuxQTIMER3CaptTimer3Cmpld1Timer0Cmpld2Timer1 = 59|0x100U,
    kDmaRequestMuxFlexIO1Request2Request3 = 64|0x100U,
    kDmaRequestMuxFlexIO2Request2Request3 = 65|0x100U,
    kDmaRequestMuxLPUART2Tx = 66|0x100U,
    kDmaRequestMuxLPUART2Rx = 67|0x100U,
    kDmaRequestMuxLPUART4Tx = 68|0x100U,
    kDmaRequestMuxLPUART4Rx = 69|0x100U,
    kDmaRequestMuxLPUART6Tx = 70|0x100U,
    kDmaRequestMuxLPUART6Rx = 71|0x100U,
    kDmaRequestMuxLPUART8Tx = 72|0x100U,
    kDmaRequestMuxLPUART8Rx = 73|0x100U,
    kDmaRequestMuxPxp = 75|0x100U,
    kDmaRequestMuxLCDIF = 76|0x100U,
    kDmaRequestMuxLPSPI2Rx = 77|0x100U,
    kDmaRequestMuxLPSPI2Tx = 78|0x100U,
    kDmaRequestMuxLPSPI4Rx = 79|0x100U,
    kDmaRequestMuxLPSPI4Tx = 80|0x100U,
    kDmaRequestMuxLPI2C2 = 81|0x100U,
    kDmaRequestMuxLPI2C4 = 82|0x100U,
    kDmaRequestMuxSai3Rx = 83|0x100U,
    kDmaRequestMuxSai3Tx = 84|0x100U,
    kDmaRequestMuxSpdifRx = 85|0x100U,
    kDmaRequestMuxSpdifTx = 86|0x100U,
    kDmaRequestMuxADC2 = 88|0x100U,
    kDmaRequestMuxACMP3 = 89|0x100U,
    kDmaRequestMuxACMP4 = 90|0x100U,
    kDmaRequestMuxEnetTimer0 = 92|0x100U,
    kDmaRequestMuxEnetTimer1 = 93|0x100U,
    kDmaRequestMuxXBAR1Request2 = 94|0x100U,
    kDmaRequestMuxXBAR1Request3 = 95|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub0 = 96|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub1 = 97|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub2 = 98|0x100U,
    kDmaRequestMuxFlexPWM2CaptureSub3 = 99|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub0 = 100|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub1 = 101|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub2 = 102|0x100U,
    kDmaRequestMuxFlexPWM2ValueSub3 = 103|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub0 = 104|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub1 = 105|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub2 = 106|0x100U,
    kDmaRequestMuxFlexPWM4CaptureSub3 = 107|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub0 = 108|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub1 = 109|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub2 = 110|0x100U,
    kDmaRequestMuxFlexPWM4ValueSub3 = 111|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer0 = 112|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer1 = 113|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer2 = 114|0x100U,
    kDmaRequestMuxQTIMER2CaptTimer3 = 115|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer0Cmpld2Timer1 = 116|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer1Cmpld2Timer0 = 117|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer2Cmpld2Timer3 = 118|0x100U,
    kDmaRequestMuxQTIMER2Cmpld1Timer3Cmpld2Timer2 = 119|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer0Cmpld1Timer0Cmpld2Timer1 = 120|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer1Cmpld1Timer0Cmpld2Timer1 = 121|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer2Cmpld1Timer0Cmpld2Timer1 = 122|0x100U,
    kDmaRequestMuxQTIMER4CaptTimer3Cmpld1Timer0Cmpld2Timer1 = 123|0x100U,
} dma_request_source_t;
# 456 "mcusdk/MIMXRT1052.h"
typedef enum _iomuxc_sw_mux_ctl_pad
{
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_00 = 0U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_01 = 1U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_02 = 2U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_03 = 3U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_04 = 4U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_05 = 5U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_06 = 6U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_07 = 7U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_08 = 8U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_09 = 9U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_10 = 10U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_11 = 11U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_12 = 12U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_13 = 13U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_14 = 14U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_15 = 15U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_16 = 16U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_17 = 17U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_18 = 18U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_19 = 19U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_20 = 20U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_21 = 21U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 22U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 23U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 24U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 25U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 26U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 27U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 28U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 29U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_30 = 30U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_31 = 31U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_32 = 32U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_33 = 33U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_34 = 34U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_35 = 35U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_36 = 36U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_37 = 37U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_38 = 38U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_39 = 39U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 40U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_41 = 41U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_00 = 42U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_01 = 43U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 44U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03 = 45U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_04 = 46U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_05 = 47U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_06 = 48U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_07 = 49U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_08 = 50U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_09 = 51U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_10 = 52U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_11 = 53U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_12 = 54U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_13 = 55U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_14 = 56U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_15 = 57U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_00 = 58U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_01 = 59U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_02 = 60U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_03 = 61U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_04 = 62U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_05 = 63U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_06 = 64U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_07 = 65U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08 = 66U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09 = 67U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_10 = 68U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_11 = 69U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_12 = 70U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_13 = 71U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_14 = 72U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_15 = 73U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_00 = 74U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 75U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 76U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 77U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_04 = 78U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_05 = 79U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_06 = 80U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_07 = 81U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_08 = 82U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_09 = 83U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_10 = 84U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_11 = 85U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_12 = 86U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_13 = 87U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_14 = 88U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B0_15 = 89U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_00 = 90U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_01 = 91U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_02 = 92U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_03 = 93U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_04 = 94U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_05 = 95U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_06 = 96U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_07 = 97U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_08 = 98U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_09 = 99U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_10 = 100U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_11 = 101U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_12 = 102U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_13 = 103U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_14 = 104U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_B1_15 = 105U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 106U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 107U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 108U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 109U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 110U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 111U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_00 = 112U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_01 = 113U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_02 = 114U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_03 = 115U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_04 = 116U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_05 = 117U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_06 = 118U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_07 = 119U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_08 = 120U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_09 = 121U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_10 = 122U,
    kIOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B1_11 = 123U,
} iomuxc_sw_mux_ctl_pad_t;
# 597 "mcusdk/MIMXRT1052.h"
typedef enum _iomuxc_sw_pad_ctl_pad
{
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_00 = 0U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_01 = 1U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_02 = 2U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_03 = 3U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_04 = 4U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_05 = 5U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_06 = 6U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_07 = 7U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_08 = 8U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_09 = 9U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_10 = 10U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_11 = 11U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_12 = 12U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_13 = 13U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_14 = 14U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_15 = 15U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_16 = 16U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_17 = 17U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_18 = 18U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_19 = 19U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_20 = 20U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_21 = 21U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 22U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 23U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 24U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 25U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 26U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 27U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 28U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 29U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_30 = 30U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_31 = 31U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_32 = 32U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_33 = 33U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_34 = 34U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_35 = 35U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36 = 36U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37 = 37U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_38 = 38U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_39 = 39U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 40U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_41 = 41U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_00 = 42U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_01 = 43U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02 = 44U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03 = 45U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_04 = 46U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_05 = 47U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_06 = 48U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_07 = 49U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_08 = 50U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_09 = 51U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_10 = 52U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_11 = 53U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_12 = 54U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_13 = 55U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_14 = 56U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_15 = 57U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_00 = 58U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_01 = 59U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_02 = 60U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_03 = 61U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_04 = 62U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_05 = 63U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_06 = 64U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_07 = 65U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08 = 66U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09 = 67U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_10 = 68U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_11 = 69U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_12 = 70U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_13 = 71U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_14 = 72U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_15 = 73U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_00 = 74U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = 75U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = 76U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = 77U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_04 = 78U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_05 = 79U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_06 = 80U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_07 = 81U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_08 = 82U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_09 = 83U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_10 = 84U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_11 = 85U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_12 = 86U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_13 = 87U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_14 = 88U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B0_15 = 89U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_00 = 90U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_01 = 91U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_02 = 92U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_03 = 93U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_04 = 94U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_05 = 95U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_06 = 96U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_07 = 97U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_08 = 98U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_09 = 99U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_10 = 100U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_11 = 101U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_12 = 102U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_13 = 103U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_14 = 104U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_B1_15 = 105U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = 106U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = 107U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = 108U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = 109U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = 110U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = 111U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_00 = 112U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_01 = 113U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_02 = 114U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_03 = 115U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_04 = 116U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_05 = 117U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_06 = 118U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_07 = 119U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_08 = 120U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_09 = 121U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_10 = 122U,
    kIOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B1_11 = 123U,
} iomuxc_sw_pad_ctl_pad_t;






typedef enum _iomuxc_select_input
{
    kIOMUXC_ANATOP_USB_OTG1_ID_SELECT_INPUT = 0U,
    kIOMUXC_ANATOP_USB_OTG2_ID_SELECT_INPUT = 1U,
    kIOMUXC_CCM_PMIC_READY_SELECT_INPUT = 2U,
    kIOMUXC_CSI_DATA02_SELECT_INPUT = 3U,
    kIOMUXC_CSI_DATA03_SELECT_INPUT = 4U,
    kIOMUXC_CSI_DATA04_SELECT_INPUT = 5U,
    kIOMUXC_CSI_DATA05_SELECT_INPUT = 6U,
    kIOMUXC_CSI_DATA06_SELECT_INPUT = 7U,
    kIOMUXC_CSI_DATA07_SELECT_INPUT = 8U,
    kIOMUXC_CSI_DATA08_SELECT_INPUT = 9U,
    kIOMUXC_CSI_DATA09_SELECT_INPUT = 10U,
    kIOMUXC_CSI_HSYNC_SELECT_INPUT = 11U,
    kIOMUXC_CSI_PIXCLK_SELECT_INPUT = 12U,
    kIOMUXC_CSI_VSYNC_SELECT_INPUT = 13U,
    kIOMUXC_ENET_IPG_CLK_RMII_SELECT_INPUT = 14U,
    kIOMUXC_ENET_MDIO_SELECT_INPUT = 15U,
    kIOMUXC_ENET0_RXDATA_SELECT_INPUT = 16U,
    kIOMUXC_ENET1_RXDATA_SELECT_INPUT = 17U,
    kIOMUXC_ENET_RXEN_SELECT_INPUT = 18U,
    kIOMUXC_ENET_RXERR_SELECT_INPUT = 19U,
    kIOMUXC_ENET0_TIMER_SELECT_INPUT = 20U,
    kIOMUXC_ENET_TXCLK_SELECT_INPUT = 21U,
    kIOMUXC_FLEXCAN1_RX_SELECT_INPUT = 22U,
    kIOMUXC_FLEXCAN2_RX_SELECT_INPUT = 23U,
    kIOMUXC_FLEXPWM1_PWMA3_SELECT_INPUT = 24U,
    kIOMUXC_FLEXPWM1_PWMA0_SELECT_INPUT = 25U,
    kIOMUXC_FLEXPWM1_PWMA1_SELECT_INPUT = 26U,
    kIOMUXC_FLEXPWM1_PWMA2_SELECT_INPUT = 27U,
    kIOMUXC_FLEXPWM1_PWMB3_SELECT_INPUT = 28U,
    kIOMUXC_FLEXPWM1_PWMB0_SELECT_INPUT = 29U,
    kIOMUXC_FLEXPWM1_PWMB1_SELECT_INPUT = 30U,
    kIOMUXC_FLEXPWM1_PWMB2_SELECT_INPUT = 31U,
    kIOMUXC_FLEXPWM2_PWMA3_SELECT_INPUT = 32U,
    kIOMUXC_FLEXPWM2_PWMA0_SELECT_INPUT = 33U,
    kIOMUXC_FLEXPWM2_PWMA1_SELECT_INPUT = 34U,
    kIOMUXC_FLEXPWM2_PWMA2_SELECT_INPUT = 35U,
    kIOMUXC_FLEXPWM2_PWMB3_SELECT_INPUT = 36U,
    kIOMUXC_FLEXPWM2_PWMB0_SELECT_INPUT = 37U,
    kIOMUXC_FLEXPWM2_PWMB1_SELECT_INPUT = 38U,
    kIOMUXC_FLEXPWM2_PWMB2_SELECT_INPUT = 39U,
    kIOMUXC_FLEXPWM4_PWMA0_SELECT_INPUT = 40U,
    kIOMUXC_FLEXPWM4_PWMA1_SELECT_INPUT = 41U,
    kIOMUXC_FLEXPWM4_PWMA2_SELECT_INPUT = 42U,
    kIOMUXC_FLEXPWM4_PWMA3_SELECT_INPUT = 43U,
    kIOMUXC_FLEXSPIA_DQS_SELECT_INPUT = 44U,
    kIOMUXC_FLEXSPIA_DATA0_SELECT_INPUT = 45U,
    kIOMUXC_FLEXSPIA_DATA1_SELECT_INPUT = 46U,
    kIOMUXC_FLEXSPIA_DATA2_SELECT_INPUT = 47U,
    kIOMUXC_FLEXSPIA_DATA3_SELECT_INPUT = 48U,
    kIOMUXC_FLEXSPIB_DATA0_SELECT_INPUT = 49U,
    kIOMUXC_FLEXSPIB_DATA1_SELECT_INPUT = 50U,
    kIOMUXC_FLEXSPIB_DATA2_SELECT_INPUT = 51U,
    kIOMUXC_FLEXSPIB_DATA3_SELECT_INPUT = 52U,
    kIOMUXC_FLEXSPIA_SCK_SELECT_INPUT = 53U,
    kIOMUXC_LPI2C1_SCL_SELECT_INPUT = 54U,
    kIOMUXC_LPI2C1_SDA_SELECT_INPUT = 55U,
    kIOMUXC_LPI2C2_SCL_SELECT_INPUT = 56U,
    kIOMUXC_LPI2C2_SDA_SELECT_INPUT = 57U,
    kIOMUXC_LPI2C3_SCL_SELECT_INPUT = 58U,
    kIOMUXC_LPI2C3_SDA_SELECT_INPUT = 59U,
    kIOMUXC_LPI2C4_SCL_SELECT_INPUT = 60U,
    kIOMUXC_LPI2C4_SDA_SELECT_INPUT = 61U,
    kIOMUXC_LPSPI1_PCS0_SELECT_INPUT = 62U,
    kIOMUXC_LPSPI1_SCK_SELECT_INPUT = 63U,
    kIOMUXC_LPSPI1_SDI_SELECT_INPUT = 64U,
    kIOMUXC_LPSPI1_SDO_SELECT_INPUT = 65U,
    kIOMUXC_LPSPI2_PCS0_SELECT_INPUT = 66U,
    kIOMUXC_LPSPI2_SCK_SELECT_INPUT = 67U,
    kIOMUXC_LPSPI2_SDI_SELECT_INPUT = 68U,
    kIOMUXC_LPSPI2_SDO_SELECT_INPUT = 69U,
    kIOMUXC_LPSPI3_PCS0_SELECT_INPUT = 70U,
    kIOMUXC_LPSPI3_SCK_SELECT_INPUT = 71U,
    kIOMUXC_LPSPI3_SDI_SELECT_INPUT = 72U,
    kIOMUXC_LPSPI3_SDO_SELECT_INPUT = 73U,
    kIOMUXC_LPSPI4_PCS0_SELECT_INPUT = 74U,
    kIOMUXC_LPSPI4_SCK_SELECT_INPUT = 75U,
    kIOMUXC_LPSPI4_SDI_SELECT_INPUT = 76U,
    kIOMUXC_LPSPI4_SDO_SELECT_INPUT = 77U,
    kIOMUXC_LPUART2_RX_SELECT_INPUT = 78U,
    kIOMUXC_LPUART2_TX_SELECT_INPUT = 79U,
    kIOMUXC_LPUART3_CTS_B_SELECT_INPUT = 80U,
    kIOMUXC_LPUART3_RX_SELECT_INPUT = 81U,
    kIOMUXC_LPUART3_TX_SELECT_INPUT = 82U,
    kIOMUXC_LPUART4_RX_SELECT_INPUT = 83U,
    kIOMUXC_LPUART4_TX_SELECT_INPUT = 84U,
    kIOMUXC_LPUART5_RX_SELECT_INPUT = 85U,
    kIOMUXC_LPUART5_TX_SELECT_INPUT = 86U,
    kIOMUXC_LPUART6_RX_SELECT_INPUT = 87U,
    kIOMUXC_LPUART6_TX_SELECT_INPUT = 88U,
    kIOMUXC_LPUART7_RX_SELECT_INPUT = 89U,
    kIOMUXC_LPUART7_TX_SELECT_INPUT = 90U,
    kIOMUXC_LPUART8_RX_SELECT_INPUT = 91U,
    kIOMUXC_LPUART8_TX_SELECT_INPUT = 92U,
    kIOMUXC_NMI_SELECT_INPUT = 93U,
    kIOMUXC_QTIMER2_TIMER0_SELECT_INPUT = 94U,
    kIOMUXC_QTIMER2_TIMER1_SELECT_INPUT = 95U,
    kIOMUXC_QTIMER2_TIMER2_SELECT_INPUT = 96U,
    kIOMUXC_QTIMER2_TIMER3_SELECT_INPUT = 97U,
    kIOMUXC_QTIMER3_TIMER0_SELECT_INPUT = 98U,
    kIOMUXC_QTIMER3_TIMER1_SELECT_INPUT = 99U,
    kIOMUXC_QTIMER3_TIMER2_SELECT_INPUT = 100U,
    kIOMUXC_QTIMER3_TIMER3_SELECT_INPUT = 101U,
    kIOMUXC_SAI1_MCLK2_SELECT_INPUT = 102U,
    kIOMUXC_SAI1_RX_BCLK_SELECT_INPUT = 103U,
    kIOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 104U,
    kIOMUXC_SAI1_RX_DATA1_SELECT_INPUT = 105U,
    kIOMUXC_SAI1_RX_DATA2_SELECT_INPUT = 106U,
    kIOMUXC_SAI1_RX_DATA3_SELECT_INPUT = 107U,
    kIOMUXC_SAI1_RX_SYNC_SELECT_INPUT = 108U,
    kIOMUXC_SAI1_TX_BCLK_SELECT_INPUT = 109U,
    kIOMUXC_SAI1_TX_SYNC_SELECT_INPUT = 110U,
    kIOMUXC_SAI2_MCLK2_SELECT_INPUT = 111U,
    kIOMUXC_SAI2_RX_BCLK_SELECT_INPUT = 112U,
    kIOMUXC_SAI2_RX_DATA0_SELECT_INPUT = 113U,
    kIOMUXC_SAI2_RX_SYNC_SELECT_INPUT = 114U,
    kIOMUXC_SAI2_TX_BCLK_SELECT_INPUT = 115U,
    kIOMUXC_SAI2_TX_SYNC_SELECT_INPUT = 116U,
    kIOMUXC_SPDIF_IN_SELECT_INPUT = 117U,
    kIOMUXC_USB_OTG2_OC_SELECT_INPUT = 118U,
    kIOMUXC_USB_OTG1_OC_SELECT_INPUT = 119U,
    kIOMUXC_USDHC1_CD_B_SELECT_INPUT = 120U,
    kIOMUXC_USDHC1_WP_SELECT_INPUT = 121U,
    kIOMUXC_USDHC2_CLK_SELECT_INPUT = 122U,
    kIOMUXC_USDHC2_CD_B_SELECT_INPUT = 123U,
    kIOMUXC_USDHC2_CMD_SELECT_INPUT = 124U,
    kIOMUXC_USDHC2_DATA0_SELECT_INPUT = 125U,
    kIOMUXC_USDHC2_DATA1_SELECT_INPUT = 126U,
    kIOMUXC_USDHC2_DATA2_SELECT_INPUT = 127U,
    kIOMUXC_USDHC2_DATA3_SELECT_INPUT = 128U,
    kIOMUXC_USDHC2_DATA4_SELECT_INPUT = 129U,
    kIOMUXC_USDHC2_DATA5_SELECT_INPUT = 130U,
    kIOMUXC_USDHC2_DATA6_SELECT_INPUT = 131U,
    kIOMUXC_USDHC2_DATA7_SELECT_INPUT = 132U,
    kIOMUXC_USDHC2_WP_SELECT_INPUT = 133U,
    kIOMUXC_XBAR1_IN02_SELECT_INPUT = 134U,
    kIOMUXC_XBAR1_IN03_SELECT_INPUT = 135U,
    kIOMUXC_XBAR1_IN04_SELECT_INPUT = 136U,
    kIOMUXC_XBAR1_IN05_SELECT_INPUT = 137U,
    kIOMUXC_XBAR1_IN06_SELECT_INPUT = 138U,
    kIOMUXC_XBAR1_IN07_SELECT_INPUT = 139U,
    kIOMUXC_XBAR1_IN08_SELECT_INPUT = 140U,
    kIOMUXC_XBAR1_IN09_SELECT_INPUT = 141U,
    kIOMUXC_XBAR1_IN17_SELECT_INPUT = 142U,
    kIOMUXC_XBAR1_IN18_SELECT_INPUT = 143U,
    kIOMUXC_XBAR1_IN20_SELECT_INPUT = 144U,
    kIOMUXC_XBAR1_IN22_SELECT_INPUT = 145U,
    kIOMUXC_XBAR1_IN23_SELECT_INPUT = 146U,
    kIOMUXC_XBAR1_IN24_SELECT_INPUT = 147U,
    kIOMUXC_XBAR1_IN14_SELECT_INPUT = 148U,
    kIOMUXC_XBAR1_IN15_SELECT_INPUT = 149U,
    kIOMUXC_XBAR1_IN16_SELECT_INPUT = 150U,
    kIOMUXC_XBAR1_IN25_SELECT_INPUT = 151U,
    kIOMUXC_XBAR1_IN19_SELECT_INPUT = 152U,
    kIOMUXC_XBAR1_IN21_SELECT_INPUT = 153U,
} iomuxc_select_input_t;



typedef enum _xbar_input_signal
{
    kXBARA1_InputLogicLow = 0|0x100U,
    kXBARA1_InputLogicHigh = 1|0x100U,
    kXBARA1_InputIomuxXbarIn02 = 2|0x100U,
    kXBARA1_InputIomuxXbarIn03 = 3|0x100U,
    kXBARA1_InputIomuxXbarInout04 = 4|0x100U,
    kXBARA1_InputIomuxXbarInout05 = 5|0x100U,
    kXBARA1_InputIomuxXbarInout06 = 6|0x100U,
    kXBARA1_InputIomuxXbarInout07 = 7|0x100U,
    kXBARA1_InputIomuxXbarInout08 = 8|0x100U,
    kXBARA1_InputIomuxXbarInout09 = 9|0x100U,
    kXBARA1_InputIomuxXbarInout10 = 10|0x100U,
    kXBARA1_InputIomuxXbarInout11 = 11|0x100U,
    kXBARA1_InputIomuxXbarInout12 = 12|0x100U,
    kXBARA1_InputIomuxXbarInout13 = 13|0x100U,
    kXBARA1_InputIomuxXbarInout14 = 14|0x100U,
    kXBARA1_InputIomuxXbarInout15 = 15|0x100U,
    kXBARA1_InputIomuxXbarInout16 = 16|0x100U,
    kXBARA1_InputIomuxXbarInout17 = 17|0x100U,
    kXBARA1_InputIomuxXbarInout18 = 18|0x100U,
    kXBARA1_InputIomuxXbarInout19 = 19|0x100U,
    kXBARA1_InputIomuxXbarIn20 = 20|0x100U,
    kXBARA1_InputIomuxXbarIn21 = 21|0x100U,
    kXBARA1_InputIomuxXbarIn22 = 22|0x100U,
    kXBARA1_InputIomuxXbarIn23 = 23|0x100U,
    kXBARA1_InputIomuxXbarIn24 = 24|0x100U,
    kXBARA1_InputIomuxXbarIn25 = 25|0x100U,
    kXBARA1_InputAcmp1Out = 26|0x100U,
    kXBARA1_InputAcmp2Out = 27|0x100U,
    kXBARA1_InputAcmp3Out = 28|0x100U,
    kXBARA1_InputAcmp4Out = 29|0x100U,
    kXBARA1_InputRESERVED30 = 30|0x100U,
    kXBARA1_InputRESERVED31 = 31|0x100U,
    kXBARA1_InputQtimer3Tmr0Output = 32|0x100U,
    kXBARA1_InputQtimer3Tmr1Output = 33|0x100U,
    kXBARA1_InputQtimer3Tmr2Output = 34|0x100U,
    kXBARA1_InputQtimer3Tmr3Output = 35|0x100U,
    kXBARA1_InputQtimer4Tmr0Output = 36|0x100U,
    kXBARA1_InputQtimer4Tmr1Output = 37|0x100U,
    kXBARA1_InputQtimer4Tmr2Output = 38|0x100U,
    kXBARA1_InputQtimer4Tmr3Output = 39|0x100U,
    kXBARA1_InputFlexpwm1Pwm1OutTrig01 = 40|0x100U,
    kXBARA1_InputFlexpwm1Pwm2OutTrig01 = 41|0x100U,
    kXBARA1_InputFlexpwm1Pwm3OutTrig01 = 42|0x100U,
    kXBARA1_InputFlexpwm1Pwm4OutTrig01 = 43|0x100U,
    kXBARA1_InputFlexpwm2Pwm1OutTrig01 = 44|0x100U,
    kXBARA1_InputFlexpwm2Pwm2OutTrig01 = 45|0x100U,
    kXBARA1_InputFlexpwm2Pwm3OutTrig01 = 46|0x100U,
    kXBARA1_InputFlexpwm2Pwm4OutTrig01 = 47|0x100U,
    kXBARA1_InputFlexpwm3Pwm1OutTrig01 = 48|0x100U,
    kXBARA1_InputFlexpwm3Pwm2OutTrig01 = 49|0x100U,
    kXBARA1_InputFlexpwm3Pwm3OutTrig01 = 50|0x100U,
    kXBARA1_InputFlexpwm3Pwm4OutTrig01 = 51|0x100U,
    kXBARA1_InputFlexpwm4Pwm1OutTrig01 = 52|0x100U,
    kXBARA1_InputFlexpwm4Pwm2OutTrig01 = 53|0x100U,
    kXBARA1_InputFlexpwm4Pwm3OutTrig01 = 54|0x100U,
    kXBARA1_InputFlexpwm4Pwm4OutTrig01 = 55|0x100U,
    kXBARA1_InputPitTrigger0 = 56|0x100U,
    kXBARA1_InputPitTrigger1 = 57|0x100U,
    kXBARA1_InputPitTrigger2 = 58|0x100U,
    kXBARA1_InputPitTrigger3 = 59|0x100U,
    kXBARA1_InputEnc1PosMatch = 60|0x100U,
    kXBARA1_InputEnc2PosMatch = 61|0x100U,
    kXBARA1_InputEnc3PosMatch = 62|0x100U,
    kXBARA1_InputEnc4PosMatch = 63|0x100U,
    kXBARA1_InputDmaDone0 = 64|0x100U,
    kXBARA1_InputDmaDone1 = 65|0x100U,
    kXBARA1_InputDmaDone2 = 66|0x100U,
    kXBARA1_InputDmaDone3 = 67|0x100U,
    kXBARA1_InputDmaDone4 = 68|0x100U,
    kXBARA1_InputDmaDone5 = 69|0x100U,
    kXBARA1_InputDmaDone6 = 70|0x100U,
    kXBARA1_InputDmaDone7 = 71|0x100U,
    kXBARA1_InputAoi1Out0 = 72|0x100U,
    kXBARA1_InputAoi1Out1 = 73|0x100U,
    kXBARA1_InputAoi1Out2 = 74|0x100U,
    kXBARA1_InputAoi1Out3 = 75|0x100U,
    kXBARA1_InputAoi2Out0 = 76|0x100U,
    kXBARA1_InputAoi2Out1 = 77|0x100U,
    kXBARA1_InputAoi2Out2 = 78|0x100U,
    kXBARA1_InputAoi2Out3 = 79|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco0 = 80|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco1 = 81|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco2 = 82|0x100U,
    kXBARA1_InputAdcEtcXbar0Coco3 = 83|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco0 = 84|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco1 = 85|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco2 = 86|0x100U,
    kXBARA1_InputAdcEtcXbar1Coco3 = 87|0x100U,
    kXBARB2_InputLogicLow = 0|0x200U,
    kXBARB2_InputLogicHigh = 1|0x200U,
    kXBARB2_InputRESERVED2 = 2|0x200U,
    kXBARB2_InputRESERVED3 = 3|0x200U,
    kXBARB2_InputRESERVED4 = 4|0x200U,
    kXBARB2_InputRESERVED5 = 5|0x200U,
    kXBARB2_InputAcmp1Out = 6|0x200U,
    kXBARB2_InputAcmp2Out = 7|0x200U,
    kXBARB2_InputAcmp3Out = 8|0x200U,
    kXBARB2_InputAcmp4Out = 9|0x200U,
    kXBARB2_InputRESERVED10 = 10|0x200U,
    kXBARB2_InputRESERVED11 = 11|0x200U,
    kXBARB2_InputQtimer3Tmr0Output = 12|0x200U,
    kXBARB2_InputQtimer3Tmr1Output = 13|0x200U,
    kXBARB2_InputQtimer3Tmr2Output = 14|0x200U,
    kXBARB2_InputQtimer3Tmr3Output = 15|0x200U,
    kXBARB2_InputQtimer4Tmr0Output = 16|0x200U,
    kXBARB2_InputQtimer4Tmr1Output = 17|0x200U,
    kXBARB2_InputQtimer4Tmr2Output = 18|0x200U,
    kXBARB2_InputQtimer4Tmr3Output = 19|0x200U,
    kXBARB2_InputFlexpwm1Pwm1OutTrig01 = 20|0x200U,
    kXBARB2_InputFlexpwm1Pwm2OutTrig01 = 21|0x200U,
    kXBARB2_InputFlexpwm1Pwm3OutTrig01 = 22|0x200U,
    kXBARB2_InputFlexpwm1Pwm4OutTrig01 = 23|0x200U,
    kXBARB2_InputFlexpwm2Pwm1OutTrig01 = 24|0x200U,
    kXBARB2_InputFlexpwm2Pwm2OutTrig01 = 25|0x200U,
    kXBARB2_InputFlexpwm2Pwm3OutTrig01 = 26|0x200U,
    kXBARB2_InputFlexpwm2Pwm4OutTrig01 = 27|0x200U,
    kXBARB2_InputFlexpwm3Pwm1OutTrig01 = 28|0x200U,
    kXBARB2_InputFlexpwm3Pwm2OutTrig01 = 29|0x200U,
    kXBARB2_InputFlexpwm3Pwm3OutTrig01 = 30|0x200U,
    kXBARB2_InputFlexpwm3Pwm4OutTrig01 = 31|0x200U,
    kXBARB2_InputFlexpwm4Pwm1OutTrig01 = 32|0x200U,
    kXBARB2_InputFlexpwm4Pwm2OutTrig01 = 33|0x200U,
    kXBARB2_InputFlexpwm4Pwm3OutTrig01 = 34|0x200U,
    kXBARB2_InputFlexpwm4Pwm4OutTrig01 = 35|0x200U,
    kXBARB2_InputPitTrigger0 = 36|0x200U,
    kXBARB2_InputPitTrigger1 = 37|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco0 = 38|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco1 = 39|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco2 = 40|0x200U,
    kXBARB2_InputAdcEtcXbar0Coco3 = 41|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco0 = 42|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco1 = 43|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco2 = 44|0x200U,
    kXBARB2_InputAdcEtcXbar1Coco3 = 45|0x200U,
    kXBARB2_InputEnc1PosMatch = 46|0x200U,
    kXBARB2_InputEnc2PosMatch = 47|0x200U,
    kXBARB2_InputEnc3PosMatch = 48|0x200U,
    kXBARB2_InputEnc4PosMatch = 49|0x200U,
    kXBARB2_InputDmaDone0 = 50|0x200U,
    kXBARB2_InputDmaDone1 = 51|0x200U,
    kXBARB2_InputDmaDone2 = 52|0x200U,
    kXBARB2_InputDmaDone3 = 53|0x200U,
    kXBARB2_InputDmaDone4 = 54|0x200U,
    kXBARB2_InputDmaDone5 = 55|0x200U,
    kXBARB2_InputDmaDone6 = 56|0x200U,
    kXBARB2_InputDmaDone7 = 57|0x200U,
    kXBARB3_InputLogicLow = 0|0x300U,
    kXBARB3_InputLogicHigh = 1|0x300U,
    kXBARB3_InputRESERVED2 = 2|0x300U,
    kXBARB3_InputRESERVED3 = 3|0x300U,
    kXBARB3_InputRESERVED4 = 4|0x300U,
    kXBARB3_InputRESERVED5 = 5|0x300U,
    kXBARB3_InputAcmp1Out = 6|0x300U,
    kXBARB3_InputAcmp2Out = 7|0x300U,
    kXBARB3_InputAcmp3Out = 8|0x300U,
    kXBARB3_InputAcmp4Out = 9|0x300U,
    kXBARB3_InputRESERVED10 = 10|0x300U,
    kXBARB3_InputRESERVED11 = 11|0x300U,
    kXBARB3_InputQtimer3Tmr0Output = 12|0x300U,
    kXBARB3_InputQtimer3Tmr1Output = 13|0x300U,
    kXBARB3_InputQtimer3Tmr2Output = 14|0x300U,
    kXBARB3_InputQtimer3Tmr3Output = 15|0x300U,
    kXBARB3_InputQtimer4Tmr0Output = 16|0x300U,
    kXBARB3_InputQtimer4Tmr1Output = 17|0x300U,
    kXBARB3_InputQtimer4Tmr2Output = 18|0x300U,
    kXBARB3_InputQtimer4Tmr3Output = 19|0x300U,
    kXBARB3_InputFlexpwm1Pwm1OutTrig01 = 20|0x300U,
    kXBARB3_InputFlexpwm1Pwm2OutTrig01 = 21|0x300U,
    kXBARB3_InputFlexpwm1Pwm3OutTrig01 = 22|0x300U,
    kXBARB3_InputFlexpwm1Pwm4OutTrig01 = 23|0x300U,
    kXBARB3_InputFlexpwm2Pwm1OutTrig01 = 24|0x300U,
    kXBARB3_InputFlexpwm2Pwm2OutTrig01 = 25|0x300U,
    kXBARB3_InputFlexpwm2Pwm3OutTrig01 = 26|0x300U,
    kXBARB3_InputFlexpwm2Pwm4OutTrig01 = 27|0x300U,
    kXBARB3_InputFlexpwm3Pwm1OutTrig01 = 28|0x300U,
    kXBARB3_InputFlexpwm3Pwm2OutTrig01 = 29|0x300U,
    kXBARB3_InputFlexpwm3Pwm3OutTrig01 = 30|0x300U,
    kXBARB3_InputFlexpwm3Pwm4OutTrig01 = 31|0x300U,
    kXBARB3_InputFlexpwm4Pwm1OutTrig01 = 32|0x300U,
    kXBARB3_InputFlexpwm4Pwm2OutTrig01 = 33|0x300U,
    kXBARB3_InputFlexpwm4Pwm3OutTrig01 = 34|0x300U,
    kXBARB3_InputFlexpwm4Pwm4OutTrig01 = 35|0x300U,
    kXBARB3_InputPitTrigger0 = 36|0x300U,
    kXBARB3_InputPitTrigger1 = 37|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco0 = 38|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco1 = 39|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco2 = 40|0x300U,
    kXBARB3_InputAdcEtcXbar0Coco3 = 41|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco0 = 42|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco1 = 43|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco2 = 44|0x300U,
    kXBARB3_InputAdcEtcXbar1Coco3 = 45|0x300U,
    kXBARB3_InputEnc1PosMatch = 46|0x300U,
    kXBARB3_InputEnc2PosMatch = 47|0x300U,
    kXBARB3_InputEnc3PosMatch = 48|0x300U,
    kXBARB3_InputEnc4PosMatch = 49|0x300U,
    kXBARB3_InputDmaDone0 = 50|0x300U,
    kXBARB3_InputDmaDone1 = 51|0x300U,
    kXBARB3_InputDmaDone2 = 52|0x300U,
    kXBARB3_InputDmaDone3 = 53|0x300U,
    kXBARB3_InputDmaDone4 = 54|0x300U,
    kXBARB3_InputDmaDone5 = 55|0x300U,
    kXBARB3_InputDmaDone6 = 56|0x300U,
    kXBARB3_InputDmaDone7 = 57|0x300U,
} xbar_input_signal_t;

typedef enum _xbar_output_signal
{
    kXBARA1_OutputDmaChMuxReq30 = 0|0x100U,
    kXBARA1_OutputDmaChMuxReq31 = 1|0x100U,
    kXBARA1_OutputDmaChMuxReq94 = 2|0x100U,
    kXBARA1_OutputDmaChMuxReq95 = 3|0x100U,
    kXBARA1_OutputIomuxXbarInout04 = 4|0x100U,
    kXBARA1_OutputIomuxXbarInout05 = 5|0x100U,
    kXBARA1_OutputIomuxXbarInout06 = 6|0x100U,
    kXBARA1_OutputIomuxXbarInout07 = 7|0x100U,
    kXBARA1_OutputIomuxXbarInout08 = 8|0x100U,
    kXBARA1_OutputIomuxXbarInout09 = 9|0x100U,
    kXBARA1_OutputIomuxXbarInout10 = 10|0x100U,
    kXBARA1_OutputIomuxXbarInout11 = 11|0x100U,
    kXBARA1_OutputIomuxXbarInout12 = 12|0x100U,
    kXBARA1_OutputIomuxXbarInout13 = 13|0x100U,
    kXBARA1_OutputIomuxXbarInout14 = 14|0x100U,
    kXBARA1_OutputIomuxXbarInout15 = 15|0x100U,
    kXBARA1_OutputIomuxXbarInout16 = 16|0x100U,
    kXBARA1_OutputIomuxXbarInout17 = 17|0x100U,
    kXBARA1_OutputIomuxXbarInout18 = 18|0x100U,
    kXBARA1_OutputIomuxXbarInout19 = 19|0x100U,
    kXBARA1_OutputAcmp1Sample = 20|0x100U,
    kXBARA1_OutputAcmp2Sample = 21|0x100U,
    kXBARA1_OutputAcmp3Sample = 22|0x100U,
    kXBARA1_OutputAcmp4Sample = 23|0x100U,
    kXBARA1_OutputRESERVED24 = 24|0x100U,
    kXBARA1_OutputRESERVED25 = 25|0x100U,
    kXBARA1_OutputFlexpwm1Exta0 = 26|0x100U,
    kXBARA1_OutputFlexpwm1Exta1 = 27|0x100U,
    kXBARA1_OutputFlexpwm1Exta2 = 28|0x100U,
    kXBARA1_OutputFlexpwm1Exta3 = 29|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync0 = 30|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync1 = 31|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync2 = 32|0x100U,
    kXBARA1_OutputFlexpwm1ExtSync3 = 33|0x100U,
    kXBARA1_OutputFlexpwm1ExtClk = 34|0x100U,
    kXBARA1_OutputFlexpwm1Fault0 = 35|0x100U,
    kXBARA1_OutputFlexpwm1Fault1 = 36|0x100U,
    kXBARA1_OutputFlexpwm1234Fault2 = 37|0x100U,
    kXBARA1_OutputFlexpwm1234Fault3 = 38|0x100U,
    kXBARA1_OutputFlexpwm1ExtForce = 39|0x100U,
    kXBARA1_OutputFlexpwm234Exta0 = 40|0x100U,
    kXBARA1_OutputFlexpwm234Exta1 = 41|0x100U,
    kXBARA1_OutputFlexpwm234Exta2 = 42|0x100U,
    kXBARA1_OutputFlexpwm234Exta3 = 43|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync0 = 44|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync1 = 45|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync2 = 46|0x100U,
    kXBARA1_OutputFlexpwm2ExtSync3 = 47|0x100U,
    kXBARA1_OutputFlexpwm234ExtClk = 48|0x100U,
    kXBARA1_OutputFlexpwm2Fault0 = 49|0x100U,
    kXBARA1_OutputFlexpwm2Fault1 = 50|0x100U,
    kXBARA1_OutputFlexpwm2ExtForce = 51|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync0 = 52|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync1 = 53|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync2 = 54|0x100U,
    kXBARA1_OutputFlexpwm3ExtSync3 = 55|0x100U,
    kXBARA1_OutputFlexpwm3Fault0 = 56|0x100U,
    kXBARA1_OutputFlexpwm3Fault1 = 57|0x100U,
    kXBARA1_OutputFlexpwm3ExtForce = 58|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync0 = 59|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync1 = 60|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync2 = 61|0x100U,
    kXBARA1_OutputFlexpwm4ExtSync3 = 62|0x100U,
    kXBARA1_OutputFlexpwm4Fault0 = 63|0x100U,
    kXBARA1_OutputFlexpwm4Fault1 = 64|0x100U,
    kXBARA1_OutputFlexpwm4ExtForce = 65|0x100U,
    kXBARA1_OutputEnc1PhaseAInput = 66|0x100U,
    kXBARA1_OutputEnc1PhaseBInput = 67|0x100U,
    kXBARA1_OutputEnc1Index = 68|0x100U,
    kXBARA1_OutputEnc1Home = 69|0x100U,
    kXBARA1_OutputEnc1Trigger = 70|0x100U,
    kXBARA1_OutputEnc2PhaseAInput = 71|0x100U,
    kXBARA1_OutputEnc2PhaseBInput = 72|0x100U,
    kXBARA1_OutputEnc2Index = 73|0x100U,
    kXBARA1_OutputEnc2Home = 74|0x100U,
    kXBARA1_OutputEnc2Trigger = 75|0x100U,
    kXBARA1_OutputEnc3PhaseAInput = 76|0x100U,
    kXBARA1_OutputEnc3PhaseBInput = 77|0x100U,
    kXBARA1_OutputEnc3Index = 78|0x100U,
    kXBARA1_OutputEnc3Home = 79|0x100U,
    kXBARA1_OutputEnc3Trigger = 80|0x100U,
    kXBARA1_OutputEnc4PhaseAInput = 81|0x100U,
    kXBARA1_OutputEnc4PhaseBInput = 82|0x100U,
    kXBARA1_OutputEnc4Index = 83|0x100U,
    kXBARA1_OutputEnc4Home = 84|0x100U,
    kXBARA1_OutputEnc4Trigger = 85|0x100U,
    kXBARA1_OutputQtimer1Tmr0Input = 86|0x100U,
    kXBARA1_OutputQtimer1Tmr1Input = 87|0x100U,
    kXBARA1_OutputQtimer1Tmr2Input = 88|0x100U,
    kXBARA1_OutputQtimer1Tmr3Input = 89|0x100U,
    kXBARA1_OutputQtimer2Tmr0Input = 90|0x100U,
    kXBARA1_OutputQtimer2Tmr1Input = 91|0x100U,
    kXBARA1_OutputQtimer2Tmr2Input = 92|0x100U,
    kXBARA1_OutputQtimer2Tmr3Input = 93|0x100U,
    kXBARA1_OutputQtimer3Tmr0Input = 94|0x100U,
    kXBARA1_OutputQtimer3Tmr1Input = 95|0x100U,
    kXBARA1_OutputQtimer3Tmr2Input = 96|0x100U,
    kXBARA1_OutputQtimer3Tmr3Input = 97|0x100U,
    kXBARA1_OutputQtimer4Tmr0Input = 98|0x100U,
    kXBARA1_OutputQtimer4Tmr1Input = 99|0x100U,
    kXBARA1_OutputQtimer4Tmr2Input = 100|0x100U,
    kXBARA1_OutputQtimer4Tmr3Input = 101|0x100U,
    kXBARA1_OutputEwmEwmIn = 102|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig0 = 103|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig1 = 104|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig2 = 105|0x100U,
    kXBARA1_OutputAdcEtcXbar0Trig3 = 106|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig0 = 107|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig1 = 108|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig2 = 109|0x100U,
    kXBARA1_OutputAdcEtcXbar1Trig3 = 110|0x100U,
    kXBARA1_OutputLpi2c1TrgInput = 111|0x100U,
    kXBARA1_OutputLpi2c2TrgInput = 112|0x100U,
    kXBARA1_OutputLpi2c3TrgInput = 113|0x100U,
    kXBARA1_OutputLpi2c4TrgInput = 114|0x100U,
    kXBARA1_OutputLpspi1TrgInput = 115|0x100U,
    kXBARA1_OutputLpspi2TrgInput = 116|0x100U,
    kXBARA1_OutputLpspi3TrgInput = 117|0x100U,
    kXBARA1_OutputLpspi4TrgInput = 118|0x100U,
    kXBARA1_OutputLpuart1TrgInput = 119|0x100U,
    kXBARA1_OutputLpuart2TrgInput = 120|0x100U,
    kXBARA1_OutputLpuart3TrgInput = 121|0x100U,
    kXBARA1_OutputLpuart4TrgInput = 122|0x100U,
    kXBARA1_OutputLpuart5TrgInput = 123|0x100U,
    kXBARA1_OutputLpuart6TrgInput = 124|0x100U,
    kXBARA1_OutputLpuart7TrgInput = 125|0x100U,
    kXBARA1_OutputLpuart8TrgInput = 126|0x100U,
    kXBARA1_OutputFlexio1TriggerIn0 = 127|0x100U,
    kXBARA1_OutputFlexio1TriggerIn1 = 128|0x100U,
    kXBARA1_OutputFlexio2TriggerIn0 = 129|0x100U,
    kXBARA1_OutputFlexio2TriggerIn1 = 130|0x100U,
    kXBARB2_OutputAoi1In00 = 0|0x200U,
    kXBARB2_OutputAoi1In01 = 1|0x200U,
    kXBARB2_OutputAoi1In02 = 2|0x200U,
    kXBARB2_OutputAoi1In03 = 3|0x200U,
    kXBARB2_OutputAoi1In04 = 4|0x200U,
    kXBARB2_OutputAoi1In05 = 5|0x200U,
    kXBARB2_OutputAoi1In06 = 6|0x200U,
    kXBARB2_OutputAoi1In07 = 7|0x200U,
    kXBARB2_OutputAoi1In08 = 8|0x200U,
    kXBARB2_OutputAoi1In09 = 9|0x200U,
    kXBARB2_OutputAoi1In10 = 10|0x200U,
    kXBARB2_OutputAoi1In11 = 11|0x200U,
    kXBARB2_OutputAoi1In12 = 12|0x200U,
    kXBARB2_OutputAoi1In13 = 13|0x200U,
    kXBARB2_OutputAoi1In14 = 14|0x200U,
    kXBARB2_OutputAoi1In15 = 15|0x200U,
    kXBARB3_OutputAoi2In00 = 0|0x300U,
    kXBARB3_OutputAoi2In01 = 1|0x300U,
    kXBARB3_OutputAoi2In02 = 2|0x300U,
    kXBARB3_OutputAoi2In03 = 3|0x300U,
    kXBARB3_OutputAoi2In04 = 4|0x300U,
    kXBARB3_OutputAoi2In05 = 5|0x300U,
    kXBARB3_OutputAoi2In06 = 6|0x300U,
    kXBARB3_OutputAoi2In07 = 7|0x300U,
    kXBARB3_OutputAoi2In08 = 8|0x300U,
    kXBARB3_OutputAoi2In09 = 9|0x300U,
    kXBARB3_OutputAoi2In10 = 10|0x300U,
    kXBARB3_OutputAoi2In11 = 11|0x300U,
    kXBARB3_OutputAoi2In12 = 12|0x300U,
    kXBARB3_OutputAoi2In13 = 13|0x300U,
    kXBARB3_OutputAoi2In14 = 14|0x300U,
    kXBARB3_OutputAoi2In15 = 15|0x300U,
} xbar_output_signal_t;
# 1313 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t HC[8];
  volatile const uint32_t HS;
  volatile const uint32_t R[8];
  volatile uint32_t CFG;
  volatile uint32_t GC;
  volatile uint32_t GS;
  volatile uint32_t CV;
  volatile uint32_t OFS;
  volatile uint32_t CAL;
} ADC_Type;
# 1488 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t DONE0_1_IRQ;
  volatile uint32_t DONE2_ERR_IRQ;
  volatile uint32_t DMA_CTRL;
  struct {
    volatile uint32_t TRIGn_CTRL;
    volatile uint32_t TRIGn_COUNTER;
    volatile uint32_t TRIGn_CHAIN_1_0;
    volatile uint32_t TRIGn_CHAIN_3_2;
    volatile uint32_t TRIGn_CHAIN_5_4;
    volatile uint32_t TRIGn_CHAIN_7_6;
    volatile const uint32_t TRIGn_RESULT_1_0;
    volatile const uint32_t TRIGn_RESULT_3_2;
    volatile const uint32_t TRIGn_RESULT_5_4;
    volatile const uint32_t TRIGn_RESULT_7_6;
  } TRIG[8];
} ADC_ETC_Type;
# 1920 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MPR;
       uint8_t RESERVED_0[60];
  volatile uint32_t OPACR;
  volatile uint32_t OPACR1;
  volatile uint32_t OPACR2;
  volatile uint32_t OPACR3;
  volatile uint32_t OPACR4;
} AIPSTZ_Type;
# 2111 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile uint16_t BFCRT01;
    volatile uint16_t BFCRT23;
  } BFCRT[4];
} AOI_Type;
# 2220 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t ADDR_OFFSET0;
  volatile uint32_t ADDR_OFFSET1;
  volatile uint32_t AES_KEY0_W0;
  volatile uint32_t AES_KEY0_W1;
  volatile uint32_t AES_KEY0_W2;
  volatile uint32_t AES_KEY0_W3;
  volatile uint32_t STATUS;
  volatile uint32_t CTR_NONCE0_W0;
  volatile uint32_t CTR_NONCE0_W1;
  volatile uint32_t CTR_NONCE0_W2;
  volatile uint32_t CTR_NONCE0_W3;
  volatile uint32_t CTR_NONCE1_W0;
  volatile uint32_t CTR_NONCE1_W1;
  volatile uint32_t CTR_NONCE1_W2;
  volatile uint32_t CTR_NONCE1_W3;
  volatile uint32_t REGION1_TOP;
  volatile uint32_t REGION1_BOT;
} BEE_Type;
# 2452 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
  volatile uint32_t CTRL1;
  volatile uint32_t TIMER;
       uint8_t RESERVED_0[4];
  volatile uint32_t RXMGMASK;
  volatile uint32_t RX14MASK;
  volatile uint32_t RX15MASK;
  volatile uint32_t ECR;
  volatile uint32_t ESR1;
  volatile uint32_t IMASK2;
  volatile uint32_t IMASK1;
  volatile uint32_t IFLAG2;
  volatile uint32_t IFLAG1;
  volatile uint32_t CTRL2;
  volatile const uint32_t ESR2;
       uint8_t RESERVED_1[8];
  volatile const uint32_t CRCR;
  volatile uint32_t RXFGMASK;
  volatile const uint32_t RXFIR;
       uint8_t RESERVED_2[48];
  struct {
    volatile uint32_t CS;
    volatile uint32_t ID;
    volatile uint32_t WORD0;
    volatile uint32_t WORD1;
  } MB[64];
       uint8_t RESERVED_3[1024];
  volatile uint32_t RXIMR[64];
       uint8_t RESERVED_4[96];
  volatile uint32_t GFWR;
} CAN_Type;
# 2899 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CCR;
       uint8_t RESERVED_0[4];
  volatile const uint32_t CSR;
  volatile uint32_t CCSR;
  volatile uint32_t CACRR;
  volatile uint32_t CBCDR;
  volatile uint32_t CBCMR;
  volatile uint32_t CSCMR1;
  volatile uint32_t CSCMR2;
  volatile uint32_t CSCDR1;
  volatile uint32_t CS1CDR;
  volatile uint32_t CS2CDR;
  volatile uint32_t CDCDR;
       uint8_t RESERVED_1[4];
  volatile uint32_t CSCDR2;
  volatile uint32_t CSCDR3;
       uint8_t RESERVED_2[8];
  volatile const uint32_t CDHIPR;
       uint8_t RESERVED_3[8];
  volatile uint32_t CLPCR;
  volatile uint32_t CISR;
  volatile uint32_t CIMR;
  volatile uint32_t CCOSR;
  volatile uint32_t CGPR;
  volatile uint32_t CCGR0;
  volatile uint32_t CCGR1;
  volatile uint32_t CCGR2;
  volatile uint32_t CCGR3;
  volatile uint32_t CCGR4;
  volatile uint32_t CCGR5;
  volatile uint32_t CCGR6;
       uint8_t RESERVED_4[4];
  volatile uint32_t CMEOR;
} CCM_Type;
# 3696 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t PLL_ARM;
  volatile uint32_t PLL_ARM_SET;
  volatile uint32_t PLL_ARM_CLR;
  volatile uint32_t PLL_ARM_TOG;
  volatile uint32_t PLL_USB1;
  volatile uint32_t PLL_USB1_SET;
  volatile uint32_t PLL_USB1_CLR;
  volatile uint32_t PLL_USB1_TOG;
  volatile uint32_t PLL_USB2;
  volatile uint32_t PLL_USB2_SET;
  volatile uint32_t PLL_USB2_CLR;
  volatile uint32_t PLL_USB2_TOG;
  volatile uint32_t PLL_SYS;
  volatile uint32_t PLL_SYS_SET;
  volatile uint32_t PLL_SYS_CLR;
  volatile uint32_t PLL_SYS_TOG;
  volatile uint32_t PLL_SYS_SS;
       uint8_t RESERVED_0[12];
  volatile uint32_t PLL_SYS_NUM;
       uint8_t RESERVED_1[12];
  volatile uint32_t PLL_SYS_DENOM;
       uint8_t RESERVED_2[12];
  volatile uint32_t PLL_AUDIO;
  volatile uint32_t PLL_AUDIO_SET;
  volatile uint32_t PLL_AUDIO_CLR;
  volatile uint32_t PLL_AUDIO_TOG;
  volatile uint32_t PLL_AUDIO_NUM;
       uint8_t RESERVED_3[12];
  volatile uint32_t PLL_AUDIO_DENOM;
       uint8_t RESERVED_4[12];
  volatile uint32_t PLL_VIDEO;
  volatile uint32_t PLL_VIDEO_SET;
  volatile uint32_t PLL_VIDEO_CLR;
  volatile uint32_t PLL_VIDEO_TOG;
  volatile uint32_t PLL_VIDEO_NUM;
       uint8_t RESERVED_5[12];
  volatile uint32_t PLL_VIDEO_DENOM;
       uint8_t RESERVED_6[28];
  volatile uint32_t PLL_ENET;
  volatile uint32_t PLL_ENET_SET;
  volatile uint32_t PLL_ENET_CLR;
  volatile uint32_t PLL_ENET_TOG;
  volatile uint32_t PFD_480;
  volatile uint32_t PFD_480_SET;
  volatile uint32_t PFD_480_CLR;
  volatile uint32_t PFD_480_TOG;
  volatile uint32_t PFD_528;
  volatile uint32_t PFD_528_SET;
  volatile uint32_t PFD_528_CLR;
  volatile uint32_t PFD_528_TOG;
       uint8_t RESERVED_7[64];
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
  volatile uint32_t MISC1;
  volatile uint32_t MISC1_SET;
  volatile uint32_t MISC1_CLR;
  volatile uint32_t MISC1_TOG;
  volatile uint32_t MISC2;
  volatile uint32_t MISC2_SET;
  volatile uint32_t MISC2_CLR;
  volatile uint32_t MISC2_TOG;
} CCM_ANALOG_Type;
# 5391 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint8_t CR0;
  volatile uint8_t CR1;
  volatile uint8_t FPR;
  volatile uint8_t SCR;
  volatile uint8_t DACCR;
  volatile uint8_t MUXCR;
} CMP_Type;
# 5529 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CSICR1;
  volatile uint32_t CSICR2;
  volatile uint32_t CSICR3;
  volatile const uint32_t CSISTATFIFO;
  volatile const uint32_t CSIRFIFO;
  volatile uint32_t CSIRXCNT;
  volatile uint32_t CSISR;
       uint8_t RESERVED_0[4];
  volatile uint32_t CSIDMASA_STATFIFO;
  volatile uint32_t CSIDMATS_STATFIFO;
  volatile uint32_t CSIDMASA_FB1;
  volatile uint32_t CSIDMASA_FB2;
  volatile uint32_t CSIFBUF_PARA;
  volatile uint32_t CSIIMAG_PARA;
       uint8_t RESERVED_1[16];
  volatile uint32_t CSICR18;
  volatile uint32_t CSICR19;
} CSI_Type;
# 5891 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CSL[32];
       uint8_t RESERVED_0[384];
  volatile uint32_t HP0;
       uint8_t RESERVED_1[20];
  volatile uint32_t SA;
       uint8_t RESERVED_2[316];
  volatile uint32_t HPCONTROL0;
} CSU_Type;
# 6186 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t REG0;
  volatile uint32_t REG1;
  volatile uint32_t REG2;
  volatile uint32_t REG3;
} DCDC_Type;
# 6363 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
       uint8_t RESERVED_0[12];
  volatile uint32_t STAT;
       uint8_t RESERVED_1[12];
  volatile uint32_t CHANNELCTRL;
       uint8_t RESERVED_2[12];
  volatile uint32_t CAPABILITY0;
       uint8_t RESERVED_3[12];
  volatile const uint32_t CAPABILITY1;
       uint8_t RESERVED_4[12];
  volatile uint32_t CONTEXT;
       uint8_t RESERVED_5[12];
  volatile uint32_t KEY;
       uint8_t RESERVED_6[12];
  volatile uint32_t KEYDATA;
       uint8_t RESERVED_7[12];
  volatile const uint32_t PACKET0;
       uint8_t RESERVED_8[12];
  volatile const uint32_t PACKET1;
       uint8_t RESERVED_9[12];
  volatile const uint32_t PACKET2;
       uint8_t RESERVED_10[12];
  volatile const uint32_t PACKET3;
       uint8_t RESERVED_11[12];
  volatile const uint32_t PACKET4;
       uint8_t RESERVED_12[12];
  volatile const uint32_t PACKET5;
       uint8_t RESERVED_13[12];
  volatile const uint32_t PACKET6;
       uint8_t RESERVED_14[28];
  volatile uint32_t CH0CMDPTR;
       uint8_t RESERVED_15[12];
  volatile uint32_t CH0SEMA;
       uint8_t RESERVED_16[12];
  volatile uint32_t CH0STAT;
       uint8_t RESERVED_17[12];
  volatile uint32_t CH0OPTS;
       uint8_t RESERVED_18[12];
  volatile uint32_t CH1CMDPTR;
       uint8_t RESERVED_19[12];
  volatile uint32_t CH1SEMA;
       uint8_t RESERVED_20[12];
  volatile uint32_t CH1STAT;
       uint8_t RESERVED_21[12];
  volatile uint32_t CH1OPTS;
       uint8_t RESERVED_22[12];
  volatile uint32_t CH2CMDPTR;
       uint8_t RESERVED_23[12];
  volatile uint32_t CH2SEMA;
       uint8_t RESERVED_24[12];
  volatile uint32_t CH2STAT;
       uint8_t RESERVED_25[12];
  volatile uint32_t CH2OPTS;
       uint8_t RESERVED_26[12];
  volatile uint32_t CH3CMDPTR;
       uint8_t RESERVED_27[12];
  volatile uint32_t CH3SEMA;
       uint8_t RESERVED_28[12];
  volatile uint32_t CH3STAT;
       uint8_t RESERVED_29[12];
  volatile uint32_t CH3OPTS;
       uint8_t RESERVED_30[524];
  volatile uint32_t DBGSELECT;
       uint8_t RESERVED_31[12];
  volatile const uint32_t DBGDATA;
       uint8_t RESERVED_32[12];
  volatile uint32_t PAGETABLE;
       uint8_t RESERVED_33[12];
  volatile const uint32_t VERSION;
} DCP_Type;
# 6947 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CR;
  volatile const uint32_t ES;
       uint8_t RESERVED_0[4];
  volatile uint32_t ERQ;
       uint8_t RESERVED_1[4];
  volatile uint32_t EEI;
  volatile uint8_t CEEI;
  volatile uint8_t SEEI;
  volatile uint8_t CERQ;
  volatile uint8_t SERQ;
  volatile uint8_t CDNE;
  volatile uint8_t SSRT;
  volatile uint8_t CERR;
  volatile uint8_t CINT;
       uint8_t RESERVED_2[4];
  volatile uint32_t INT;
       uint8_t RESERVED_3[4];
  volatile uint32_t ERR;
       uint8_t RESERVED_4[4];
  volatile const uint32_t HRS;
       uint8_t RESERVED_5[12];
  volatile uint32_t EARS;
       uint8_t RESERVED_6[184];
  volatile uint8_t DCHPRI3;
  volatile uint8_t DCHPRI2;
  volatile uint8_t DCHPRI1;
  volatile uint8_t DCHPRI0;
  volatile uint8_t DCHPRI7;
  volatile uint8_t DCHPRI6;
  volatile uint8_t DCHPRI5;
  volatile uint8_t DCHPRI4;
  volatile uint8_t DCHPRI11;
  volatile uint8_t DCHPRI10;
  volatile uint8_t DCHPRI9;
  volatile uint8_t DCHPRI8;
  volatile uint8_t DCHPRI15;
  volatile uint8_t DCHPRI14;
  volatile uint8_t DCHPRI13;
  volatile uint8_t DCHPRI12;
  volatile uint8_t DCHPRI19;
  volatile uint8_t DCHPRI18;
  volatile uint8_t DCHPRI17;
  volatile uint8_t DCHPRI16;
  volatile uint8_t DCHPRI23;
  volatile uint8_t DCHPRI22;
  volatile uint8_t DCHPRI21;
  volatile uint8_t DCHPRI20;
  volatile uint8_t DCHPRI27;
  volatile uint8_t DCHPRI26;
  volatile uint8_t DCHPRI25;
  volatile uint8_t DCHPRI24;
  volatile uint8_t DCHPRI31;
  volatile uint8_t DCHPRI30;
  volatile uint8_t DCHPRI29;
  volatile uint8_t DCHPRI28;
       uint8_t RESERVED_7[3808];
  struct {
    volatile uint32_t SADDR;
    volatile uint16_t SOFF;
    volatile uint16_t ATTR;
    union {
      volatile uint32_t NBYTES_MLNO;
      volatile uint32_t NBYTES_MLOFFNO;
      volatile uint32_t NBYTES_MLOFFYES;
    };
    volatile uint32_t SLAST;
    volatile uint32_t DADDR;
    volatile uint16_t DOFF;
    union {
      volatile uint16_t CITER_ELINKNO;
      volatile uint16_t CITER_ELINKYES;
    };
    volatile uint32_t DLAST_SGA;
    volatile uint16_t CSR;
    union {
      volatile uint16_t BITER_ELINKNO;
      volatile uint16_t BITER_ELINKYES;
    };
  } TCD[32];
} DMA_Type;
# 8464 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CHCFG[32];
} DMAMUX_Type;
# 8525 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t CTRL;
  volatile uint16_t FILT;
  volatile uint16_t WTR;
  volatile uint16_t POSD;
  volatile const uint16_t POSDH;
  volatile uint16_t REV;
  volatile const uint16_t REVH;
  volatile uint16_t UPOS;
  volatile uint16_t LPOS;
  volatile const uint16_t UPOSH;
  volatile const uint16_t LPOSH;
  volatile uint16_t UINIT;
  volatile uint16_t LINIT;
  volatile const uint16_t IMR;
  volatile uint16_t TST;
  volatile uint16_t CTRL2;
  volatile uint16_t UMOD;
  volatile uint16_t LMOD;
  volatile uint16_t UCOMP;
  volatile uint16_t LCOMP;
} ENC_Type;
# 8820 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[4];
  volatile uint32_t EIR;
  volatile uint32_t EIMR;
       uint8_t RESERVED_1[4];
  volatile uint32_t RDAR;
  volatile uint32_t TDAR;
       uint8_t RESERVED_2[12];
  volatile uint32_t ECR;
       uint8_t RESERVED_3[24];
  volatile uint32_t MMFR;
  volatile uint32_t MSCR;
       uint8_t RESERVED_4[28];
  volatile uint32_t MIBC;
       uint8_t RESERVED_5[28];
  volatile uint32_t RCR;
       uint8_t RESERVED_6[60];
  volatile uint32_t TCR;
       uint8_t RESERVED_7[28];
  volatile uint32_t PALR;
  volatile uint32_t PAUR;
  volatile uint32_t OPD;
  volatile uint32_t TXIC;
       uint8_t RESERVED_8[12];
  volatile uint32_t RXIC;
       uint8_t RESERVED_9[20];
  volatile uint32_t IAUR;
  volatile uint32_t IALR;
  volatile uint32_t GAUR;
  volatile uint32_t GALR;
       uint8_t RESERVED_10[28];
  volatile uint32_t TFWR;
       uint8_t RESERVED_11[56];
  volatile uint32_t RDSR;
  volatile uint32_t TDSR;
  volatile uint32_t MRBR;
       uint8_t RESERVED_12[4];
  volatile uint32_t RSFL;
  volatile uint32_t RSEM;
  volatile uint32_t RAEM;
  volatile uint32_t RAFL;
  volatile uint32_t TSEM;
  volatile uint32_t TAEM;
  volatile uint32_t TAFL;
  volatile uint32_t TIPG;
  volatile uint32_t FTRL;
       uint8_t RESERVED_13[12];
  volatile uint32_t TACC;
  volatile uint32_t RACC;
       uint8_t RESERVED_14[56];
       uint32_t RMON_T_DROP;
  volatile const uint32_t RMON_T_PACKETS;
  volatile const uint32_t RMON_T_BC_PKT;
  volatile const uint32_t RMON_T_MC_PKT;
  volatile const uint32_t RMON_T_CRC_ALIGN;
  volatile const uint32_t RMON_T_UNDERSIZE;
  volatile const uint32_t RMON_T_OVERSIZE;
  volatile const uint32_t RMON_T_FRAG;
  volatile const uint32_t RMON_T_JAB;
  volatile const uint32_t RMON_T_COL;
  volatile const uint32_t RMON_T_P64;
  volatile const uint32_t RMON_T_P65TO127;
  volatile const uint32_t RMON_T_P128TO255;
  volatile const uint32_t RMON_T_P256TO511;
  volatile const uint32_t RMON_T_P512TO1023;
  volatile const uint32_t RMON_T_P1024TO2047;
  volatile const uint32_t RMON_T_P_GTE2048;
  volatile const uint32_t RMON_T_OCTETS;
       uint32_t IEEE_T_DROP;
  volatile const uint32_t IEEE_T_FRAME_OK;
  volatile const uint32_t IEEE_T_1COL;
  volatile const uint32_t IEEE_T_MCOL;
  volatile const uint32_t IEEE_T_DEF;
  volatile const uint32_t IEEE_T_LCOL;
  volatile const uint32_t IEEE_T_EXCOL;
  volatile const uint32_t IEEE_T_MACERR;
  volatile const uint32_t IEEE_T_CSERR;
  volatile const uint32_t IEEE_T_SQE;
  volatile const uint32_t IEEE_T_FDXFC;
  volatile const uint32_t IEEE_T_OCTETS_OK;
       uint8_t RESERVED_15[12];
  volatile const uint32_t RMON_R_PACKETS;
  volatile const uint32_t RMON_R_BC_PKT;
  volatile const uint32_t RMON_R_MC_PKT;
  volatile const uint32_t RMON_R_CRC_ALIGN;
  volatile const uint32_t RMON_R_UNDERSIZE;
  volatile const uint32_t RMON_R_OVERSIZE;
  volatile const uint32_t RMON_R_FRAG;
  volatile const uint32_t RMON_R_JAB;
       uint32_t RMON_R_RESVD_0;
  volatile const uint32_t RMON_R_P64;
  volatile const uint32_t RMON_R_P65TO127;
  volatile const uint32_t RMON_R_P128TO255;
  volatile const uint32_t RMON_R_P256TO511;
  volatile const uint32_t RMON_R_P512TO1023;
  volatile const uint32_t RMON_R_P1024TO2047;
  volatile const uint32_t RMON_R_P_GTE2048;
  volatile const uint32_t RMON_R_OCTETS;
  volatile const uint32_t IEEE_R_DROP;
  volatile const uint32_t IEEE_R_FRAME_OK;
  volatile const uint32_t IEEE_R_CRC;
  volatile const uint32_t IEEE_R_ALIGN;
  volatile const uint32_t IEEE_R_MACERR;
  volatile const uint32_t IEEE_R_FDXFC;
  volatile const uint32_t IEEE_R_OCTETS_OK;
       uint8_t RESERVED_16[284];
  volatile uint32_t ATCR;
  volatile uint32_t ATVR;
  volatile uint32_t ATOFF;
  volatile uint32_t ATPER;
  volatile uint32_t ATCOR;
  volatile uint32_t ATINC;
  volatile const uint32_t ATSTMP;
       uint8_t RESERVED_17[488];
  volatile uint32_t TGSR;
  struct {
    volatile uint32_t TCSR;
    volatile uint32_t TCCR;
  } CHANNEL[4];
} ENET_Type;
# 9758 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint8_t CTRL;
  volatile uint8_t SERV;
  volatile uint8_t CMPL;
  volatile uint8_t CMPH;
  volatile uint8_t CLKCTRL;
  volatile uint8_t CLKPRESCALER;
} EWM_Type;
# 9848 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t CTRL;
  volatile const uint32_t PIN;
  volatile uint32_t SHIFTSTAT;
  volatile uint32_t SHIFTERR;
  volatile uint32_t TIMSTAT;
       uint8_t RESERVED_0[4];
  volatile uint32_t SHIFTSIEN;
  volatile uint32_t SHIFTEIEN;
  volatile uint32_t TIMIEN;
       uint8_t RESERVED_1[4];
  volatile uint32_t SHIFTSDEN;
       uint8_t RESERVED_2[12];
  volatile uint32_t SHIFTSTATE;
       uint8_t RESERVED_3[60];
  volatile uint32_t SHIFTCTL[4];
       uint8_t RESERVED_4[112];
  volatile uint32_t SHIFTCFG[4];
       uint8_t RESERVED_5[240];
  volatile uint32_t SHIFTBUF[4];
       uint8_t RESERVED_6[112];
  volatile uint32_t SHIFTBUFBIS[4];
       uint8_t RESERVED_7[112];
  volatile uint32_t SHIFTBUFBYS[4];
       uint8_t RESERVED_8[112];
  volatile uint32_t SHIFTBUFBBS[4];
       uint8_t RESERVED_9[112];
  volatile uint32_t TIMCTL[4];
       uint8_t RESERVED_10[112];
  volatile uint32_t TIMCFG[4];
       uint8_t RESERVED_11[112];
  volatile uint32_t TIMCMP[4];
       uint8_t RESERVED_12[368];
  volatile uint32_t SHIFTBUFNBS[4];
       uint8_t RESERVED_13[112];
  volatile uint32_t SHIFTBUFHWS[4];
       uint8_t RESERVED_14[112];
  volatile uint32_t SHIFTBUFNIS[4];
} FLEXIO_Type;
# 10179 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t TCM_CTRL;
  volatile uint32_t OCRAM_MAGIC_ADDR;
  volatile uint32_t DTCM_MAGIC_ADDR;
  volatile uint32_t ITCM_MAGIC_ADDR;
  volatile uint32_t INT_STATUS;
  volatile uint32_t INT_STAT_EN;
  volatile uint32_t INT_SIG_EN;
} FLEXRAM_Type;
# 10347 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR0;
  volatile uint32_t MCR1;
  volatile uint32_t MCR2;
  volatile uint32_t AHBCR;
  volatile uint32_t INTEN;
  volatile uint32_t INTR;
  volatile uint32_t LUTKEY;
  volatile uint32_t LUTCR;
  volatile uint32_t AHBRXBUFCR0[4];
       uint8_t RESERVED_0[48];
  volatile uint32_t FLSHCR0[4];
  volatile uint32_t FLSHCR1[4];
  volatile uint32_t FLSHCR2[4];
       uint8_t RESERVED_1[4];
  volatile uint32_t FLSHCR4;
       uint8_t RESERVED_2[8];
  volatile uint32_t IPCR0;
  volatile uint32_t IPCR1;
       uint8_t RESERVED_3[8];
  volatile uint32_t IPCMD;
       uint8_t RESERVED_4[4];
  volatile uint32_t IPRXFCR;
  volatile uint32_t IPTXFCR;
  volatile uint32_t DLLCR[2];
       uint8_t RESERVED_5[24];
  volatile const uint32_t STS0;
  volatile const uint32_t STS1;
  volatile const uint32_t STS2;
  volatile const uint32_t AHBSPNDSTS;
  volatile const uint32_t IPRXFSTS;
  volatile const uint32_t IPTXFSTS;
       uint8_t RESERVED_6[8];
  volatile const uint32_t RFDR[32];
  volatile uint32_t TFDR[32];
  volatile uint32_t LUT[64];
} FLEXSPI_Type;
# 10861 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CNTR;
       uint8_t RESERVED_0[4];
  volatile uint32_t IMR[4];
  volatile const uint32_t ISR[4];
       uint8_t RESERVED_1[12];
  volatile uint32_t IMR5;
  volatile const uint32_t ISR5;
} GPC_Type;
# 10968 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t DR;
  volatile uint32_t GDIR;
  volatile const uint32_t PSR;
  volatile uint32_t ICR1;
  volatile uint32_t ICR2;
  volatile uint32_t IMR;
  volatile uint32_t ISR;
  volatile uint32_t EDGE_SEL;
} GPIO_Type;
# 11168 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CR;
  volatile uint32_t PR;
  volatile uint32_t SR;
  volatile uint32_t IR;
  volatile uint32_t OCR[3];
  volatile const uint32_t ICR[2];
  volatile const uint32_t CNT;
} GPT_Type;
# 11349 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t TCSR;
  volatile uint32_t TCR1;
  volatile uint32_t TCR2;
  volatile uint32_t TCR3;
  volatile uint32_t TCR4;
  volatile uint32_t TCR5;
  volatile uint32_t TDR[4];
       uint8_t RESERVED_0[16];
  volatile const uint32_t TFR[4];
       uint8_t RESERVED_1[16];
  volatile uint32_t TMR;
       uint8_t RESERVED_2[36];
  volatile uint32_t RCSR;
  volatile uint32_t RCR1;
  volatile uint32_t RCR2;
  volatile uint32_t RCR3;
  volatile uint32_t RCR4;
  volatile uint32_t RCR5;
  volatile const uint32_t RDR[4];
       uint8_t RESERVED_3[16];
  volatile const uint32_t RFR[4];
       uint8_t RESERVED_4[16];
  volatile uint32_t RMR;
} I2S_Type;
# 11783 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[20];
  volatile uint32_t SW_MUX_CTL_PAD[124];
  volatile uint32_t SW_PAD_CTL_PAD[124];
  volatile uint32_t SELECT_INPUT[154];
} IOMUXC_Type;
# 11878 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint32_t GPR0;
  volatile uint32_t GPR1;
  volatile uint32_t GPR2;
  volatile uint32_t GPR3;
  volatile uint32_t GPR4;
  volatile uint32_t GPR5;
  volatile uint32_t GPR6;
  volatile uint32_t GPR7;
  volatile uint32_t GPR8;
       uint32_t GPR9;
  volatile uint32_t GPR10;
  volatile uint32_t GPR11;
  volatile uint32_t GPR12;
  volatile uint32_t GPR13;
  volatile uint32_t GPR14;
       uint32_t GPR15;
  volatile uint32_t GPR16;
  volatile uint32_t GPR17;
  volatile uint32_t GPR18;
  volatile uint32_t GPR19;
  volatile uint32_t GPR20;
  volatile uint32_t GPR21;
  volatile uint32_t GPR22;
  volatile uint32_t GPR23;
  volatile uint32_t GPR24;
  volatile uint32_t GPR25;
} IOMUXC_GPR_Type;
# 12632 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SW_MUX_CTL_PAD_WAKEUP;
  volatile uint32_t SW_MUX_CTL_PAD_PMIC_ON_REQ;
  volatile uint32_t SW_MUX_CTL_PAD_PMIC_STBY_REQ;
  volatile uint32_t SW_PAD_CTL_PAD_TEST_MODE;
  volatile uint32_t SW_PAD_CTL_PAD_POR_B;
  volatile uint32_t SW_PAD_CTL_PAD_ONOFF;
  volatile uint32_t SW_PAD_CTL_PAD_WAKEUP;
  volatile uint32_t SW_PAD_CTL_PAD_PMIC_ON_REQ;
  volatile uint32_t SW_PAD_CTL_PAD_PMIC_STBY_REQ;
} IOMUXC_SNVS_Type;
# 12864 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint32_t GPR0;
       uint32_t GPR1;
       uint32_t GPR2;
  volatile uint32_t GPR3;
} IOMUXC_SNVS_GPR_Type;
# 12934 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t KPCR;
  volatile uint16_t KPSR;
  volatile uint16_t KDDR;
  volatile uint16_t KPDR;
} KPP_Type;
# 13027 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t CTRL1;
  volatile uint32_t CTRL1_SET;
  volatile uint32_t CTRL1_CLR;
  volatile uint32_t CTRL1_TOG;
  volatile uint32_t CTRL2;
  volatile uint32_t CTRL2_SET;
  volatile uint32_t CTRL2_CLR;
  volatile uint32_t CTRL2_TOG;
  volatile uint32_t TRANSFER_COUNT;
       uint8_t RESERVED_0[12];
  volatile uint32_t CUR_BUF;
       uint8_t RESERVED_1[12];
  volatile uint32_t NEXT_BUF;
       uint8_t RESERVED_2[28];
  volatile uint32_t VDCTRL0;
  volatile uint32_t VDCTRL0_SET;
  volatile uint32_t VDCTRL0_CLR;
  volatile uint32_t VDCTRL0_TOG;
  volatile uint32_t VDCTRL1;
       uint8_t RESERVED_3[12];
  volatile uint32_t VDCTRL2;
       uint8_t RESERVED_4[12];
  volatile uint32_t VDCTRL3;
       uint8_t RESERVED_5[12];
  volatile uint32_t VDCTRL4;
       uint8_t RESERVED_6[220];
  volatile uint32_t BM_ERROR_STAT;
       uint8_t RESERVED_7[12];
  volatile uint32_t CRC_STAT;
       uint8_t RESERVED_8[12];
  volatile const uint32_t STAT;
       uint8_t RESERVED_9[76];
  volatile uint32_t THRES;
       uint8_t RESERVED_10[380];
  volatile uint32_t PIGEONCTRL0;
  volatile uint32_t PIGEONCTRL0_SET;
  volatile uint32_t PIGEONCTRL0_CLR;
  volatile uint32_t PIGEONCTRL0_TOG;
  volatile uint32_t PIGEONCTRL1;
  volatile uint32_t PIGEONCTRL1_SET;
  volatile uint32_t PIGEONCTRL1_CLR;
  volatile uint32_t PIGEONCTRL1_TOG;
  volatile uint32_t PIGEONCTRL2;
  volatile uint32_t PIGEONCTRL2_SET;
  volatile uint32_t PIGEONCTRL2_CLR;
  volatile uint32_t PIGEONCTRL2_TOG;
       uint8_t RESERVED_11[1104];
  struct {
    volatile uint32_t PIGEON_0;
         uint8_t RESERVED_0[12];
    volatile uint32_t PIGEON_1;
         uint8_t RESERVED_1[12];
    volatile uint32_t PIGEON_2;
         uint8_t RESERVED_2[28];
  } PIGEON[12];
  volatile uint32_t LUT_CTRL;
       uint8_t RESERVED_12[12];
  volatile uint32_t LUT0_ADDR;
       uint8_t RESERVED_13[12];
  volatile uint32_t LUT0_DATA;
       uint8_t RESERVED_14[12];
  volatile uint32_t LUT1_ADDR;
       uint8_t RESERVED_15[12];
  volatile uint32_t LUT1_DATA;
} LCDIF_Type;
# 14128 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
       uint8_t RESERVED_0[8];
  volatile uint32_t MCR;
  volatile uint32_t MSR;
  volatile uint32_t MIER;
  volatile uint32_t MDER;
  volatile uint32_t MCFGR0;
  volatile uint32_t MCFGR1;
  volatile uint32_t MCFGR2;
  volatile uint32_t MCFGR3;
       uint8_t RESERVED_1[16];
  volatile uint32_t MDMR;
       uint8_t RESERVED_2[4];
  volatile uint32_t MCCR0;
       uint8_t RESERVED_3[4];
  volatile uint32_t MCCR1;
       uint8_t RESERVED_4[4];
  volatile uint32_t MFCR;
  volatile const uint32_t MFSR;
  volatile uint32_t MTDR;
       uint8_t RESERVED_5[12];
  volatile const uint32_t MRDR;
       uint8_t RESERVED_6[156];
  volatile uint32_t SCR;
  volatile uint32_t SSR;
  volatile uint32_t SIER;
  volatile uint32_t SDER;
       uint8_t RESERVED_7[4];
  volatile uint32_t SCFGR1;
  volatile uint32_t SCFGR2;
       uint8_t RESERVED_8[20];
  volatile uint32_t SAMR;
       uint8_t RESERVED_9[12];
  volatile const uint32_t SASR;
  volatile uint32_t STAR;
       uint8_t RESERVED_10[8];
  volatile uint32_t STDR;
       uint8_t RESERVED_11[12];
  volatile const uint32_t SRDR;
} LPI2C_Type;
# 14656 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
       uint8_t RESERVED_0[8];
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t IER;
  volatile uint32_t DER;
  volatile uint32_t CFGR0;
  volatile uint32_t CFGR1;
       uint8_t RESERVED_1[8];
  volatile uint32_t DMR0;
  volatile uint32_t DMR1;
       uint8_t RESERVED_2[8];
  volatile uint32_t CCR;
       uint8_t RESERVED_3[20];
  volatile uint32_t FCR;
  volatile const uint32_t FSR;
  volatile uint32_t TCR;
  volatile uint32_t TDR;
       uint8_t RESERVED_4[8];
  volatile const uint32_t RSR;
  volatile const uint32_t RDR;
} LPSPI_Type;
# 14982 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t VERID;
  volatile const uint32_t PARAM;
  volatile uint32_t GLOBAL;
  volatile uint32_t PINCFG;
  volatile uint32_t BAUD;
  volatile uint32_t STAT;
  volatile uint32_t CTRL;
  volatile uint32_t DATA;
  volatile uint32_t MATCH;
  volatile uint32_t MODIR;
  volatile uint32_t FIFO;
  volatile uint32_t WATER;
} LPUART_Type;
# 15418 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t TIMING;
       uint8_t RESERVED_0[12];
  volatile uint32_t DATA;
       uint8_t RESERVED_1[12];
  volatile uint32_t READ_CTRL;
       uint8_t RESERVED_2[12];
  volatile uint32_t READ_FUSE_DATA;
       uint8_t RESERVED_3[12];
  volatile uint32_t SW_STICKY;
       uint8_t RESERVED_4[12];
  volatile uint32_t SCS;
  volatile uint32_t SCS_SET;
  volatile uint32_t SCS_CLR;
  volatile uint32_t SCS_TOG;
       uint8_t RESERVED_5[32];
  volatile const uint32_t VERSION;
       uint8_t RESERVED_6[108];
  volatile uint32_t TIMING2;
       uint8_t RESERVED_7[764];
  volatile uint32_t LOCK;
       uint8_t RESERVED_8[12];
  volatile uint32_t CFG0;
       uint8_t RESERVED_9[12];
  volatile uint32_t CFG1;
       uint8_t RESERVED_10[12];
  volatile uint32_t CFG2;
       uint8_t RESERVED_11[12];
  volatile uint32_t CFG3;
       uint8_t RESERVED_12[12];
  volatile uint32_t CFG4;
       uint8_t RESERVED_13[12];
  volatile uint32_t CFG5;
       uint8_t RESERVED_14[12];
  volatile uint32_t CFG6;
       uint8_t RESERVED_15[12];
  volatile uint32_t MEM0;
       uint8_t RESERVED_16[12];
  volatile uint32_t MEM1;
       uint8_t RESERVED_17[12];
  volatile uint32_t MEM2;
       uint8_t RESERVED_18[12];
  volatile uint32_t MEM3;
       uint8_t RESERVED_19[12];
  volatile uint32_t MEM4;
       uint8_t RESERVED_20[12];
  volatile uint32_t ANA0;
       uint8_t RESERVED_21[12];
  volatile uint32_t ANA1;
       uint8_t RESERVED_22[12];
  volatile uint32_t ANA2;
       uint8_t RESERVED_23[140];
  volatile uint32_t SRK0;
       uint8_t RESERVED_24[12];
  volatile uint32_t SRK1;
       uint8_t RESERVED_25[12];
  volatile uint32_t SRK2;
       uint8_t RESERVED_26[12];
  volatile uint32_t SRK3;
       uint8_t RESERVED_27[12];
  volatile uint32_t SRK4;
       uint8_t RESERVED_28[12];
  volatile uint32_t SRK5;
       uint8_t RESERVED_29[12];
  volatile uint32_t SRK6;
       uint8_t RESERVED_30[12];
  volatile uint32_t SRK7;
       uint8_t RESERVED_31[12];
  volatile uint32_t SJC_RESP0;
       uint8_t RESERVED_32[12];
  volatile uint32_t SJC_RESP1;
       uint8_t RESERVED_33[12];
  volatile uint32_t MAC0;
       uint8_t RESERVED_34[12];
  volatile uint32_t MAC1;
       uint8_t RESERVED_35[12];
  volatile uint32_t GP3;
       uint8_t RESERVED_36[28];
  volatile uint32_t GP1;
       uint8_t RESERVED_37[12];
  volatile uint32_t GP2;
       uint8_t RESERVED_38[12];
  volatile uint32_t SW_GP1;
       uint8_t RESERVED_39[12];
  volatile uint32_t SW_GP20;
       uint8_t RESERVED_40[12];
  volatile uint32_t SW_GP21;
       uint8_t RESERVED_41[12];
  volatile uint32_t SW_GP22;
       uint8_t RESERVED_42[12];
  volatile uint32_t SW_GP23;
       uint8_t RESERVED_43[12];
  volatile uint32_t MISC_CONF0;
       uint8_t RESERVED_44[12];
  volatile uint32_t MISC_CONF1;
       uint8_t RESERVED_45[12];
  volatile uint32_t SRK_REVOKE;
} OCOTP_Type;
# 15987 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[544];
  volatile uint32_t MEGA_CTRL;
  volatile uint32_t MEGA_PUPSCR;
  volatile uint32_t MEGA_PDNSCR;
  volatile uint32_t MEGA_SR;
       uint8_t RESERVED_1[112];
  volatile uint32_t CPU_CTRL;
  volatile uint32_t CPU_PUPSCR;
  volatile uint32_t CPU_PDNSCR;
  volatile uint32_t CPU_SR;
} PGC_Type;
# 16092 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
       uint8_t RESERVED_0[220];
  volatile const uint32_t LTMR64H;
  volatile const uint32_t LTMR64L;
       uint8_t RESERVED_1[24];
  struct {
    volatile uint32_t LDVAL;
    volatile const uint32_t CVAL;
    volatile uint32_t TCTRL;
    volatile uint32_t TFLG;
  } CHANNEL[4];
} PIT_Type;
# 16204 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[272];
  volatile uint32_t REG_1P1;
  volatile uint32_t REG_1P1_SET;
  volatile uint32_t REG_1P1_CLR;
  volatile uint32_t REG_1P1_TOG;
  volatile uint32_t REG_3P0;
  volatile uint32_t REG_3P0_SET;
  volatile uint32_t REG_3P0_CLR;
  volatile uint32_t REG_3P0_TOG;
  volatile uint32_t REG_2P5;
  volatile uint32_t REG_2P5_SET;
  volatile uint32_t REG_2P5_CLR;
  volatile uint32_t REG_2P5_TOG;
  volatile uint32_t REG_CORE;
  volatile uint32_t REG_CORE_SET;
  volatile uint32_t REG_CORE_CLR;
  volatile uint32_t REG_CORE_TOG;
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
  volatile uint32_t MISC1;
  volatile uint32_t MISC1_SET;
  volatile uint32_t MISC1_CLR;
  volatile uint32_t MISC1_TOG;
  volatile uint32_t MISC2;
  volatile uint32_t MISC2_SET;
  volatile uint32_t MISC2_CLR;
  volatile uint32_t MISC2_TOG;
} PMU_Type;
# 17148 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile const uint16_t CNT;
    volatile uint16_t INIT;
    volatile uint16_t CTRL2;
    volatile uint16_t CTRL;
         uint8_t RESERVED_0[2];
    volatile uint16_t VAL0;
    volatile uint16_t FRACVAL1;
    volatile uint16_t VAL1;
    volatile uint16_t FRACVAL2;
    volatile uint16_t VAL2;
    volatile uint16_t FRACVAL3;
    volatile uint16_t VAL3;
    volatile uint16_t FRACVAL4;
    volatile uint16_t VAL4;
    volatile uint16_t FRACVAL5;
    volatile uint16_t VAL5;
    volatile uint16_t FRCTRL;
    volatile uint16_t OCTRL;
    volatile uint16_t STS;
    volatile uint16_t INTEN;
    volatile uint16_t DMAEN;
    volatile uint16_t TCTRL;
    volatile uint16_t DISMAP[2];
    volatile uint16_t DTCNT0;
    volatile uint16_t DTCNT1;
    volatile uint16_t CAPTCTRLA;
    volatile uint16_t CAPTCOMPA;
    volatile uint16_t CAPTCTRLB;
    volatile uint16_t CAPTCOMPB;
    volatile uint16_t CAPTCTRLX;
    volatile uint16_t CAPTCOMPX;
    volatile const uint16_t CVAL0;
    volatile const uint16_t CVAL0CYC;
    volatile const uint16_t CVAL1;
    volatile const uint16_t CVAL1CYC;
    volatile const uint16_t CVAL2;
    volatile const uint16_t CVAL2CYC;
    volatile const uint16_t CVAL3;
    volatile const uint16_t CVAL3CYC;
    volatile const uint16_t CVAL4;
    volatile const uint16_t CVAL4CYC;
    volatile const uint16_t CVAL5;
    volatile const uint16_t CVAL5CYC;
         uint8_t RESERVED_1[8];
  } SM[4];
  volatile uint16_t OUTEN;
  volatile uint16_t MASK;
  volatile uint16_t SWCOUT;
  volatile uint16_t DTSRCSEL;
  volatile uint16_t MCTRL;
  volatile uint16_t MCTRL2;
  volatile uint16_t FCTRL;
  volatile uint16_t FSTS;
  volatile uint16_t FFILT;
  volatile uint16_t FTST;
  volatile uint16_t FCTRL2;
} PWM_Type;
# 18026 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t STAT;
  volatile uint32_t STAT_SET;
  volatile uint32_t STAT_CLR;
  volatile uint32_t STAT_TOG;
  volatile uint32_t OUT_CTRL;
  volatile uint32_t OUT_CTRL_SET;
  volatile uint32_t OUT_CTRL_CLR;
  volatile uint32_t OUT_CTRL_TOG;
  volatile uint32_t OUT_BUF;
       uint8_t RESERVED_0[12];
  volatile uint32_t OUT_BUF2;
       uint8_t RESERVED_1[12];
  volatile uint32_t OUT_PITCH;
       uint8_t RESERVED_2[12];
  volatile uint32_t OUT_LRC;
       uint8_t RESERVED_3[12];
  volatile uint32_t OUT_PS_ULC;
       uint8_t RESERVED_4[12];
  volatile uint32_t OUT_PS_LRC;
       uint8_t RESERVED_5[12];
  volatile uint32_t OUT_AS_ULC;
       uint8_t RESERVED_6[12];
  volatile uint32_t OUT_AS_LRC;
       uint8_t RESERVED_7[12];
  volatile uint32_t PS_CTRL;
  volatile uint32_t PS_CTRL_SET;
  volatile uint32_t PS_CTRL_CLR;
  volatile uint32_t PS_CTRL_TOG;
  volatile uint32_t PS_BUF;
       uint8_t RESERVED_8[12];
  volatile uint32_t PS_UBUF;
       uint8_t RESERVED_9[12];
  volatile uint32_t PS_VBUF;
       uint8_t RESERVED_10[12];
  volatile uint32_t PS_PITCH;
       uint8_t RESERVED_11[12];
  volatile uint32_t PS_BACKGROUND;
       uint8_t RESERVED_12[12];
  volatile uint32_t PS_SCALE;
       uint8_t RESERVED_13[12];
  volatile uint32_t PS_OFFSET;
       uint8_t RESERVED_14[12];
  volatile uint32_t PS_CLRKEYLOW;
       uint8_t RESERVED_15[12];
  volatile uint32_t PS_CLRKEYHIGH;
       uint8_t RESERVED_16[12];
  volatile uint32_t AS_CTRL;
       uint8_t RESERVED_17[12];
  volatile uint32_t AS_BUF;
       uint8_t RESERVED_18[12];
  volatile uint32_t AS_PITCH;
       uint8_t RESERVED_19[12];
  volatile uint32_t AS_CLRKEYLOW;
       uint8_t RESERVED_20[12];
  volatile uint32_t AS_CLRKEYHIGH;
       uint8_t RESERVED_21[12];
  volatile uint32_t CSC1_COEF0;
       uint8_t RESERVED_22[12];
  volatile uint32_t CSC1_COEF1;
       uint8_t RESERVED_23[12];
  volatile uint32_t CSC1_COEF2;
       uint8_t RESERVED_24[348];
  volatile uint32_t POWER;
       uint8_t RESERVED_25[220];
  volatile uint32_t NEXT;
       uint8_t RESERVED_26[60];
  volatile uint32_t PORTER_DUFF_CTRL;
} PXP_Type;
# 18938 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[212];
  volatile uint32_t ROMPATCHD[8];
  volatile uint32_t ROMPATCHCNTL;
       uint32_t ROMPATCHENH;
  volatile uint32_t ROMPATCHENL;
  volatile uint32_t ROMPATCHA[16];
       uint8_t RESERVED_1[200];
  volatile uint32_t ROMPATCHSR;
} ROMC_Type;
# 19029 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t CS;
  volatile uint32_t CNT;
  volatile uint32_t TOVAL;
  volatile uint32_t WIN;
} RTWDOG_Type;
# 19150 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCR;
  volatile uint32_t IOCR;
  volatile uint32_t BMCR0;
  volatile uint32_t BMCR1;
  volatile uint32_t BR[9];
       uint8_t RESERVED_0[4];
  volatile uint32_t INTEN;
  volatile uint32_t INTR;
  volatile uint32_t SDRAMCR0;
  volatile uint32_t SDRAMCR1;
  volatile uint32_t SDRAMCR2;
  volatile uint32_t SDRAMCR3;
  volatile uint32_t NANDCR0;
  volatile uint32_t NANDCR1;
  volatile uint32_t NANDCR2;
  volatile uint32_t NANDCR3;
  volatile uint32_t NORCR0;
  volatile uint32_t NORCR1;
  volatile uint32_t NORCR2;
       uint32_t NORCR3;
  volatile uint32_t SRAMCR0;
  volatile uint32_t SRAMCR1;
  volatile uint32_t SRAMCR2;
       uint32_t SRAMCR3;
  volatile uint32_t DBICR0;
  volatile uint32_t DBICR1;
       uint8_t RESERVED_1[8];
  volatile uint32_t IPCR0;
  volatile uint32_t IPCR1;
  volatile uint32_t IPCR2;
  volatile uint32_t IPCMD;
  volatile uint32_t IPTXDAT;
       uint8_t RESERVED_2[12];
  volatile const uint32_t IPRXDAT;
       uint8_t RESERVED_3[12];
  volatile const uint32_t STS0;
       uint32_t STS1;
  volatile const uint32_t STS2;
       uint32_t STS3;
       uint32_t STS4;
       uint32_t STS5;
       uint32_t STS6;
       uint32_t STS7;
       uint32_t STS8;
       uint32_t STS9;
       uint32_t STS10;
       uint32_t STS11;
  volatile const uint32_t STS12;
       uint32_t STS13;
       uint32_t STS14;
       uint32_t STS15;
} SEMC_Type;
# 19739 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t HPLR;
  volatile uint32_t HPCOMR;
  volatile uint32_t HPCR;
  volatile uint32_t HPSICR;
  volatile uint32_t HPSVCR;
  volatile uint32_t HPSR;
  volatile uint32_t HPSVSR;
  volatile uint32_t HPHACIVR;
  volatile const uint32_t HPHACR;
  volatile uint32_t HPRTCMR;
  volatile uint32_t HPRTCLR;
  volatile uint32_t HPTAMR;
  volatile uint32_t HPTALR;
  volatile uint32_t LPLR;
  volatile uint32_t LPCR;
  volatile uint32_t LPMKCR;
  volatile uint32_t LPSVCR;
       uint8_t RESERVED_0[4];
  volatile uint32_t LPTDCR;
  volatile uint32_t LPSR;
  volatile uint32_t LPSRTCMR;
  volatile uint32_t LPSRTCLR;
  volatile uint32_t LPTAR;
  volatile const uint32_t LPSMCMR;
  volatile const uint32_t LPSMCLR;
  volatile uint32_t LPPGDR;
  volatile uint32_t LPGPR0_LEGACY_ALIAS;
  volatile uint32_t LPZMKR[8];
       uint8_t RESERVED_1[4];
  volatile uint32_t LPGPR_ALIAS[4];
       uint8_t RESERVED_2[96];
  volatile uint32_t LPGPR[8];
       uint8_t RESERVED_3[2776];
  volatile const uint32_t HPVIDR1;
  volatile const uint32_t HPVIDR2;
} SNVS_Type;
# 20345 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SCR;
  volatile uint32_t SRCD;
  volatile uint32_t SRPC;
  volatile uint32_t SIE;
  union {
    volatile uint32_t SIC;
    volatile const uint32_t SIS;
  };
  volatile const uint32_t SRL;
  volatile const uint32_t SRR;
  volatile const uint32_t SRCSH;
  volatile const uint32_t SRCSL;
  volatile const uint32_t SRU;
  volatile const uint32_t SRQ;
  volatile uint32_t STL;
  volatile uint32_t STR;
  volatile uint32_t STCSCH;
  volatile uint32_t STCSCL;
       uint8_t RESERVED_0[8];
  volatile const uint32_t SRFM;
       uint8_t RESERVED_1[8];
  volatile uint32_t STC;
} SPDIF_Type;
# 20700 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t SCR;
  volatile const uint32_t SBMR1;
  volatile uint32_t SRSR;
       uint8_t RESERVED_0[16];
  volatile const uint32_t SBMR2;
  volatile uint32_t GPR[10];
} SRC_Type;
# 20865 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[384];
  volatile uint32_t TEMPSENSE0;
  volatile uint32_t TEMPSENSE0_SET;
  volatile uint32_t TEMPSENSE0_CLR;
  volatile uint32_t TEMPSENSE0_TOG;
  volatile uint32_t TEMPSENSE1;
  volatile uint32_t TEMPSENSE1_SET;
  volatile uint32_t TEMPSENSE1_CLR;
  volatile uint32_t TEMPSENSE1_TOG;
       uint8_t RESERVED_1[240];
  volatile uint32_t TEMPSENSE2;
  volatile uint32_t TEMPSENSE2_SET;
  volatile uint32_t TEMPSENSE2_CLR;
  volatile uint32_t TEMPSENSE2_TOG;
} TEMPMON_Type;
# 21042 "mcusdk/MIMXRT1052.h"
typedef struct {
  struct {
    volatile uint16_t COMP1;
    volatile uint16_t COMP2;
    volatile uint16_t CAPT;
    volatile uint16_t LOAD;
    volatile uint16_t HOLD;
    volatile uint16_t CNTR;
    volatile uint16_t CTRL;
    volatile uint16_t SCTRL;
    volatile uint16_t CMPLD1;
    volatile uint16_t CMPLD2;
    volatile uint16_t CSCTRL;
    volatile uint16_t FILT;
    volatile uint16_t DMA;
         uint8_t RESERVED_0[4];
    volatile uint16_t ENBL;
  } CHANNEL[4];
} TMR_Type;
# 21333 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t MCTL;
  volatile uint32_t SCMISC;
  volatile uint32_t PKRRNG;
  union {
    volatile uint32_t PKRMAX;
    volatile const uint32_t PKRSQ;
  };
  volatile uint32_t SDCTL;
  union {
    volatile uint32_t SBLIM;
    volatile const uint32_t TOTSAM;
  };
  volatile uint32_t FRQMIN;
  union {
    volatile const uint32_t FRQCNT;
    volatile uint32_t FRQMAX;
  };
  union {
    volatile const uint32_t SCMC;
    volatile uint32_t SCML;
  };
  union {
    volatile const uint32_t SCR1C;
    volatile uint32_t SCR1L;
  };
  union {
    volatile const uint32_t SCR2C;
    volatile uint32_t SCR2L;
  };
  union {
    volatile const uint32_t SCR3C;
    volatile uint32_t SCR3L;
  };
  union {
    volatile const uint32_t SCR4C;
    volatile uint32_t SCR4L;
  };
  union {
    volatile const uint32_t SCR5C;
    volatile uint32_t SCR5L;
  };
  union {
    volatile const uint32_t SCR6PC;
    volatile uint32_t SCR6PL;
  };
  volatile const uint32_t STATUS;
  volatile const uint32_t ENT[16];
  volatile const uint32_t PKRCNT10;
  volatile const uint32_t PKRCNT32;
  volatile const uint32_t PKRCNT54;
  volatile const uint32_t PKRCNT76;
  volatile const uint32_t PKRCNT98;
  volatile const uint32_t PKRCNTBA;
  volatile const uint32_t PKRCNTDC;
  volatile const uint32_t PKRCNTFE;
  volatile uint32_t SEC_CFG;
  volatile uint32_t INT_CTRL;
  volatile uint32_t INT_MASK;
  volatile const uint32_t INT_STATUS;
       uint8_t RESERVED_0[64];
  volatile const uint32_t VID1;
  volatile const uint32_t VID2;
} TRNG_Type;
# 21846 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t BASIC_SETTING;
       uint8_t RESERVED_0[12];
  volatile uint32_t PRE_CHARGE_TIME;
       uint8_t RESERVED_1[12];
  volatile uint32_t FLOW_CONTROL;
       uint8_t RESERVED_2[12];
  volatile const uint32_t MEASEURE_VALUE;
       uint8_t RESERVED_3[12];
  volatile uint32_t INT_EN;
       uint8_t RESERVED_4[12];
  volatile uint32_t INT_SIG_EN;
       uint8_t RESERVED_5[12];
  volatile uint32_t INT_STATUS;
       uint8_t RESERVED_6[12];
  volatile uint32_t DEBUG_MODE;
       uint8_t RESERVED_7[12];
  volatile uint32_t DEBUG_MODE2;
} TSC_Type;
# 22084 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile const uint32_t ID;
  volatile const uint32_t HWGENERAL;
  volatile const uint32_t HWHOST;
  volatile const uint32_t HWDEVICE;
  volatile const uint32_t HWTXBUF;
  volatile const uint32_t HWRXBUF;
       uint8_t RESERVED_0[104];
  volatile uint32_t GPTIMER0LD;
  volatile uint32_t GPTIMER0CTRL;
  volatile uint32_t GPTIMER1LD;
  volatile uint32_t GPTIMER1CTRL;
  volatile uint32_t SBUSCFG;
       uint8_t RESERVED_1[108];
  volatile const uint8_t CAPLENGTH;
       uint8_t RESERVED_2[1];
  volatile const uint16_t HCIVERSION;
  volatile const uint32_t HCSPARAMS;
  volatile const uint32_t HCCPARAMS;
       uint8_t RESERVED_3[20];
  volatile const uint16_t DCIVERSION;
       uint8_t RESERVED_4[2];
  volatile const uint32_t DCCPARAMS;
       uint8_t RESERVED_5[24];
  volatile uint32_t USBCMD;
  volatile uint32_t USBSTS;
  volatile uint32_t USBINTR;
  volatile uint32_t FRINDEX;
       uint8_t RESERVED_6[4];
  union {
    volatile uint32_t DEVICEADDR;
    volatile uint32_t PERIODICLISTBASE;
  };
  union {
    volatile uint32_t ASYNCLISTADDR;
    volatile uint32_t ENDPTLISTADDR;
  };
       uint8_t RESERVED_7[4];
  volatile uint32_t BURSTSIZE;
  volatile uint32_t TXFILLTUNING;
       uint8_t RESERVED_8[16];
  volatile uint32_t ENDPTNAK;
  volatile uint32_t ENDPTNAKEN;
  volatile const uint32_t CONFIGFLAG;
  volatile uint32_t PORTSC1;
       uint8_t RESERVED_9[28];
  volatile uint32_t OTGSC;
  volatile uint32_t USBMODE;
  volatile uint32_t ENDPTSETUPSTAT;
  volatile uint32_t ENDPTPRIME;
  volatile uint32_t ENDPTFLUSH;
  volatile const uint32_t ENDPTSTAT;
  volatile uint32_t ENDPTCOMPLETE;
  volatile uint32_t ENDPTCTRL0;
  volatile uint32_t ENDPTCTRL[7];
} USB_Type;
# 23396 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[2048];
  volatile uint32_t USB_OTGn_CTRL;
       uint8_t RESERVED_1[20];
  volatile uint32_t USB_OTGn_PHY_CTRL_0;
} USBNC_Type;
# 23484 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t PWD;
  volatile uint32_t PWD_SET;
  volatile uint32_t PWD_CLR;
  volatile uint32_t PWD_TOG;
  volatile uint32_t TX;
  volatile uint32_t TX_SET;
  volatile uint32_t TX_CLR;
  volatile uint32_t TX_TOG;
  volatile uint32_t RX;
  volatile uint32_t RX_SET;
  volatile uint32_t RX_CLR;
  volatile uint32_t RX_TOG;
  volatile uint32_t CTRL;
  volatile uint32_t CTRL_SET;
  volatile uint32_t CTRL_CLR;
  volatile uint32_t CTRL_TOG;
  volatile uint32_t STATUS;
       uint8_t RESERVED_0[12];
  volatile uint32_t DEBUGr;
  volatile uint32_t DEBUG_SET;
  volatile uint32_t DEBUG_CLR;
  volatile uint32_t DEBUG_TOG;
  volatile const uint32_t DEBUG0_STATUS;
       uint8_t RESERVED_1[12];
  volatile uint32_t DEBUG1;
  volatile uint32_t DEBUG1_SET;
  volatile uint32_t DEBUG1_CLR;
  volatile uint32_t DEBUG1_TOG;
  volatile const uint32_t VERSION;
} USBPHY_Type;
# 24545 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[416];
  struct {
    volatile uint32_t VBUS_DETECT;
    volatile uint32_t VBUS_DETECT_SET;
    volatile uint32_t VBUS_DETECT_CLR;
    volatile uint32_t VBUS_DETECT_TOG;
    volatile uint32_t CHRG_DETECT;
    volatile uint32_t CHRG_DETECT_SET;
    volatile uint32_t CHRG_DETECT_CLR;
    volatile uint32_t CHRG_DETECT_TOG;
    volatile const uint32_t VBUS_DETECT_STAT;
         uint8_t RESERVED_0[12];
    volatile const uint32_t CHRG_DETECT_STAT;
         uint8_t RESERVED_1[28];
    volatile uint32_t MISC;
    volatile uint32_t MISC_SET;
    volatile uint32_t MISC_CLR;
    volatile uint32_t MISC_TOG;
  } INSTANCE[2];
  volatile const uint32_t DIGPROG;
} USB_ANALOG_Type;
# 24833 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint32_t DS_ADDR;
  volatile uint32_t BLK_ATT;
  volatile uint32_t CMD_ARG;
  volatile uint32_t CMD_XFR_TYP;
  volatile const uint32_t CMD_RSP0;
  volatile const uint32_t CMD_RSP1;
  volatile const uint32_t CMD_RSP2;
  volatile const uint32_t CMD_RSP3;
  volatile uint32_t DATA_BUFF_ACC_PORT;
  volatile const uint32_t PRES_STATE;
  volatile uint32_t PROT_CTRL;
  volatile uint32_t SYS_CTRL;
  volatile uint32_t INT_STATUS;
  volatile uint32_t INT_STATUS_EN;
  volatile uint32_t INT_SIGNAL_EN;
  volatile uint32_t AUTOCMD12_ERR_STATUS;
  volatile uint32_t HOST_CTRL_CAP;
  volatile uint32_t WTMK_LVL;
  volatile uint32_t MIX_CTRL;
       uint8_t RESERVED_0[4];
  volatile uint32_t FORCE_EVENT;
  volatile const uint32_t ADMA_ERR_STATUS;
  volatile uint32_t ADMA_SYS_ADDR;
       uint8_t RESERVED_1[4];
  volatile uint32_t DLL_CTRL;
  volatile const uint32_t DLL_STATUS;
  volatile uint32_t CLK_TUNE_CTRL_STATUS;
       uint8_t RESERVED_2[84];
  volatile uint32_t VEND_SPEC;
  volatile uint32_t MMC_BOOT;
  volatile uint32_t VEND_SPEC2;
  volatile uint32_t TUNING_CTRL;
} USDHC_Type;
# 25659 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t WCR;
  volatile uint16_t WSR;
  volatile const uint16_t WRSR;
  volatile uint16_t WICR;
  volatile uint16_t WMCR;
} WDOG_Type;
# 25774 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t SEL0;
  volatile uint16_t SEL1;
  volatile uint16_t SEL2;
  volatile uint16_t SEL3;
  volatile uint16_t SEL4;
  volatile uint16_t SEL5;
  volatile uint16_t SEL6;
  volatile uint16_t SEL7;
  volatile uint16_t SEL8;
  volatile uint16_t SEL9;
  volatile uint16_t SEL10;
  volatile uint16_t SEL11;
  volatile uint16_t SEL12;
  volatile uint16_t SEL13;
  volatile uint16_t SEL14;
  volatile uint16_t SEL15;
  volatile uint16_t SEL16;
  volatile uint16_t SEL17;
  volatile uint16_t SEL18;
  volatile uint16_t SEL19;
  volatile uint16_t SEL20;
  volatile uint16_t SEL21;
  volatile uint16_t SEL22;
  volatile uint16_t SEL23;
  volatile uint16_t SEL24;
  volatile uint16_t SEL25;
  volatile uint16_t SEL26;
  volatile uint16_t SEL27;
  volatile uint16_t SEL28;
  volatile uint16_t SEL29;
  volatile uint16_t SEL30;
  volatile uint16_t SEL31;
  volatile uint16_t SEL32;
  volatile uint16_t SEL33;
  volatile uint16_t SEL34;
  volatile uint16_t SEL35;
  volatile uint16_t SEL36;
  volatile uint16_t SEL37;
  volatile uint16_t SEL38;
  volatile uint16_t SEL39;
  volatile uint16_t SEL40;
  volatile uint16_t SEL41;
  volatile uint16_t SEL42;
  volatile uint16_t SEL43;
  volatile uint16_t SEL44;
  volatile uint16_t SEL45;
  volatile uint16_t SEL46;
  volatile uint16_t SEL47;
  volatile uint16_t SEL48;
  volatile uint16_t SEL49;
  volatile uint16_t SEL50;
  volatile uint16_t SEL51;
  volatile uint16_t SEL52;
  volatile uint16_t SEL53;
  volatile uint16_t SEL54;
  volatile uint16_t SEL55;
  volatile uint16_t SEL56;
  volatile uint16_t SEL57;
  volatile uint16_t SEL58;
  volatile uint16_t SEL59;
  volatile uint16_t SEL60;
  volatile uint16_t SEL61;
  volatile uint16_t SEL62;
  volatile uint16_t SEL63;
  volatile uint16_t SEL64;
  volatile uint16_t SEL65;
  volatile uint16_t CTRL0;
  volatile uint16_t CTRL1;
} XBARA_Type;
# 26465 "mcusdk/MIMXRT1052.h"
typedef struct {
  volatile uint16_t SEL0;
  volatile uint16_t SEL1;
  volatile uint16_t SEL2;
  volatile uint16_t SEL3;
  volatile uint16_t SEL4;
  volatile uint16_t SEL5;
  volatile uint16_t SEL6;
  volatile uint16_t SEL7;
} XBARB_Type;
# 26584 "mcusdk/MIMXRT1052.h"
typedef struct {
       uint8_t RESERVED_0[336];
  volatile uint32_t MISC0;
  volatile uint32_t MISC0_SET;
  volatile uint32_t MISC0_CLR;
  volatile uint32_t MISC0_TOG;
       uint8_t RESERVED_1[272];
  volatile uint32_t LOWPWR_CTRL;
  volatile uint32_t LOWPWR_CTRL_SET;
  volatile uint32_t LOWPWR_CTRL_CLR;
  volatile uint32_t LOWPWR_CTRL_TOG;
       uint8_t RESERVED_2[32];
  volatile uint32_t OSC_CONFIG0;
  volatile uint32_t OSC_CONFIG0_SET;
  volatile uint32_t OSC_CONFIG0_CLR;
  volatile uint32_t OSC_CONFIG0_TOG;
  volatile uint32_t OSC_CONFIG1;
  volatile uint32_t OSC_CONFIG1_SET;
  volatile uint32_t OSC_CONFIG1_CLR;
  volatile uint32_t OSC_CONFIG1_TOG;
  volatile uint32_t OSC_CONFIG2;
  volatile uint32_t OSC_CONFIG2_SET;
  volatile uint32_t OSC_CONFIG2_CLR;
  volatile uint32_t OSC_CONFIG2_TOG;
} XTALOSC24M_Type;
# 52 "mcusdk/fsl_device_registers.h" 2

# 1 "mcusdk/MIMXRT1052_features.h" 1
# 54 "mcusdk/fsl_device_registers.h" 2
# 49 "mcusdk/drivers/fsl_common.h" 2
# 82 "mcusdk/drivers/fsl_common.h"
enum _status_groups
{
    kStatusGroup_Generic = 0,
    kStatusGroup_FLASH = 1,
    kStatusGroup_LPSPI = 4,
    kStatusGroup_FLEXIO_SPI = 5,
    kStatusGroup_DSPI = 6,
    kStatusGroup_FLEXIO_UART = 7,
    kStatusGroup_FLEXIO_I2C = 8,
    kStatusGroup_LPI2C = 9,
    kStatusGroup_UART = 10,
    kStatusGroup_I2C = 11,
    kStatusGroup_LPSCI = 12,
    kStatusGroup_LPUART = 13,
    kStatusGroup_SPI = 14,
    kStatusGroup_XRDC = 15,
    kStatusGroup_SEMA42 = 16,
    kStatusGroup_SDHC = 17,
    kStatusGroup_SDMMC = 18,
    kStatusGroup_SAI = 19,
    kStatusGroup_MCG = 20,
    kStatusGroup_SCG = 21,
    kStatusGroup_SDSPI = 22,
    kStatusGroup_FLEXIO_I2S = 23,
    kStatusGroup_FLEXIO_MCULCD = 24,
    kStatusGroup_FLASHIAP = 25,
    kStatusGroup_FLEXCOMM_I2C = 26,
    kStatusGroup_I2S = 27,
    kStatusGroup_IUART = 28,
    kStatusGroup_CSI = 29,
    kStatusGroup_MIPI_DSI = 30,
    kStatusGroup_SDRAMC = 35,
    kStatusGroup_POWER = 39,
    kStatusGroup_ENET = 40,
    kStatusGroup_PHY = 41,
    kStatusGroup_TRGMUX = 42,
    kStatusGroup_SMARTCARD = 43,
    kStatusGroup_LMEM = 44,
    kStatusGroup_QSPI = 45,
    kStatusGroup_DMA = 50,
    kStatusGroup_EDMA = 51,
    kStatusGroup_DMAMGR = 52,
    kStatusGroup_FLEXCAN = 53,
    kStatusGroup_LTC = 54,
    kStatusGroup_FLEXIO_CAMERA = 55,
    kStatusGroup_LPC_SPI = 56,
    kStatusGroup_LPC_USART = 57,
    kStatusGroup_DMIC = 58,
    kStatusGroup_SDIF = 59,
    kStatusGroup_SPIFI = 60,
    kStatusGroup_OTP = 61,
    kStatusGroup_MCAN = 62,
    kStatusGroup_CAAM = 63,
    kStatusGroup_ECSPI = 64,
    kStatusGroup_USDHC = 65,
    kStatusGroup_LPC_I2C = 66,
    kStatusGroup_DCP = 67,
    kStatusGroup_MSCAN = 68,
    kStatusGroup_ESAI = 69,
    kStatusGroup_FLEXSPI = 70,
    kStatusGroup_MMDC = 71,
    kStatusGroup_MICFIL = 72,
    kStatusGroup_SDMA = 73,
    kStatusGroup_ICS = 74,
    kStatusGroup_SPDIF = 75,
    kStatusGroup_NOTIFIER = 98,
    kStatusGroup_DebugConsole = 99,
    kStatusGroup_SEMC = 100,
    kStatusGroup_ApplicationRangeStart = 101,
};


enum _generic_status
{
    kStatus_Success = ((((kStatusGroup_Generic)*100) + (0))),
    kStatus_Fail = ((((kStatusGroup_Generic)*100) + (1))),
    kStatus_ReadOnly = ((((kStatusGroup_Generic)*100) + (2))),
    kStatus_OutOfRange = ((((kStatusGroup_Generic)*100) + (3))),
    kStatus_InvalidArgument = ((((kStatusGroup_Generic)*100) + (4))),
    kStatus_Timeout = ((((kStatusGroup_Generic)*100) + (5))),
    kStatus_NoTransferInProgress = ((((kStatusGroup_Generic)*100) + (6))),
};


typedef int32_t status_t;





# 1 "mcusdk/drivers/fsl_clock.h" 1
# 40 "mcusdk/drivers/fsl_clock.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3

# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 41 "mcusdk/drivers/fsl_clock.h" 2
# 102 "mcusdk/drivers/fsl_clock.h"

# 102 "mcusdk/drivers/fsl_clock.h"
extern uint32_t g_xtalFreq;






extern uint32_t g_rtcXtalFreq;
# 381 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_name
{
    kCLOCK_CpuClk = 0x0U,
    kCLOCK_AhbClk = 0x1U,
    kCLOCK_SemcClk = 0x2U,
    kCLOCK_IpgClk = 0x3U,

    kCLOCK_OscClk = 0x4U,
    kCLOCK_RtcClk = 0x5U,

    kCLOCK_ArmPllClk = 0x6U,

    kCLOCK_Usb1PllClk = 0x7U,
    kCLOCK_Usb1PllPfd0Clk = 0x8U,
    kCLOCK_Usb1PllPfd1Clk = 0x9U,
    kCLOCK_Usb1PllPfd2Clk = 0xAU,
    kCLOCK_Usb1PllPfd3Clk = 0xBU,

    kCLOCK_Usb2PllClk = 0xCU,

    kCLOCK_SysPllClk = 0xDU,
    kCLOCK_SysPllPfd0Clk = 0xEU,
    kCLOCK_SysPllPfd1Clk = 0xFU,
    kCLOCK_SysPllPfd2Clk = 0x10U,
    kCLOCK_SysPllPfd3Clk = 0x11U,

    kCLOCK_EnetPll0Clk = 0x12U,
    kCLOCK_EnetPll1Clk = 0x13U,
    kCLOCK_EnetPll2Clk = 0x14U,

    kCLOCK_AudioPllClk = 0x15U,
    kCLOCK_VideoPllClk = 0x16U,
} clock_name_t;







typedef enum _clock_ip_name
{
    kCLOCK_IpInvalid = -1,


    kCLOCK_Aips_tz1 = (0U << 8U) | (0U),
    kCLOCK_Aips_tz2 = (0U << 8U) | (2U),



    kCLOCK_Dcp = (0U << 8U) | (10U),
    kCLOCK_Lpuart3 = (0U << 8U) | (12U),
    kCLOCK_Can1 = (0U << 8U) | (14U),
    kCLOCK_Can1S = (0U << 8U) | (16U),
    kCLOCK_Can2 = (0U << 8U) | (18U),
    kCLOCK_Can2S = (0U << 8U) | (20U),
    kCLOCK_Trace = (0U << 8U) | (22U),
    kCLOCK_Gpt2 = (0U << 8U) | (24U),
    kCLOCK_Gpt2S = (0U << 8U) | (26U),
    kCLOCK_Lpuart2 = (0U << 8U) | (28U),
    kCLOCK_Gpio2 = (0U << 8U) | (30U),


    kCLOCK_Lpspi1 = (1U << 8U) | (0U),
    kCLOCK_Lpspi2 = (1U << 8U) | (2U),
    kCLOCK_Lpspi3 = (1U << 8U) | (4U),
    kCLOCK_Lpspi4 = (1U << 8U) | (6U),
    kCLOCK_Adc2 = (1U << 8U) | (8U),
    kCLOCK_Enet = (1U << 8U) | (10U),
    kCLOCK_Pit = (1U << 8U) | (12U),
    kCLOCK_Aoi2 = (1U << 8U) | (14U),
    kCLOCK_Adc1 = (1U << 8U) | (16U),

    kCLOCK_Gpt1 = (1U << 8U) | (20U),
    kCLOCK_Gpt1S = (1U << 8U) | (22U),
    kCLOCK_Lpuart4 = (1U << 8U) | (24U),
    kCLOCK_Gpio1 = (1U << 8U) | (26U),
    kCLOCK_Csu = (1U << 8U) | (28U),
    kCLOCK_Gpio5 = (1U << 8U) | (30U),



    kCLOCK_Csi = (2U << 8U) | (2U),
    kCLOCK_IomuxcSnvs = (2U << 8U) | (4U),
    kCLOCK_Lpi2c1 = (2U << 8U) | (6U),
    kCLOCK_Lpi2c2 = (2U << 8U) | (8U),
    kCLOCK_Lpi2c3 = (2U << 8U) | (10U),
    kCLOCK_Ocotp = (2U << 8U) | (12U),
    kCLOCK_Xbar3 = (2U << 8U) | (14U),
    kCLOCK_Ipmux1 = (2U << 8U) | (16U),
    kCLOCK_Ipmux2 = (2U << 8U) | (18U),
    kCLOCK_Ipmux3 = (2U << 8U) | (20U),
    kCLOCK_Xbar1 = (2U << 8U) | (22U),
    kCLOCK_Xbar2 = (2U << 8U) | (24U),
    kCLOCK_Gpio3 = (2U << 8U) | (26U),
    kCLOCK_Lcd = (2U << 8U) | (28U),
    kCLOCK_Pxp = (2U << 8U) | (30U),


    kCLOCK_Flexio2 = (3U << 8U) | (0U),
    kCLOCK_Lpuart5 = (3U << 8U) | (2U),
    kCLOCK_Semc = (3U << 8U) | (4U),
    kCLOCK_Lpuart6 = (3U << 8U) | (6U),
    kCLOCK_Aoi1 = (3U << 8U) | (8U),
    kCLOCK_LcdPixel = (3U << 8U) | (10U),
    kCLOCK_Gpio4 = (3U << 8U) | (12U),
    kCLOCK_Ewm0 = (3U << 8U) | (14U),
    kCLOCK_Wdog1 = (3U << 8U) | (16U),
    kCLOCK_FlexRam = (3U << 8U) | (18U),
    kCLOCK_Acmp1 = (3U << 8U) | (20U),
    kCLOCK_Acmp2 = (3U << 8U) | (22U),
    kCLOCK_Acmp3 = (3U << 8U) | (24U),
    kCLOCK_Acmp4 = (3U << 8U) | (26U),
    kCLOCK_Ocram = (3U << 8U) | (28U),
    kCLOCK_IomuxcSnvsGpr = (3U << 8U) | (30U),


    kCLOCK_Iomuxc = (4U << 8U) | (2U),
    kCLOCK_IomuxcGpr = (4U << 8U) | (4U),
    kCLOCK_Bee = (4U << 8U) | (6U),
    kCLOCK_SimM7 = (4U << 8U) | (8U),
    kCLOCK_Tsc = (4U << 8U) | (10U),
    kCLOCK_SimM = (4U << 8U) | (12U),
    kCLOCK_SimEms = (4U << 8U) | (14U),
    kCLOCK_Pwm1 = (4U << 8U) | (16U),
    kCLOCK_Pwm2 = (4U << 8U) | (18U),
    kCLOCK_Pwm3 = (4U << 8U) | (20U),
    kCLOCK_Pwm4 = (4U << 8U) | (22U),
    kCLOCK_Enc1 = (4U << 8U) | (24U),
    kCLOCK_Enc2 = (4U << 8U) | (26U),
    kCLOCK_Enc3 = (4U << 8U) | (28U),
    kCLOCK_Enc4 = (4U << 8U) | (30U),


    kCLOCK_Rom = (5U << 8U) | (0U),
    kCLOCK_Flexio1 = (5U << 8U) | (2U),
    kCLOCK_Wdog3 = (5U << 8U) | (4U),
    kCLOCK_Dma = (5U << 8U) | (6U),
    kCLOCK_Kpp = (5U << 8U) | (8U),
    kCLOCK_Wdog2 = (5U << 8U) | (10U),
    kCLOCK_Aips_tz4 = (5U << 8U) | (12U),
    kCLOCK_Spdif = (5U << 8U) | (14U),
    kCLOCK_SimMain = (5U << 8U) | (16U),
    kCLOCK_Sai1 = (5U << 8U) | (18U),
    kCLOCK_Sai2 = (5U << 8U) | (20U),
    kCLOCK_Sai3 = (5U << 8U) | (22U),
    kCLOCK_Lpuart1 = (5U << 8U) | (24U),
    kCLOCK_Lpuart7 = (5U << 8U) | (26U),
    kCLOCK_SnvsHp = (5U << 8U) | (28U),
    kCLOCK_SnvsLp = (5U << 8U) | (30U),


    kCLOCK_UsbOh3 = (6U << 8U) | (0U),
    kCLOCK_Usdhc1 = (6U << 8U) | (2U),
    kCLOCK_Usdhc2 = (6U << 8U) | (4U),
    kCLOCK_Dcdc = (6U << 8U) | (6U),
    kCLOCK_Ipmux4 = (6U << 8U) | (8U),
    kCLOCK_FlexSpi = (6U << 8U) | (10U),
    kCLOCK_Trng = (6U << 8U) | (12U),
    kCLOCK_Lpuart8 = (6U << 8U) | (14U),
    kCLOCK_Timer4 = (6U << 8U) | (16U),
    kCLOCK_Aips_tz3 = (6U << 8U) | (18U),
    kCLOCK_SimPer = (6U << 8U) | (20U),
    kCLOCK_Anadig = (6U << 8U) | (22U),
    kCLOCK_Lpi2c4 = (6U << 8U) | (24U),
    kCLOCK_Timer1 = (6U << 8U) | (26U),
    kCLOCK_Timer2 = (6U << 8U) | (28U),
    kCLOCK_Timer3 = (6U << 8U) | (30U),

} clock_ip_name_t;


typedef enum _clock_osc
{
    kCLOCK_RcOsc = 0U,
    kCLOCK_XtalOsc = 1U,
} clock_osc_t;


typedef enum _clock_gate_value
{
    kCLOCK_ClockNotNeeded = 0U,
    kCLOCK_ClockNeededRun = 1U,
    kCLOCK_ClockNeededRunWait = 3U,
} clock_gate_value_t;


typedef enum _clock_mode_t
{
    kCLOCK_ModeRun = 0U,
    kCLOCK_ModeWait = 1U,
    kCLOCK_ModeStop = 2U,
} clock_mode_t;
# 584 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_mux
{
    kCLOCK_Pll3SwMux = ((((uint32_t)(&((CCM_Type *)0U)->CCSR)) & 0xFFU) | (((0U)) << 8U) | (((((0x1U)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_PeriphMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((25U)) << 8U) | (((((0x2000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((5U)) << 26U)),
    kCLOCK_SemcAltMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((7U)) << 8U) | (((((0x80U)) >> ((7U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_SemcMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_PrePeriphMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((18U)) << 8U) | (((((0xC0000U)) >> ((18U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_TraceMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((14U)) << 8U) | (((((0xC000U)) >> ((14U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PeriphClk2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((12U)) << 8U) | (((((0x3000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_LpspiMux = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((4U)) << 8U) | (((((0x30U)) >> ((4U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_FlexspiMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((29U)) << 8U) | (((((0x60000000U)) >> ((29U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((17U)) << 8U) | (((((0x20000U)) >> ((17U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((16U)) << 8U) | (((((0x10000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((14U)) << 8U) | (((((0xC000U)) >> ((14U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((12U)) << 8U) | (((((0x3000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((10U)) << 8U) | (((((0xC00U)) >> ((10U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PerclkMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Flexio2Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((19U)) << 8U) | (((((0x180000U)) >> ((19U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_CanMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((8U)) << 8U) | (((((0x300U)) >> ((8U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_UartMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((6U)) << 8U) | (((((0x40U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_SpdifMux = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((20U)) << 8U) | (((((0x300000U)) >> ((20U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((7U)) << 8U) | (((((0x180U)) >> ((7U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Lpi2cMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((18U)) << 8U) | (((((0x40000U)) >> ((18U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1PreMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((15U)) << 8U) | (((((0x38000U)) >> ((15U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1Mux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CsiMux = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR3)) & 0xFFU) | (((9U)) << 8U) | (((((0x600U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
} clock_mux_t;
# 629 "mcusdk/drivers/fsl_clock.h"
typedef enum _clock_div
{
    kCLOCK_ArmDiv = ((((uint32_t)(&((CCM_Type *)0U)->CACRR)) & 0xFFU) | (((0U)) << 8U) | (((((0x7U)) >> ((0U))) & 0x1FFFU) << 13U) | (((16U)) << 26U)),

    kCLOCK_PeriphClk2Div = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((27U)) << 8U) | (((((0x38000000U)) >> ((27U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_SemcDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((16U)) << 8U) | (((((0x70000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0U)) << 26U)),
    kCLOCK_AhbDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((10U)) << 8U) | (((((0x1C00U)) >> ((10U))) & 0x1FFFU) << 13U) | (((1U)) << 26U)),
    kCLOCK_IpgDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCDR)) & 0xFFU) | (((8U)) << 8U) | (((((0x300U)) >> ((8U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_LpspiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((26U)) << 8U) | (((((0x1C000000U)) >> ((26U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1Div = ((((uint32_t)(&((CCM_Type *)0U)->CBCMR)) & 0xFFU) | (((23U)) << 8U) | (((((0x3800000U)) >> ((23U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_FlexspiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((23U)) << 8U) | (((((0x3800000U)) >> ((23U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_PerclkDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR1)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CanDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCMR2)) & 0xFFU) | (((2U)) << 8U) | (((((0xFCU)) >> ((2U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_TraceDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((25U)) << 8U) | (((((0x6000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc2Div = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((16U)) << 8U) | (((((0x70000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Usdhc1Div = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((11U)) << 8U) | (((((0x3800U)) >> ((11U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_UartDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR1)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Flexio2Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((25U)) << 8U) | (((((0xE000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((22U)) << 8U) | (((((0x1C00000U)) >> ((22U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai3Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((16U)) << 8U) | (((((0x3F0000U)) >> ((16U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio2PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x1C0U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai1Div = ((((uint32_t)(&((CCM_Type *)0U)->CS1CDR)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Sai2PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CS2CDR)) & 0xFFU) | (((6U)) << 8U) | (((((0x1C0U)) >> ((6U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Sai2Div = ((((uint32_t)(&((CCM_Type *)0U)->CS2CDR)) & 0xFFU) | (((0U)) << 8U) | (((((0x3FU)) >> ((0U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Spdif0PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((25U)) << 8U) | (((((0xE000000U)) >> ((25U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Spdif0Div = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((22U)) << 8U) | (((((0x1C00000U)) >> ((22U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((12U)) << 8U) | (((((0x7000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Flexio1Div = ((((uint32_t)(&((CCM_Type *)0U)->CDCDR)) & 0xFFU) | (((9U)) << 8U) | (((((0xE00U)) >> ((9U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_Lpi2cDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((19U)) << 8U) | (((((0x1F80000U)) >> ((19U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
    kCLOCK_Lcdif1PreDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR2)) & 0xFFU) | (((12U)) << 8U) | (((((0x7000U)) >> ((12U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),

    kCLOCK_CsiDiv = ((((uint32_t)(&((CCM_Type *)0U)->CSCDR3)) & 0xFFU) | (((11U)) << 8U) | (((((0x3800U)) >> ((11U))) & 0x1FFFU) << 13U) | (((0x20U)) << 26U)),
} clock_div_t;


enum _clock_pll_bypass_clk_src
{
    kCLOCK_PllBypassClkSrc24M = 0U,
    kCLOCK_PllBypassClkSrcClkPN = 1U,
};


typedef struct _clock_arm_pll_config
{
    uint32_t loopDivider;
} clock_arm_pll_config_t;


typedef struct _clock_usb_pll_config
{
    uint8_t loopDivider;


} clock_usb_pll_config_t;



typedef struct _clock_sys_pll_config
{
    uint8_t loopDivider;


    uint32_t numerator;
    uint32_t denominator;
} clock_sys_pll_config_t;


typedef struct _clock_audio_pll_config
{
    uint8_t loopDivider;
    uint8_t postDivider;
    uint32_t numerator;
    uint32_t denominator;
} clock_audio_pll_config_t;


typedef struct _clock_video_pll_config
{
    uint8_t loopDivider;
    uint8_t postDivider;
    uint32_t numerator;
    uint32_t denominator;
} clock_video_pll_config_t;


typedef struct _clock_enet_pll_config
{
    
# 725 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 725 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput0;
    
# 726 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 726 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput1;
    
# 727 "mcusdk/drivers/fsl_clock.h" 3 4
   _Bool 
# 727 "mcusdk/drivers/fsl_clock.h"
            enableClkOutput2;
    uint8_t loopDivider0;




    uint8_t loopDivider1;




} clock_enet_pll_config_t;


typedef enum _clock_pll
{
    kCLOCK_PllArm = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ARM) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllSys = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_SYS) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllUsb1 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_USB1) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllAudio = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_AUDIO) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllVideo = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_VIDEO) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllEnet0 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((13U))),
    kCLOCK_PllEnet1 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((20U))),
    kCLOCK_PllEnet2 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_ENET) & 0xFFFU) << 16U) | ((21U))),
    kCLOCK_PllUsb2 = ((((uint32_t)(&((CCM_ANALOG_Type *)0U) -> PLL_USB2) & 0xFFFU) << 16U) | ((13U))),
} clock_pll_t;


typedef enum _clock_pfd
{
    kCLOCK_Pfd0 = 0U,
    kCLOCK_Pfd1 = 1U,
    kCLOCK_Pfd2 = 2U,
    kCLOCK_Pfd3 = 3U,
} clock_pfd_t;


typedef enum _clock_usb_src
{
    kCLOCK_Usb480M = 0,
    kCLOCK_UsbSrcUnused = 0xFFFFFFFFU,

} clock_usb_src_t;


typedef enum _clock_usb_phy_src
{
    kCLOCK_Usbphy480M = 0,
} clock_usb_phy_src_t;
# 791 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetMux(clock_mux_t mux, uint32_t value)
{
    uint32_t busyShift;

    busyShift = (((mux) >> 26U) & 0x3FU);
    (*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) = ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) & (~((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU)))))) |
                              (((uint32_t)((value) << (((mux) >> 8U) & 0x1FU))) & ((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU)))));

    
# 799 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 799 "mcusdk/drivers/fsl_clock.h"
                                        ;


    if ((0x20U) != busyShift)
    {

        while (((CCM_Type *)(0x400FC000u))->CDHIPR & (1U << busyShift))
        {
        }
    }
}







static inline uint32_t CLOCK_GetMux(clock_mux_t mux)
{
    return ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((mux) & 0xFFU)))) & ((uint32_t)((((mux) >> 13U) & 0x1FFFU) << ((((mux) >> 8U) & 0x1FU))))) >> (((mux) >> 8U) & 0x1FU);
}







static inline void CLOCK_SetDiv(clock_div_t divider, uint32_t value)
{
    uint32_t busyShift;

    busyShift = (((divider) >> 26U) & 0x3FU);
    (*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) = ((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) & (~((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU)))))) |
                              (((uint32_t)((value) << (((divider) >> 8U) & 0x1FU))) & ((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU)))));

    
# 836 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 836 "mcusdk/drivers/fsl_clock.h"
                                        ;


    if ((0x20U) != busyShift)
    {

        while (((CCM_Type *)(0x400FC000u))->CDHIPR & (1U << busyShift))
        {
        }
    }
}






static inline uint32_t CLOCK_GetDiv(clock_div_t divider)
{
    return (((*((volatile uint32_t *)(((uint32_t)(((CCM_Type *)(0x400FC000u)))) + ((divider) & 0xFFU)))) & ((uint32_t)((((divider) >> 13U) & 0x1FFFU) << ((((divider) >> 8U) & 0x1FU))))) >> (((divider) >> 8U) & 0x1FU));
}







static inline void CLOCK_ControlGate(clock_ip_name_t name, clock_gate_value_t value)
{
    uint32_t index = ((uint32_t)name) >> 8U;
    uint32_t shift = ((uint32_t)name) & 0x1FU;
    volatile uint32_t *reg;

    
# 870 "mcusdk/drivers/fsl_clock.h" 3
   ((void)0)
# 870 "mcusdk/drivers/fsl_clock.h"
                      ;

    reg = ((volatile uint32_t *)&((CCM_Type *)(0x400FC000u))->CCGR0) + index;
    *reg = ((*reg) & ~(3U << shift)) | (((uint32_t)value) << shift);
}






static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNeededRunWait);
}






static inline void CLOCK_DisableClock(clock_ip_name_t name)
{
    CLOCK_ControlGate(name, kCLOCK_ClockNotNeeded);
}






static inline void CLOCK_SetMode(clock_mode_t mode)
{
    ((CCM_Type *)(0x400FC000u))->CLPCR = (((CCM_Type *)(0x400FC000u))->CLPCR & ~(0x3U)) | (((uint32_t)(((uint32_t)((uint32_t)mode)) << (0U))) & (0x3U));
}
# 915 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetPllBypass(CCM_ANALOG_Type * base, clock_pll_t pll, 
# 915 "mcusdk/drivers/fsl_clock.h" 3 4
                                                                              _Bool 
# 915 "mcusdk/drivers/fsl_clock.h"
                                                                                   bypass)
{
    if (bypass)
    {
        (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 4U))) |= 1U << (16U);
    }
    else
    {
        (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 8U))) |= 1U << (16U);
    }
}
# 936 "mcusdk/drivers/fsl_clock.h"
static inline 
# 936 "mcusdk/drivers/fsl_clock.h" 3 4
             _Bool 
# 936 "mcusdk/drivers/fsl_clock.h"
                  CLOCK_IsPllBypassed(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return (
# 938 "mcusdk/drivers/fsl_clock.h" 3 4
           _Bool
# 938 "mcusdk/drivers/fsl_clock.h"
               )((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (1U << (16U)));
}
# 950 "mcusdk/drivers/fsl_clock.h"
static inline 
# 950 "mcusdk/drivers/fsl_clock.h" 3 4
             _Bool 
# 950 "mcusdk/drivers/fsl_clock.h"
                  CLOCK_IsPllEnabled(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return (
# 952 "mcusdk/drivers/fsl_clock.h" 3 4
           _Bool
# 952 "mcusdk/drivers/fsl_clock.h"
               )((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (1U << (((uint32_t)pll) & 0x1FU)));
}
# 963 "mcusdk/drivers/fsl_clock.h"
static inline void CLOCK_SetPllBypassRefClkSrc(CCM_ANALOG_Type * base, clock_pll_t pll, uint32_t src)
{
    (*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) |= ((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (~(0xC000U))) | src;
}
# 978 "mcusdk/drivers/fsl_clock.h"
static inline uint32_t CLOCK_GetOscFreq(void)
{
    return (((XTALOSC24M_Type *)(0x400D8000u))->LOWPWR_CTRL & (0x10U)) ? 24000000UL : g_xtalFreq;
}
# 990 "mcusdk/drivers/fsl_clock.h"
static inline uint32_t CLOCK_GetPllBypassRefClk(CCM_ANALOG_Type * base, clock_pll_t pll)
{
    return ((((*((volatile uint32_t *)((uint32_t)base + (((uint32_t)pll >> 16U) & 0xFFFU) + 0U))) & (0xC000U)) >> (14U)) == kCLOCK_PllBypassClkSrc24M) ?
    CLOCK_GetOscFreq() : 0U;
}
# 1005 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetFreq(clock_name_t name);






static inline uint32_t CLOCK_GetCpuClkFreq(void)
{
    return CLOCK_GetFreq(kCLOCK_CpuClk);
}
# 1036 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitExternalClk(
# 1036 "mcusdk/drivers/fsl_clock.h" 3 4
                          _Bool 
# 1036 "mcusdk/drivers/fsl_clock.h"
                               bypassXtalOsc);
# 1046 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitExternalClk(void);
# 1055 "mcusdk/drivers/fsl_clock.h"
void CLOCK_SwitchOsc(clock_osc_t osc);






static inline uint32_t CLOCK_GetRtcFreq(void)
{
    return 32768U;
}






static inline void CLOCK_SetXtalFreq(uint32_t freq)
{
    g_xtalFreq = freq;
}






static inline void CLOCK_SetRtcXtalFreq(uint32_t freq)
{
    g_rtcXtalFreq = freq;
}





void CLOCK_InitRcOsc24M(void);




void CLOCK_DeinitRcOsc24M(void);
# 1111 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitArmPll(const clock_arm_pll_config_t *config);




void CLOCK_DeinitArmPll(void);
# 1125 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitSysPll(const clock_sys_pll_config_t *config);




void CLOCK_DeinitSysPll(void);
# 1139 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb1Pll(const clock_usb_pll_config_t *config);




void CLOCK_DeinitUsb1Pll(void);
# 1153 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb2Pll(const clock_usb_pll_config_t *config);




void CLOCK_DeinitUsb2Pll(void);
# 1167 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitAudioPll(const clock_audio_pll_config_t *config);




void CLOCK_DeinitAudioPll(void);
# 1181 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitVideoPll(const clock_video_pll_config_t *config);




void CLOCK_DeinitVideoPll(void);
# 1195 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitEnetPll(const clock_enet_pll_config_t *config);






void CLOCK_DeinitEnetPll(void);
# 1212 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetPllFreq(clock_pll_t pll);
# 1224 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitSysPfd(clock_pfd_t pfd, uint8_t pfdFrac);
# 1233 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitSysPfd(clock_pfd_t pfd);
# 1245 "mcusdk/drivers/fsl_clock.h"
void CLOCK_InitUsb1Pfd(clock_pfd_t pfd, uint8_t pfdFrac);
# 1254 "mcusdk/drivers/fsl_clock.h"
void CLOCK_DeinitUsb1Pfd(clock_pfd_t pfd);
# 1264 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetSysPfdFreq(clock_pfd_t pfd);
# 1274 "mcusdk/drivers/fsl_clock.h"
uint32_t CLOCK_GetUsb1PfdFreq(clock_pfd_t pfd);
# 1287 "mcusdk/drivers/fsl_clock.h"

# 1287 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1287 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs0Clock(clock_usb_src_t src, uint32_t freq);
# 1299 "mcusdk/drivers/fsl_clock.h"

# 1299 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1299 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs0PhyPllClock(clock_usb_phy_src_t src, uint32_t freq);





void CLOCK_DisableUsbhs0PhyPllClock(void);
# 1318 "mcusdk/drivers/fsl_clock.h"

# 1318 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1318 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs1Clock(clock_usb_src_t src, uint32_t freq);
# 1330 "mcusdk/drivers/fsl_clock.h"

# 1330 "mcusdk/drivers/fsl_clock.h" 3 4
_Bool 
# 1330 "mcusdk/drivers/fsl_clock.h"
    CLOCK_EnableUsbhs1PhyPllClock(clock_usb_phy_src_t src, uint32_t freq);





void CLOCK_DisableUsbhs1PhyPllClock(void);
# 173 "mcusdk/drivers/fsl_common.h" 2
# 364 "mcusdk/drivers/fsl_common.h"
    static inline status_t EnableIRQ(IRQn_Type interrupt)
    {
        if (NotAvail_IRQn == interrupt)
        {
            return kStatus_Fail;
        }
# 381 "mcusdk/drivers/fsl_common.h"
        __NVIC_EnableIRQ(interrupt);

        return kStatus_Success;
    }
# 402 "mcusdk/drivers/fsl_common.h"
    static inline status_t DisableIRQ(IRQn_Type interrupt)
    {
        if (NotAvail_IRQn == interrupt)
        {
            return kStatus_Fail;
        }
# 419 "mcusdk/drivers/fsl_common.h"
    __NVIC_DisableIRQ(interrupt);

        return kStatus_Success;
    }
# 432 "mcusdk/drivers/fsl_common.h"
    static inline uint32_t DisableGlobalIRQ(void)
    {







    uint32_t regPrimask = __get_PRIMASK();

    __disable_irq();

    return regPrimask;

    }
# 459 "mcusdk/drivers/fsl_common.h"
    static inline void EnableGlobalIRQ(uint32_t primask)
    {



    __set_PRIMASK(primask);

    }
# 520 "mcusdk/drivers/fsl_common.h"
    void *SDK_Malloc(size_t size, size_t alignbytes);






    void SDK_Free(void *ptr);
# 39 "./mpconfigport.h" 2
# 179 "./mpconfigport.h"
extern const struct _mp_obj_module_t machine_module;
extern const struct _mp_obj_module_t pyb_module;
extern const struct _mp_obj_module_t mcu_module;
extern const struct _mp_obj_module_t mp_module_ubinascii;
extern const struct _mp_obj_module_t mp_module_ure;
extern const struct _mp_obj_module_t mp_module_uzlib;
extern const struct _mp_obj_module_t mp_module_ujson;
extern const struct _mp_obj_module_t mp_module_uheapq;
extern const struct _mp_obj_module_t mp_module_uhashlib;
extern const struct _mp_obj_module_t mp_module_uos;
extern const struct _mp_obj_module_t mp_module_utime;
extern const struct _mp_obj_module_t mp_module_usocket;
extern const struct _mp_obj_module_t mp_module_network;
extern const struct _mp_obj_module_t time_module;
extern const struct _mp_obj_module_t lcd_module;

extern const struct _mp_obj_module_t sensor_module;
extern const struct _mp_obj_module_t image_module;
extern const struct _mp_obj_module_t mjpeg_module;
extern const struct _mp_obj_module_t nn_module;
extern const struct _mp_obj_module_t gif_module;
# 330 "./mpconfigport.h"
typedef int mp_int_t;
typedef unsigned int mp_uint_t;
typedef long mp_off_t;
# 345 "./mpconfigport.h"
static inline void enable_irq(mp_uint_t state) {
    __set_PRIMASK(state);
}

static inline mp_uint_t disable_irq(void) {
    mp_uint_t state = __get_PRIMASK();
    __disable_irq();
    return state;
}
# 372 "./mpconfigport.h"
extern void HAL_WFI(void);
# 46 "../../py/mpconfig.h" 2
# 554 "../../py/mpconfig.h"
typedef float mp_float_t;
# 14 "./omv/py/mp.h" 2
# 1 "../../py/misc.h" 1
# 35 "../../py/misc.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 36 "../../py/misc.h" 2

typedef unsigned char byte;
typedef unsigned int uint;
# 82 "../../py/misc.h"
void *m_malloc(size_t num_bytes);
void *m_malloc_maybe(size_t num_bytes);
void *m_malloc_with_finaliser(size_t num_bytes);
void *m_malloc0(size_t num_bytes);





void *m_realloc(void *ptr, size_t new_num_bytes);
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, 
# 92 "../../py/misc.h" 3 4
                                                      _Bool 
# 92 "../../py/misc.h"
                                                           allow_move);
void m_free(void *ptr);




__attribute__((noreturn)) void m_malloc_fail(size_t num_bytes);
# 119 "../../py/misc.h"
typedef uint32_t unichar;






unichar utf8_get_char(const byte *s);
const byte *utf8_next_char(const byte *s);


# 129 "../../py/misc.h" 3 4
_Bool 
# 129 "../../py/misc.h"
    unichar_isspace(unichar c);

# 130 "../../py/misc.h" 3 4
_Bool 
# 130 "../../py/misc.h"
    unichar_isalpha(unichar c);

# 131 "../../py/misc.h" 3 4
_Bool 
# 131 "../../py/misc.h"
    unichar_isprint(unichar c);

# 132 "../../py/misc.h" 3 4
_Bool 
# 132 "../../py/misc.h"
    unichar_isdigit(unichar c);

# 133 "../../py/misc.h" 3 4
_Bool 
# 133 "../../py/misc.h"
    unichar_isxdigit(unichar c);

# 134 "../../py/misc.h" 3 4
_Bool 
# 134 "../../py/misc.h"
    unichar_isident(unichar c);

# 135 "../../py/misc.h" 3 4
_Bool 
# 135 "../../py/misc.h"
    unichar_isupper(unichar c);

# 136 "../../py/misc.h" 3 4
_Bool 
# 136 "../../py/misc.h"
    unichar_islower(unichar c);
unichar unichar_tolower(unichar c);
unichar unichar_toupper(unichar c);
mp_uint_t unichar_xdigit_value(unichar c);
mp_uint_t unichar_charlen(const char *str, mp_uint_t len);





typedef struct _vstr_t {
    size_t alloc;
    size_t len;
    char *buf;
    
# 150 "../../py/misc.h" 3 4
   _Bool 
# 150 "../../py/misc.h"
        fixed_buf : 1;
} vstr_t;




void vstr_init(vstr_t *vstr, size_t alloc);
void vstr_init_len(vstr_t *vstr, size_t len);
void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf);
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
void vstr_hint_size(vstr_t *vstr, size_t size);
char *vstr_extend(vstr_t *vstr, size_t size);
char *vstr_add_len(vstr_t *vstr, size_t len);
char *vstr_null_terminated_str(vstr_t *vstr);
void vstr_add_byte(vstr_t *vstr, byte v);
void vstr_add_char(vstr_t *vstr, unichar chr);
void vstr_add_str(vstr_t *vstr, const char *str);
void vstr_add_strn(vstr_t *vstr, const char *str, size_t len);
void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b);
void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr);
void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_tail_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut);
void vstr_printf(vstr_t *vstr, const char *fmt, ...);
# 199 "../../py/misc.h"
int DEBUG_printf(const char *fmt, ...);

extern mp_uint_t mp_verbose_flag;






static inline mp_uint_t count_lead_ones(byte val) {
    mp_uint_t c = 0;
    for (byte mask = 0x80; val & mask; mask >>= 1) {
        c++;
    }
    return c;
}
# 15 "./omv/py/mp.h" 2
# 1 "./systick.h" 1
# 27 "./systick.h"
void sys_tick_wait_at_least(uint32_t stc, uint32_t delay_ms);

# 28 "./systick.h" 3 4
_Bool 
# 28 "./systick.h"
    sys_tick_has_passed(uint32_t stc, uint32_t delay_ms);
void systick_sleep(volatile uint32_t ms);
uint32_t systick_current_millis(void);
# 16 "./omv/py/mp.h" 2
# 1 "./pendsv.h" 1
# 27 "./pendsv.h"
void pendsv_init(void);
void pendsv_kbd_intr(void);






void pendsv_isr_handler(void) __attribute__((naked));


void pendsv_nlr_jump(void *o);
void pendsv_nlr_jump_hard(void *o);
# 17 "./omv/py/mp.h" 2
# 1 "../../py/qstr.h" 1
# 29 "../../py/qstr.h"
# 1 "../../py/mpconfig.h" 1
# 30 "../../py/qstr.h" 2
# 1 "../../py/misc.h" 1
# 31 "../../py/qstr.h" 2
# 39 "../../py/qstr.h"
enum {





    MP_QSTRnumber_of,
};

typedef size_t qstr;

typedef struct _qstr_pool_t {
    struct _qstr_pool_t *prev;
    size_t total_prev_len;
    size_t alloc;
    size_t len;
    const byte *qstrs[];
} qstr_pool_t;



void qstr_init(void);

mp_uint_t qstr_compute_hash(const byte *data, size_t len);
qstr qstr_find_strn(const char *str, size_t str_len);

qstr qstr_from_str(const char *str);
qstr qstr_from_strn(const char *str, size_t len);

byte *qstr_build_start(size_t len, byte **q_ptr);
qstr qstr_build_end(byte *q_ptr);

mp_uint_t qstr_hash(qstr q);
const char *qstr_str(qstr q);
size_t qstr_len(qstr q);
const byte *qstr_data(qstr q, size_t *len);

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes);
void qstr_dump_data(void);
# 18 "./omv/py/mp.h" 2

# 1 "../../py/nlr.h" 1
# 32 "../../py/nlr.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 34 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/syslimits.h" 1 3 4






# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 168 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 3 4
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/limits.h" 1 3 4
# 169 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 2 3 4
# 8 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/syslimits.h" 2 3 4
# 35 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 2 3 4
# 33 "../../py/nlr.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 1 3
# 10 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 3
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 1 3


# 365 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 3

# 365 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/setjmp.h" 3
typedef int jmp_buf[23];




# 11 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/setjmp.h" 2 3




void longjmp (jmp_buf __jmpb, int __retval)
   __attribute__ ((__noreturn__));



int setjmp (jmp_buf __jmpb);


# 34 "../../py/nlr.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 1 3
# 39 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/assert.h" 3
void __assert (const char *, int, const char *) __attribute__ ((__noreturn__))
                                 ;
void __assert_func (const char *, int, const char *, const char *) __attribute__ ((__noreturn__))
                                 ;
# 35 "../../py/nlr.h" 2




# 38 "../../py/nlr.h"
typedef struct _nlr_buf_t nlr_buf_t;
struct _nlr_buf_t {

    nlr_buf_t *prev;
    void *ret_val;
# 53 "../../py/nlr.h"
    void *regs[10];
# 65 "../../py/nlr.h"
};
# 77 "../../py/nlr.h"
unsigned int nlr_push(nlr_buf_t *);
void nlr_pop(void);
__attribute__((noreturn)) void nlr_jump(void *val);





__attribute__((noreturn)) void nlr_jump_fail(void *val);






extern void fb_alloc_free_till_mark();
# 20 "./omv/py/mp.h" 2
# 1 "../../py/lexer.h" 1
# 32 "../../py/lexer.h"
# 1 "../../py/qstr.h" 1
# 33 "../../py/lexer.h" 2
# 1 "../../py/reader.h" 1
# 29 "../../py/reader.h"
# 1 "../../py/obj.h" 1
# 32 "../../py/obj.h"
# 1 "../../py/mpprint.h" 1
# 48 "../../py/mpprint.h"
typedef void (*mp_print_strn_t)(void *data, const char *str, size_t len);

typedef struct _mp_print_t {
    void *data;
    mp_print_strn_t print_strn;
} mp_print_t;



extern const mp_print_t mp_plat_print;


extern const mp_print_t mp_sys_stdout_print;


int mp_print_str(const mp_print_t *print, const char *str);
int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width);

int mp_print_float(const mp_print_t *print, mp_float_t f, char fmt, int flags, char fill, int width, int prec);


int mp_printf(const mp_print_t *print, const char *fmt, ...);
# 33 "../../py/obj.h" 2
# 1 "../../py/runtime0.h" 1
# 45 "../../py/runtime0.h"
typedef enum {


    MP_UNARY_OP_POSITIVE,
    MP_UNARY_OP_NEGATIVE,
    MP_UNARY_OP_INVERT,
    MP_UNARY_OP_NOT,


    MP_UNARY_OP_NUM_BYTECODE,

    MP_UNARY_OP_BOOL = MP_UNARY_OP_NUM_BYTECODE,
    MP_UNARY_OP_LEN,
    MP_UNARY_OP_HASH,
    MP_UNARY_OP_ABS,
    MP_UNARY_OP_SIZEOF,

    MP_UNARY_OP_NUM_RUNTIME,
} mp_unary_op_t;



typedef enum {

    MP_BINARY_OP_LESS,
    MP_BINARY_OP_MORE,
    MP_BINARY_OP_EQUAL,
    MP_BINARY_OP_LESS_EQUAL,
    MP_BINARY_OP_MORE_EQUAL,
    MP_BINARY_OP_NOT_EQUAL,
    MP_BINARY_OP_IN,
    MP_BINARY_OP_IS,
    MP_BINARY_OP_EXCEPTION_MATCH,


    MP_BINARY_OP_INPLACE_OR,
    MP_BINARY_OP_INPLACE_XOR,
    MP_BINARY_OP_INPLACE_AND,
    MP_BINARY_OP_INPLACE_LSHIFT,
    MP_BINARY_OP_INPLACE_RSHIFT,
    MP_BINARY_OP_INPLACE_ADD,
    MP_BINARY_OP_INPLACE_SUBTRACT,
    MP_BINARY_OP_INPLACE_MULTIPLY,
    MP_BINARY_OP_INPLACE_FLOOR_DIVIDE,
    MP_BINARY_OP_INPLACE_TRUE_DIVIDE,
    MP_BINARY_OP_INPLACE_MODULO,
    MP_BINARY_OP_INPLACE_POWER,


    MP_BINARY_OP_OR,
    MP_BINARY_OP_XOR,
    MP_BINARY_OP_AND,
    MP_BINARY_OP_LSHIFT,
    MP_BINARY_OP_RSHIFT,
    MP_BINARY_OP_ADD,
    MP_BINARY_OP_SUBTRACT,
    MP_BINARY_OP_MULTIPLY,
    MP_BINARY_OP_FLOOR_DIVIDE,
    MP_BINARY_OP_TRUE_DIVIDE,
    MP_BINARY_OP_MODULO,
    MP_BINARY_OP_POWER,



    MP_BINARY_OP_NUM_BYTECODE,
# 128 "../../py/runtime0.h"
    MP_BINARY_OP_DIVMOD

        = MP_BINARY_OP_NUM_BYTECODE

    ,

    MP_BINARY_OP_NUM_RUNTIME,


    MP_BINARY_OP_NOT_IN,
    MP_BINARY_OP_IS_NOT,
} mp_binary_op_t;

typedef enum {
    MP_F_CONVERT_OBJ_TO_NATIVE = 0,
    MP_F_CONVERT_NATIVE_TO_OBJ,
    MP_F_LOAD_NAME,
    MP_F_LOAD_GLOBAL,
    MP_F_LOAD_BUILD_CLASS,
    MP_F_LOAD_ATTR,
    MP_F_LOAD_METHOD,
    MP_F_LOAD_SUPER_METHOD,
    MP_F_STORE_NAME,
    MP_F_STORE_GLOBAL,
    MP_F_STORE_ATTR,
    MP_F_OBJ_SUBSCR,
    MP_F_OBJ_IS_TRUE,
    MP_F_UNARY_OP,
    MP_F_BINARY_OP,
    MP_F_BUILD_TUPLE,
    MP_F_BUILD_LIST,
    MP_F_LIST_APPEND,
    MP_F_BUILD_MAP,
    MP_F_STORE_MAP,

    MP_F_BUILD_SET,
    MP_F_STORE_SET,

    MP_F_MAKE_FUNCTION_FROM_RAW_CODE,
    MP_F_NATIVE_CALL_FUNCTION_N_KW,
    MP_F_CALL_METHOD_N_KW,
    MP_F_CALL_METHOD_N_KW_VAR,
    MP_F_NATIVE_GETITER,
    MP_F_NATIVE_ITERNEXT,
    MP_F_NLR_PUSH,
    MP_F_NLR_POP,
    MP_F_NATIVE_RAISE,
    MP_F_IMPORT_NAME,
    MP_F_IMPORT_FROM,
    MP_F_IMPORT_ALL,

    MP_F_NEW_SLICE,

    MP_F_UNPACK_SEQUENCE,
    MP_F_UNPACK_EX,
    MP_F_DELETE_NAME,
    MP_F_DELETE_GLOBAL,
    MP_F_NEW_CELL,
    MP_F_MAKE_CLOSURE_FROM_RAW_CODE,
    MP_F_SETUP_CODE_STATE,
    MP_F_SMALL_INT_FLOOR_DIVIDE,
    MP_F_SMALL_INT_MODULO,
    MP_F_NUMBER_OF,
} mp_fun_kind_t;

extern void *const mp_fun_table[MP_F_NUMBER_OF];
# 34 "../../py/obj.h" 2
# 42 "../../py/obj.h"
typedef void *mp_obj_t;
typedef const void *mp_const_obj_t;




typedef struct _mp_obj_type_t mp_obj_type_t;



struct _mp_obj_base_t {
    const mp_obj_type_t *type __attribute__((aligned(4)));
};
typedef struct _mp_obj_base_t mp_obj_base_t;
# 84 "../../py/obj.h"
 static inline 
# 84 "../../py/obj.h" 3 4
              _Bool 
# 84 "../../py/obj.h"
                   MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 1) != 0); }



 static inline 
# 89 "../../py/obj.h" 3 4
              _Bool 
# 89 "../../py/obj.h"
                   MP_OBJ_IS_QSTR(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 3) == 2); }






 extern const struct _mp_obj_float_t mp_const_float_e_obj;
 extern const struct _mp_obj_float_t mp_const_float_pi_obj;


 mp_float_t mp_obj_float_get(mp_obj_t self_in);
 mp_obj_t mp_obj_new_float(mp_float_t value);


 static inline 
# 105 "../../py/obj.h" 3 4
              _Bool 
# 105 "../../py/obj.h"
                   MP_OBJ_IS_OBJ(mp_const_obj_t o)
     { return ((((mp_int_t)(o)) & 3) == 0); }
# 239 "../../py/obj.h"
typedef mp_const_obj_t mp_rom_obj_t;
# 265 "../../py/obj.h"
extern const mp_obj_type_t mp_type_int;
extern const mp_obj_type_t mp_type_bool;
static inline 
# 267 "../../py/obj.h" 3 4
             _Bool 
# 267 "../../py/obj.h"
                  mp_obj_is_integer(mp_const_obj_t o) {
 return (MP_OBJ_IS_SMALL_INT(o) || (MP_OBJ_IS_OBJ(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_int)))) || (MP_OBJ_IS_OBJ(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_bool)));
}
# 343 "../../py/obj.h"
typedef struct _mp_map_elem_t {
    mp_obj_t key;
    mp_obj_t value;
} mp_map_elem_t;

typedef struct _mp_rom_map_elem_t {
    mp_rom_obj_t key;
    mp_rom_obj_t value;
} mp_rom_map_elem_t;






typedef struct _mp_map_t {
    size_t all_keys_are_qstrs : 1;
    size_t is_fixed : 1;
    size_t is_ordered : 1;
    size_t used : (8 * sizeof(size_t) - 3);
    size_t alloc;
    mp_map_elem_t *table;
} mp_map_t;


typedef enum _mp_map_lookup_kind_t {
    MP_MAP_LOOKUP = 0,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND = 1,
    MP_MAP_LOOKUP_REMOVE_IF_FOUND = 2,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3,
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline 
# 377 "../../py/obj.h" 3 4
             _Bool 
# 377 "../../py/obj.h"
                  MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != (((mp_obj_t)(void*)0)) && (map)->table[pos].key != (((mp_obj_t)(void*)4))); }

void mp_map_init(mp_map_t *map, size_t n);
void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table);
mp_map_t *mp_map_new(size_t n);
void mp_map_deinit(mp_map_t *map);
void mp_map_free(mp_map_t *map);
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
void mp_map_clear(mp_map_t *map);
void mp_map_dump(mp_map_t *map);



typedef struct _mp_set_t {
    size_t alloc;
    size_t used;
    mp_obj_t *table;
} mp_set_t;

static inline 
# 396 "../../py/obj.h" 3 4
             _Bool 
# 396 "../../py/obj.h"
                  MP_SET_SLOT_IS_FILLED(const mp_set_t *set, size_t pos) { return ((set)->table[pos] != (((mp_obj_t)(void*)0)) && (set)->table[pos] != (((mp_obj_t)(void*)4))); }

void mp_set_init(mp_set_t *set, size_t n);
mp_obj_t mp_set_lookup(mp_set_t *set, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
mp_obj_t mp_set_remove_first(mp_set_t *set);
void mp_set_clear(mp_set_t *set);



typedef mp_obj_t (*mp_fun_0_t)(void);
typedef mp_obj_t (*mp_fun_1_t)(mp_obj_t);
typedef mp_obj_t (*mp_fun_2_t)(mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_3_t)(mp_obj_t, mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_var_t)(size_t n, const mp_obj_t *);


typedef mp_obj_t (*mp_fun_kw_t)(size_t n, const mp_obj_t *, mp_map_t *);

typedef enum {
    PRINT_STR = 0,
    PRINT_REPR = 1,
    PRINT_EXC = 2,
    PRINT_JSON = 3,
    PRINT_RAW = 4,
    PRINT_EXC_SUBCLASS = 0x80,
} mp_print_kind_t;

typedef struct _mp_obj_iter_buf_t {
    mp_obj_base_t base;
    mp_obj_t buf[3];
} mp_obj_iter_buf_t;





typedef void (*mp_print_fun_t)(const mp_print_t *print, mp_obj_t o, mp_print_kind_t kind);
typedef mp_obj_t (*mp_make_new_fun_t)(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_call_fun_t)(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_unary_op_fun_t)(mp_unary_op_t op, mp_obj_t);
typedef mp_obj_t (*mp_binary_op_fun_t)(mp_binary_op_t op, mp_obj_t, mp_obj_t);
typedef void (*mp_attr_fun_t)(mp_obj_t self_in, qstr attr, mp_obj_t *dest);
typedef mp_obj_t (*mp_subscr_fun_t)(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
typedef mp_obj_t (*mp_getiter_fun_t)(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_buffer_info_t {





    void *buf;
    size_t len;
    int typecode;




} mp_buffer_info_t;



typedef struct _mp_buffer_p_t {
    mp_int_t (*get_buffer)(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
} mp_buffer_p_t;

# 462 "../../py/obj.h" 3 4
_Bool 
# 462 "../../py/obj.h"
    mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);


typedef struct _mp_stream_p_t {


    mp_uint_t (*read)(mp_obj_t obj, void *buf, mp_uint_t size, int *errcode);
    mp_uint_t (*write)(mp_obj_t obj, const void *buf, mp_uint_t size, int *errcode);
    mp_uint_t (*ioctl)(mp_obj_t obj, mp_uint_t request, uintptr_t arg, int *errcode);
    mp_uint_t is_text : 1;
} mp_stream_p_t;

struct _mp_obj_type_t {

    mp_obj_base_t base;


    qstr name;


    mp_print_fun_t print;


    mp_make_new_fun_t make_new;


    mp_call_fun_t call;



    mp_unary_op_fun_t unary_op;
    mp_binary_op_fun_t binary_op;
# 507 "../../py/obj.h"
    mp_attr_fun_t attr;






    mp_subscr_fun_t subscr;




    mp_getiter_fun_t getiter;



    mp_fun_1_t iternext;


    mp_buffer_p_t buffer_p;


    const void *protocol;





    const void *parent;


    struct _mp_obj_dict_t *locals_dict;
};


extern const mp_obj_type_t mp_type_type;
extern const mp_obj_type_t mp_type_object;
extern const mp_obj_type_t mp_type_NoneType;
extern const mp_obj_type_t mp_type_bool;
extern const mp_obj_type_t mp_type_int;
extern const mp_obj_type_t mp_type_str;
extern const mp_obj_type_t mp_type_bytes;
extern const mp_obj_type_t mp_type_bytearray;
extern const mp_obj_type_t mp_type_memoryview;
extern const mp_obj_type_t mp_type_float;
extern const mp_obj_type_t mp_type_complex;
extern const mp_obj_type_t mp_type_tuple;
extern const mp_obj_type_t mp_type_list;
extern const mp_obj_type_t mp_type_map;
extern const mp_obj_type_t mp_type_enumerate;
extern const mp_obj_type_t mp_type_filter;
extern const mp_obj_type_t mp_type_dict;
extern const mp_obj_type_t mp_type_ordereddict;
extern const mp_obj_type_t mp_type_range;
extern const mp_obj_type_t mp_type_set;
extern const mp_obj_type_t mp_type_frozenset;
extern const mp_obj_type_t mp_type_slice;
extern const mp_obj_type_t mp_type_zip;
extern const mp_obj_type_t mp_type_array;
extern const mp_obj_type_t mp_type_super;
extern const mp_obj_type_t mp_type_gen_instance;
extern const mp_obj_type_t mp_type_fun_builtin_0;
extern const mp_obj_type_t mp_type_fun_builtin_1;
extern const mp_obj_type_t mp_type_fun_builtin_2;
extern const mp_obj_type_t mp_type_fun_builtin_3;
extern const mp_obj_type_t mp_type_fun_builtin_var;
extern const mp_obj_type_t mp_type_fun_bc;
extern const mp_obj_type_t mp_type_module;
extern const mp_obj_type_t mp_type_staticmethod;
extern const mp_obj_type_t mp_type_classmethod;
extern const mp_obj_type_t mp_type_property;
extern const mp_obj_type_t mp_type_stringio;
extern const mp_obj_type_t mp_type_bytesio;
extern const mp_obj_type_t mp_type_reversed;
extern const mp_obj_type_t mp_type_polymorph_iter;


extern const mp_obj_type_t mp_type_BaseException;
extern const mp_obj_type_t mp_type_ArithmeticError;
extern const mp_obj_type_t mp_type_AssertionError;
extern const mp_obj_type_t mp_type_AttributeError;
extern const mp_obj_type_t mp_type_EOFError;
extern const mp_obj_type_t mp_type_Exception;
extern const mp_obj_type_t mp_type_GeneratorExit;
extern const mp_obj_type_t mp_type_ImportError;
extern const mp_obj_type_t mp_type_IndentationError;
extern const mp_obj_type_t mp_type_IndexError;
extern const mp_obj_type_t mp_type_KeyboardInterrupt;
extern const mp_obj_type_t mp_type_KeyError;
extern const mp_obj_type_t mp_type_LookupError;
extern const mp_obj_type_t mp_type_MemoryError;
extern const mp_obj_type_t mp_type_NameError;
extern const mp_obj_type_t mp_type_NotImplementedError;
extern const mp_obj_type_t mp_type_OSError;
extern const mp_obj_type_t mp_type_TimeoutError;
extern const mp_obj_type_t mp_type_OverflowError;
extern const mp_obj_type_t mp_type_RuntimeError;
extern const mp_obj_type_t mp_type_StopAsyncIteration;
extern const mp_obj_type_t mp_type_StopIteration;
extern const mp_obj_type_t mp_type_SyntaxError;
extern const mp_obj_type_t mp_type_SystemExit;
extern const mp_obj_type_t mp_type_TypeError;
extern const mp_obj_type_t mp_type_UnicodeError;
extern const mp_obj_type_t mp_type_ValueError;
extern const mp_obj_type_t mp_type_ViperTypeError;
extern const mp_obj_type_t mp_type_ZeroDivisionError;
# 622 "../../py/obj.h"
extern const struct _mp_obj_none_t mp_const_none_obj;
extern const struct _mp_obj_bool_t mp_const_false_obj;
extern const struct _mp_obj_bool_t mp_const_true_obj;
extern const struct _mp_obj_str_t mp_const_empty_bytes_obj;
extern const struct _mp_obj_tuple_t mp_const_empty_tuple_obj;
extern const struct _mp_obj_singleton_t mp_const_ellipsis_obj;
extern const struct _mp_obj_singleton_t mp_const_notimplemented_obj;
extern const struct _mp_obj_exception_t mp_const_MemoryError_obj;
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;



mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? (((mp_obj_t)&mp_const_true_obj)) : (((mp_obj_t)&mp_const_false_obj)); }
mp_obj_t mp_obj_new_cell(mp_obj_t obj);
mp_obj_t mp_obj_new_int(mp_int_t value);
mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value);
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, 
# 639 "../../py/obj.h" 3 4
                                                                  _Bool 
# 639 "../../py/obj.h"
                                                                       neg, unsigned int base);
mp_obj_t mp_obj_new_int_from_ll(long long val);
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val);
mp_obj_t mp_obj_new_str(const char* data, size_t len, 
# 642 "../../py/obj.h" 3 4
                                                     _Bool 
# 642 "../../py/obj.h"
                                                          make_qstr_if_not_already);
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr);
mp_obj_t mp_obj_new_bytes(const byte* data, size_t len);
mp_obj_t mp_obj_new_bytearray(size_t n, void *items);
mp_obj_t mp_obj_new_bytearray_by_ref(size_t n, void *items);

mp_obj_t mp_obj_new_int_from_float(mp_float_t val);
mp_obj_t mp_obj_new_complex(mp_float_t real, mp_float_t imag);

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type);
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg);
mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg);
mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...);
mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_native(mp_obj_t def_args_in, mp_obj_t def_kw_args, const void *fun_data, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_viper(size_t n_args, void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_fun_asm(size_t n_args, void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun);
mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed, const mp_obj_t *closed);
mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items);
mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items);
mp_obj_t mp_obj_new_dict(size_t n_args);
mp_obj_t mp_obj_new_set(size_t n_args, mp_obj_t *items);
mp_obj_t mp_obj_new_slice(mp_obj_t start, mp_obj_t stop, mp_obj_t step);
mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self);
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_obj_new_module(qstr module_name);
mp_obj_t mp_obj_new_memoryview(byte typecode, size_t nitems, void *items);

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in);
const char *mp_obj_get_type_str(mp_const_obj_t o_in);

# 674 "../../py/obj.h" 3 4
_Bool 
# 674 "../../py/obj.h"
    mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo);
mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type);

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
void mp_obj_print(mp_obj_t o, mp_print_kind_t kind);
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc);


# 681 "../../py/obj.h" 3 4
_Bool 
# 681 "../../py/obj.h"
    mp_obj_is_true(mp_obj_t arg);

# 682 "../../py/obj.h" 3 4
_Bool 
# 682 "../../py/obj.h"
    mp_obj_is_callable(mp_obj_t o_in);

# 683 "../../py/obj.h" 3 4
_Bool 
# 683 "../../py/obj.h"
    mp_obj_equal(mp_obj_t o1, mp_obj_t o2);

mp_int_t mp_obj_get_int(mp_const_obj_t arg);
mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg);

# 687 "../../py/obj.h" 3 4
_Bool 
# 687 "../../py/obj.h"
    mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value);

mp_float_t mp_obj_get_float(mp_obj_t self_in);

# 690 "../../py/obj.h" 3 4
_Bool 
# 690 "../../py/obj.h"
    mp_obj_get_float_maybe(mp_obj_t arg, mp_float_t *value);
void mp_obj_get_complex(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);


void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items);
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items);
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, 
# 696 "../../py/obj.h" 3 4
                                                                          _Bool 
# 696 "../../py/obj.h"
                                                                               is_slice);
mp_obj_t mp_obj_id(mp_obj_t o_in);
mp_obj_t mp_obj_len(mp_obj_t o_in);
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in);
mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t val);
mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in);


mp_obj_t mp_obj_cell_get(mp_obj_t self_in);
void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj);



mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in);

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in);




# 715 "../../py/obj.h" 3 4
_Bool 
# 715 "../../py/obj.h"
    mp_obj_is_exception_type(mp_obj_t self_in);

# 716 "../../py/obj.h" 3 4
_Bool 
# 716 "../../py/obj.h"
    mp_obj_is_exception_instance(mp_obj_t self_in);

# 717 "../../py/obj.h" 3 4
_Bool 
# 717 "../../py/obj.h"
    mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type);
void mp_obj_exception_clear_traceback(mp_obj_t self_in);
void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block);
void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values);
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in);
mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_alloc_emergency_exception_buf(mp_obj_t size_in);
void mp_init_emergency_exception_buf(void);



# 727 "../../py/obj.h" 3 4
_Bool 
# 727 "../../py/obj.h"
    mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2);
qstr mp_obj_str_get_qstr(mp_obj_t self_in);
const char *mp_obj_str_get_str(mp_obj_t self_in);
const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len);
mp_obj_t mp_obj_str_intern(mp_obj_t str);
void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, 
# 732 "../../py/obj.h" 3 4
                                                                                       _Bool 
# 732 "../../py/obj.h"
                                                                                            is_bytes);






static inline mp_int_t mp_float_hash(mp_float_t val) { return (mp_int_t)val; }

mp_obj_t mp_obj_float_binary_op(mp_binary_op_t op, mp_float_t lhs_val, mp_obj_t rhs);


void mp_obj_complex_get(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);
mp_obj_t mp_obj_complex_binary_op(mp_binary_op_t op, mp_float_t lhs_real, mp_float_t lhs_imag, mp_obj_t rhs_in);





void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_tuple_del(mp_obj_t self_in);
mp_int_t mp_obj_tuple_hash(mp_obj_t self_in);


struct _mp_obj_list_t;
void mp_obj_list_init(struct _mp_obj_list_t *o, size_t n);
mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg);
mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value);
void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_list_set_len(mp_obj_t self_in, size_t len);
void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);


typedef struct _mp_obj_dict_t {
    mp_obj_base_t base;
    mp_map_t map;
} mp_obj_dict_t;
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
mp_map_t *mp_obj_dict_get_map(mp_obj_t self_in);


void mp_obj_set_store(mp_obj_t self_in, mp_obj_t item);


void mp_obj_slice_get(mp_obj_t self_in, mp_obj_t *start, mp_obj_t *stop, mp_obj_t *step);



typedef struct _mp_obj_fun_builtin_fixed_t {
    mp_obj_base_t base;
    union {
        mp_fun_0_t _0;
        mp_fun_1_t _1;
        mp_fun_2_t _2;
        mp_fun_3_t _3;
    } fun;
} mp_obj_fun_builtin_fixed_t;


typedef struct _mp_obj_fun_builtin_var_t {
    mp_obj_base_t base;
    
# 798 "../../py/obj.h" 3 4
   _Bool 
# 798 "../../py/obj.h"
        is_kw : 1;
    mp_uint_t n_args_min : 15;
    mp_uint_t n_args_max : 16;
    union {
        mp_fun_var_t var;
        mp_fun_kw_t kw;
    } fun;
} mp_obj_fun_builtin_var_t;

qstr mp_obj_fun_get_name(mp_const_obj_t fun);
qstr mp_obj_code_get_name(const byte *code_info);

mp_obj_t mp_identity(mp_obj_t self);
extern const mp_obj_fun_builtin_fixed_t mp_identity_obj;
mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t self_in);


# 821 "../../py/obj.h" 3 4
_Bool 
# 821 "../../py/obj.h"
    mp_obj_is_package(mp_obj_t module);



typedef struct _mp_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_obj_t fun;
} mp_obj_static_class_method_t;
typedef struct _mp_rom_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_rom_obj_t fun;
} mp_rom_obj_static_class_method_t;


const mp_obj_t *mp_obj_property_get(mp_obj_t self_in);




typedef struct {
    mp_uint_t start;
    mp_uint_t stop;
    mp_int_t step;
} mp_bound_slice_t;

void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest);


# 848 "../../py/obj.h" 3 4
_Bool 
# 848 "../../py/obj.h"
    mp_seq_get_fast_slice_indexes(mp_uint_t len, mp_obj_t slice, mp_bound_slice_t *indexes);




# 852 "../../py/obj.h" 3 4
_Bool 
# 852 "../../py/obj.h"
    mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2);

# 853 "../../py/obj.h" 3 4
_Bool 
# 853 "../../py/obj.h"
    mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2);
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value);
mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes);
# 30 "../../py/reader.h" 2






typedef struct _mp_reader_t {
    void *data;
    mp_uint_t (*readbyte)(void *data);
    void (*close)(void *data);
} mp_reader_t;

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len);
void mp_reader_new_file(mp_reader_t *reader, const char *filename);
void mp_reader_new_file_from_fd(mp_reader_t *reader, int fd, 
# 44 "../../py/reader.h" 3 4
                                                            _Bool 
# 44 "../../py/reader.h"
                                                                 close_fd);
# 34 "../../py/lexer.h" 2







typedef enum _mp_token_kind_t {
    MP_TOKEN_END,

    MP_TOKEN_INVALID,
    MP_TOKEN_DEDENT_MISMATCH,
    MP_TOKEN_LONELY_STRING_OPEN,

    MP_TOKEN_NEWLINE,
    MP_TOKEN_INDENT,
    MP_TOKEN_DEDENT,

    MP_TOKEN_NAME,
    MP_TOKEN_INTEGER,
    MP_TOKEN_FLOAT_OR_IMAG,
    MP_TOKEN_STRING,
    MP_TOKEN_BYTES,

    MP_TOKEN_ELLIPSIS,

    MP_TOKEN_KW_FALSE,
    MP_TOKEN_KW_NONE,
    MP_TOKEN_KW_TRUE,
    MP_TOKEN_KW___DEBUG__,
    MP_TOKEN_KW_AND,
    MP_TOKEN_KW_AS,
    MP_TOKEN_KW_ASSERT,

    MP_TOKEN_KW_ASYNC,
    MP_TOKEN_KW_AWAIT,

    MP_TOKEN_KW_BREAK,
    MP_TOKEN_KW_CLASS,
    MP_TOKEN_KW_CONTINUE,
    MP_TOKEN_KW_DEF,
    MP_TOKEN_KW_DEL,
    MP_TOKEN_KW_ELIF,
    MP_TOKEN_KW_ELSE,
    MP_TOKEN_KW_EXCEPT,
    MP_TOKEN_KW_FINALLY,
    MP_TOKEN_KW_FOR,
    MP_TOKEN_KW_FROM,
    MP_TOKEN_KW_GLOBAL,
    MP_TOKEN_KW_IF,
    MP_TOKEN_KW_IMPORT,
    MP_TOKEN_KW_IN,
    MP_TOKEN_KW_IS,
    MP_TOKEN_KW_LAMBDA,
    MP_TOKEN_KW_NONLOCAL,
    MP_TOKEN_KW_NOT,
    MP_TOKEN_KW_OR,
    MP_TOKEN_KW_PASS,
    MP_TOKEN_KW_RAISE,
    MP_TOKEN_KW_RETURN,
    MP_TOKEN_KW_TRY,
    MP_TOKEN_KW_WHILE,
    MP_TOKEN_KW_WITH,
    MP_TOKEN_KW_YIELD,

    MP_TOKEN_OP_PLUS,
    MP_TOKEN_OP_MINUS,
    MP_TOKEN_OP_STAR,
    MP_TOKEN_OP_DBL_STAR,
    MP_TOKEN_OP_SLASH,
    MP_TOKEN_OP_DBL_SLASH,
    MP_TOKEN_OP_PERCENT,
    MP_TOKEN_OP_LESS,
    MP_TOKEN_OP_DBL_LESS,
    MP_TOKEN_OP_MORE,
    MP_TOKEN_OP_DBL_MORE,
    MP_TOKEN_OP_AMPERSAND,
    MP_TOKEN_OP_PIPE,
    MP_TOKEN_OP_CARET,
    MP_TOKEN_OP_TILDE,
    MP_TOKEN_OP_LESS_EQUAL,
    MP_TOKEN_OP_MORE_EQUAL,
    MP_TOKEN_OP_DBL_EQUAL,
    MP_TOKEN_OP_NOT_EQUAL,

    MP_TOKEN_DEL_PAREN_OPEN,
    MP_TOKEN_DEL_PAREN_CLOSE,
    MP_TOKEN_DEL_BRACKET_OPEN,
    MP_TOKEN_DEL_BRACKET_CLOSE,
    MP_TOKEN_DEL_BRACE_OPEN,
    MP_TOKEN_DEL_BRACE_CLOSE,
    MP_TOKEN_DEL_COMMA,
    MP_TOKEN_DEL_COLON,
    MP_TOKEN_DEL_PERIOD,
    MP_TOKEN_DEL_SEMICOLON,
    MP_TOKEN_DEL_AT,
    MP_TOKEN_DEL_EQUAL,
    MP_TOKEN_DEL_PLUS_EQUAL,
    MP_TOKEN_DEL_MINUS_EQUAL,
    MP_TOKEN_DEL_STAR_EQUAL,
    MP_TOKEN_DEL_SLASH_EQUAL,
    MP_TOKEN_DEL_DBL_SLASH_EQUAL,
    MP_TOKEN_DEL_PERCENT_EQUAL,
    MP_TOKEN_DEL_AMPERSAND_EQUAL,
    MP_TOKEN_DEL_PIPE_EQUAL,
    MP_TOKEN_DEL_CARET_EQUAL,
    MP_TOKEN_DEL_DBL_MORE_EQUAL,
    MP_TOKEN_DEL_DBL_LESS_EQUAL,
    MP_TOKEN_DEL_DBL_STAR_EQUAL,
    MP_TOKEN_DEL_MINUS_MORE,
} mp_token_kind_t;



typedef struct _mp_lexer_t {
    qstr source_name;
    mp_reader_t reader;

    unichar chr0, chr1, chr2;

    size_t line;
    size_t column;

    mp_int_t emit_dent;
    mp_int_t nested_bracket_level;

    size_t alloc_indent_level;
    size_t num_indent_level;
    uint16_t *indent_level;

    size_t tok_line;
    size_t tok_column;
    mp_token_kind_t tok_kind;
    vstr_t vstr;
} mp_lexer_t;

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader);
mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len);

void mp_lexer_free(mp_lexer_t *lex);
void mp_lexer_to_next(mp_lexer_t *lex);







typedef enum {
    MP_IMPORT_STAT_NO_EXIST,
    MP_IMPORT_STAT_DIR,
    MP_IMPORT_STAT_FILE,
} mp_import_stat_t;

mp_import_stat_t mp_vfs_import_stat(const char *path);
mp_lexer_t *mp_lexer_new_from_file(const char *filename);
# 21 "./omv/py/mp.h" 2
# 1 "../../py/parse.h" 1
# 29 "../../py/parse.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 30 "../../py/parse.h" 2




struct _mp_lexer_t;
# 52 "../../py/parse.h"
typedef uintptr_t mp_parse_node_t;

typedef struct _mp_parse_node_struct_t {
    uint32_t source_line;
    uint32_t kind_num_nodes;
    mp_parse_node_t nodes[];
} mp_parse_node_struct_t;
# 79 "../../py/parse.h"
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    return (mp_parse_node_t)((0x1) | ((mp_uint_t)val << 1));
}
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
}

# 85 "../../py/parse.h" 3 4
_Bool 
# 85 "../../py/parse.h"
    mp_parse_node_is_const_false(mp_parse_node_t pn);

# 86 "../../py/parse.h" 3 4
_Bool 
# 86 "../../py/parse.h"
    mp_parse_node_is_const_true(mp_parse_node_t pn);

# 87 "../../py/parse.h" 3 4
_Bool 
# 87 "../../py/parse.h"
    mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o);
int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes);
void mp_parse_node_print(mp_parse_node_t pn, size_t indent);

typedef enum {
    MP_PARSE_SINGLE_INPUT,
    MP_PARSE_FILE_INPUT,
    MP_PARSE_EVAL_INPUT,
} mp_parse_input_kind_t;

typedef struct _mp_parse_t {
    mp_parse_node_t root;
    struct _mp_parse_chunk_t *chunk;
} mp_parse_tree_t;



mp_parse_tree_t mp_parse(struct _mp_lexer_t *lex, mp_parse_input_kind_t input_kind);
void mp_parse_tree_clear(mp_parse_tree_t *tree);
# 22 "./omv/py/mp.h" 2
# 1 "../../py/obj.h" 1
# 23 "./omv/py/mp.h" 2
# 1 "../../py/objtuple.h" 1
# 31 "../../py/objtuple.h"
typedef struct _mp_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_obj_t items[];
} mp_obj_tuple_t;

typedef struct _mp_rom_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_rom_obj_t items[];
} mp_rom_obj_tuple_t;

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in);
mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);
mp_obj_t mp_obj_tuple_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf);

extern const mp_obj_type_t mp_type_attrtuple;
# 59 "../../py/objtuple.h"
void mp_obj_attrtuple_print_helper(const mp_print_t *print, const qstr *fields, mp_obj_tuple_t *o);


mp_obj_t mp_obj_new_attrtuple(const qstr *fields, size_t n, const mp_obj_t *items);
# 24 "./omv/py/mp.h" 2
# 1 "../../py/runtime.h" 1
# 29 "../../py/runtime.h"
# 1 "../../py/mpstate.h" 1
# 32 "../../py/mpstate.h"
# 1 "../../py/mpthread.h" 1
# 33 "../../py/mpstate.h" 2

# 1 "../../py/nlr.h" 1
# 35 "../../py/mpstate.h" 2

# 1 "../../py/objlist.h" 1
# 31 "../../py/objlist.h"
typedef struct _mp_obj_list_t {
    mp_obj_base_t base;
    size_t alloc;
    size_t len;
    mp_obj_t *items;
} mp_obj_list_t;
# 37 "../../py/mpstate.h" 2
# 1 "../../py/objexcept.h" 1
# 30 "../../py/objexcept.h"
# 1 "../../py/objtuple.h" 1
# 31 "../../py/objexcept.h" 2

typedef struct _mp_obj_exception_t {
    mp_obj_base_t base;
    size_t traceback_alloc : (8 * sizeof(size_t) / 2);
    size_t traceback_len : (8 * sizeof(size_t) / 2);
    size_t *traceback_data;
    mp_obj_tuple_t *args;
} mp_obj_exception_t;
# 38 "../../py/mpstate.h" 2
# 58 "../../py/mpstate.h"
typedef struct _mp_sched_item_t {
    mp_obj_t func;
    mp_obj_t arg;
} mp_sched_item_t;


typedef struct _mp_state_mem_t {






    byte *gc_alloc_table_start;
    size_t gc_alloc_table_byte_len;

    byte *gc_finaliser_table_start;

    byte *gc_pool_start;
    byte *gc_pool_end;

    int gc_stack_overflow;
    size_t gc_stack[(64)];
    size_t *gc_sp;
    uint16_t gc_lock_depth;




    uint16_t gc_auto_collect_enabled;


    size_t gc_alloc_amount;
    size_t gc_alloc_threshold;


    size_t gc_last_free_atb_index;
# 104 "../../py/mpstate.h"
} mp_state_mem_t;



typedef struct _mp_state_vm_t {






    qstr_pool_t *last_pool;


    mp_obj_exception_t mp_emergency_exception_obj;
# 127 "../../py/mpstate.h"
    byte *mp_emergency_exception_buf;





    mp_obj_exception_t mp_kbd_exception;



    mp_obj_dict_t mp_loaded_modules_dict;


    volatile mp_obj_t mp_pending_exception;
# 154 "../../py/mpstate.h"
    mp_obj_dict_t dict_main;


    mp_obj_list_t mp_sys_path_obj;
    mp_obj_list_t mp_sys_argv_obj;



    mp_obj_dict_t *mp_module_builtins_override_dict;



    const char *readline_hist[8]; mp_obj_t pyb_hid_report_desc; mp_obj_t pyb_config_main; mp_obj_t omv_ide_irq; mp_obj_t pyb_switch_callback; mp_obj_t pin_class_mapper; mp_obj_t pin_class_map_dict; mp_obj_t pyb_extint_callback[8]; struct _pyb_timer_obj_t *pyb_timer_obj_all[14]; struct _pyb_uart_obj_t *pyb_stdio_uart; struct _pyb_uart_obj_t *pyb_uart_obj_all[(10)]; struct _pyb_can_obj_t *pyb_can_obj_all[2]; mp_obj_list_t mod_network_nic_list; void* pvPortRoots[16];
# 180 "../../py/mpstate.h"
    struct _mp_vfs_mount_t *vfs_cur;
    struct _mp_vfs_mount_t *vfs_mount_table;
# 190 "../../py/mpstate.h"
    byte *qstr_last_chunk;
    size_t qstr_last_alloc;
    size_t qstr_last_used;






    mp_uint_t mp_optimise_value;



    mp_int_t mp_emergency_exception_buf_size;






} mp_state_vm_t;



typedef struct _mp_state_thread_t {
    mp_obj_dict_t *dict_locals;
    mp_obj_dict_t *dict_globals;


    nlr_buf_t *nlr_top;


    char *stack_top;


    size_t stack_limit;

} mp_state_thread_t;





typedef struct _mp_state_ctx_t {
    mp_state_thread_t thread;
    mp_state_vm_t vm;
    mp_state_mem_t mem;
} mp_state_ctx_t;

extern mp_state_ctx_t mp_state_ctx;
# 30 "../../py/runtime.h" 2

typedef enum {
    MP_VM_RETURN_NORMAL,
    MP_VM_RETURN_YIELD,
    MP_VM_RETURN_EXCEPTION,
} mp_vm_return_kind_t;

typedef enum {
    MP_ARG_BOOL = 0x001,
    MP_ARG_INT = 0x002,
    MP_ARG_OBJ = 0x003,
    MP_ARG_KIND_MASK = 0x0ff,
    MP_ARG_REQUIRED = 0x100,
    MP_ARG_KW_ONLY = 0x200,
} mp_arg_flag_t;

typedef union _mp_arg_val_t {
    
# 47 "../../py/runtime.h" 3 4
   _Bool 
# 47 "../../py/runtime.h"
        u_bool;
    mp_int_t u_int;
    mp_obj_t u_obj;
    mp_rom_obj_t u_rom_obj;
} mp_arg_val_t;

typedef struct _mp_arg_t {
    uint16_t qst;
    uint16_t flags;
    mp_arg_val_t defval;
} mp_arg_t;


extern const byte mp_unary_op_method_name[];
extern const byte mp_binary_op_method_name[];

void mp_init(void);
void mp_deinit(void);

void mp_handle_pending(void);
void mp_handle_pending_tail(mp_uint_t atomic_state);
# 77 "../../py/runtime.h"
int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec);

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, 
# 79 "../../py/runtime.h" 3 4
                                                                                       _Bool 
# 79 "../../py/runtime.h"
                                                                                            takes_kw);
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
__attribute__((noreturn)) void mp_arg_error_terse_mismatch(void);
__attribute__((noreturn)) void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return (mp_state_ctx.thread.dict_locals); }
static inline void mp_locals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_locals) = d; }
static inline mp_obj_dict_t *mp_globals_get(void) { return (mp_state_ctx.thread.dict_globals); }
static inline void mp_globals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_globals) = d; }

mp_obj_t mp_load_name(qstr qst);
mp_obj_t mp_load_global(qstr qst);
mp_obj_t mp_load_build_class(void);
void mp_store_name(qstr qst, mp_obj_t obj);
void mp_store_global(qstr qst, mp_obj_t obj);
void mp_delete_name(qstr qst);
void mp_delete_global(qstr qst);

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg);
mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);

mp_obj_t mp_call_function_0(mp_obj_t fun);
mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg);
mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);
mp_obj_t mp_call_function_n_kw(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw_var(
# 106 "../../py/runtime.h" 3 4
                                _Bool 
# 106 "../../py/runtime.h"
                                     have_self, size_t n_args_n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args);

void mp_call_function_1_protected(mp_obj_t fun, mp_obj_t arg);
void mp_call_function_2_protected(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);

typedef struct _mp_call_args_t {
    mp_obj_t fun;
    size_t n_args, n_kw, n_alloc;
    mp_obj_t *args;
} mp_call_args_t;
# 126 "../../py/runtime.h"
void mp_unpack_sequence(mp_obj_t seq, size_t num, mp_obj_t *items);
void mp_unpack_ex(mp_obj_t seq, size_t num, mp_obj_t *items);
mp_obj_t mp_store_map(mp_obj_t map, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_load_attr(mp_obj_t base, qstr attr);
void mp_convert_member_lookup(mp_obj_t obj, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest);
void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_method_maybe(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_super_method(qstr attr, mp_obj_t *dest);
void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t val);

mp_obj_t mp_getiter(mp_obj_t o, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_iternext_allow_raise(mp_obj_t o);
mp_obj_t mp_iternext(mp_obj_t o);
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val);

mp_obj_t mp_make_raise_obj(mp_obj_t o);

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level);
mp_obj_t mp_import_from(mp_obj_t module, qstr name);
void mp_import_all(mp_obj_t module);

__attribute__((noreturn)) void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg);

__attribute__((noreturn)) void mp_raise_ValueError(const char *msg);
__attribute__((noreturn)) void mp_raise_TypeError(const char *msg);
__attribute__((noreturn)) void mp_raise_NotImplementedError(const char *msg);
__attribute__((noreturn)) void mp_raise_OSError(int errno_);
__attribute__((noreturn)) void mp_exc_recursion_depth(void);
# 166 "../../py/runtime.h"
mp_uint_t mp_convert_obj_to_native(mp_obj_t obj, mp_uint_t type);
mp_obj_t mp_convert_native_to_obj(mp_uint_t val, mp_uint_t type);
mp_obj_t mp_native_call_function_n_kw(mp_obj_t fun_in, size_t n_args_kw, const mp_obj_t *args);
void mp_native_raise(mp_obj_t o);
# 25 "./omv/py/mp.h" 2
# 1 "../../py/stream.h" 1
# 30 "../../py/stream.h"
# 1 "../../py/mperrno.h" 1
# 146 "../../py/mperrno.h"
qstr mp_errno_to_str(mp_obj_t errno_val);
# 31 "../../py/stream.h" 2
# 52 "../../py/stream.h"
struct mp_stream_seek_t {



    mp_off_t offset;
    int whence;
};






extern const mp_obj_fun_builtin_var_t mp_stream_read_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_read1_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_readinto_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_unbuffered_readline_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_unbuffered_readlines_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_write_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_write1_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_seek_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_tell_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_flush_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_ioctl_obj;






const mp_stream_p_t *mp_get_stream_raise(mp_obj_t self_in, int flags);
mp_obj_t mp_stream_close(mp_obj_t stream);


mp_obj_t mp_stream_unbuffered_iter(mp_obj_t self);

mp_obj_t mp_stream_write(mp_obj_t self_in, const void *buf, size_t len, byte flags);





mp_uint_t mp_stream_rw(mp_obj_t stream, void *buf, mp_uint_t size, int *errcode, byte flags);



void mp_stream_write_adaptor(void *self, const char *buf, size_t len);
# 26 "./omv/py/mp.h" 2
# 1 "../../py/gc.h" 1
# 34 "../../py/gc.h"
void gc_init(void *start, void *end);



void gc_lock(void);
void gc_unlock(void);

# 40 "../../py/gc.h" 3 4
_Bool 
# 40 "../../py/gc.h"
    gc_is_locked(void);


void gc_collect(void);
void gc_collect_start(void);
void gc_collect_root(void **ptrs, size_t len);
void gc_collect_end(void);

void *gc_alloc(size_t n_bytes, 
# 48 "../../py/gc.h" 3 4
                              _Bool 
# 48 "../../py/gc.h"
                                   has_finaliser);
void gc_free(void *ptr);
size_t gc_nbytes(const void *ptr);
void *gc_realloc(void *ptr, size_t n_bytes, 
# 51 "../../py/gc.h" 3 4
                                           _Bool 
# 51 "../../py/gc.h"
                                                allow_move);

typedef struct _gc_info_t {
    size_t total;
    size_t used;
    size_t free;
    size_t max_free;
    size_t num_1block;
    size_t num_2block;
    size_t max_block;
} gc_info_t;

void gc_info(gc_info_t *info);
void gc_dump_info(void);
void gc_dump_alloc_table(void);
# 27 "./omv/py/mp.h" 2
# 1 "./gccollect.h" 1
# 29 "./gccollect.h"
extern uint32_t _etext;
extern uint32_t _sidata;
extern uint32_t _ram_start;
extern uint32_t _sdata;
extern uint32_t _edata;
extern uint32_t _sbss;
extern uint32_t _ebss;
extern uint32_t _heap_start;
extern uint32_t _heap_end;
extern uint32_t _estack;
extern uint32_t _ram_end;
# 28 "./omv/py/mp.h" 2
# 1 "../../lib/mp-readline/readline.h" 1
# 40 "../../lib/mp-readline/readline.h"
void readline_init0(void);
int readline(vstr_t *line, const char *prompt);
void readline_push_history(const char *line);

void readline_init(vstr_t *line, const char *prompt);
void readline_note_newline(const char *prompt);
int readline_process_char(int c);
# 29 "./omv/py/mp.h" 2
# 1 "./pin.h" 1
# 33 "./pin.h"
# 1 "mcusdk/drivers/fsl_iomuxc.h" 1
# 38 "mcusdk/drivers/fsl_iomuxc.h"
# 1 "mcusdk/drivers/fsl_common.h" 1
# 39 "mcusdk/drivers/fsl_iomuxc.h" 2
# 1059 "mcusdk/drivers/fsl_iomuxc.h"
typedef enum _iomuxc_gpr_mode
{
    kIOMUXC_GPR_GlobalInterruptRequest = (0x1000U),
    kIOMUXC_GPR_ENET1RefClkMode = (0x2000U),
    kIOMUXC_GPR_USBExposureMode = (0x8000U),
    kIOMUXC_GPR_ENET1TxClkOutputDir = (0x20000U),
    kIOMUXC_GPR_SAI1MClkOutputDir = (0x80000U),
    kIOMUXC_GPR_SAI2MClkOutputDir = (0x100000U),
    kIOMUXC_GPR_SAI3MClkOutputDir = (0x200000U),
    kIOMUXC_GPR_ExcMonitorSlavErrResponse = (0x400000U),
    kIOMUXC_GPR_ENETIpgClkOn = (0x800000U),
    kIOMUXC_GPR_AHBClockEnable = (0x80000000U),
} iomuxc_gpr_mode_t;

typedef enum _iomuxc_gpr_saimclk
{
    kIOMUXC_GPR_SAI1MClk1Sel = (0U),
    kIOMUXC_GPR_SAI1MClk2Sel = (3U),
    kIOMUXC_GPR_SAI1MClk3Sel = (6U),
    kIOMUXC_GPR_SAI2MClk3Sel = (8U),
    kIOMUXC_GPR_SAI3MClk3Sel = (10U),
} iomuxc_gpr_saimclk_t;

typedef enum _iomuxc_mqs_pwm_oversample_rate
{
    kIOMUXC_MqsPwmOverSampleRate32 = 0,
    kIOMUXC_MqsPwmOverSampleRate64 = 1
} iomuxc_mqs_pwm_oversample_rate_t;
# 1118 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetPinMux(uint32_t muxRegister,
                                    uint32_t muxMode,
                                    uint32_t inputRegister,
                                    uint32_t inputDaisy,
                                    uint32_t configRegister,
                                    uint32_t inputOnfield)
{
    *((volatile uint32_t *)muxRegister) =
        (((uint32_t)(((uint32_t)(muxMode)) << (0U))) & (0x7U)) | (((uint32_t)(((uint32_t)(inputOnfield)) << (4U))) & (0x10U));

    if (inputRegister)
    {
        *((volatile uint32_t *)inputRegister) = inputDaisy;
    }
}
# 1150 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetPinConfig(uint32_t muxRegister,
                                       uint32_t muxMode,
                                       uint32_t inputRegister,
                                       uint32_t inputDaisy,
                                       uint32_t configRegister,
                                       uint32_t configValue)
{
    if (configRegister)
    {
        *((volatile uint32_t *)configRegister) = configValue;
    }
}
# 1170 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_EnableMode(IOMUXC_GPR_Type *base, uint32_t mode, 
# 1170 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                                          _Bool 
# 1170 "mcusdk/drivers/fsl_iomuxc.h"
                                                                               enable)
{
    uint32_t gpr = base->GPR1 & 0xFFF;

    if (enable)
    {
        base->GPR1 = mode | gpr;
    }
    else
    {
        base->GPR1 &= ~mode;
    }
}
# 1191 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_SetSaiMClkClockSource(IOMUXC_GPR_Type *base, iomuxc_gpr_saimclk_t mclk, uint8_t clkSrc)
{
    uint32_t gpr;

    if (mclk > kIOMUXC_GPR_SAI1MClk2Sel)
    {
        gpr = base->GPR1 & ~((0x3U) << mclk);
        base->GPR1 = ((clkSrc & (0x3U)) << mclk) | gpr;
    }
    else
    {
        gpr = base->GPR1 & ~((0x7U) << mclk);
        base->GPR1 = ((clkSrc & (0x7U)) << mclk) | gpr;
    }
}







static inline void IOMUXC_MQSEnterSoftwareReset(IOMUXC_GPR_Type *base, 
# 1213 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                                      _Bool 
# 1213 "mcusdk/drivers/fsl_iomuxc.h"
                                                                           enable)
{
    if (enable)
    {
        base->GPR2 |= (0x1000000U);
    }
    else
    {
        base->GPR2 &= ~(0x1000000U);
    }
}
# 1232 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_MQSEnable(IOMUXC_GPR_Type *base, 
# 1232 "mcusdk/drivers/fsl_iomuxc.h" 3 4
                                                          _Bool 
# 1232 "mcusdk/drivers/fsl_iomuxc.h"
                                                               enable)
{
    if (enable)
    {
        base->GPR2 |= (0x2000000U);
    }
    else
    {
        base->GPR2 &= ~(0x2000000U);
    }
}
# 1252 "mcusdk/drivers/fsl_iomuxc.h"
static inline void IOMUXC_MQSConfig(IOMUXC_GPR_Type *base, iomuxc_mqs_pwm_oversample_rate_t rate, uint8_t divider)
{
    uint32_t gpr = base->GPR2 & ~((0x4000000U) | (0xFF0000U));

    base->GPR2 = gpr | (((uint32_t)(((uint32_t)(rate)) << (26U))) & (0x4000000U)) | (((uint32_t)(((uint32_t)(divider)) << (16U))) & (0xFF0000U));
}
# 34 "./pin.h" 2
# 1 "mcusdk/drivers/fsl_gpio.h" 1
# 56 "mcusdk/drivers/fsl_gpio.h"
typedef enum _gpio_pin_direction
{
    kGPIO_DigitalInput = 0U,
    kGPIO_DigitalOutput = 1U,
} gpio_pin_direction_t;


typedef enum _gpio_interrupt_mode
{
    kGPIO_NoIntmode = 0U,
    kGPIO_IntLowLevel = 1U,
    kGPIO_IntHighLevel = 2U,
    kGPIO_IntRisingEdge = 3U,
    kGPIO_IntFallingEdge = 4U,
    kGPIO_IntRisingOrFallingEdge = 5U,
} gpio_interrupt_mode_t;


typedef struct _gpio_pin_config
{
    gpio_pin_direction_t direction;
    uint8_t outputLogic;
    gpio_interrupt_mode_t interruptMode;
} gpio_pin_config_t;
# 103 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config);
# 120 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinWrite(GPIO_Type* base, uint32_t pin, uint8_t output);





static inline void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
    GPIO_PinWrite(base, pin, output);
}







static inline void GPIO_PortSet(GPIO_Type* base, uint32_t mask)
{
    base->DR |= mask;
}





static inline void GPIO_SetPinsOutput(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortSet(base, mask);
}







static inline void GPIO_PortClear(GPIO_Type* base, uint32_t mask)
{
    base->DR &= ~mask;
}





static inline void GPIO_ClearPinsOutput(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortClear(base, mask);
}
# 178 "mcusdk/drivers/fsl_gpio.h"
static inline uint32_t GPIO_PinRead(GPIO_Type* base, uint32_t pin)
{
    
# 180 "mcusdk/drivers/fsl_gpio.h" 3
   ((void)0)
# 180 "mcusdk/drivers/fsl_gpio.h"
                   ;

    return (((base->DR) >> pin) & 0x1U);
}





static inline uint32_t GPIO_ReadPinInput(GPIO_Type* base, uint32_t pin)
{
    return GPIO_PinRead(base, pin);
}
# 207 "mcusdk/drivers/fsl_gpio.h"
static inline uint8_t GPIO_PinReadPadStatus(GPIO_Type* base, uint32_t pin)
{
    
# 209 "mcusdk/drivers/fsl_gpio.h" 3
   ((void)0)
# 209 "mcusdk/drivers/fsl_gpio.h"
                   ;

    return (uint8_t)(((base->PSR) >> pin) & 0x1U);
}





static inline uint8_t GPIO_ReadPadStatus(GPIO_Type* base, uint32_t pin)
{
    return GPIO_PinReadPadStatus(base, pin);
}
# 237 "mcusdk/drivers/fsl_gpio.h"
void GPIO_PinSetInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode);





static inline void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
    GPIO_PinSetInterruptConfig(base, pin, pinInterruptMode);
}







static inline void GPIO_PortEnableInterrupts(GPIO_Type* base, uint32_t mask)
{
    base->IMR |= mask;
}







static inline void GPIO_EnableInterrupts(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortEnableInterrupts(base, mask);
}







static inline void GPIO_PortDisableInterrupts(GPIO_Type* base, uint32_t mask)
{
    base->IMR &= ~mask;
}





static inline void GPIO_DisableInterrupts(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortDisableInterrupts(base, mask);
}







static inline uint32_t GPIO_PortGetInterruptFlags(GPIO_Type* base)
{
    return base->ISR;
}







static inline uint32_t GPIO_GetPinsInterruptFlags(GPIO_Type* base)
{
    return GPIO_PortGetInterruptFlags(base);
}
# 319 "mcusdk/drivers/fsl_gpio.h"
static inline void GPIO_PortClearInterruptFlags(GPIO_Type* base, uint32_t mask)
{
    base->ISR = mask;
}
# 331 "mcusdk/drivers/fsl_gpio.h"
static inline void GPIO_ClearPinsInterruptFlags(GPIO_Type* base, uint32_t mask)
{
    GPIO_PortClearInterruptFlags(base, mask);
}
# 35 "./pin.h" 2


# 1 "./pin_defs_mcu.h" 1
# 30 "./pin_defs_mcu.h"
enum {
  PORT_0 = 0,
  PORT_1,
  PORT_2,
  PORT_3,
  PORT_4,
  PORT_5,
  PORT_6,
  PORT_7,
  PORT_8,
  PORT_9,
};





enum {
  AF_FN_GPIO,
  AF_FN_LPUART,
  AF_FN_LPI2C,
  AF_FN_LPSPI,
  AF_FN_SAI,
  AF_FN_I2S = AF_FN_SAI,
  AF_FN_GPT,
  AF_FN_TMR,
  AF_FN_PWM,
  AF_FN_SDMMC,
};

enum {
  AF_PIN_TYPE_GPIO_PIN0,
  AF_PIN_TYPE_GPIO_PIN1,
  AF_PIN_TYPE_GPIO_PIN2,
  AF_PIN_TYPE_GPIO_PIN3,
  AF_PIN_TYPE_GPIO_PIN4,
  AF_PIN_TYPE_GPIO_PIN5,
  AF_PIN_TYPE_GPIO_PIN6,
  AF_PIN_TYPE_GPIO_PIN7,
  AF_PIN_TYPE_GPIO_PIN8,
  AF_PIN_TYPE_GPIO_PIN9,
  AF_PIN_TYPE_GPIO_PIN10,
  AF_PIN_TYPE_GPIO_PIN11,
  AF_PIN_TYPE_GPIO_PIN12,
  AF_PIN_TYPE_GPIO_PIN13,
  AF_PIN_TYPE_GPIO_PIN14,
  AF_PIN_TYPE_GPIO_PIN15,
  AF_PIN_TYPE_GPIO_PIN16,
  AF_PIN_TYPE_GPIO_PIN17,
  AF_PIN_TYPE_GPIO_PIN18,
  AF_PIN_TYPE_GPIO_PIN19,
  AF_PIN_TYPE_GPIO_PIN20,
  AF_PIN_TYPE_GPIO_PIN21,
  AF_PIN_TYPE_GPIO_PIN22,
  AF_PIN_TYPE_GPIO_PIN23,
  AF_PIN_TYPE_GPIO_PIN24,
  AF_PIN_TYPE_GPIO_PIN25,
  AF_PIN_TYPE_GPIO_PIN26,
  AF_PIN_TYPE_GPIO_PIN27,
  AF_PIN_TYPE_GPIO_PIN28,
  AF_PIN_TYPE_GPIO_PIN29,
  AF_PIN_TYPE_GPIO_PIN30,
  AF_PIN_TYPE_GPIO_PIN31,

 AF_PIN_TYPE_TMR_TIMER0 = 0,
 AF_PIN_TYPE_TMR_TIMER1,
 AF_PIN_TYPE_TMR_TIMER2,
 AF_PIN_TYPE_TMR_TIMER3,

   AF_PIN_TYPE_GPT_CLK,
   AF_PIN_TYPE_GPT_CAPTURE1,
   AF_PIN_TYPE_GPT_CAPTURE2,
   AF_PIN_TYPE_GPT_COMPARE1,
   AF_PIN_TYPE_GPT_COMPARE2,
   AF_PIN_TYPE_GPT_COMPARE3,

  AF_PIN_TYPE_LPI2C_SDA = 0,
  AF_PIN_TYPE_LPI2C_SCL,

  AF_PIN_TYPE_LPUART_TX = 0,
  AF_PIN_TYPE_LPUART_RX,
  AF_PIN_TYPE_LPUART_CTS_B,
  AF_PIN_TYPE_LPUART_RTS_B,
  AF_PIN_TYPE_LPUART_CK,

  AF_PIN_TYPE_LPSPI_SDI = 0,
  AF_PIN_TYPE_LPSPI_SDO,
  AF_PIN_TYPE_LPSPI_SCK,
  AF_PIN_TYPE_LPSPI_PCS0,

  AF_PIN_TYPE_PWM_PWMA0 = 0,
  AF_PIN_TYPE_PWM_PWMB0,
  AF_PIN_TYPE_PWM_PWMX0,
  AF_PIN_TYPE_PWM_PWMA1,
  AF_PIN_TYPE_PWM_PWMB1,
  AF_PIN_TYPE_PWM_PWMx1,
  AF_PIN_TYPE_PWM_PWMA2,
  AF_PIN_TYPE_PWM_PWMB2,
  AF_PIN_TYPE_PWM_PWMx2,
  AF_PIN_TYPE_PWM_PWMA3,
  AF_PIN_TYPE_PWM_PWMB3,
  AF_PIN_TYPE_PWM_PWMX3,


  AF_PIN_TYPE_SAI_MCLK = 0,
  AF_PIN_TYPE_SAI_TX_BCLK,
  AF_PIN_TYPE_SAI_TX_SYNC,
  AF_PIN_TYPE_SAI_TX_DATA,
  AF_PIN_TYPE_SAI_TX_DATA0 = AF_PIN_TYPE_SAI_TX_DATA,
  AF_PIN_TYPE_SAI_TX_DATA1,
  AF_PIN_TYPE_SAI_TX_DATA2,
  AF_PIN_TYPE_SAI_TX_DATA3,
  AF_PIN_TYPE_SAI_RX_BCLK,
  AF_PIN_TYPE_SAI_RX_SYNC,
  AF_PIN_TYPE_SAI_RX_DATA,
  AF_PIN_TYPE_SAI_RX_DATA0 = AF_PIN_TYPE_SAI_RX_DATA,
};

enum {
  PIN_ADC1 = (1 << 1),
  PIN_ADC2 = (1 << 2),
  PIN_ADC3 = (1 << 3),
};


typedef union _McuPinCfgReg_t
{
 struct {
 uint32_t b00_1_SRE_isFastSlew:1;
 uint32_t b01_2_res1:2;
 uint32_t b03_3_DSE_driveStrength:3;
 uint32_t b06_2_Speed:2;
 uint32_t b08_3_res2:3;
 uint32_t b11_1_OD_isOD:1;
 uint32_t b12_1_PKE_digiInEn:1;
 uint32_t b13_1_PUE_keepOrPull:1;
 uint32_t b14_2_PUS_PullSel:2;
 uint32_t b16_1_HYS:1;
 uint32_t b17_15_res3:15;
 };
 uint32_t v32;
}McuPinCfgReg_t;

typedef union _McuPinMuxReg_t
{
 struct {
 uint32_t b00_3_muxMode:3;
 uint32_t b03_1_res:1;
 uint32_t b04_1_inForceOn:1;
 uint32_t b05_27_res:27;
 };
 uint32_t v32;
}McuPinMuxReg_t;
# 38 "./pin.h" 2



typedef struct {
  mp_obj_base_t base;
  qstr name;
  uint8_t idx;
  uint8_t fn;
  uint8_t unit;
  uint8_t type;

  uint32_t inSelReg;
  uint32_t inSelVal;


  union {
    void *reg;
 TMR_Type *pQTmr;
 LPI2C_Type *pI2C;
 LPUART_Type *pUART;
 LPSPI_Type *pSPI;
  };
} pin_af_obj_t;

typedef struct {
  mp_obj_base_t base;
  qstr name;
  uint32_t port : 4;
  uint32_t pin : 5;
  uint32_t num_af : 4;
  uint32_t adc_channel : 5;
  uint32_t adc_num : 3;
  uint32_t pin_mask;
  GPIO_Type *gpio;

  uint32_t afReg;
  uint32_t cfgReg;

  const pin_af_obj_t *af;
} pin_obj_t;

extern const mp_obj_type_t pin_type;
extern const mp_obj_type_t pin_af_type;

typedef struct {
  const char *name;
  const pin_obj_t *pin;
} pin_named_pin_t;

extern const pin_named_pin_t pin_board_pins[];
extern const pin_named_pin_t pin_cpu_pins[];



typedef struct {
    mp_obj_base_t base;
    qstr name;
    const pin_named_pin_t *named_pins;
} pin_named_pins_obj_t;

extern const mp_obj_type_t pin_board_pins_obj_type;
extern const mp_obj_type_t pin_cpu_pins_obj_type;

extern const mp_obj_dict_t pin_cpu_pins_locals_dict;
extern const mp_obj_dict_t pin_board_pins_locals_dict;

extern const mp_obj_fun_builtin_var_t pin_init_obj;

void pin_init0(void);
uint32_t pin_get_mode(const pin_obj_t *pin);
uint32_t pin_get_pull(const pin_obj_t *pin);
uint32_t pin_get_af(const pin_obj_t *pin);
const pin_obj_t *pin_find(mp_obj_t user_obj);
const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name);
const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn);
const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx);
const pin_af_obj_t *pin_find_af_by_name(const pin_obj_t *pin, const char *name);
# 30 "./omv/py/mp.h" 2
# 1 "./extint.h" 1
# 42 "./extint.h"
void extint_init0(void);

uint extint_register(mp_obj_t pin_obj, uint32_t mode, uint32_t pull, mp_obj_t callback_obj, 
# 44 "./extint.h" 3 4
                                                                                           _Bool 
# 44 "./extint.h"
                                                                                                override_callback_obj);

void extint_enable(uint line);
void extint_disable(uint line);
void extint_swint(uint line);

void Handle_EXTI_Irq(uint32_t line);

extern const mp_obj_type_t extint_type;
# 31 "./omv/py/mp.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb.h" 1
# 41 "mcusdk/middleware/sdkusb/include/usb.h"
# 1 "mcusdk/middleware/sdkusb/osa/usb_osa.h" 1
# 56 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
typedef void *usb_osa_event_handle;


typedef void *usb_osa_sem_handle;


typedef void *usb_osa_mutex_handle;


typedef void *usb_osa_msgq_handle;


typedef enum _usb_osa_status
{
    kStatus_USB_OSA_Success = 0x00U,
    kStatus_USB_OSA_Error,
    kStatus_USB_OSA_TimeOut,
} usb_osa_status_t;


typedef enum _usb_osa_event_mode
{
    kUSB_OsaEventManualClear = 0U,
    kUSB_OsaEventAutoClear = 1U,
} usb_osa_event_mode_t;




# 1 "mcusdk/middleware/sdkusb/osa/usb_osa_bm.h" 1
# 54 "mcusdk/middleware/sdkusb/osa/usb_osa_bm.h"
extern void USB_OsaEnterCritical(uint32_t *sr);
extern void USB_OsaExitCritical(uint32_t sr);
# 86 "mcusdk/middleware/sdkusb/osa/usb_osa.h" 2
# 148 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
void *USB_OsaMemoryAllocate(uint32_t length);
# 158 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern void USB_OsaMemoryFree(void *p);
# 188 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventCreate(usb_osa_event_handle *handle, uint32_t flag);
# 205 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventDestroy(usb_osa_event_handle handle);
# 225 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventSet(usb_osa_event_handle handle, uint32_t bitMask);
# 254 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventWait(
    usb_osa_event_handle handle, uint32_t bitMask, uint32_t flag, uint32_t timeout, uint32_t *bitSet);
# 277 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventCheck(usb_osa_event_handle handle, uint32_t bitMask, uint32_t *bitSet);
# 296 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaEventClear(usb_osa_event_handle handle, uint32_t bitMask);
# 322 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemCreate(usb_osa_sem_handle *handle, uint32_t count);
# 342 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemDestroy(usb_osa_sem_handle handle);
# 363 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemPost(usb_osa_sem_handle handle);
# 388 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaSemWait(usb_osa_sem_handle handle, uint32_t timeout);
# 413 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexCreate(usb_osa_mutex_handle *handle);
# 433 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexDestroy(usb_osa_mutex_handle handle);
# 455 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexLock(usb_osa_mutex_handle handle);
# 475 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMutexUnlock(usb_osa_mutex_handle handle);
# 502 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqCreate(usb_osa_msgq_handle *handle, uint32_t count, uint32_t size);
# 522 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqDestroy(usb_osa_msgq_handle handle);
# 544 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqSend(usb_osa_msgq_handle handle, void *msg);
# 570 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqRecv(usb_osa_msgq_handle handle, void *msg, uint32_t timeout);
# 592 "mcusdk/middleware/sdkusb/osa/usb_osa.h"
extern usb_osa_status_t USB_OsaMsgqCheck(usb_osa_msgq_handle handle, void *msg);
# 42 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb_misc.h" 1
# 53 "mcusdk/middleware/sdkusb/include/usb_misc.h"
extern int DbgConsole_Printf(const char *fmt_s, ...);
# 67 "mcusdk/middleware/sdkusb/include/usb_misc.h"
# 1 "../../py/runtime.h" 1
# 68 "mcusdk/middleware/sdkusb/include/usb_misc.h" 2
# 1 "../../py/mphal.h" 1
# 34 "../../py/mphal.h"
# 1 "./mphalport.h" 1


# 1 "./pin.h" 1
# 4 "./mphalport.h" 2
# 1 "./hal_wrapper.h" 1





typedef enum
{
  HAL_OK = 0x00U,
  HAL_ERROR = 0x01U,
  HAL_BUSY = 0x02U,
  HAL_TIMEOUT = 0x03U
} HAL_StatusTypeDef;
# 153 "./hal_wrapper.h"
static inline void HAL_MPU_Disable(void)
{

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);


  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}
# 173 "./hal_wrapper.h"
static inline void HAL_MPU_Enable(uint32_t MPU_Control)
{

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );


  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);
}
# 190 "./hal_wrapper.h"
HAL_StatusTypeDef HAL_Init(void);
HAL_StatusTypeDef HAL_DeInit(void);
void HAL_MspInit(void);
void HAL_MspDeInit(void);
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);
void HAL_WFI(void);
void HAL_IncTick(void);
void HAL_Delay(volatile uint32_t Delay);
uint32_t HAL_GetTick(void);
void HAL_SuspendTick(void);
void HAL_ResumeTick(void);
uint32_t HAL_GetHalVersion(void);
uint32_t HAL_GetREVID(void);
uint32_t HAL_GetDEVID(void);
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);




static inline void HAL_GPIO_DeInit(GPIO_Type *pPort, uint32_t pin) {
 gpio_pin_config_t cfg;
 cfg.direction = kGPIO_DigitalInput;
 GPIO_PinInit(pPort, pin, &cfg);
}
# 5 "./mphalport.h" 2

extern const unsigned char mp_hal_status_to_errno_table[4];

__attribute__((noreturn)) void mp_hal_raise(HAL_StatusTypeDef status);
void mp_hal_set_interrupt_char(int c);





extern 
# 15 "./mphalport.h" 3 4
      _Bool 
# 15 "./mphalport.h"
           mp_hal_ticks_cpu_enabled;
void mp_hal_ticks_cpu_enable(void);
static inline mp_uint_t mp_hal_ticks_cpu(void) {
    if (!mp_hal_ticks_cpu_enabled) {
        mp_hal_ticks_cpu_enable();
    }
    return ((DWT_Type *) (0xE0001000UL) )->CYCCNT;
}
# 48 "./mphalport.h"
static inline GPIO_Type * _find_gpio(const pin_obj_t *p){
 GPIO_Type *gps[] = {0, ((GPIO_Type *)(0x401B8000u)), ((GPIO_Type *)(0x401BC000u)), ((GPIO_Type *)(0x401C0000u)), ((GPIO_Type *)(0x401C4000u)), ((GPIO_Type *)(0x400C0000u)),};
 if (p->port > 5)
  while(1);
 return gps[p->port];
}

static inline void mp_hal_pin_write(GPIO_Type *pPort, uint32_t pin, uint32_t bitLevel) {
 GPIO_PinWrite(pPort, pin, bitLevel);
}

static inline void mp_hal_pin_high(const pin_obj_t *pPin) {
 GPIO_PinWrite(pPin->gpio, pPin->pin, 1);

}

static inline void mp_hal_pin_low(const pin_obj_t *pPin) {
 GPIO_PinWrite(pPin->gpio, pPin->pin, 0);
}

static inline void mp_hal_pin_toggle(const pin_obj_t *pPin)
{
 uint32_t a, pinNdx = pPin->pin;
 a = (0 == GPIO_PinRead(pPin->gpio, pinNdx) );
 GPIO_PinWrite(pPin->gpio, pinNdx, a);

}
# 90 "./mphalport.h"
void mp_hal_gpio_clock_enable(uint32_t portNum);
void mp_hal_pin_config(const pin_obj_t *p, const pin_af_obj_t *af, uint32_t alt, uint32_t padCfgVal );

# 92 "./mphalport.h" 3 4
_Bool 
# 92 "./mphalport.h"
    mp_hal_pin_config_alt(const pin_obj_t* pin, uint32_t padCfg, uint8_t fn);

void mp_hal_ConfigGPIO(const pin_obj_t *p, uint32_t gpioModeAndPadCfg, uint32_t isInitialHighForOutput);
# 35 "../../py/mphal.h" 2



int mp_hal_stdin_rx_chr(void);



void mp_hal_stdout_tx_str(const char *str);



void mp_hal_stdout_tx_strn(const char *str, size_t len);



void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len);



void mp_hal_delay_ms(mp_uint_t ms);



void mp_hal_delay_us(mp_uint_t us);



mp_uint_t mp_hal_ticks_ms(void);



mp_uint_t mp_hal_ticks_us(void);



mp_uint_t mp_hal_ticks_cpu(void);
# 69 "mcusdk/middleware/sdkusb/include/usb_misc.h" 2
# 43 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 1 "mcusdk/middleware/sdkusb/include/usb_spec.h" 1
# 48 "mcusdk/middleware/sdkusb/include/usb_spec.h"
typedef struct _usb_setup_struct
{
    uint8_t bmRequestType;
    uint8_t bRequest;
    uint16_t wValue;
    uint16_t wIndex;
    uint16_t wLength;
} usb_setup_struct_t;
# 200 "mcusdk/middleware/sdkusb/include/usb_spec.h"
typedef struct _usb_language
{
    uint8_t **string;
    uint32_t *length;
    uint16_t languageId;
} usb_language_t;

typedef struct _usb_language_list
{
    uint8_t *languageString;
    uint32_t stringLength;
    usb_language_t *languageList;
    uint8_t count;
} usb_language_list_t;

typedef struct _usb_descriptor_common
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bData[1];
} usb_descriptor_common_t;

typedef struct _usb_descriptor_device
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bcdUSB[2];
    uint8_t bDeviceClass;
    uint8_t bDeviceSubClass;
    uint8_t bDeviceProtocol;
    uint8_t bMaxPacketSize0;
    uint8_t idVendor[2];
    uint8_t idProduct[2];
    uint8_t bcdDevice[2];
    uint8_t iManufacturer;
    uint8_t iProduct;
    uint8_t iSerialNumber;
    uint8_t bNumConfigurations;
} usb_descriptor_device_t;

typedef struct _usb_descriptor_configuration
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t wTotalLength[2];
    uint8_t bNumInterfaces;
    uint8_t bConfigurationValue;
    uint8_t iConfiguration;
    uint8_t bmAttributes;
    uint8_t bMaxPower;
} usb_descriptor_configuration_t;

typedef struct _usb_descriptor_interface
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bInterfaceNumber;
    uint8_t bAlternateSetting;
    uint8_t bNumEndpoints;
    uint8_t bInterfaceClass;
    uint8_t bInterfaceSubClass;
    uint8_t bInterfaceProtocol;
    uint8_t iInterface;
} usb_descriptor_interface_t;

typedef struct _usb_descriptor_endpoint
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bEndpointAddress;
    uint8_t bmAttributes;
    uint8_t wMaxPacketSize[2];
    uint8_t bInterval;
} usb_descriptor_endpoint_t;

typedef struct _usb_descriptor_binary_device_object_store
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t wTotalLength[2];
    uint8_t bNumDeviceCaps;
} usb_descriptor_bos_t;

typedef struct _usb_descriptor_usb20_extension
{
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bDevCapabilityType;
    uint8_t bmAttributes[4];
} usb_descriptor_usb20_extension_t;

typedef union _usb_descriptor_union
{
    usb_descriptor_common_t common;
    usb_descriptor_device_t device;
    usb_descriptor_configuration_t configuration;
    usb_descriptor_interface_t interface;
    usb_descriptor_endpoint_t endpoint;
} usb_descriptor_union_t;
# 44 "mcusdk/middleware/sdkusb/include/usb.h" 2
# 64 "mcusdk/middleware/sdkusb/include/usb.h"
typedef enum _usb_status
{
    kStatus_USB_Success = 0x00U,
    kStatus_USB_Error,

    kStatus_USB_Busy,
    kStatus_USB_InvalidHandle,
    kStatus_USB_InvalidParameter,
    kStatus_USB_InvalidRequest,
    kStatus_USB_ControllerNotFound,
    kStatus_USB_InvalidControllerInterface,

    kStatus_USB_NotSupported,
    kStatus_USB_Retry,
    kStatus_USB_TransferStall,
    kStatus_USB_TransferFailed,
    kStatus_USB_AllocFail,
    kStatus_USB_LackSwapBuffer,
    kStatus_USB_TransferCancel,
    kStatus_USB_BandwidthFail,
    kStatus_USB_MSDStatusFail,
    kStatus_USB_EHCIAttached,
    kStatus_USB_EHCIDetached,
} usb_status_t;


typedef void *usb_host_handle;



typedef void *usb_device_handle;


typedef void *usb_otg_handle;


typedef enum _usb_controller_index
{
    kUSB_ControllerKhci0 = 0U,
    kUSB_ControllerKhci1 = 1U,

    kUSB_ControllerEhci0 = 2U,
    kUSB_ControllerEhci1 = 3U,


    kUSB_ControllerLpcIp3511Fs0 = 4U,
    kUSB_ControllerLpcIp3511Fs1 =
        5U,


    kUSB_ControllerLpcIp3511Hs0 = 6U,
    kUSB_ControllerLpcIp3511Hs1 =
        7U,


    kUSB_ControllerOhci0 = 8U,
    kUSB_ControllerOhci1 = 9U,


    kUSB_ControllerIp3516Hs0 = 10U,
    kUSB_ControllerIp3516Hs1 =
        11U,

} usb_controller_index_t;




typedef struct _usb_version
{
    uint8_t major;
    uint8_t minor;
    uint8_t bugfix;
} usb_version_t;
# 32 "./omv/py/mp.h" 2
# 1 "../../extmod/vfs.h" 1
# 29 "../../extmod/vfs.h"
# 1 "../../py/lexer.h" 1
# 30 "../../extmod/vfs.h" 2
# 48 "../../extmod/vfs.h"
typedef struct _mp_vfs_mount_t {
    const char *str;
    size_t len;
    mp_obj_t obj;
    struct _mp_vfs_mount_t *next;
} mp_vfs_mount_t;

mp_vfs_mount_t *mp_vfs_lookup_path(const char *path, const char **path_out);
mp_import_stat_t mp_vfs_import_stat(const char *path);
mp_obj_t mp_vfs_mount(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args);
mp_obj_t mp_vfs_umount(mp_obj_t mnt_in);
mp_obj_t mp_vfs_open(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args);
mp_obj_t mp_vfs_chdir(mp_obj_t path_in);
mp_obj_t mp_vfs_getcwd(void);
mp_obj_t mp_vfs_ilistdir(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_vfs_listdir(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_vfs_mkdir(mp_obj_t path_in);
mp_obj_t mp_vfs_remove(mp_obj_t path_in);
mp_obj_t mp_vfs_rename(mp_obj_t old_path_in, mp_obj_t new_path_in);
mp_obj_t mp_vfs_rmdir(mp_obj_t path_in);
mp_obj_t mp_vfs_stat(mp_obj_t path_in);
mp_obj_t mp_vfs_statvfs(mp_obj_t path_in);

extern const mp_obj_fun_builtin_var_t mp_vfs_mount_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_umount_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_open_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_chdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_getcwd_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_ilistdir_obj;
extern const mp_obj_fun_builtin_var_t mp_vfs_listdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_mkdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_remove_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_rename_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_rmdir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_stat_obj;
extern const mp_obj_fun_builtin_fixed_t mp_vfs_statvfs_obj;
# 33 "./omv/py/mp.h" 2
# 1 "../../extmod/vfs_fat.h" 1
# 31 "../../extmod/vfs_fat.h"
# 1 "../../lib/oofatfs/ff.h" 1
# 35 "../../lib/oofatfs/ff.h"
typedef uint8_t BYTE;


typedef int16_t SHORT;
typedef uint16_t WORD;
typedef uint16_t WCHAR;


typedef int INT;
typedef unsigned int UINT;


typedef int32_t LONG;
typedef uint32_t DWORD;


typedef uint64_t QWORD;

# 1 "../../lib/oofatfs/ffconf.h" 1
# 54 "../../lib/oofatfs/ff.h" 2
# 84 "../../lib/oofatfs/ff.h"
typedef char TCHAR;
# 100 "../../lib/oofatfs/ff.h"
typedef DWORD FSIZE_t;






typedef struct {
    void *drv;

    BYTE part;

    BYTE fs_type;
    BYTE n_fats;
    BYTE wflag;
    BYTE fsi_flag;
    WORD id;
    WORD n_rootdir;
    WORD csize;




    WCHAR* lfnbuf;
# 132 "../../lib/oofatfs/ff.h"
    DWORD last_clst;
    DWORD free_clst;


    DWORD cdir;






    DWORD n_fatent;
    DWORD fsize;
    DWORD volbase;
    DWORD fatbase;
    DWORD dirbase;
    DWORD database;
    DWORD winsect;
    BYTE win[512];
} FATFS;





typedef struct {
    FATFS* fs;
    WORD id;
    BYTE attr;
    BYTE stat;
    DWORD sclust;
    FSIZE_t objsize;
# 173 "../../lib/oofatfs/ff.h"
} _FDID;





typedef struct {
    _FDID obj;
    BYTE flag;
    BYTE err;
    FSIZE_t fptr;
    DWORD clust;
    DWORD sect;

    DWORD dir_sect;
    BYTE* dir_ptr;







} FIL;





typedef struct {
    _FDID obj;
    DWORD dptr;
    DWORD clust;
    DWORD sect;
    BYTE* dir;
    BYTE fn[12];

    DWORD blk_ofs;




} FF_DIR;





typedef struct {
    FSIZE_t fsize;
    WORD fdate;
    WORD ftime;
    BYTE fattrib;

    TCHAR altname[13];
    TCHAR fname[255 + 1];



} FILINFO;





typedef enum {
    FR_OK = 0,
    FR_DISK_ERR,
    FR_INT_ERR,
    FR_NOT_READY,
    FR_NO_FILE,
    FR_NO_PATH,
    FR_INVALID_NAME,
    FR_DENIED,
    FR_EXIST,
    FR_INVALID_OBJECT,
    FR_WRITE_PROTECTED,
    FR_INVALID_DRIVE,
    FR_NOT_ENABLED,
    FR_NO_FILESYSTEM,
    FR_MKFS_ABORTED,
    FR_TIMEOUT,
    FR_LOCKED,
    FR_NOT_ENOUGH_CORE,
    FR_TOO_MANY_OPEN_FILES,
    FR_INVALID_PARAMETER
} FRESULT;






FRESULT f_open (FATFS *fs, FIL* fp, const TCHAR* path, BYTE mode);
FRESULT f_close (FIL* fp);
FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);
FRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);
FRESULT f_lseek (FIL* fp, FSIZE_t ofs);
FRESULT f_truncate (FIL* fp);
FRESULT f_sync (FIL* fp);
FRESULT f_opendir (FATFS *fs, FF_DIR* dp, const TCHAR* path);
FRESULT f_closedir (FF_DIR* dp);
FRESULT f_readdir (FF_DIR* dp, FILINFO* fno);
FRESULT f_findfirst (FF_DIR* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);
FRESULT f_findnext (FF_DIR* dp, FILINFO* fno);
FRESULT f_mkdir (FATFS *fs, const TCHAR* path);
FRESULT f_unlink (FATFS *fs, const TCHAR* path);
FRESULT f_rename (FATFS *fs, const TCHAR* path_old, const TCHAR* path_new);
FRESULT f_stat (FATFS *fs, const TCHAR* path, FILINFO* fno);
FRESULT f_chmod (FATFS *fs, const TCHAR* path, BYTE attr, BYTE mask);
FRESULT f_utime (FATFS *fs, const TCHAR* path, const FILINFO* fno);
FRESULT f_chdir (FATFS *fs, const TCHAR* path);
FRESULT f_getcwd (FATFS *fs, TCHAR* buff, UINT len);
FRESULT f_getfree (FATFS *fs, DWORD* nclst);
FRESULT f_getlabel (FATFS *fs, TCHAR* label, DWORD* vsn);
FRESULT f_setlabel (FATFS *fs, const TCHAR* label);
FRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);
FRESULT f_expand (FIL* fp, FSIZE_t szf, BYTE opt);
FRESULT f_mount (FATFS* fs);
FRESULT f_umount (FATFS* fs);
FRESULT f_mkfs (FATFS *fs, BYTE opt, DWORD au, void* work, UINT len);
FRESULT f_fdisk (void *pdrv, const DWORD* szt, void* work);
# 315 "../../lib/oofatfs/ff.h"
DWORD get_fattime (void);




WCHAR ff_convert (WCHAR chr, UINT dir);
WCHAR ff_wtoupper (WCHAR chr);
# 32 "../../extmod/vfs_fat.h" 2







typedef struct _fs_user_mount_t {
    mp_obj_base_t base;
    uint16_t flags;
    mp_obj_t readblocks[4];
    mp_obj_t writeblocks[4];

    union {
        mp_obj_t ioctl[4];
        struct {
            mp_obj_t sync[2];
            mp_obj_t count[2];
        } old;
    } u;
    FATFS fatfs;
} fs_user_mount_t;

extern const byte fresult_to_errno_table[20];
extern const mp_obj_type_t mp_fat_vfs_type;

mp_import_stat_t fat_vfs_import_stat(struct _fs_user_mount_t *vfs, const char *path);
mp_obj_t fatfs_builtin_open_self(mp_obj_t self_in, mp_obj_t path, mp_obj_t mode);
extern const mp_obj_fun_builtin_var_t mp_vfs_open_obj;

mp_obj_t fat_vfs_ilistdir2(struct _fs_user_mount_t *vfs, const char *path, 
# 62 "../../extmod/vfs_fat.h" 3 4
                                                                          _Bool 
# 62 "../../extmod/vfs_fat.h"
                                                                               is_str_type);
# 34 "./omv/py/mp.h" 2
# 6 "omv/py/py_nn.c" 2
# 1 "./omv/nn/nn.h" 1
# 11 "./omv/nn/nn.h"
# 1 "./omv/img/imlib.h" 1
# 11 "./omv/img/imlib.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 12 "./omv/img/imlib.h" 2



# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include-fixed/limits.h" 1 3 4
# 16 "./omv/img/imlib.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/float.h" 1 3 4
# 17 "./omv/img/imlib.h" 2
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 1 3






# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 8 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 2 3



# 86 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3

# 86 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);




extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);





extern int isinf (double);




extern int isnan (double);
# 150 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
    typedef float float_t;
    typedef double double_t;
# 194 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 290 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
# 422 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 503 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern double drem (double, double);
extern float dremf (float, float);



extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);



extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);
# 565 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
extern int *__signgam (void);
# 578 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
struct exception

{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};




extern int matherr (struct exception *e);
# 642 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern enum __fdlibm_version __fdlib_version;
# 662 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/math.h" 3

# 18 "./omv/img/imlib.h" 2
# 1 "../../lib/cmsis/inc/arm_math.h" 1
# 298 "../../lib/cmsis/inc/arm_math.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"





# 1 "../../lib/cmsis/inc/core_cm7.h" 1
# 308 "../../lib/cmsis/inc/arm_math.h" 2
# 387 "../../lib/cmsis/inc/arm_math.h"
  
# 387 "../../lib/cmsis/inc/arm_math.h"
 typedef enum
  {
    ARM_MATH_SUCCESS = 0,
    ARM_MATH_ARGUMENT_ERROR = -1,
    ARM_MATH_LENGTH_ERROR = -2,
    ARM_MATH_SIZE_MISMATCH = -3,
    ARM_MATH_NANINF = -4,
    ARM_MATH_SINGULAR = -5,
    ARM_MATH_TEST_FAILURE = -6
  } arm_status;




  typedef int8_t q7_t;




  typedef int16_t q15_t;




  typedef int32_t q31_t;




  typedef int64_t q63_t;




  typedef float float32_t;




  typedef double float64_t;
# 510 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
  }




  __attribute__((always_inline)) static inline q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
  }




  __attribute__((always_inline)) static inline q7_t clip_q31_to_q7(
  q31_t x)
  {
    return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
      ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
  }




  __attribute__((always_inline)) static inline q15_t clip_q31_to_q15(
  q31_t x)
  {
    return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
      ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
  }





  __attribute__((always_inline)) static inline q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
            (((q63_t) (x >> 32) * y)));
  }
# 589 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline uint32_t arm_recip_q31(
  q31_t in,
  q31_t * dst,
  q31_t * pRecipTable)
  {
    q31_t out;
    uint32_t tempVal;
    uint32_t index, i;
    uint32_t signBits;

    if (in > 0)
    {
      signBits = ((uint32_t) (__builtin_clz( in) - 1));
    }
    else
    {
      signBits = ((uint32_t) (__builtin_clz(-in) - 1));
    }


    in = (in << signBits);


    index = (uint32_t)(in >> 24);
    index = (index & 0x0000003F);


    out = pRecipTable[index];



    for (i = 0u; i < 2u; i++)
    {
      tempVal = (uint32_t) (((q63_t) in * out) >> 31);
      tempVal = 0x7FFFFFFFu - tempVal;


      out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
    }


    *dst = out;


    return (signBits + 1u);
  }





  __attribute__((always_inline)) static inline uint32_t arm_recip_q15(
  q15_t in,
  q15_t * dst,
  q15_t * pRecipTable)
  {
    q15_t out = 0;
    uint32_t tempVal = 0;
    uint32_t index = 0, i = 0;
    uint32_t signBits = 0;

    if (in > 0)
    {
      signBits = ((uint32_t)(__builtin_clz( in) - 17));
    }
    else
    {
      signBits = ((uint32_t)(__builtin_clz(-in) - 17));
    }


    in = (in << signBits);


    index = (uint32_t)(in >> 8);
    index = (index & 0x0000003F);


    out = pRecipTable[index];



    for (i = 0u; i < 2u; i++)
    {
      tempVal = (uint32_t) (((q31_t) in * out) >> 15);
      tempVal = 0x7FFFu - tempVal;

      out = (q15_t) (((q31_t) out * tempVal) >> 14);

    }


    *dst = out;


    return (signBits + 1);
  }
# 1094 "../../lib/cmsis/inc/arm_math.h"
  typedef struct
  {
    uint16_t numTaps;
    q7_t *pState;
    q7_t *pCoeffs;
  } arm_fir_instance_q7;




  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
  } arm_fir_instance_q15;




  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
  } arm_fir_instance_q31;




  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_fir_instance_f32;
# 1139 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q7(
  const arm_fir_instance_q7 * S,
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 1154 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_q7(
  arm_fir_instance_q7 * S,
  uint16_t numTaps,
  q7_t * pCoeffs,
  q7_t * pState,
  uint32_t blockSize);
# 1169 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1183 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_fast_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1200 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_init_q15(
  arm_fir_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 1215 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_q31(
  const arm_fir_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1229 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_fast_q31(
  const arm_fir_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1244 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_q31(
  arm_fir_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 1259 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 1274 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_init_f32(
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    int8_t numStages;
    q15_t *pState;
    q15_t *pCoeffs;
    int8_t postShift;
  } arm_biquad_casd_df1_inst_q15;




  typedef struct
  {
    uint32_t numStages;
    q31_t *pState;
    q31_t *pCoeffs;
    uint8_t postShift;
  } arm_biquad_casd_df1_inst_q31;




  typedef struct
  {
    uint32_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_casd_df1_inst_f32;
# 1322 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1337 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_q15(
  arm_biquad_casd_df1_inst_q15 * S,
  uint8_t numStages,
  q15_t * pCoeffs,
  q15_t * pState,
  int8_t postShift);
# 1352 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_fast_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1366 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1380 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_fast_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1395 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_q31(
  arm_biquad_casd_df1_inst_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q31_t * pState,
  int8_t postShift);
# 1410 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 1424 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df1_init_f32(
  arm_biquad_casd_df1_inst_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);





  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float32_t *pData;
  } arm_matrix_instance_f32;





  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float64_t *pData;
  } arm_matrix_instance_f64;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q15_t *pData;
  } arm_matrix_instance_q15;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q31_t *pData;
  } arm_matrix_instance_q31;
# 1481 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1495 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst);
# 1509 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_add_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1523 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1537 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pScratch);
# 1552 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_cmplx_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1565 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst);
# 1577 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_q15(
  const arm_matrix_instance_q15 * pSrc,
  arm_matrix_instance_q15 * pDst);
# 1589 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_trans_q31(
  const arm_matrix_instance_q31 * pSrc,
  arm_matrix_instance_q31 * pDst);
# 1602 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1617 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pState);
# 1633 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_fast_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pState);
# 1648 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1662 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_mult_fast_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1676 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1690 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst);
# 1704 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_sub_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1718 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
  float32_t scale,
  arm_matrix_instance_f32 * pDst);
# 1733 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_q15(
  const arm_matrix_instance_q15 * pSrc,
  q15_t scaleFract,
  int32_t shift,
  arm_matrix_instance_q15 * pDst);
# 1749 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_scale_q31(
  const arm_matrix_instance_q31 * pSrc,
  q31_t scaleFract,
  int32_t shift,
  arm_matrix_instance_q31 * pDst);
# 1763 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_q31(
  arm_matrix_instance_q31 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q31_t * pData);
# 1777 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_q15(
  arm_matrix_instance_q15 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q15_t * pData);
# 1791 "../../lib/cmsis/inc/arm_math.h"
  void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData);






  typedef struct
  {
    q15_t A0;




    q31_t A1;

    q15_t state[3];
    q15_t Kp;
    q15_t Ki;
    q15_t Kd;
  } arm_pid_instance_q15;




  typedef struct
  {
    q31_t A0;
    q31_t A1;
    q31_t A2;
    q31_t state[3];
    q31_t Kp;
    q31_t Ki;
    q31_t Kd;
  } arm_pid_instance_q31;




  typedef struct
  {
    float32_t A0;
    float32_t A1;
    float32_t A2;
    float32_t state[3];
    float32_t Kp;
    float32_t Ki;
    float32_t Kd;
  } arm_pid_instance_f32;
# 1852 "../../lib/cmsis/inc/arm_math.h"
  void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag);






  void arm_pid_reset_f32(
  arm_pid_instance_f32 * S);







  void arm_pid_init_q31(
  arm_pid_instance_q31 * S,
  int32_t resetStateFlag);







  void arm_pid_reset_q31(
  arm_pid_instance_q31 * S);







  void arm_pid_init_q15(
  arm_pid_instance_q15 * S,
  int32_t resetStateFlag);






  void arm_pid_reset_q15(
  arm_pid_instance_q15 * S);





  typedef struct
  {
    uint32_t nValues;
    float32_t x1;
    float32_t xSpacing;
    float32_t *pYData;
  } arm_linear_interp_instance_f32;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float32_t *pData;
  } arm_bilinear_interp_instance_f32;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q31_t *pData;
  } arm_bilinear_interp_instance_q31;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q15_t *pData;
  } arm_bilinear_interp_instance_q15;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q7_t *pData;
  } arm_bilinear_interp_instance_q7;
# 1961 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 1975 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 1989 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2003 "../../lib/cmsis/inc/arm_math.h"
  void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q15_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix2_instance_q15;


  arm_status arm_cfft_radix2_init_q15(
  arm_cfft_radix2_instance_q15 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_q15(
  const arm_cfft_radix2_instance_q15 * S,
  q15_t * pSrc);





  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q15_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix4_instance_q15;


  arm_status arm_cfft_radix4_init_q15(
  arm_cfft_radix4_instance_q15 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix4_q15(
  const arm_cfft_radix4_instance_q15 * S,
  q15_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q31_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix2_instance_q31;


  arm_status arm_cfft_radix2_init_q31(
  arm_cfft_radix2_instance_q31 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_q31(
  const arm_cfft_radix2_instance_q31 * S,
  q31_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q31_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix4_instance_q31;


  void arm_cfft_radix4_q31(
  const arm_cfft_radix4_instance_q31 * S,
  q31_t * pSrc);


  arm_status arm_cfft_radix4_init_q31(
  arm_cfft_radix4_instance_q31 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    float32_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
    float32_t onebyfftLen;
  } arm_cfft_radix2_instance_f32;


  arm_status arm_cfft_radix2_init_f32(
  arm_cfft_radix2_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_f32(
  const arm_cfft_radix2_instance_f32 * S,
  float32_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    float32_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
    float32_t onebyfftLen;
  } arm_cfft_radix4_instance_f32;


  arm_status arm_cfft_radix4_init_f32(
  arm_cfft_radix4_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix4_f32(
  const arm_cfft_radix4_instance_f32 * S,
  float32_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    const q15_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_q15;

void arm_cfft_q15(
    const arm_cfft_instance_q15 * S,
    q15_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    const q31_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_q31;

void arm_cfft_q31(
    const arm_cfft_instance_q31 * S,
    q31_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    const float32_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_f32;

  void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
  float32_t * p1,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);




  typedef struct
  {
    uint32_t fftLenReal;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    q15_t *pTwiddleAReal;
    q15_t *pTwiddleBReal;
    const arm_cfft_instance_q15 *pCfft;
  } arm_rfft_instance_q15;

  arm_status arm_rfft_init_q15(
  arm_rfft_instance_q15 * S,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst);




  typedef struct
  {
    uint32_t fftLenReal;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    q31_t *pTwiddleAReal;
    q31_t *pTwiddleBReal;
    const arm_cfft_instance_q31 *pCfft;
  } arm_rfft_instance_q31;

  arm_status arm_rfft_init_q31(
  arm_rfft_instance_q31 * S,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_q31(
  const arm_rfft_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst);




  typedef struct
  {
    uint32_t fftLenReal;
    uint16_t fftLenBy2;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    float32_t *pTwiddleAReal;
    float32_t *pTwiddleBReal;
    arm_cfft_radix4_instance_f32 *pCfft;
  } arm_rfft_instance_f32;

  arm_status arm_rfft_init_f32(
  arm_rfft_instance_f32 * S,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_f32(
  const arm_rfft_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst);




typedef struct
  {
    arm_cfft_instance_f32 Sint;
    uint16_t fftLenRFFT;
    float32_t * pTwiddleRFFT;
  } arm_rfft_fast_instance_f32 ;

arm_status arm_rfft_fast_init_f32 (
   arm_rfft_fast_instance_f32 * S,
   uint16_t fftLen);

void arm_rfft_fast_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut,
  uint8_t ifftFlag);




  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    float32_t normalize;
    float32_t *pTwiddle;
    float32_t *pCosFactor;
    arm_rfft_instance_f32 *pRfft;
    arm_cfft_radix4_instance_f32 *pCfft;
  } arm_dct4_instance_f32;
# 2341 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_f32(
  arm_dct4_instance_f32 * S,
  arm_rfft_instance_f32 * S_RFFT,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  float32_t normalize);
# 2356 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_f32(
  const arm_dct4_instance_f32 * S,
  float32_t * pState,
  float32_t * pInlineBuffer);





  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    q31_t normalize;
    q31_t *pTwiddle;
    q31_t *pCosFactor;
    arm_rfft_instance_q31 *pRfft;
    arm_cfft_radix4_instance_q31 *pCfft;
  } arm_dct4_instance_q31;
# 2387 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_q31(
  arm_dct4_instance_q31 * S,
  arm_rfft_instance_q31 * S_RFFT,
  arm_cfft_radix4_instance_q31 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  q31_t normalize);
# 2402 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_q31(
  const arm_dct4_instance_q31 * S,
  q31_t * pState,
  q31_t * pInlineBuffer);





  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    q15_t normalize;
    q15_t *pTwiddle;
    q15_t *pCosFactor;
    arm_rfft_instance_q15 *pRfft;
    arm_cfft_radix4_instance_q15 *pCfft;
  } arm_dct4_instance_q15;
# 2433 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_dct4_init_q15(
  arm_dct4_instance_q15 * S,
  arm_rfft_instance_q15 * S_RFFT,
  arm_cfft_radix4_instance_q15 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  q15_t normalize);
# 2448 "../../lib/cmsis/inc/arm_math.h"
  void arm_dct4_q15(
  const arm_dct4_instance_q15 * S,
  q15_t * pState,
  q15_t * pInlineBuffer);
# 2461 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);
# 2475 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 2489 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 2503 "../../lib/cmsis/inc/arm_math.h"
  void arm_add_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2517 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);
# 2531 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 2545 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 2559 "../../lib/cmsis/inc/arm_math.h"
  void arm_sub_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2573 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_f32(
  float32_t * pSrc,
  float32_t scale,
  float32_t * pDst,
  uint32_t blockSize);
# 2588 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q7(
  q7_t * pSrc,
  q7_t scaleFract,
  int8_t shift,
  q7_t * pDst,
  uint32_t blockSize);
# 2604 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q15(
  q15_t * pSrc,
  q15_t scaleFract,
  int8_t shift,
  q15_t * pDst,
  uint32_t blockSize);
# 2620 "../../lib/cmsis/inc/arm_math.h"
  void arm_scale_q31(
  q31_t * pSrc,
  q31_t scaleFract,
  int8_t shift,
  q31_t * pDst,
  uint32_t blockSize);
# 2634 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2646 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2658 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2670 "../../lib/cmsis/inc/arm_math.h"
  void arm_abs_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2683 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result);
# 2697 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  uint32_t blockSize,
  q31_t * result);
# 2711 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  uint32_t blockSize,
  q63_t * result);
# 2725 "../../lib/cmsis/inc/arm_math.h"
  void arm_dot_prod_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  uint32_t blockSize,
  q63_t * result);
# 2739 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q7(
  q7_t * pSrc,
  int8_t shiftBits,
  q7_t * pDst,
  uint32_t blockSize);
# 2753 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q15(
  q15_t * pSrc,
  int8_t shiftBits,
  q15_t * pDst,
  uint32_t blockSize);
# 2767 "../../lib/cmsis/inc/arm_math.h"
  void arm_shift_q31(
  q31_t * pSrc,
  int8_t shiftBits,
  q31_t * pDst,
  uint32_t blockSize);
# 2781 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_f32(
  float32_t * pSrc,
  float32_t offset,
  float32_t * pDst,
  uint32_t blockSize);
# 2795 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q7(
  q7_t * pSrc,
  q7_t offset,
  q7_t * pDst,
  uint32_t blockSize);
# 2809 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q15(
  q15_t * pSrc,
  q15_t offset,
  q15_t * pDst,
  uint32_t blockSize);
# 2823 "../../lib/cmsis/inc/arm_math.h"
  void arm_offset_q31(
  q31_t * pSrc,
  q31_t offset,
  q31_t * pDst,
  uint32_t blockSize);
# 2836 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2848 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2860 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2872 "../../lib/cmsis/inc/arm_math.h"
  void arm_negate_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2884 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2896 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2908 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2920 "../../lib/cmsis/inc/arm_math.h"
  void arm_copy_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2932 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_f32(
  float32_t value,
  float32_t * pDst,
  uint32_t blockSize);
# 2944 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q7(
  q7_t value,
  q7_t * pDst,
  uint32_t blockSize);
# 2956 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q15(
  q15_t value,
  q15_t * pDst,
  uint32_t blockSize);
# 2968 "../../lib/cmsis/inc/arm_math.h"
  void arm_fill_q31(
  q31_t value,
  q31_t * pDst,
  uint32_t blockSize);
# 2982 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst);
# 3000 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3018 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 3034 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_q15(
          q15_t * pSrcA,
          uint32_t srcALen,
          q15_t * pSrcB,
          uint32_t srcBLen,
          q15_t * pDst);
# 3052 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3070 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 3086 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 3104 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3122 "../../lib/cmsis/inc/arm_math.h"
  void arm_conv_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst);
# 3141 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3164 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3187 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3208 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3231 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3254 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3275 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3298 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3321 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_conv_partial_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);





  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    q15_t *pCoeffs;
    q15_t *pState;
  } arm_fir_decimate_instance_q15;




  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    q31_t *pCoeffs;
    q31_t *pState;
  } arm_fir_decimate_instance_q31;




  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    float32_t *pCoeffs;
    float32_t *pState;
  } arm_fir_decimate_instance_f32;
# 3372 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3390 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_f32(
  arm_fir_decimate_instance_f32 * S,
  uint16_t numTaps,
  uint8_t M,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);
# 3406 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3420 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_fast_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3438 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_q15(
  arm_fir_decimate_instance_q15 * S,
  uint16_t numTaps,
  uint8_t M,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 3454 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_q31(
  const arm_fir_decimate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3467 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_decimate_fast_q31(
  arm_fir_decimate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3485 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_decimate_init_q31(
  arm_fir_decimate_instance_q31 * S,
  uint16_t numTaps,
  uint8_t M,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    q15_t *pCoeffs;
    q15_t *pState;
  } arm_fir_interpolate_instance_q15;




  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    q31_t *pCoeffs;
    q31_t *pState;
  } arm_fir_interpolate_instance_q31;




  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    float32_t *pCoeffs;
    float32_t *pState;
  } arm_fir_interpolate_instance_f32;
# 3535 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_q15(
  const arm_fir_interpolate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3553 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_q15(
  arm_fir_interpolate_instance_q15 * S,
  uint8_t L,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 3569 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_q31(
  const arm_fir_interpolate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3587 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_q31(
  arm_fir_interpolate_instance_q31 * S,
  uint8_t L,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 3603 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3621 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_fir_interpolate_init_f32(
  arm_fir_interpolate_instance_f32 * S,
  uint8_t L,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint8_t numStages;
    q63_t *pState;
    q31_t *pCoeffs;
    uint8_t postShift;
  } arm_biquad_cas_df1_32x64_ins_q31;
# 3648 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cas_df1_32x64_q31(
  const arm_biquad_cas_df1_32x64_ins_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3662 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cas_df1_32x64_init_q31(
  arm_biquad_cas_df1_32x64_ins_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q63_t * pState,
  uint8_t postShift);





  typedef struct
  {
    uint8_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_cascade_df2T_instance_f32;




  typedef struct
  {
    uint8_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_cascade_stereo_df2T_instance_f32;




  typedef struct
  {
    uint8_t numStages;
    float64_t *pState;
    float64_t *pCoeffs;
  } arm_biquad_cascade_df2T_instance_f64;
# 3708 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3722 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_stereo_df2T_f32(
  const arm_biquad_cascade_stereo_df2T_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3736 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_f64(
  const arm_biquad_cascade_df2T_instance_f64 * S,
  float64_t * pSrc,
  float64_t * pDst,
  uint32_t blockSize);
# 3750 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_init_f32(
  arm_biquad_cascade_df2T_instance_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3764 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_stereo_df2T_init_f32(
  arm_biquad_cascade_stereo_df2T_instance_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3778 "../../lib/cmsis/inc/arm_math.h"
  void arm_biquad_cascade_df2T_init_f64(
  arm_biquad_cascade_df2T_instance_f64 * S,
  uint8_t numStages,
  float64_t * pCoeffs,
  float64_t * pState);





  typedef struct
  {
    uint16_t numStages;
    q15_t *pState;
    q15_t *pCoeffs;
  } arm_fir_lattice_instance_q15;




  typedef struct
  {
    uint16_t numStages;
    q31_t *pState;
    q31_t *pCoeffs;
  } arm_fir_lattice_instance_q31;




  typedef struct
  {
    uint16_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_fir_lattice_instance_f32;
# 3823 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_q15(
  arm_fir_lattice_instance_q15 * S,
  uint16_t numStages,
  q15_t * pCoeffs,
  q15_t * pState);
# 3837 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_q15(
  const arm_fir_lattice_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3851 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_q31(
  arm_fir_lattice_instance_q31 * S,
  uint16_t numStages,
  q31_t * pCoeffs,
  q31_t * pState);
# 3865 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_q31(
  const arm_fir_lattice_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3879 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_init_f32(
  arm_fir_lattice_instance_f32 * S,
  uint16_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3893 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_lattice_f32(
  const arm_fir_lattice_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numStages;
    q15_t *pState;
    q15_t *pkCoeffs;
    q15_t *pvCoeffs;
  } arm_iir_lattice_instance_q15;




  typedef struct
  {
    uint16_t numStages;
    q31_t *pState;
    q31_t *pkCoeffs;
    q31_t *pvCoeffs;
  } arm_iir_lattice_instance_q31;




  typedef struct
  {
    uint16_t numStages;
    float32_t *pState;
    float32_t *pkCoeffs;
    float32_t *pvCoeffs;
  } arm_iir_lattice_instance_f32;
# 3941 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_f32(
  const arm_iir_lattice_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3957 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_f32(
  arm_iir_lattice_instance_f32 * S,
  uint16_t numStages,
  float32_t * pkCoeffs,
  float32_t * pvCoeffs,
  float32_t * pState,
  uint32_t blockSize);
# 3973 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_q31(
  const arm_iir_lattice_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3989 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_q31(
  arm_iir_lattice_instance_q31 * S,
  uint16_t numStages,
  q31_t * pkCoeffs,
  q31_t * pvCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 4005 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_q15(
  const arm_iir_lattice_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 4021 "../../lib/cmsis/inc/arm_math.h"
  void arm_iir_lattice_init_q15(
  arm_iir_lattice_instance_q15 * S,
  uint16_t numStages,
  q15_t * pkCoeffs,
  q15_t * pvCoeffs,
  q15_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
    float32_t mu;
  } arm_lms_instance_f32;
# 4051 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_f32(
  const arm_lms_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pRef,
  float32_t * pOut,
  float32_t * pErr,
  uint32_t blockSize);
# 4069 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_f32(
  arm_lms_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  float32_t mu,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
    q15_t mu;
    uint32_t postShift;
  } arm_lms_instance_q15;
# 4101 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_q15(
  arm_lms_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  q15_t mu,
  uint32_t blockSize,
  uint32_t postShift);
# 4120 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_q15(
  const arm_lms_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pRef,
  q15_t * pOut,
  q15_t * pErr,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
    q31_t mu;
    uint32_t postShift;
  } arm_lms_instance_q31;
# 4151 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_q31(
  const arm_lms_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pRef,
  q31_t * pOut,
  q31_t * pErr,
  uint32_t blockSize);
# 4170 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_init_q31(
  arm_lms_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  q31_t mu,
  uint32_t blockSize,
  uint32_t postShift);





  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
    float32_t mu;
    float32_t energy;
    float32_t x0;
  } arm_lms_norm_instance_f32;
# 4203 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_f32(
  arm_lms_norm_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pRef,
  float32_t * pOut,
  float32_t * pErr,
  uint32_t blockSize);
# 4221 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_f32(
  arm_lms_norm_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  float32_t mu,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
    q31_t mu;
    uint8_t postShift;
    q31_t *recipTable;
    q31_t energy;
    q31_t x0;
  } arm_lms_norm_instance_q31;
# 4255 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_q31(
  arm_lms_norm_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pRef,
  q31_t * pOut,
  q31_t * pErr,
  uint32_t blockSize);
# 4274 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_q31(
  arm_lms_norm_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  q31_t mu,
  uint32_t blockSize,
  uint8_t postShift);





  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
    q15_t mu;
    uint8_t postShift;
    q15_t *recipTable;
    q15_t energy;
    q15_t x0;
  } arm_lms_norm_instance_q15;
# 4309 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_q15(
  arm_lms_norm_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pRef,
  q15_t * pOut,
  q15_t * pErr,
  uint32_t blockSize);
# 4328 "../../lib/cmsis/inc/arm_math.h"
  void arm_lms_norm_init_q15(
  arm_lms_norm_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  q15_t mu,
  uint32_t blockSize,
  uint8_t postShift);
# 4346 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst);
# 4363 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch);
# 4381 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 4398 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 4415 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch);
# 4432 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 4448 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 4466 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 4484 "../../lib/cmsis/inc/arm_math.h"
  void arm_correlate_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst);





  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    float32_t *pState;
    float32_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_f32;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q31_t *pState;
    q31_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q31;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q15_t *pState;
    q15_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q15;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q7_t *pState;
    q7_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q7;
# 4553 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_f32(
  arm_fir_sparse_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  float32_t * pScratchIn,
  uint32_t blockSize);
# 4571 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_f32(
  arm_fir_sparse_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4589 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q31(
  arm_fir_sparse_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  q31_t * pScratchIn,
  uint32_t blockSize);
# 4607 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q31(
  arm_fir_sparse_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4626 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q15(
  arm_fir_sparse_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  q15_t * pScratchIn,
  q31_t * pScratchOut,
  uint32_t blockSize);
# 4645 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q15(
  arm_fir_sparse_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4664 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_q7(
  arm_fir_sparse_instance_q7 * S,
  q7_t * pSrc,
  q7_t * pDst,
  q7_t * pScratchIn,
  q31_t * pScratchOut,
  uint32_t blockSize);
# 4683 "../../lib/cmsis/inc/arm_math.h"
  void arm_fir_sparse_init_q7(
  arm_fir_sparse_instance_q7 * S,
  uint16_t numTaps,
  q7_t * pCoeffs,
  q7_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4699 "../../lib/cmsis/inc/arm_math.h"
  void arm_sin_cos_f32(
  float32_t theta,
  float32_t * pSinVal,
  float32_t * pCosVal);
# 4711 "../../lib/cmsis/inc/arm_math.h"
  void arm_sin_cos_q31(
  q31_t theta,
  q31_t * pSinVal,
  q31_t * pCosVal);
# 4723 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_conj_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);







  void arm_cmplx_conj_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 4746 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_conj_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 4758 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);
# 4770 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 4782 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_squared_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 4860 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
    float32_t out;


    out = (S->A0 * in) +
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);

  }
# 4894 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_pid_q31(
  arm_pid_instance_q31 * S,
  q31_t in)
  {
    q63_t acc;
    q31_t out;


    acc = (q63_t) S->A0 * in;


    acc += (q63_t) S->A1 * S->state[0];


    acc += (q63_t) S->A2 * S->state[1];


    out = (q31_t) (acc >> 31u);


    out += S->state[2];


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);
  }
# 4941 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_pid_q15(
  arm_pid_instance_q15 * S,
  q15_t in)
  {
    q63_t acc;
    q15_t out;


    int32_t *vstate;




    acc = (q31_t) __SMUAD((uint32_t)S->A0, (uint32_t)in);


    vstate = ((int32_t *)(S->state));
    acc = (q63_t)__SMLALD((uint32_t)S->A1, (uint32_t)*vstate, (uint64_t)acc);
# 4969 "../../lib/cmsis/inc/arm_math.h"
    acc += (q31_t) S->state[2] << 15;


    out = (q15_t) (({ int32_t __RES, __ARG1 = ((acc >> 15)); __asm ("ssat %0, %1, %2" : "=r" (__RES) : "I" (16), "r" (__ARG1) ); __RES; }));


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);
  }
# 4995 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * src,
  arm_matrix_instance_f32 * dst);
# 5007 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_mat_inverse_f64(
  const arm_matrix_instance_f64 * src,
  arm_matrix_instance_f64 * dst);
# 5052 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_clarke_f32(
  float32_t Ia,
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {

    *pIalpha = Ia;


    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
  }
# 5079 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_clarke_q31(
  q31_t Ia,
  q31_t Ib,
  q31_t * pIalpha,
  q31_t * pIbeta)
  {
    q31_t product1, product2;


    *pIalpha = Ia;


    product1 = (q31_t) (((q63_t) Ia * 0x24F34E8B) >> 30);


    product2 = (q31_t) (((q63_t) Ib * 0x49E69D16) >> 30);


    *pIbeta = __QADD(product1, product2);
  }
# 5110 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_q31(
  q7_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 5149 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_clarke_f32(
  float32_t Ialpha,
  float32_t Ibeta,
  float32_t * pIa,
  float32_t * pIb)
  {

    *pIa = Ialpha;


    *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
  }
# 5176 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_clarke_q31(
  q31_t Ialpha,
  q31_t Ibeta,
  q31_t * pIa,
  q31_t * pIb)
  {
    q31_t product1, product2;


    *pIa = Ialpha;


    product1 = (q31_t) (((q63_t) (Ialpha) * (0x40000000)) >> 31);


    product2 = (q31_t) (((q63_t) (Ibeta) * (0x6ED9EBA1)) >> 31);


    *pIb = __QSUB(product2, product1);
  }
# 5207 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_q15(
  q7_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 5259 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_park_f32(
  float32_t Ialpha,
  float32_t Ibeta,
  float32_t * pId,
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {

    *pId = Ialpha * cosVal + Ibeta * sinVal;


    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
  }
# 5290 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_park_q31(
  q31_t Ialpha,
  q31_t Ibeta,
  q31_t * pId,
  q31_t * pIq,
  q31_t sinVal,
  q31_t cosVal)
  {
    q31_t product1, product2;
    q31_t product3, product4;


    product1 = (q31_t) (((q63_t) (Ialpha) * (cosVal)) >> 31);


    product2 = (q31_t) (((q63_t) (Ibeta) * (sinVal)) >> 31);



    product3 = (q31_t) (((q63_t) (Ialpha) * (sinVal)) >> 31);


    product4 = (q31_t) (((q63_t) (Ibeta) * (cosVal)) >> 31);


    *pId = __QADD(product1, product2);


    *pIq = __QSUB(product4, product3);
  }
# 5331 "../../lib/cmsis/inc/arm_math.h"
  void arm_q7_to_float(
  q7_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 5372 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_park_f32(
  float32_t Id,
  float32_t Iq,
  float32_t * pIalpha,
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {

    *pIalpha = Id * cosVal - Iq * sinVal;


    *pIbeta = Id * sinVal + Iq * cosVal;
  }
# 5403 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_park_q31(
  q31_t Id,
  q31_t Iq,
  q31_t * pIalpha,
  q31_t * pIbeta,
  q31_t sinVal,
  q31_t cosVal)
  {
    q31_t product1, product2;
    q31_t product3, product4;


    product1 = (q31_t) (((q63_t) (Id) * (cosVal)) >> 31);


    product2 = (q31_t) (((q63_t) (Iq) * (sinVal)) >> 31);



    product3 = (q31_t) (((q63_t) (Id) * (sinVal)) >> 31);


    product4 = (q31_t) (((q63_t) (Iq) * (cosVal)) >> 31);


    *pIalpha = __QSUB(product1, product2);


    *pIbeta = __QADD(product4, product3);
  }
# 5445 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_float(
  q31_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 5498 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_linear_interp_f32(
  arm_linear_interp_instance_f32 * S,
  float32_t x)
  {
    float32_t y;
    float32_t x0, x1;
    float32_t y0, y1;
    float32_t xSpacing = S->xSpacing;
    int32_t i;
    float32_t *pYData = S->pYData;


    i = (int32_t) ((x - S->x1) / xSpacing);

    if (i < 0)
    {

      y = pYData[0];
    }
    else if ((uint32_t)i >= S->nValues)
    {

      y = pYData[S->nValues - 1];
    }
    else
    {

      x0 = S->x1 + i * xSpacing;
      x1 = S->x1 + (i + 1) * xSpacing;


      y0 = pYData[i];
      y1 = pYData[i + 1];


      y = y0 + (x - x0) * ((y1 - y0) / (x1 - x0));

    }


    return (y);
  }
# 5555 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_linear_interp_q31(
  q31_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q31_t y;
    q31_t y0, y1;
    q31_t fract;
    int32_t index;




    index = ((x & (q31_t)0xFFF00000) >> 20);

    if (index >= (int32_t)(nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else if (index < 0)
    {
      return (pYData[0]);
    }
    else
    {


      fract = (x & 0x000FFFFF) << 11;


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((q31_t) ((q63_t) y0 * (0x7FFFFFFF - fract) >> 32));


      y += ((q31_t) (((q63_t) y1 * fract) >> 32));


      return (y << 1u);
    }
  }
# 5613 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_linear_interp_q15(
  q15_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q63_t y;
    q15_t y0, y1;
    q31_t fract;
    int32_t index;




    index = ((x & (int32_t)0xFFF00000) >> 20);

    if (index >= (int32_t)(nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else if (index < 0)
    {
      return (pYData[0]);
    }
    else
    {


      fract = (x & 0x000FFFFF);


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((q63_t) y0 * (0xFFFFF - fract));


      y += ((q63_t) y1 * (fract));


      return (q15_t) (y >> 20);
    }
  }
# 5670 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q7_t arm_linear_interp_q7(
  q7_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q31_t y;
    q7_t y0, y1;
    q31_t fract;
    uint32_t index;




    if (x < 0)
    {
      return (pYData[0]);
    }
    index = (x >> 20) & 0xfff;

    if (index >= (nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else
    {


      fract = (x & 0x000FFFFF);


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((y0 * (0xFFFFF - fract)));


      y += (y1 * fract);


      return (q7_t) (y >> 20);
     }
  }
# 5723 "../../lib/cmsis/inc/arm_math.h"
  float32_t arm_sin_f32(
  float32_t x);







  q31_t arm_sin_q31(
  q31_t x);







  q15_t arm_sin_q15(
  q15_t x);







  float32_t arm_cos_f32(
  float32_t x);







  q31_t arm_cos_q31(
  q31_t x);







  q15_t arm_cos_q15(
  q15_t x);
# 5810 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
    {






      *pOut = __builtin_sqrtf(in);






      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
      return (ARM_MATH_ARGUMENT_ERROR);
    }
  }
# 5846 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut);
# 5858 "../../lib/cmsis/inc/arm_math.h"
  arm_status arm_sqrt_q15(
  q15_t in,
  q15_t * pOut);
# 5870 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline void arm_circularWrite_f32(
  int32_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const int32_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }






  __attribute__((always_inline)) static inline void arm_circularRead_f32(
  int32_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  int32_t * dst,
  int32_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;
    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (int32_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularWrite_q15(
  q15_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const q15_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularRead_q15(
  q15_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  q15_t * dst,
  q15_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;

    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (q15_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularWrite_q7(
  q7_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const q7_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0u;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0u)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularRead_q7(
  q7_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  q7_t * dst,
  q7_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;

    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0u)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (q7_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }
# 6173 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult);
# 6185 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6197 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult);
# 6209 "../../lib/cmsis/inc/arm_math.h"
  void arm_power_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6221 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * pResult);
# 6233 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6245 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6257 "../../lib/cmsis/inc/arm_math.h"
  void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6269 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6281 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6293 "../../lib/cmsis/inc/arm_math.h"
  void arm_var_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6305 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6317 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6329 "../../lib/cmsis/inc/arm_math.h"
  void arm_rms_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6341 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6353 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6365 "../../lib/cmsis/inc/arm_math.h"
  void arm_std_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6377 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);
# 6389 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 6401 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mag_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 6415 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  uint32_t numSamples,
  q31_t * realResult,
  q31_t * imagResult);
# 6431 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  uint32_t numSamples,
  q63_t * realResult,
  q63_t * imagResult);
# 6447 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t numSamples,
  float32_t * realResult,
  float32_t * imagResult);
# 6462 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_q15(
  q15_t * pSrcCmplx,
  q15_t * pSrcReal,
  q15_t * pCmplxDst,
  uint32_t numSamples);
# 6476 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_q31(
  q31_t * pSrcCmplx,
  q31_t * pSrcReal,
  q31_t * pCmplxDst,
  uint32_t numSamples);
# 6490 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_real_f32(
  float32_t * pSrcCmplx,
  float32_t * pSrcReal,
  float32_t * pCmplxDst,
  uint32_t numSamples);
# 6504 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * result,
  uint32_t * index);
# 6518 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex);
# 6532 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult,
  uint32_t * pIndex);
# 6546 "../../lib/cmsis/inc/arm_math.h"
  void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex);
# 6560 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * pResult,
  uint32_t * pIndex);
# 6574 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex);
# 6588 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult,
  uint32_t * pIndex);
# 6602 "../../lib/cmsis/inc/arm_math.h"
  void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex);
# 6616 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t numSamples);
# 6630 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t numSamples);
# 6644 "../../lib/cmsis/inc/arm_math.h"
  void arm_cmplx_mult_cmplx_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples);
# 6657 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q31(
  float32_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 6669 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q15(
  float32_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 6681 "../../lib/cmsis/inc/arm_math.h"
  void arm_float_to_q7(
  float32_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6693 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_q15(
  q31_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 6705 "../../lib/cmsis/inc/arm_math.h"
  void arm_q31_to_q7(
  q31_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6717 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_float(
  q15_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 6729 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_q31(
  q15_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 6741 "../../lib/cmsis/inc/arm_math.h"
  void arm_q15_to_q7(
  q15_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6817 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_bilinear_interp_f32(
  const arm_bilinear_interp_instance_f32 * S,
  float32_t X,
  float32_t Y)
  {
    float32_t out;
    float32_t f00, f01, f10, f11;
    float32_t *pData = S->pData;
    int32_t xIndex, yIndex, index;
    float32_t xdiff, ydiff;
    float32_t b1, b2, b3, b4;

    xIndex = (int32_t) X;
    yIndex = (int32_t) Y;



    if (xIndex < 0 || xIndex > (S->numRows - 1) || yIndex < 0 || yIndex > (S->numCols - 1))
    {
      return (0);
    }


    index = (xIndex - 1) + (yIndex - 1) * S->numCols;



    f00 = pData[index];
    f01 = pData[index + 1];


    index = (xIndex - 1) + (yIndex) * S->numCols;



    f10 = pData[index];
    f11 = pData[index + 1];


    b1 = f00;
    b2 = f01 - f00;
    b3 = f10 - f00;
    b4 = f00 - f01 - f10 + f11;


    xdiff = X - xIndex;


    ydiff = Y - yIndex;


    out = b1 + b2 * xdiff + b3 * ydiff + b4 * xdiff * ydiff;


    return (out);
  }
# 6883 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_bilinear_interp_q31(
  arm_bilinear_interp_instance_q31 * S,
  q31_t X,
  q31_t Y)
  {
    q31_t out;
    q31_t acc = 0;
    q31_t xfract, yfract;
    q31_t x1, x2, y1, y2;
    int32_t rI, cI;
    q31_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & 0x000FFFFF) << 11u;


    x1 = pYData[(rI) + (int32_t)nCols * (cI) ];
    x2 = pYData[(rI) + (int32_t)nCols * (cI) + 1];



    yfract = (Y & 0x000FFFFF) << 11u;


    y1 = pYData[(rI) + (int32_t)nCols * (cI + 1) ];
    y2 = pYData[(rI) + (int32_t)nCols * (cI + 1) + 1];


    out = ((q31_t) (((q63_t) x1 * (0x7FFFFFFF - xfract)) >> 32));
    acc = ((q31_t) (((q63_t) out * (0x7FFFFFFF - yfract)) >> 32));


    out = ((q31_t) ((q63_t) x2 * (0x7FFFFFFF - yfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (xfract) >> 32));


    out = ((q31_t) ((q63_t) y1 * (0x7FFFFFFF - xfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));


    out = ((q31_t) ((q63_t) y2 * (xfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));


    return ((q31_t)(acc << 2));
  }
# 6957 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_bilinear_interp_q15(
  arm_bilinear_interp_instance_q15 * S,
  q31_t X,
  q31_t Y)
  {
    q63_t acc = 0;
    q31_t out;
    q15_t x1, x2, y1, y2;
    q31_t xfract, yfract;
    int32_t rI, cI;
    q15_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & 0x000FFFFF);


    x1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) ];
    x2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) + 1];



    yfract = (Y & 0x000FFFFF);


    y1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) ];
    y2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) + 1];





    out = (q31_t) (((q63_t) x1 * (0xFFFFF - xfract)) >> 4u);
    acc = ((q63_t) out * (0xFFFFF - yfract));


    out = (q31_t) (((q63_t) x2 * (0xFFFFF - yfract)) >> 4u);
    acc += ((q63_t) out * (xfract));


    out = (q31_t) (((q63_t) y1 * (0xFFFFF - xfract)) >> 4u);
    acc += ((q63_t) out * (yfract));


    out = (q31_t) (((q63_t) y2 * (xfract)) >> 4u);
    acc += ((q63_t) out * (yfract));



    return ((q15_t)(acc >> 36));
  }
# 7035 "../../lib/cmsis/inc/arm_math.h"
  __attribute__((always_inline)) static inline q7_t arm_bilinear_interp_q7(
  arm_bilinear_interp_instance_q7 * S,
  q31_t X,
  q31_t Y)
  {
    q63_t acc = 0;
    q31_t out;
    q31_t xfract, yfract;
    q7_t x1, x2, y1, y2;
    int32_t rI, cI;
    q7_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & (q31_t)0x000FFFFF);


    x1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) ];
    x2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) + 1];



    yfract = (Y & (q31_t)0x000FFFFF);


    y1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) ];
    y2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) + 1];


    out = ((x1 * (0xFFFFF - xfract)));
    acc = (((q63_t) out * (0xFFFFF - yfract)));


    out = ((x2 * (0xFFFFF - yfract)));
    acc += (((q63_t) out * (xfract)));


    out = ((y1 * (0xFFFFF - xfract)));
    acc += (((q63_t) out * (yfract)));


    out = ((y2 * (yfract)));
    acc += (((q63_t) out * (xfract)));


    return ((q7_t)(acc >> 40));
  }
# 7218 "../../lib/cmsis/inc/arm_math.h"
#pragma GCC diagnostic pop
# 19 "./omv/img/imlib.h" 2
# 1 "../../lib/oofatfs/ff.h" 1
# 20 "./omv/img/imlib.h" 2
# 1 "./omv/fb_alloc.h" 1
# 12 "./omv/fb_alloc.h"
void fb_alloc_fail();
void fb_alloc_init0();
uint32_t fb_avail();
void fb_alloc_mark();
void fb_alloc_free_till_mark();
void *fb_alloc(uint32_t size);
void *fb_alloc0(uint32_t size);
void *fb_alloc_all(uint32_t *size);
void *fb_alloc0_all(uint32_t *size);
void fb_free();
void fb_free_all();
# 21 "./omv/img/imlib.h" 2
# 1 "./omv/umm_malloc.h" 1
# 10 "./omv/umm_malloc.h"
void umm_alloc_fail();
# 48 "./omv/umm_malloc.h"
void umm_init_x( size_t size );
void *umm_malloc( size_t size );
void *umm_calloc( size_t num, size_t size );
void *umm_realloc( void *ptr, size_t size );
void umm_free( void *ptr );
# 22 "./omv/img/imlib.h" 2
# 1 "./omv/xalloc.h" 1
# 12 "./omv/xalloc.h"
void *xalloc(uint32_t size);
void *xalloc_try_alloc(uint32_t size);
void *xalloc0(uint32_t size);
void xfree(void *mem);
void *xrealloc(void *mem, uint32_t size);
# 23 "./omv/img/imlib.h" 2
# 1 "./omv/array.h" 1
# 11 "./omv/array.h"
typedef void (*array_dtor_t)(void*);
typedef int (*array_comp_t)(const void*, const void*);



typedef struct {
    int index;
    int length;
    void **data;
    array_dtor_t dtor;
} array_t;
void array_alloc(array_t **a, array_dtor_t dtor);
void array_alloc_init(array_t **a, array_dtor_t dtor, int size);
void array_clear(array_t *array);
void array_free(array_t *array);
int array_length(array_t *array);
void *array_at(array_t *array, int idx);
void array_push_back(array_t *array, void *element);
void *array_pop_back(array_t *array);
void *array_take(array_t *array, int idx);
void array_erase(array_t *array, int idx);
void array_resize(array_t *array, int num);
void array_sort(array_t *array, array_comp_t comp);
void array_isort(array_t *array, array_comp_t comp);
# 24 "./omv/img/imlib.h" 2
# 1 "./omv/img/fmath.h" 1
# 12 "./omv/img/fmath.h"
# 1 "./omv/common.h" 1
# 13 "./omv/img/fmath.h" 2
# 101 "./omv/img/fmath.h"
float fast_sqrtf(float x);
int fast_floorf(float x);
int fast_ceilf(float x);


int fast_roundf(float x);


float fast_atanf(float x);
float fast_atan2f(float y, float x);
float fast_expf(float x);
float fast_cbrtf(float d);
float fast_fabsf(float d);
float fast_log(float x);
float fast_log2(float x);
float fast_powf(float a, float b);
extern const float cos_table[360];
extern const float sin_table[360];
# 25 "./omv/img/imlib.h" 2
# 1 "./omv/img/collections.h" 1
# 9 "./omv/img/collections.h"
# 1 "/home/rocky/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h" 1 3 4
# 10 "./omv/img/collections.h" 2





typedef struct bitmap
{
    size_t size;
    char *data;
}
bitmap_t;

void bitmap_alloc(bitmap_t *ptr, size_t size);
void bitmap_free(bitmap_t *ptr);
void bitmap_clear(bitmap_t *ptr);
void bitmap_bit_set(bitmap_t *ptr, size_t index);

# 26 "./omv/img/collections.h" 3 4
_Bool 
# 26 "./omv/img/collections.h"
    bitmap_bit_get(bitmap_t *ptr, size_t index);







typedef struct lifo
{
    size_t len, size, data_len;
    char *data;
}
lifo_t;

void lifo_alloc(lifo_t *ptr, size_t size, size_t data_len);
void lifo_alloc_all(lifo_t *ptr, size_t *size, size_t data_len);
void lifo_free(lifo_t *ptr);
void lifo_clear(lifo_t *ptr);
size_t lifo_size(lifo_t *ptr);

# 46 "./omv/img/collections.h" 3 4
_Bool 
# 46 "./omv/img/collections.h"
    lifo_is_not_empty(lifo_t *ptr);

# 47 "./omv/img/collections.h" 3 4
_Bool 
# 47 "./omv/img/collections.h"
    lifo_is_not_full(lifo_t *ptr);
void lifo_enqueue(lifo_t *ptr, void *data);
void lifo_dequeue(lifo_t *ptr, void *data);
void lifo_poke(lifo_t *ptr, void *data);
void lifo_peek(lifo_t *ptr, void *data);





typedef struct fifo
{
    size_t head_ptr, tail_ptr, len, size, data_len;
    char *data;
}
fifo_t;

void fifo_alloc(fifo_t *ptr, size_t size, size_t data_len);
void fifo_alloc_all(fifo_t *ptr, size_t *size, size_t data_len);
void fifo_free(fifo_t *ptr);
void fifo_clear(fifo_t *ptr);
size_t fifo_size(fifo_t *ptr);

# 69 "./omv/img/collections.h" 3 4
_Bool 
# 69 "./omv/img/collections.h"
    fifo_is_not_empty(fifo_t *ptr);

# 70 "./omv/img/collections.h" 3 4
_Bool 
# 70 "./omv/img/collections.h"
    fifo_is_not_full(fifo_t *ptr);
void fifo_enqueue(fifo_t *ptr, void *data);
void fifo_dequeue(fifo_t *ptr, void *data);
void fifo_poke(fifo_t *ptr, void *data);
void fifo_peek(fifo_t *ptr, void *data);





typedef struct list_lnk
{
    struct list_lnk *next_ptr, *prev_ptr;
    char data[];
}
list_lnk_t;

typedef struct list
{
    list_lnk_t *head_ptr, *tail_ptr;
    size_t size, data_len;
}
list_t;

void list_init(list_t *ptr, size_t data_len);
void list_copy(list_t *dst, list_t *src);
void list_free(list_t *ptr);
void list_clear(list_t *ptr);
size_t list_size(list_t *ptr);
void list_push_front(list_t *ptr, void *data);
void list_push_back(list_t *ptr, void *data);
void list_pop_front(list_t *ptr, void *data);
void list_pop_back(list_t *ptr, void *data);
void list_get_front(list_t *ptr, void *data);
void list_get_back(list_t *ptr, void *data);
void list_set_front(list_t *ptr, void *data);
void list_set_back(list_t *ptr, void *data);
void list_insert(list_t *ptr, void *data, size_t index);
void list_remove(list_t *ptr, void *data, size_t index);
void list_get(list_t *ptr, void *data, size_t index);
void list_set(list_t *ptr, void *data, size_t index);





list_lnk_t *iterator_start_from_head(list_t *ptr);
list_lnk_t *iterator_start_from_tail(list_t *ptr);
list_lnk_t *iterator_next(list_lnk_t *lnk);
list_lnk_t *iterator_prev(list_lnk_t *lnk);
void iterator_get(list_t *ptr, list_lnk_t *lnk, void *data);
void iterator_set(list_t *ptr, list_lnk_t *lnk, void *data);
# 26 "./omv/img/imlib.h" 2
# 1 "./omv/imlib_config.h" 1
# 27 "./omv/img/imlib.h" 2

# 1 "./overlay_manager.h" 1
# 17 "./overlay_manager.h"
extern int OverlaySwitch(uint8_t ovlyNdx);
extern int OverlaySetToDefault(void);
# 29 "./omv/img/imlib.h" 2
# 81 "./omv/img/imlib.h"
typedef struct point {
    int16_t x;
    int16_t y;
} point_t;

void point_init(point_t *ptr, int x, int y);
void point_copy(point_t *dst, point_t *src);

# 88 "./omv/img/imlib.h" 3 4
_Bool 
# 88 "./omv/img/imlib.h"
    point_equal_fast(point_t *ptr0, point_t *ptr1);
int point_quadrance(point_t *ptr0, point_t *ptr1);
void point_rotate(int x, int y, float r, int center_x, int center_y, int16_t *new_x, int16_t *new_y);
void point_min_area_rectangle(point_t *corners, point_t *new_corners, int corners_len);





typedef struct line {
    int16_t x1;
    int16_t y1;
    int16_t x2;
    int16_t y2;
} line_t;


# 104 "./omv/img/imlib.h" 3 4
_Bool 
# 104 "./omv/img/imlib.h"
    lb_clip_line(line_t *l, int x, int y, int w, int h);





typedef struct rectangle {
    int16_t x;
    int16_t y;
    int16_t w;
    int16_t h;
} rectangle_t;

void rectangle_init(rectangle_t *ptr, int x, int y, int w, int h);
void rectangle_copy(rectangle_t *dst, rectangle_t *src);

# 119 "./omv/img/imlib.h" 3 4
_Bool 
# 119 "./omv/img/imlib.h"
    rectangle_equal_fast(rectangle_t *ptr0, rectangle_t *ptr1);

# 120 "./omv/img/imlib.h" 3 4
_Bool 
# 120 "./omv/img/imlib.h"
    rectangle_overlap(rectangle_t *ptr0, rectangle_t *ptr1);
void rectangle_intersected(rectangle_t *dst, rectangle_t *src);
void rectangle_united(rectangle_t *dst, rectangle_t *src);





typedef struct color_thresholds_list_lnk_data
{
    uint8_t LMin, LMax;
    int8_t AMin, AMax;
    int8_t BMin, BMax;
}
color_thresholds_list_lnk_data_t;
# 229 "./omv/img/imlib.h"
extern const uint8_t rb528_table[32];
extern const uint8_t g628_table[64];





extern const uint8_t rb825_table[256];
extern const uint8_t g826_table[256];
# 266 "./omv/img/imlib.h"
extern const int8_t lab_table[196608];
extern const int8_t yuv_table[196608];
# 353 "./omv/img/imlib.h"
typedef enum {
    COLOR_PALETTE_RAINBOW,
    COLOR_PALETTE_IRONBOW
} color_palette_t;


extern const uint16_t rainbow_table[256];
extern const uint16_t ironbow_table[256];





typedef enum image_bpp
{
    IMAGE_BPP_BINARY,
    IMAGE_BPP_GRAYSCALE,
    IMAGE_BPP_RGB565,
    IMAGE_BPP_BAYER,
    IMAGE_BPP_JPEG
}
image_bpp_t;

typedef struct image {
    int w;
    int h;
    int bpp;
    union {
        uint8_t *pixels;
        uint8_t *data;
    };
} image_t;

void image_init(image_t *ptr, int w, int h, int bpp, void *data);
void image_copy(image_t *dst, image_t *src);
size_t image_size(image_t *ptr);

# 389 "./omv/img/imlib.h" 3 4
_Bool 
# 389 "./omv/img/imlib.h"
    image_get_mask_pixel(image_t *ptr, int x, int y);
# 684 "./omv/img/imlib.h"
extern const uint8_t rb528_table[32];
extern const uint8_t g628_table[64];
# 700 "./omv/img/imlib.h"
extern const uint8_t rb825_table[256];
extern const uint8_t g826_table[256];
# 738 "./omv/img/imlib.h"
extern const int8_t kernel_gauss_3[9];
extern const int8_t kernel_gauss_5[25];
extern const int kernel_laplacian_3[9];
extern const int kernel_high_pass_3[9];
# 871 "./omv/img/imlib.h"
typedef struct simple_color {
    uint8_t G;
    union {
        int8_t L;
        uint8_t red;
    };
    union {
        int8_t A;
        uint8_t green;
    };
    union {
        int8_t B;
        uint8_t blue;
    };
} simple_color_t;

typedef struct integral_image {
    int w;
    int h;
    uint32_t *data;
} i_image_t;

typedef struct {
    int w;
    int h;
    int y_offs;
    int x_ratio;
    int y_ratio;
    uint32_t **data;
    uint32_t **swap;
} mw_image_t;

typedef struct _vector {
    float x;
    float y;
    float m;
    uint16_t cx,cy;
} vec_t;

typedef struct cluster {
    int x, y, w, h;
    array_t *points;
} cluster_t;


typedef float (*cluster_dist_t)(int cx, int cy, void *obj);


typedef struct kp {
    uint16_t x;
    uint16_t y;
    uint16_t score;
    uint16_t octave;
    uint16_t angle;
    uint16_t matched;
    uint8_t desc[32];
} kp_t;

typedef struct size {
    int w;
    int h;
} wsize_t;


typedef struct cascade {
    int std;
    int step;
    float threshold;
    float scale_factor;
    int n_stages;
    int n_features;
    int n_rectangles;
    struct size window;
    struct image *img;
    mw_image_t *sum;
    mw_image_t *ssq;
    uint8_t *stages_array;
    int16_t *stages_thresh_array;
    int16_t *tree_thresh_array;
    int16_t *alpha1_array;
    int16_t *alpha2_array;
    int8_t *num_rectangles_array;
    int8_t *weights_array;
    int8_t *rectangles_array;
} cascade_t;

typedef struct bmp_read_settings {
    int32_t bmp_w;
    int32_t bmp_h;
    uint16_t bmp_bpp;
    uint32_t bmp_fmt;
    uint32_t bmp_row_bytes;
} bmp_read_settings_t;

typedef struct ppm_read_settings {
    uint8_t read_int_c;
    
# 967 "./omv/img/imlib.h" 3 4
   _Bool 
# 967 "./omv/img/imlib.h"
        read_int_c_valid;
    uint8_t ppm_fmt;
} ppm_read_settings_t;

typedef enum save_image_format {
    FORMAT_DONT_CARE,
    FORMAT_BMP,
    FORMAT_PNM,
    FORMAT_JPG,
    FORMAT_RAW,
} save_image_format_t;

typedef struct img_read_settings {
    union
    {
        bmp_read_settings_t bmp_rs;
        ppm_read_settings_t ppm_rs;
    };
    save_image_format_t format;
} img_read_settings_t;

typedef void (*line_op_t)(image_t*, int, void*, void*, 
# 988 "./omv/img/imlib.h" 3 4
                                                      _Bool
# 988 "./omv/img/imlib.h"
                                                          );
typedef void (*flood_fill_call_back_t)(image_t *, int, int, int, void *);

typedef enum descriptor_type {
    DESC_LBP,
    DESC_ORB,
} descriptor_t;

typedef enum edge_detector_type {
   EDGE_CANNY,
   EDGE_SIMPLE,
} edge_detector_t;

typedef enum template_match {
    SEARCH_EX,
    SEARCH_DS,
} template_match_t;

typedef enum jpeg_subsample {
    JPEG_SUBSAMPLE_1x1 = 0x11,
    JPEG_SUBSAMPLE_2x1 = 0x21,
    JPEG_SUBSAMPLE_2x2 = 0x22,
} jpeg_subsample_t;

typedef enum corner_detector_type {
    CORNER_FAST,
    CORNER_AGAST
} corner_detector_t;

typedef struct histogram {
    int LBinCount;
    float *LBins;
    int ABinCount;
    float *ABins;
    int BBinCount;
    float *BBins;
} histogram_t;

typedef struct percentile {
    uint8_t LValue;
    int8_t AValue;
    int8_t BValue;
} percentile_t;

typedef struct threshold {
    uint8_t LValue;
    int8_t AValue;
    int8_t BValue;
} threshold_t;

typedef struct statistics {
    uint8_t LMean, LMedian, LMode, LSTDev, LMin, LMax, LLQ, LUQ;
    int8_t AMean, AMedian, AMode, ASTDev, AMin, AMax, ALQ, AUQ;
    int8_t BMean, BMedian, BMode, BSTDev, BMin, BMax, BLQ, BUQ;
} statistics_t;




typedef struct find_blobs_list_lnk_data {
    point_t corners[20];
    rectangle_t rect;
    uint32_t pixels, perimeter, code, count;
    float centroid_x, centroid_y, rotation, roundness;
    uint16_t x_hist_bins_count, y_hist_bins_count, *x_hist_bins, *y_hist_bins;
    float centroid_x_acc, centroid_y_acc, rotation_acc_x, rotation_acc_y, roundness_acc;
} find_blobs_list_lnk_data_t;

typedef struct find_lines_list_lnk_data {
    line_t line;
    uint32_t magnitude;
    int16_t theta, rho;
} find_lines_list_lnk_data_t;

typedef struct find_circles_list_lnk_data {
    point_t p;
    uint32_t r, magnitude;
} find_circles_list_lnk_data_t;

typedef struct find_rects_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    uint32_t magnitude;
} find_rects_list_lnk_data_t;

typedef struct find_qrcodes_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint8_t version, ecc_level, mask, data_type;
    uint32_t eci;
} find_qrcodes_list_lnk_data_t;

typedef enum apriltag_families {
    TAG16H5 = 1,
    TAG25H7 = 2,
    TAG25H9 = 4,
    TAG36H10 = 8,
    TAG36H11 = 16,
    ARTOOLKIT = 32
} apriltag_families_t;

typedef struct find_apriltags_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    uint16_t id;
    uint8_t family, hamming;
    point_t centroid;
    float goodness, decision_margin;
    float x_translation, y_translation, z_translation;
    float x_rotation, y_rotation, z_rotation;
} find_apriltags_list_lnk_data_t;

typedef struct find_datamatrices_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint16_t rotation;
    uint8_t rows, columns;
    uint16_t capacity, padding;
} find_datamatrices_list_lnk_data_t;

typedef enum barcodes {
    BARCODE_EAN2,
    BARCODE_EAN5,
    BARCODE_EAN8,
    BARCODE_UPCE,
    BARCODE_ISBN10,
    BARCODE_UPCA,
    BARCODE_EAN13,
    BARCODE_ISBN13,
    BARCODE_I25,
    BARCODE_DATABAR,
    BARCODE_DATABAR_EXP,
    BARCODE_CODABAR,
    BARCODE_CODE39,
    BARCODE_PDF417,
    BARCODE_CODE93,
    BARCODE_CODE128
} barcodes_t;

typedef struct find_barcodes_list_lnk_data {
    point_t corners[4];
    rectangle_t rect;
    size_t payload_len;
    char *payload;
    uint16_t type, rotation;
    int quality;
} find_barcodes_list_lnk_data_t;


int8_t imlib_rgb565_to_l(uint16_t pixel);
int8_t imlib_rgb565_to_a(uint16_t pixel);
int8_t imlib_rgb565_to_b(uint16_t pixel);
int8_t imlib_rgb565_to_y(uint16_t pixel);
int8_t imlib_rgb565_to_u(uint16_t pixel);
int8_t imlib_rgb565_to_v(uint16_t pixel);
uint16_t imlib_lab_to_rgb(uint8_t l, int8_t a, int8_t b);
uint16_t imlib_yuv_to_rgb(uint8_t y, int8_t u, int8_t v);
void imlib_bayer_to_rgb565(image_t *img, int w, int h, int xoffs, int yoffs, uint16_t *rgbbuf);


void ppm_read_geometry(FIL *fp, image_t *img, const char *path, ppm_read_settings_t *rs);
void ppm_read_pixels(FIL *fp, image_t *img, int line_start, int line_end, ppm_read_settings_t *rs);
void ppm_read(image_t *img, const char *path);
void ppm_write_subimg(image_t *img, const char *path, rectangle_t *r);

# 1156 "./omv/img/imlib.h" 3 4
_Bool 
# 1156 "./omv/img/imlib.h"
    bmp_read_geometry(FIL *fp, image_t *img, const char *path, bmp_read_settings_t *rs);
void bmp_read_pixels(FIL *fp, image_t *img, int line_start, int line_end, bmp_read_settings_t *rs);
void bmp_read(image_t *img, const char *path);
void bmp_write_subimg(image_t *img, const char *path, rectangle_t *r);

# 1160 "./omv/img/imlib.h" 3 4
_Bool 
# 1160 "./omv/img/imlib.h"
    jpeg_compress(image_t *src, image_t *dst, int quality, 
# 1160 "./omv/img/imlib.h" 3 4
                                                           _Bool 
# 1160 "./omv/img/imlib.h"
                                                                realloc);
void jpeg_read_geometry(FIL *fp, image_t *img, const char *path);
void jpeg_read_pixels(FIL *fp, image_t *img);
void jpeg_read(image_t *img, const char *path);
void jpeg_write(image_t *img, const char *path, int quality);

# 1165 "./omv/img/imlib.h" 3 4
_Bool 
# 1165 "./omv/img/imlib.h"
    imlib_read_geometry(FIL *fp, image_t *img, const char *path, img_read_settings_t *rs);
void imlib_image_operation(image_t *img, const char *path, image_t *other, int scalar, line_op_t op, void *data);
void imlib_load_image(image_t *img, const char *path);
void imlib_save_image(image_t *img, const char *path, rectangle_t *roi, int quality);


void gif_open(FIL *fp, int width, int height, 
# 1171 "./omv/img/imlib.h" 3 4
                                             _Bool 
# 1171 "./omv/img/imlib.h"
                                                  color, 
# 1171 "./omv/img/imlib.h" 3 4
                                                         _Bool 
# 1171 "./omv/img/imlib.h"
                                                              loop);
void gif_add_frame(FIL *fp, image_t *img, uint16_t delay);
void gif_close(FIL *fp);


void mjpeg_open(FIL *fp, int width, int height);
void mjpeg_add_frame(FIL *fp, uint32_t *frames, uint32_t *bytes, image_t *img, int quality);
void mjpeg_close(FIL *fp, uint32_t *frames, uint32_t *bytes, float fps);


point_t *point_alloc(int16_t x, int16_t y);

# 1182 "./omv/img/imlib.h" 3 4
_Bool 
# 1182 "./omv/img/imlib.h"
    point_equal(point_t *p1, point_t *p2);
float point_distance(point_t *p1, point_t *p2);


rectangle_t *rectangle_alloc(int16_t x, int16_t y, int16_t w, int16_t h);

# 1187 "./omv/img/imlib.h" 3 4
_Bool 
# 1187 "./omv/img/imlib.h"
    rectangle_equal(rectangle_t *r1, rectangle_t *r2);

# 1188 "./omv/img/imlib.h" 3 4
_Bool 
# 1188 "./omv/img/imlib.h"
    rectangle_intersects(rectangle_t *r1, rectangle_t *r2);

# 1189 "./omv/img/imlib.h" 3 4
_Bool 
# 1189 "./omv/img/imlib.h"
    rectangle_subimg(image_t *img, rectangle_t *r, rectangle_t *r_out);
array_t *rectangle_merge(array_t *rectangles);
void rectangle_expand(rectangle_t *r, int x, int y);


void imlib_sepconv3(image_t *img, const int8_t *krn, const float m, const int b);


int imlib_image_mean(image_t *src, int *r_mean, int *g_mean, int *b_mean);
int imlib_image_std(image_t *src);


void imlib_midpoint_pool(image_t *img_i, image_t *img_o, int x_div, int y_div, const int bias);
void imlib_mean_pool(image_t *img_i, image_t *img_o, int x_div, int y_div);
float imlib_template_match_ds(image_t *image, image_t *template, rectangle_t *r);
float imlib_template_match_ex(image_t *image, image_t *template, rectangle_t *roi, int step, rectangle_t *r);


array_t *cluster_kmeans(array_t *points, int k, cluster_dist_t dist_func);


void imlib_integral_image_alloc(struct integral_image *sum, int w, int h);
void imlib_integral_image_free(struct integral_image *sum);
void imlib_integral_image(struct image *src, struct integral_image *sum);
void imlib_integral_image_sq(struct image *src, struct integral_image *sum);
void imlib_integral_image_scaled(struct image *src, struct integral_image *sum);
uint32_t imlib_integral_lookup(struct integral_image *src, int x, int y, int w, int h);


void imlib_integral_mw_alloc(mw_image_t *sum, int w, int h);
void imlib_integral_mw_free(mw_image_t *sum);
void imlib_integral_mw_scale(rectangle_t *roi, mw_image_t *sum, int w, int h);
void imlib_integral_mw(image_t *src, mw_image_t *sum);
void imlib_integral_mw_sq(image_t *src, mw_image_t *sum);
void imlib_integral_mw_shift(image_t *src, mw_image_t *sum, int n);
void imlib_integral_mw_shift_sq(image_t *src, mw_image_t *sum, int n);
void imlib_integral_mw_ss(image_t *src, mw_image_t *sum, mw_image_t *ssq, rectangle_t *roi);
void imlib_integral_mw_shift_ss(image_t *src, mw_image_t *sum, mw_image_t *ssq, rectangle_t *roi, int n);
long imlib_integral_mw_lookup(mw_image_t *sum, int x, int y, int w, int h);


int imlib_load_cascade(struct cascade* cascade, const char *path);
array_t *imlib_detect_objects(struct image *image, struct cascade *cascade, struct rectangle *roi);


void fast_detect(image_t *image, array_t *keypoints, int threshold, rectangle_t *roi);
void agast_detect(image_t *image, array_t *keypoints, int threshold, rectangle_t *roi);


array_t *orb_find_keypoints(image_t *image, 
# 1238 "./omv/img/imlib.h" 3 4
                                           _Bool 
# 1238 "./omv/img/imlib.h"
                                                normalized, int threshold,
        float scale_factor, int max_keypoints, corner_detector_t corner_detector, rectangle_t *roi);
int orb_match_keypoints(array_t *kpts1, array_t *kpts2, int *match, int threshold, rectangle_t *r, point_t *c, int *angle);
int orb_filter_keypoints(array_t *kpts, rectangle_t *r, point_t *c);
int orb_save_descriptor(FIL *fp, array_t *kpts);
int orb_load_descriptor(FIL *fp, array_t *kpts);
float orb_cluster_dist(int cx, int cy, void *kp);


uint8_t *imlib_lbp_desc(image_t *image, rectangle_t *roi);
int imlib_lbp_desc_distance(uint8_t *d0, uint8_t *d1);
int imlib_lbp_desc_save(FIL *fp, uint8_t *desc);
int imlib_lbp_desc_load(FIL *fp, uint8_t **desc);


void imlib_find_iris(image_t *src, point_t *iris, rectangle_t *roi);


void im_filter_bw(uint8_t *src, uint8_t *dst, int size, int bpp, void *args);
void im_filter_skin(uint8_t *src, uint8_t *dst, int size, int bpp, void *args);


void imlib_edge_simple(image_t *src, rectangle_t *roi, int low_thresh, int high_thresh);
void imlib_edge_canny(image_t *src, rectangle_t *roi, int low_thresh, int high_thresh);


void imlib_find_hog(image_t *src, rectangle_t *roi, int cell_size);


void imlib_zero(image_t *img, image_t *mask, 
# 1267 "./omv/img/imlib.h" 3 4
                                            _Bool 
# 1267 "./omv/img/imlib.h"
                                                 invert);
void imlib_flood_fill_int(image_t *out, image_t *img, int x, int y,
                          int seed_threshold, int floating_threshold,
                          flood_fill_call_back_t cb, void *data);

int imlib_get_pixel(image_t *img, int x, int y);
void imlib_set_pixel(image_t *img, int x, int y, int p);
void imlib_draw_line(image_t *img, int x0, int y0, int x1, int y1, int c, int thickness);
void imlib_draw_rectangle(image_t *img, int rx, int ry, int rw, int rh, int c, int thickness, 
# 1275 "./omv/img/imlib.h" 3 4
                                                                                             _Bool 
# 1275 "./omv/img/imlib.h"
                                                                                                  fill);
void imlib_draw_circle(image_t *img, int cx, int cy, int r, int c, int thickness, 
# 1276 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1276 "./omv/img/imlib.h"
                                                                                      fill);
void imlib_draw_ellipse(image_t *img, int cx, int cy, int rx, int ry, int rotation, int c, int thickness, 
# 1277 "./omv/img/imlib.h" 3 4
                                                                                                         _Bool 
# 1277 "./omv/img/imlib.h"
                                                                                                              fill);
void imlib_draw_string(image_t *img, int x_off, int y_off, const char *str, int c, float scale, int x_spacing, int y_spacing, 
# 1278 "./omv/img/imlib.h" 3 4
                                                                                                                             _Bool 
# 1278 "./omv/img/imlib.h"
                                                                                                                                  mono_space,
                       int char_rotation, 
# 1279 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1279 "./omv/img/imlib.h"
                                              char_hmirror, 
# 1279 "./omv/img/imlib.h" 3 4
                                                            _Bool 
# 1279 "./omv/img/imlib.h"
                                                                 char_vflip, int string_rotation, 
# 1279 "./omv/img/imlib.h" 3 4
                                                                                                  _Bool 
# 1279 "./omv/img/imlib.h"
                                                                                                       string_hmirror, 
# 1279 "./omv/img/imlib.h" 3 4
                                                                                                                       _Bool 
# 1279 "./omv/img/imlib.h"
                                                                                                                            string_hflip);
void imlib_draw_image(image_t *img, image_t *other, int x_off, int y_off, float x_scale, float y_scale, float alpha, image_t *mask);
void imlib_flood_fill(image_t *img, int x, int y,
                      float seed_threshold, float floating_threshold,
                      int c, 
# 1283 "./omv/img/imlib.h" 3 4
                            _Bool 
# 1283 "./omv/img/imlib.h"
                                 invert, 
# 1283 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1283 "./omv/img/imlib.h"
                                              clear_background, image_t *mask);

void imlib_binary(image_t *out, image_t *img, list_t *thresholds, 
# 1285 "./omv/img/imlib.h" 3 4
                                                                 _Bool 
# 1285 "./omv/img/imlib.h"
                                                                      invert, 
# 1285 "./omv/img/imlib.h" 3 4
                                                                              _Bool 
# 1285 "./omv/img/imlib.h"
                                                                                   zero, image_t *mask);
void imlib_invert(image_t *img);
void imlib_b_and(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_nand(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_or(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_nor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_xor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_b_xnor(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_erode(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_dilate(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_open(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_close(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_top_hat(image_t *img, int ksize, int threshold, image_t *mask);
void imlib_black_hat(image_t *img, int ksize, int threshold, image_t *mask);

void imlib_gamma_corr(image_t *img, float gamma, float scale, float offset);
void imlib_negate(image_t *img);
void imlib_replace(image_t *img, const char *path, image_t *other, int scalar, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                              _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                   hmirror, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                                            _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                                 vflip, 
# 1302 "./omv/img/imlib.h" 3 4
                                                                                                        _Bool 
# 1302 "./omv/img/imlib.h"
                                                                                                             transpose, image_t *mask);
void imlib_add(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_sub(image_t *img, const char *path, image_t *other, int scalar, 
# 1304 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1304 "./omv/img/imlib.h"
                                                                               reverse, image_t *mask);
void imlib_mul(image_t *img, const char *path, image_t *other, int scalar, 
# 1305 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1305 "./omv/img/imlib.h"
                                                                               invert, image_t *mask);
void imlib_div(image_t *img, const char *path, image_t *other, int scalar, 
# 1306 "./omv/img/imlib.h" 3 4
                                                                          _Bool 
# 1306 "./omv/img/imlib.h"
                                                                               invert, 
# 1306 "./omv/img/imlib.h" 3 4
                                                                                       _Bool 
# 1306 "./omv/img/imlib.h"
                                                                                            mod, image_t *mask);
void imlib_min(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_max(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_difference(image_t *img, const char *path, image_t *other, int scalar, image_t *mask);
void imlib_blend(image_t *img, const char *path, image_t *other, int scalar, float alpha, image_t *mask);

void imlib_histeq(image_t *img, image_t *mask);
void imlib_clahe_histeq(image_t *img, float clip_limit, image_t *mask);
void imlib_mean_filter(image_t *img, const int ksize, 
# 1314 "./omv/img/imlib.h" 3 4
                                                     _Bool 
# 1314 "./omv/img/imlib.h"
                                                          threshold, int offset, 
# 1314 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1314 "./omv/img/imlib.h"
                                                                                      invert, image_t *mask);
void imlib_median_filter(image_t *img, const int ksize, float percentile, 
# 1315 "./omv/img/imlib.h" 3 4
                                                                         _Bool 
# 1315 "./omv/img/imlib.h"
                                                                              threshold, int offset, 
# 1315 "./omv/img/imlib.h" 3 4
                                                                                                     _Bool 
# 1315 "./omv/img/imlib.h"
                                                                                                          invert, image_t *mask);
void imlib_mode_filter(image_t *img, const int ksize, 
# 1316 "./omv/img/imlib.h" 3 4
                                                     _Bool 
# 1316 "./omv/img/imlib.h"
                                                          threshold, int offset, 
# 1316 "./omv/img/imlib.h" 3 4
                                                                                 _Bool 
# 1316 "./omv/img/imlib.h"
                                                                                      invert, image_t *mask);
void imlib_midpoint_filter(image_t *img, const int ksize, float bias, 
# 1317 "./omv/img/imlib.h" 3 4
                                                                     _Bool 
# 1317 "./omv/img/imlib.h"
                                                                          threshold, int offset, 
# 1317 "./omv/img/imlib.h" 3 4
                                                                                                 _Bool 
# 1317 "./omv/img/imlib.h"
                                                                                                      invert, image_t *mask);
void imlib_morph(image_t *img, const int ksize, const int *krn, const float m, const int b, 
# 1318 "./omv/img/imlib.h" 3 4
                                                                                           _Bool 
# 1318 "./omv/img/imlib.h"
                                                                                                threshold, int offset, 
# 1318 "./omv/img/imlib.h" 3 4
                                                                                                                       _Bool 
# 1318 "./omv/img/imlib.h"
                                                                                                                            invert, image_t *mask);
void imlib_bilateral_filter(image_t *img, const int ksize, float color_sigma, float space_sigma, 
# 1319 "./omv/img/imlib.h" 3 4
                                                                                                _Bool 
# 1319 "./omv/img/imlib.h"
                                                                                                     threshold, int offset, 
# 1319 "./omv/img/imlib.h" 3 4
                                                                                                                            _Bool 
# 1319 "./omv/img/imlib.h"
                                                                                                                                 invert, image_t *mask);
void imlib_cartoon_filter(image_t *img, float seed_threshold, float floating_threshold, image_t *mask);

void imlib_logpolar_int(image_t *dst, image_t *src, rectangle_t *roi, 
# 1322 "./omv/img/imlib.h" 3 4
                                                                     _Bool 
# 1322 "./omv/img/imlib.h"
                                                                          linear, 
# 1322 "./omv/img/imlib.h" 3 4
                                                                                  _Bool 
# 1322 "./omv/img/imlib.h"
                                                                                       reverse);
void imlib_logpolar(image_t *img, 
# 1323 "./omv/img/imlib.h" 3 4
                                 _Bool 
# 1323 "./omv/img/imlib.h"
                                      linear, 
# 1323 "./omv/img/imlib.h" 3 4
                                              _Bool 
# 1323 "./omv/img/imlib.h"
                                                   reverse);
void imlib_remove_shadows(image_t *img, const char *path, image_t *other, int scalar, 
# 1324 "./omv/img/imlib.h" 3 4
                                                                                     _Bool 
# 1324 "./omv/img/imlib.h"
                                                                                          single);
void imlib_chrominvar(image_t *img);
void imlib_illuminvar(image_t *img);

void imlib_lens_corr(image_t *img, float strength, float zoom);
void imlib_rotation_corr(image_t *img, float x_rotation, float y_rotation,
                         float z_rotation, float x_translation, float y_translation,
                         float zoom);

void imlib_get_similarity(image_t *img, const char *path, image_t *other, int scalar, float *avg, float *std, float *min, float *max);
void imlib_get_histogram(histogram_t *out, image_t *ptr, rectangle_t *roi, list_t *thresholds, 
# 1334 "./omv/img/imlib.h" 3 4
                                                                                              _Bool 
# 1334 "./omv/img/imlib.h"
                                                                                                   invert);
void imlib_get_percentile(percentile_t *out, image_bpp_t bpp, histogram_t *ptr, float percentile);
void imlib_get_threshold(threshold_t *out, image_bpp_t bpp, histogram_t *ptr);
void imlib_get_statistics(statistics_t *out, image_bpp_t bpp, histogram_t *ptr);

# 1338 "./omv/img/imlib.h" 3 4
_Bool 
# 1338 "./omv/img/imlib.h"
    imlib_get_regression(find_lines_list_lnk_data_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                          list_t *thresholds, 
# 1339 "./omv/img/imlib.h" 3 4
                                             _Bool 
# 1339 "./omv/img/imlib.h"
                                                  invert, unsigned int area_threshold, unsigned int pixels_threshold, 
# 1339 "./omv/img/imlib.h" 3 4
                                                                                                                      _Bool 
# 1339 "./omv/img/imlib.h"
                                                                                                                           robust);

void imlib_find_blobs(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                      list_t *thresholds, 
# 1342 "./omv/img/imlib.h" 3 4
                                         _Bool 
# 1342 "./omv/img/imlib.h"
                                              invert, unsigned int area_threshold, unsigned int pixels_threshold,
                      
# 1343 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1343 "./omv/img/imlib.h"
                          merge, int margin,
                      
# 1344 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1344 "./omv/img/imlib.h"
                          (*threshold_cb)(void*,find_blobs_list_lnk_data_t*), void *threshold_cb_arg,
                      
# 1345 "./omv/img/imlib.h" 3 4
                     _Bool 
# 1345 "./omv/img/imlib.h"
                          (*merge_cb)(void*,find_blobs_list_lnk_data_t*,find_blobs_list_lnk_data_t*), void *merge_cb_arg,
                      unsigned int x_hist_bins_max, unsigned int y_hist_bins_max);

size_t trace_line(image_t *ptr, line_t *l, int *theta_buffer, uint32_t *mag_buffer, point_t *point_buffer);
void merge_alot(list_t *out, int threshold, int theta_threshold);
void imlib_find_lines(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                      uint32_t threshold, unsigned int theta_margin, unsigned int rho_margin);
void imlib_lsd_find_line_segments(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int merge_distance, unsigned int max_theta_diff);
void imlib_find_line_segments(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                              uint32_t threshold, unsigned int theta_margin, unsigned int rho_margin,
                              uint32_t segment_threshold);
void imlib_find_circles(list_t *out, image_t *ptr, rectangle_t *roi, unsigned int x_stride, unsigned int y_stride,
                        uint32_t threshold, unsigned int x_margin, unsigned int y_margin, unsigned int r_margin,
                        unsigned int r_min, unsigned int r_max, unsigned int r_step);
void imlib_find_rects(list_t *out, image_t *ptr, rectangle_t *roi,
                      uint32_t threshold);

void imlib_find_qrcodes(list_t *out, image_t *ptr, rectangle_t *roi);
void imlib_find_apriltags(list_t *out, image_t *ptr, rectangle_t *roi, apriltag_families_t families,
                          float fx, float fy, float cx, float cy);
void imlib_find_datamatrices(list_t *out, image_t *ptr, rectangle_t *roi, int effort);
void imlib_find_barcodes(list_t *out, image_t *ptr, rectangle_t *roi);

void imlib_phasecorrelate(image_t *img0, image_t *img1, rectangle_t *roi0, rectangle_t *roi1, 
# 1368 "./omv/img/imlib.h" 3 4
                                                                                             _Bool 
# 1368 "./omv/img/imlib.h"
                                                                                                  logpolar, 
# 1368 "./omv/img/imlib.h" 3 4
                                                                                                            _Bool 
# 1368 "./omv/img/imlib.h"
                                                                                                                 fix_rotation_scale,
                          float *x_translation, float *y_translation, float *rotation, float *scale, float *response);

array_t *imlib_selective_search(image_t *src, float t, int min_size, float a1, float a2, float a3);
# 12 "./omv/nn/nn.h" 2
typedef enum {
    LAYER_TYPE_DATA = 0,
    LAYER_TYPE_CONV,
    LAYER_TYPE_RELU,
    LAYER_TYPE_POOL,
    LAYER_TYPE_IP,
} layer_type_t;

typedef enum {
    POOL_TYPE_MAX,
    POOL_TYPE_AVE,
} pool_type_t;

typedef enum {
    NETWORK_TYPE_CAFFE = 0,
} network_type_t;







typedef struct _layer {
    uint32_t type; uint32_t n, c, h, w; struct _layer *prev; struct _layer *next;
} layer_t;

typedef struct {
    uint32_t type; uint32_t n, c, h, w; struct _layer *prev; struct _layer *next;
    uint32_t r_mean;
    uint32_t g_mean;
    uint32_t b_mean;
    uint32_t scale;
} data_layer_t;

typedef struct {
    uint32_t type; uint32_t n, c, h, w; struct _layer *prev; struct _layer *next;
    uint32_t l_shift;
    uint32_t r_shift;
    uint32_t krn_dim;
    uint32_t krn_str;
    uint32_t krn_pad;
    uint32_t w_size;
    uint32_t b_size;
    int8_t *wt, *bias;
} conv_layer_t;

typedef struct {
    uint32_t type; uint32_t n, c, h, w; struct _layer *prev; struct _layer *next;
} relu_layer_t;

typedef struct {
    uint32_t type; uint32_t n, c, h, w; struct _layer *prev; struct _layer *next;
    uint32_t ptype;
    uint32_t krn_dim;
    uint32_t krn_str;
    uint32_t krn_pad;
} pool_layer_t;

typedef struct {
    uint32_t type; uint32_t n, c, h, w; struct _layer *prev; struct _layer *next;
    uint32_t l_shift;
    uint32_t r_shift;
    uint32_t w_size;
    uint32_t b_size;
    int8_t *wt, *bias;
} ip_layer_t;

typedef struct {
    uint8_t type[4];
    uint32_t n_layers;
    int8_t *output_data;
    uint32_t output_size;
    uint32_t max_layer_size;
    uint32_t max_colbuf_size;
    uint32_t max_scrbuf_size;
    layer_t *layers;
} nn_t;

typedef arm_status (*conv_func_t) (const q7_t * Im_in, const uint16_t dim_im_in, const uint16_t ch_im_in,
        const q7_t * wt, const uint16_t ch_im_out, const uint16_t dim_kernel, const uint16_t padding,
        const uint16_t stride, const q7_t * bias, const uint16_t bias_shift, const uint16_t out_shift,
        q7_t * Im_out, const uint16_t dim_im_out, q15_t * bufferA, q7_t * bufferB);

typedef void (*pool_func_t)(q7_t * Im_in, const uint16_t dim_im_in, const uint16_t ch_im_in,
        const uint16_t dim_kernel, const uint16_t padding, const uint16_t stride,
        const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out);


int nn_dump_network(nn_t *net);
int nn_load_network(nn_t *net, const char *path);
int nn_run_network(nn_t *net, image_t *img, rectangle_t *roi, 
# 103 "./omv/nn/nn.h" 3 4
                                                             _Bool 
# 103 "./omv/nn/nn.h"
                                                                  softmax);
int nn_dry_run_network(nn_t *net, image_t *img, 
# 104 "./omv/nn/nn.h" 3 4
                                               _Bool 
# 104 "./omv/nn/nn.h"
                                                    softmax);
# 7 "omv/py/py_nn.c" 2
# 1 "omv/py/py_helper.h" 1







# 1 "omv/py/py_assert.h" 1
# 11 "omv/py/py_assert.h"
# 1 "omv/py/mp.h" 1
# 12 "omv/py/py_assert.h" 2
# 9 "omv/py/py_helper.h" 2
extern const mp_obj_fun_builtin_var_t py_func_unavailable_obj;
image_t *py_helper_arg_to_image_mutable(const mp_obj_t arg);
image_t *py_helper_arg_to_image_mutable_bayer(const mp_obj_t arg);
image_t *py_helper_arg_to_image_grayscale(const mp_obj_t arg);
image_t *py_helper_arg_to_image_color(const mp_obj_t arg);
image_t *py_helper_keyword_to_image_mutable(uint n_args, const mp_obj_t *args, uint arg_index,
                                            mp_map_t *kw_args, mp_obj_t kw, image_t *default_val);
image_t *py_helper_keyword_to_image_mutable_mask(uint n_args, const mp_obj_t *args, uint arg_index,
                                                 mp_map_t *kw_args);
void py_helper_keyword_rectangle(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                                 mp_map_t *kw_args, mp_obj_t kw, rectangle_t *r);
void py_helper_keyword_rectangle_roi(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                                     mp_map_t *kw_args, rectangle_t *r);
int py_helper_keyword_int(uint n_args, const mp_obj_t *args, uint arg_index,
                          mp_map_t *kw_args, mp_obj_t kw, int default_val);
float py_helper_keyword_float(uint n_args, const mp_obj_t *args, uint arg_index,
                              mp_map_t *kw_args, mp_obj_t kw, float default_val);
void py_helper_keyword_int_array(uint n_args, const mp_obj_t *args, uint arg_index,
                                 mp_map_t *kw_args, mp_obj_t kw, int *x, int size);
void py_helper_keyword_float_array(uint n_args, const mp_obj_t *args, uint arg_index,
                                   mp_map_t *kw_args, mp_obj_t kw, float *x, int size);
uint py_helper_consume_array(uint n_args, const mp_obj_t *args, uint arg_index, size_t len, const mp_obj_t **items);
int py_helper_keyword_color(image_t *img, uint n_args, const mp_obj_t *args, uint arg_index,
                            mp_map_t *kw_args, int default_val);
void py_helper_arg_to_thresholds(const mp_obj_t arg, list_t *thresholds);
void py_helper_keyword_thresholds(uint n_args, const mp_obj_t *args, uint arg_index,
                                  mp_map_t *kw_args, list_t *thresholds);
int py_helper_arg_to_ksize(const mp_obj_t arg);
int py_helper_ksize_to_n(int ksize);
mp_obj_t py_helper_keyword_object(uint n_args, const mp_obj_t *args, uint arg_index, mp_map_t *kw_args, mp_obj_t kw);
# 8 "omv/py/py_nn.c" 2
# 1 "omv/py/py_image.h" 1
# 13 "omv/py/py_image.h"
mp_obj_t py_image(int width, int height, int bpp, void *pixels);
mp_obj_t py_image_from_struct(image_t *img);
void *py_image_cobj(mp_obj_t img_obj);
int py_image_descriptor_from_roi(image_t *img, const char *path, rectangle_t *roi);
# 9 "omv/py/py_nn.c" 2
# 1 "./boards/omvrt1/omv_boardconfig.h" 1
# 10 "omv/py/py_nn.c" 2


static const mp_obj_type_t py_net_type;

typedef struct _py_net_obj_t {
    mp_obj_base_t base;
    nn_t _cobj;
} py_net_obj_t;

void *py_net_cobj(mp_obj_t net_obj)
{
    do { __typeof__ (net_obj) _a = (net_obj); __typeof__ (&py_net_type) _b = (&py_net_type); if (!(MP_OBJ_IS_OBJ(_a) && (((mp_obj_base_t*)((void*)_a))->type == (_b)))) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg_varg( &mp_type_TypeError, "Can't convert %s to %s", mp_obj_get_type_str(_a), mp_obj_get_type_str(_b)))); } while (0); } } while(0);
    return &((py_net_obj_t *)net_obj)->_cobj;
}

static void py_net_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_net_obj_t *self = self_in;
    nn_dump_network(py_net_cobj(self));
}

static mp_obj_t py_net_forward(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    nn_t *net = py_net_cobj(args[0]);
    image_t *img = py_helper_arg_to_image_mutable(args[1]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(img, n_args, args, 2, kw_args, &roi);

    
# 39 "omv/py/py_nn.c" 3 4
   _Bool 
# 39 "omv/py/py_nn.c"
        softmax = py_helper_keyword_int(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_softmax)) << 2) | 2)), 
# 39 "omv/py/py_nn.c" 3 4
                                                                                                    0
# 39 "omv/py/py_nn.c"
                                                                                                         );
    
# 40 "omv/py/py_nn.c" 3 4
   _Bool 
# 40 "omv/py/py_nn.c"
        dry_run = py_helper_keyword_int(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_dry_run)) << 2) | 2)), 
# 40 "omv/py/py_nn.c" 3 4
                                                                                                    0
# 40 "omv/py/py_nn.c"
                                                                                                         );

    mp_obj_t output_list = mp_obj_new_list(0, 
# 42 "omv/py/py_nn.c" 3 4
                                             ((void *)0)
# 42 "omv/py/py_nn.c"
                                                 );
    if (dry_run == 
# 43 "omv/py/py_nn.c" 3 4
                  0
# 43 "omv/py/py_nn.c"
                       ) {
        nn_run_network(net, img, &roi, softmax);
    } else {
        nn_dry_run_network(net, img, softmax);
    }

    for (int i=0; i<net->output_size; i++) {
        mp_obj_list_append(output_list, mp_obj_new_float(((float) (net->output_data[i] + 128)) / 255));
    }
    return output_list;
}
static const mp_obj_fun_builtin_var_t py_net_forward_obj = {{&mp_type_fun_builtin_var}, 
# 54 "omv/py/py_nn.c" 3 4
      1
# 54 "omv/py/py_nn.c"
      , 2, (0xffff), .fun.kw = py_net_forward};



typedef struct py_nn_class_obj {
    mp_obj_base_t base;
    mp_obj_t x, y, w, h, index, value;
} py_nn_class_obj_t;

static void py_nn_class_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind)
{
    py_nn_class_obj_t *self = self_in;
    mp_printf(print,
              "{\"x\":%d, \"y\":%d, \"w\":%d, \"h\":%d, \"index\":%d, \"value\":%f}",
              mp_obj_get_int(self->x),
              mp_obj_get_int(self->y),
              mp_obj_get_int(self->w),
              mp_obj_get_int(self->h),
              mp_obj_get_int(self->index),
              (double) mp_obj_get_float(self->value));
}

static mp_obj_t py_nn_class_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value)
{
    if (value == (((mp_obj_t)(void*)4))) {
        py_nn_class_obj_t *self = self_in;
        if ((MP_OBJ_IS_OBJ(index) && (((mp_obj_base_t*)((void*)index))->type == (&mp_type_slice)))) {
            mp_bound_slice_t slice;
            if (!mp_seq_get_fast_slice_indexes(6, index, &slice)) {
                do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg(&mp_type_OSError, "only slices with step=1 (aka None) are supported"))); } while (0);
            }
            mp_obj_tuple_t *result = mp_obj_new_tuple(slice.stop - slice.start, 
# 85 "omv/py/py_nn.c" 3 4
                                                                               ((void *)0)
# 85 "omv/py/py_nn.c"
                                                                                   );
            memcpy(result->items, &(self->x) + slice.start, result->len * sizeof(mp_obj_t));
            return result;
        }
        switch (mp_get_index(self->base.type, 6, index, 
# 89 "omv/py/py_nn.c" 3 4
                                                                          0
# 89 "omv/py/py_nn.c"
                                                                               )) {
            case 0: return self->x;
            case 1: return self->y;
            case 2: return self->w;
            case 3: return self->h;
            case 4: return self->index;
            case 5: return self->value;
        }
    }
    return (((mp_obj_t)(void*)0));
}

mp_obj_t py_nn_class_rect(mp_obj_t self_in)
{
    return mp_obj_new_tuple(4, (mp_obj_t []) {((py_nn_class_obj_t *) self_in)->x,
                                              ((py_nn_class_obj_t *) self_in)->y,
                                              ((py_nn_class_obj_t *) self_in)->w,
                                              ((py_nn_class_obj_t *) self_in)->h});
}

mp_obj_t py_nn_class_x(mp_obj_t self_in) { return ((py_nn_class_obj_t *) self_in)->x; }
mp_obj_t py_nn_class_y(mp_obj_t self_in) { return ((py_nn_class_obj_t *) self_in)->y; }
mp_obj_t py_nn_class_w(mp_obj_t self_in) { return ((py_nn_class_obj_t *) self_in)->w; }
mp_obj_t py_nn_class_h(mp_obj_t self_in) { return ((py_nn_class_obj_t *) self_in)->h; }
mp_obj_t py_nn_class_index(mp_obj_t self_in) { return ((py_nn_class_obj_t *) self_in)->index; }
mp_obj_t py_nn_class_value(mp_obj_t self_in) { return ((py_nn_class_obj_t *) self_in)->value; }

static const mp_obj_fun_builtin_fixed_t py_nn_class_rect_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_nn_class_rect};
static const mp_obj_fun_builtin_fixed_t py_nn_class_x_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_nn_class_x};
static const mp_obj_fun_builtin_fixed_t py_nn_class_y_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_nn_class_y};
static const mp_obj_fun_builtin_fixed_t py_nn_class_w_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_nn_class_w};
static const mp_obj_fun_builtin_fixed_t py_nn_class_h_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_nn_class_h};
static const mp_obj_fun_builtin_fixed_t py_nn_class_index_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_nn_class_index};
static const mp_obj_fun_builtin_fixed_t py_nn_class_value_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_nn_class_value};

static const mp_rom_map_elem_t py_nn_class_locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_rect)) << 2) | 2)), (&py_nn_class_rect_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x)) << 2) | 2)), (&py_nn_class_x_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y)) << 2) | 2)), (&py_nn_class_y_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_w)) << 2) | 2)), (&py_nn_class_w_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_h)) << 2) | 2)), (&py_nn_class_h_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_index)) << 2) | 2)), (&py_nn_class_index_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_value)) << 2) | 2)), (&py_nn_class_value_obj) }
};

static const mp_obj_dict_t py_nn_class_locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(py_nn_class_locals_dict_table) / sizeof((py_nn_class_locals_dict_table)[0])), .alloc = (sizeof(py_nn_class_locals_dict_table) / sizeof((py_nn_class_locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)py_nn_class_locals_dict_table, }, };

static const mp_obj_type_t py_nn_class_type = {
    { &mp_type_type },
    .name = MP_QSTR_nn_class,
    .print = py_nn_class_print,
    .subscr = py_nn_class_subscr,
    .locals_dict = (mp_obj_t) &py_nn_class_locals_dict
};

typedef struct py_nn_class_obj_list_lnk_data {
    rectangle_t rect;
    int index;
    float value;
    int merge_number;
} py_nn_class_obj_list_lnk_data_t;

static mp_obj_t py_net_search(uint n_args, const mp_obj_t *args, mp_map_t *kw_args)
{
    nn_t *arg_net = py_net_cobj(args[0]);
    image_t *arg_img = py_helper_arg_to_image_mutable(args[1]);

    rectangle_t roi;
    py_helper_keyword_rectangle_roi(arg_img, n_args, args, 2, kw_args, &roi);

    float arg_threshold = py_helper_keyword_float(n_args, args, 3, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_threshold)) << 2) | 2)), 0.6);
    do { if (((0 <= arg_threshold) && (arg_threshold <= 1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "0 <= threshold <= 1"))); } while (0); } } while(0);

    float arg_min_scale = py_helper_keyword_float(n_args, args, 4, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_min_scale)) << 2) | 2)), 1.0);
    do { if (((0 < arg_min_scale) && (arg_min_scale <= 1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "0 < min_scale <= 1"))); } while (0); } } while(0);

    float arg_scale_mul = py_helper_keyword_float(n_args, args, 5, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_scale_mul)) << 2) | 2)), 0.5);
    do { if (((0 <= arg_scale_mul) && (arg_scale_mul < 1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "0 <= scale_mul < 1"))); } while (0); } } while(0);

    float arg_x_overlap = py_helper_keyword_float(n_args, args, 6, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_x_overlap)) << 2) | 2)), 0);
    do { if ((((0 <= arg_x_overlap) && (arg_x_overlap < 1)) || (arg_x_overlap == -1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "0 <= x_overlap < 1"))); } while (0); } } while(0);

    float arg_y_overlap = py_helper_keyword_float(n_args, args, 7, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_y_overlap)) << 2) | 2)), 0);
    do { if ((((0 <= arg_y_overlap) && (arg_y_overlap < 1)) || (arg_y_overlap == -1)) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "0 <= y_overlap < 1"))); } while (0); } } while(0);

    float arg_contrast_threshold = py_helper_keyword_float(n_args, args, 8, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_contrast_threshold)) << 2) | 2)), 1);
    do { if ((0 <= arg_contrast_threshold) == 0) { do { fb_alloc_free_till_mark(); nlr_jump(((void*)mp_obj_new_exception_msg( &mp_type_OSError, "0 <= contrast_threshold"))); } while (0); } } while(0);

    
# 177 "omv/py/py_nn.c" 3 4
   _Bool 
# 177 "omv/py/py_nn.c"
        softmax = py_helper_keyword_int(n_args, args, 9, kw_args, ((mp_obj_t)((((mp_uint_t)(MP_QSTR_softmax)) << 2) | 2)), 
# 177 "omv/py/py_nn.c" 3 4
                                                                                                    0
# 177 "omv/py/py_nn.c"
                                                                                                         );

    list_t out;
    list_init(&out, sizeof(py_nn_class_obj_list_lnk_data_t));

    for (float scale = 1; scale >= arg_min_scale; scale *= arg_scale_mul) {

        for (int y = roi.y + ((arg_y_overlap != -1) ? (fmodf(roi.h, (roi.h * scale)) / 2) : ((roi.h - (roi.h * scale)) / 2));

                (y + (roi.h * scale)) <= (roi.y + roi.h);

                y += ((arg_y_overlap != -1) ? (roi.h * scale * (1 - arg_y_overlap)) : roi.h)) {

            for (int x = roi.x + ((arg_x_overlap != -1) ? (fmodf(roi.w, (roi.w * scale)) / 2) : ((roi.w - (roi.w * scale)) / 2));

                 (x + (roi.w * scale)) <= (roi.x + roi.w);

                 x += ((arg_x_overlap != -1) ? (roi.w * scale * (1 - arg_x_overlap)) : roi.w)) {
                rectangle_t new_roi;
                rectangle_init(&new_roi, x, y, roi.w * scale, roi.h * scale);
                if (rectangle_overlap(&roi, &new_roi)) {

                    int sum = 0;
                    int sum_2 = 0;
                    for (int b = new_roi.y, bb = new_roi.y + new_roi.h, bbb = fast_sqrtf(new_roi.h); b < bb; b += bbb) {
                        for (int a = new_roi.x, aa = new_roi.x + new_roi.w, aaa = fast_sqrtf(new_roi.w); a < aa; a += aaa) {
                            switch(arg_img->bpp) {
                                case IMAGE_BPP_BINARY: {
                                    int pixel = ((({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (a) _x = (a); __typeof__ (b) _y = (b); (((uint32_t *) _image->data)[(((_image->w + ((sizeof(uint32_t) * 8) - 1)) >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1))))))) * _y) + (_x >> (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFFFFFF00000000ULL) ? (32 + ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFFFF0000ULL) ? (16 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xFF00ULL) ? ( 8 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xF0ULL) ? ( 4 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 32) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 32) & 0x2ULL) ? ( 2 ) : 1)))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFFFF0000ULL) ? (16 + ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xFF00ULL) ? ( 8 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xF0ULL) ? ( 4 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0xCULL) ? ( 2 + (((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 16) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 16) & 0x2ULL) ? ( 2 ) : 1))))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xFF00ULL) ? ( 8 + ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xF0ULL) ? ( 4 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0xCULL) ? ( 2 + ((((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 8) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 8) & 0x2ULL) ? ( 2 ) : 1)))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xF0ULL) ? ( 4 + ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0xCULL) ? ( 2 + (((((((sizeof(uint32_t) * 8) - 1)) >> 4) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : ((((((sizeof(uint32_t) * 8) - 1)) >> 4) & 0x2ULL) ? ( 2 ) : 1))) : (((((sizeof(uint32_t) * 8) - 1)) & 0xCULL) ? ( 2 + ((((((sizeof(uint32_t) * 8) - 1)) >> 2) & 0x2ULL) ? ( 2 ) : 1)) : (((((sizeof(uint32_t) * 8) - 1)) & 0x2ULL) ? ( 2 ) : 1)))))))] >> (_x & ((sizeof(uint32_t) * 8) - 1))) & 1; })) * 255);
                                    sum += pixel;
                                    sum_2 += pixel * pixel;
                                }
                                case IMAGE_BPP_GRAYSCALE: {
                                    int pixel = ({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (a) _x = (a); __typeof__ (b) _y = (b); ((uint8_t *) _image->data)[(_image->w * _y) + _x]; });
                                    sum += pixel;
                                    sum_2 += pixel * pixel;
                                }
                                case IMAGE_BPP_RGB565: {
                                    int pixel = (yuv_table[(({ __typeof__ (arg_img) _image = (arg_img); __typeof__ (a) _x = (a); __typeof__ (b) _y = (b); ((uint16_t *) _image->data)[(_image->w * _y) + _x]; })) * 3] + 128);
                                    sum += pixel;
                                    sum_2 += pixel * pixel;
                                }
                            }
                        }
                    }

                    int area = new_roi.w * new_roi.h;
                    int mean = sum / area;
                    int variance = (sum_2 / area) - (mean * mean);

                    if (fast_sqrtf(variance) >= arg_contrast_threshold) {
                        nn_run_network(arg_net, arg_img, &new_roi, softmax);

                        int max_index = -1;
                        float max_value = -1;
                        for (int i=0; i<arg_net->output_size; i++) {
                            float value = ((float) (arg_net->output_data[i] + 128)) / 255;
                            if ((value >= arg_threshold) && (value > max_value)) {
                                max_index = i;
                                max_value = value;
                            }
                        }

                        if (max_index != -1) {
                            py_nn_class_obj_list_lnk_data_t lnk_data;
                            lnk_data.rect.x = new_roi.x;
                            lnk_data.rect.y = new_roi.y;
                            lnk_data.rect.w = new_roi.w;
                            lnk_data.rect.h = new_roi.h;
                            lnk_data.index = max_index;
                            lnk_data.value = max_value;
                            lnk_data.merge_number = 1;
                            list_push_back(&out, &lnk_data);
                        }
                    }
                }
            }
        }
    }



    for (;;) {
        
# 260 "omv/py/py_nn.c" 3 4
       _Bool 
# 260 "omv/py/py_nn.c"
            merge_occured = 
# 260 "omv/py/py_nn.c" 3 4
                            0
# 260 "omv/py/py_nn.c"
                                 ;

        list_t out_temp;
        list_init(&out_temp, sizeof(py_nn_class_obj_list_lnk_data_t));

        while (list_size(&out)) {
            py_nn_class_obj_list_lnk_data_t lnk_data;
            list_pop_front(&out, &lnk_data);

            for (size_t k = 0, l = list_size(&out); k < l; k++) {
                py_nn_class_obj_list_lnk_data_t tmp_data;
                list_pop_front(&out, &tmp_data);

                if ((lnk_data.index == tmp_data.index)
                && rectangle_overlap(&(lnk_data.rect), &(tmp_data.rect))) {
                    lnk_data.rect.x = ((lnk_data.rect.x * lnk_data.merge_number) + tmp_data.rect.x) / (lnk_data.merge_number + 1);
                    lnk_data.rect.y = ((lnk_data.rect.y * lnk_data.merge_number) + tmp_data.rect.y) / (lnk_data.merge_number + 1);
                    lnk_data.rect.w = ((lnk_data.rect.w * lnk_data.merge_number) + tmp_data.rect.w) / (lnk_data.merge_number + 1);
                    lnk_data.rect.h = ((lnk_data.rect.h * lnk_data.merge_number) + tmp_data.rect.h) / (lnk_data.merge_number + 1);
                    lnk_data.value = ((lnk_data.value * lnk_data.merge_number) + tmp_data.value) / (lnk_data.merge_number + 1);
                    lnk_data.merge_number += 1;
                    merge_occured = 
# 281 "omv/py/py_nn.c" 3 4
                                   1
# 281 "omv/py/py_nn.c"
                                       ;
                } else {
                    list_push_back(&out, &tmp_data);
                }
            }

            list_push_back(&out_temp, &lnk_data);
        }

        list_copy(&out, &out_temp);

        if (!merge_occured) {
            break;
        }
    }



    for (;;) {
        
# 300 "omv/py/py_nn.c" 3 4
       _Bool 
# 300 "omv/py/py_nn.c"
            merge_occured = 
# 300 "omv/py/py_nn.c" 3 4
                            0
# 300 "omv/py/py_nn.c"
                                 ;

        list_t out_temp;
        list_init(&out_temp, sizeof(py_nn_class_obj_list_lnk_data_t));

        while (list_size(&out)) {
            py_nn_class_obj_list_lnk_data_t lnk_data;
            list_pop_front(&out, &lnk_data);

            for (size_t k = 0, l = list_size(&out); k < l; k++) {
                py_nn_class_obj_list_lnk_data_t tmp_data;
                list_pop_front(&out, &tmp_data);

                if ((lnk_data.index != tmp_data.index)
                && rectangle_overlap(&(lnk_data.rect), &(tmp_data.rect))) {
                    if (tmp_data.value > lnk_data.value) {
                        memcpy(&lnk_data, &tmp_data, sizeof(py_nn_class_obj_list_lnk_data_t));
                    }

                    merge_occured = 
# 319 "omv/py/py_nn.c" 3 4
                                   1
# 319 "omv/py/py_nn.c"
                                       ;
                } else {
                    list_push_back(&out, &tmp_data);
                }
            }

            list_push_back(&out_temp, &lnk_data);
        }

        list_copy(&out, &out_temp);

        if (!merge_occured) {
            break;
        }
    }

    mp_obj_list_t *objects_list = mp_obj_new_list(list_size(&out), 
# 335 "omv/py/py_nn.c" 3 4
                                                                  ((void *)0)
# 335 "omv/py/py_nn.c"
                                                                      );

    for (size_t i = 0; list_size(&out); i++) {
        py_nn_class_obj_list_lnk_data_t lnk_data;
        list_pop_front(&out, &lnk_data);

        py_nn_class_obj_t *o = (((py_nn_class_obj_t*)(m_malloc(sizeof(py_nn_class_obj_t) * (1)))));
        o->base.type = &py_nn_class_type;
        o->x = mp_obj_new_int(lnk_data.rect.x);
        o->y = mp_obj_new_int(lnk_data.rect.y);
        o->w = mp_obj_new_int(lnk_data.rect.w);
        o->h = mp_obj_new_int(lnk_data.rect.h);
        o->index = mp_obj_new_int(lnk_data.index);
        o->value = mp_obj_new_float(lnk_data.value);

        objects_list->items[i] = o;
    }

    return objects_list;
}
static const mp_obj_fun_builtin_var_t py_net_search_obj = {{&mp_type_fun_builtin_var}, 
# 355 "omv/py/py_nn.c" 3 4
      1
# 355 "omv/py/py_nn.c"
      , 2, (0xffff), .fun.kw = py_net_search};

static const mp_rom_map_elem_t locals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_forward)) << 2) | 2)), (&py_net_forward_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_search)) << 2) | 2)), (&py_net_search_obj) }
};

static const mp_obj_dict_t locals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(locals_dict_table) / sizeof((locals_dict_table)[0])), .alloc = (sizeof(locals_dict_table) / sizeof((locals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)locals_dict_table, }, };

static const mp_obj_type_t py_net_type = {
    { &mp_type_type },
    .name = MP_QSTR_Net,
    .print = py_net_print,
    .locals_dict = (mp_obj_t) &locals_dict
};

static mp_obj_t py_nn_load(mp_obj_t path_obj)
{
    const char *path = mp_obj_str_get_str(path_obj);
    py_net_obj_t *net = (((py_net_obj_t*)(m_malloc(sizeof(py_net_obj_t) * (1)))));
    net->base.type = &py_net_type;
    nn_load_network(py_net_cobj(net), path);
    return net;
}

static const mp_obj_fun_builtin_fixed_t py_nn_load_obj = {{&mp_type_fun_builtin_1}, .fun._1 = py_nn_load};



static const mp_rom_map_elem_t globals_dict_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___name__)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(MP_QSTR_nn)) << 2) | 2)) },

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_load)) << 2) | 2)), (&py_nn_load_obj) },



};

static const mp_obj_dict_t globals_dict = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(globals_dict_table) / sizeof((globals_dict_table)[0])), .alloc = (sizeof(globals_dict_table) / sizeof((globals_dict_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)globals_dict_table, }, };

const mp_obj_module_t nn_module = {
    .base = { &mp_type_module },
    .globals = (mp_obj_t) &globals_dict
};
